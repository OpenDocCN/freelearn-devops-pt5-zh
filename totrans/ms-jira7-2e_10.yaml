- en: Chapter 10.  Importing and Exporting Data in JIRA and Migrating Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data stored in JIRA is quite critical for companies, and JIRA administrators
    should make sure that regular backups of data are taken. In fact, it should be
    policy to take backups. In this chapter, we will discuss how to perform regular
    backups in JIRA and where these backups are stored. Most importantly, we will
    also discuss how to restore these backups.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of other tools that are used in companies; tools such as **Mantis**
    and **Bugzilla** are quite popular bug trackers. When you move to JIRA, it would
    be great if your existing issues were migrated from these tools to JIRA, but migrating
    can be a complex task. JIRA comes with some tools to import data from external
    tools; however, JIRA has a powerful feature that also imports issues from plain
    CSV files. With proper planning, data from any tool can be exported into CSV,
    and from CSV it can be imported into JIRA. We will also understand how to use
    the **Configuration Manager** add-on to migrate JIRA configurations such as issue
    types, workflows, and other schemes to another JIRA instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered are:'
  prefs: []
  type: TYPE_NORMAL
- en: The backup system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External system import using CSV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating JIRA configurations using the Configuration Manager add-on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The backup system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA administrators should pay a lot of attention to taking regular backups
    of data and its configuration. Luckily, JIRA comes with a handy tool for generating
    backups. It not only contains data (such as issues and projects), but it also
    contains JIRA configurations that are stored in the backup file, which means that
    when you restore the system, all the data along with various schemes for issue
    types and workflows will also be restored.
  prefs: []
  type: TYPE_NORMAL
- en: The backup system provided in the UI of JIRA is not particularly efficient when
    you have thousands of issues. For this, the recommended approach is to manually
    take a backup of your database. The details of this backup approach can be found
    at [https://confluence.atlassian.com/display/DOC/Production+Backup+Strategy](https://confluence.atlassian.com/display/DOC/Production+Backup+Strategy).
  prefs: []
  type: TYPE_NORMAL
- en: Generating the backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JIRA backup tool can be used to perform backups as and when you require.
    Usually, before making any major configuration changes in JIRA, you should take
    a backup. Also, when you install a new add-on in JIRA, it's always advisable to
    take a backup. Of course, you should have a staging instance that should be an
    exact copy of your production one. You should do all the testing on the staging
    instance first, but you never know when things could go wrong. As a good practice,
    always take a backup before performing any major configuration changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform these steps to take a backup in JIRA using the JIRA backup tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **System** | **Backup System** (under **IMPORT
    & EXPORT**):![Generating the backup](img/image_10_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then see the **Backup JIRA data** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the **File name** and click on the **Backup** button to generate the
    backup file. It's a good idea to use timestamp in **File name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tool will then generate the backup file and give you the complete path of
    the file. You can copy this to some other location:![Generating the backup](img/image_10_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The backup files are stored in the `JIRA HOME` directory under the `export`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Backup of attachments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JIRA's data consists of details of issues, projects, and various configurations,
    but there are file attachments that are also attached to issues. The **Backup
    JIRA data** tool generates an XML file that stores information, but it cannot
    back up the file attachments.
  prefs: []
  type: TYPE_NORMAL
- en: 'These attachments are stored in the `JIRA HOME` directory under the `data\attachments`
    folder. You should copy the `attachments` folder if the file needs to be backed
    up. Usually, this is done when the JIRA instance needs to be migrated to a new
    server. The file attachments are organized in different folders for every project
    and the project key is the name of the folder:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the attachment folder is project key, for example, `DPO`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The files are store within a subfolder whose name is the same as the issue ID,
    for example, `DPO-6`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this organization, the attachment folder is easily restored.
  prefs: []
  type: TYPE_NORMAL
- en: Generating automatic backups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The backup that we just generated is usually triggered just before a JIRA administrator
    needs to perform some major changes in the configuration. However, as a good practice,
    it would be great if these backups were generated automatically daily, or perhaps
    weekly.
  prefs: []
  type: TYPE_NORMAL
- en: 'JIRA has the option to run a particular class automatically after a set time.
    JIRA comes with a couple of services preconfigured, but you can also add yours.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administrator** | **System** | **Services** (under **ADVANCED**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get the list of **Services** that come preconfigured when you install
    JIRA:![Generating automatic backups](img/image_10_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first service in the list is the **Mail Queue Service**, which is responsible
    for taking regular backups. The **Schedule** is the interval after which the services
    will run automatically. In the case of **Backup Service**, the **Schedule** is **Every 720
    minutes**, which is 12 hours; this means that after every 12 hours, the backup
    will be generated and placed in the `export` directory under `JIRA HOME`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating automatic backups](img/image_10_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, there are backup files generated
    by the JIRA service, except for `2014-12-09-backup`, which we generated manually.
    The format of the backup file remains the same irrespective of whether you generate
    it manually or if it's generated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: As a good practice, always copy the backup files along with their attachments
    to a separate server. If something goes wrong with the server and the backups
    are kept on the same machine, they will also be lost. So, it's good to have them
    copied to a separate server. Preferably, write scripts to automate the process
    of copying backups to a backup server.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring the system utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you have learned how to generate the backup manually using JIRA''s **Backup
    System** tool and by relying on JIRA services. There are two scenarios when these
    backup files will be useful to you:'
  prefs: []
  type: TYPE_NORMAL
- en: One is when your server crashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, when you want to migrate your JIRA instance to a new machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JIRA comes with the utility to **Restore System**; it basically wipes out the
    existing data/configuration and replaces it with one on the backup files; hence,
    you have to be very careful when using the **Restore System** utility. As a rule
    of thumb, always perform the restore process on a test environment; this will
    also give you a chance to learn about and fix any errors that you may encounter.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will restore the `2014-12-09-backup.zip` backup file, which
    we generated in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, you should have a blank JIRA installation on a different
    machine with the same version as the one used to generate the backup. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the backup file stored in the `JIRA HOME` directory under the `import`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **Administration** | **System** | **Restore System** (under **IMPORT
    & EXPORT**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **File name** as `2014-12-09-backup.zip`, which is the backup file we
    generated previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the **License** field empty; the license details of the source instance
    are stored in the backup file, which can be restored in the target instance; if
    you want to use a new license, only then enter it in this field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Outgoing Mail** field, select **Disable**. This will ensure that e-mails
    are not being sent to anyone when the restore process takes place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Restore** button:![Restoring the system utility](img/image_10_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The restore process will start reading the backup file and will also display
    the restore progress. This whole restore process can take several minutes depending
    on the size of the backup file:![Restoring the system utility](img/image_10_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the restore process is complete, you will get a confirmation message:![Restoring
    the system utility](img/image_10_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the restore process is complete, you can log in to the JIRA instance using
    the login and password credentials of the instance from which the backup was generated.
    Your login of the current JIRA instance will not work because the whole data has
    been wiped out and replaced by the backup file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify the following after the restoration:'
  prefs: []
  type: TYPE_NORMAL
- en: Issue count
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User count
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If these things match with your old instance and the restored instance, then
    the restore process was successful.
  prefs: []
  type: TYPE_NORMAL
- en: Project Import utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Restore System** procedure is performed when the complete instance has
    to be restored or moved to another server, but there can be a scenario when you
    just need to restore a single project from another JIRA instance.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example of a company that has multiple JIRA instances used by
    various other business units. These business units work independently of each
    other; they have different teams and work from different geographic locations.
    As you know, these days companies reorganize quite often. Due to this reorganization
    process, a few projects from one business unit need to be transferred to another
    business unit. All the project code and documents along with the projects need
    to be transferred as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we cannot simply take a backup of one instance and restore it
    in another because it will wipe out the data in the target instance. The restore
    process has to be done for a few selected projects only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Atlassian understood this scenario and provided a tool called **Project Import**
    for performing just that:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to  ****Administration**** | **System** | **Project Import** (under
    **IMPORT & EXPORT**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the backup **File name** from which you want to perform **Project
    Import**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the attachments in the `JIRA HOME` under the `import\attachments` directory;
    the exact path specific to your machine will also be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to continue:![Project Import utility](img/image_10_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Project Import** utility will read the backup file and display the progress.
    Depending on the size of the backup file, it may take several minutes to complete:![Project
    Import utility](img/image_10_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, the list of the entire project in the backup file will be
    presented to you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now select the project that you want to import from the **Projects from
    Backup** drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The details of the project that you select will also be displayed. The **Project** field
    displays the name. The **Key** field displays the project key, and **Issues** displays
    the issue count.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to continue:![Project Import utility](img/image_10_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The projects in the backup file may have some fields that are not present in
    the target instance. The **Project Import** tool will attempt to map them to the
    existing fields. Before attempting the import procedure, you need to make sure
    that all the custom fields are created in the target instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the mapping is complete, click on the **Import** button to continue:![Project
    Import utility](img/image_10_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the size of the project, it may take several minutes to complete;
    the progress will be shown on the screen:![Project Import utility](img/image_10_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the import process is successful, the result of **Project Import** will
    be displayed on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the results and click on the **OK** button:![Project Import utility](img/image_10_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the process for all the other projects that need to be imported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Project Import** process is a complex procedure and has to be first performed
    on the test instance. Read the official documentation to understand more about
    this procedure at [https://confluence.atlassian.com/adminjiraserver071/restoring-a-project-from-backup-802592982.html](https://confluence.atlassian.com/adminjiraserver071/restoring-a-project-from-backup-802592982.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Backups should be generated using the same version of the target JIRA instance.
  prefs: []
  type: TYPE_NORMAL
- en: Project configurations such as issue type schemes, field configurations, workflows,
    notifications, and permission schemes should be created on the target instance.
  prefs: []
  type: TYPE_NORMAL
- en: Custom fields that are used in the project need to be created in the target
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: If there are certain add-ons installed and used by the project, then install
    them on the target instance first; there are certain custom fields created by
    add-ons and until you install the plugin on the target instance, these custom
    fields will not be mapped.
  prefs: []
  type: TYPE_NORMAL
- en: External system import using CSV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various issue tracking tools that have been available for many years
    on the market. There are tools such as Bugzilla, which is used primarily for bug
    tracking. There is another popular tool called Mantis that provides a good set
    of features, which again is used for bug tracking. Companies who are already using
    some of these tools and now want to move to JIRA can migrate their data using
    various importers provided by JIRA out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to perform the CSV import:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **System** | **External System Import** (Under
    **IMPORT & EXPORT**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get the list of various importers, as shown in the following screenshot:![External
    system import using CSV](img/image_10_014.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using any of the tools mentioned in the previous screenshot, then
    you can try to import the data from your existing tool. There are also other import
    tools available that have been developed by third-party vendors. These can be
    downloaded from the Atlassian Marketplace. You can give them a try.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These importers usually work well when there are not many customizations in
    your existing tool, but this is not the case most of the time. The first importer
    called **CSV** is a general purpose tool that can be used to import data from
    a CSV file into JIRA. We recommend to first export your data from your existing
    tool into a CSV file and then use this tool to import the data into JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: The data that needs to be imported into JIRA can be quite complex; issues could
    also be subtasks of other issues and there could be a need to upload the attachments
    too.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a few scenarios that can be used to import CSV into JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: A simple CSV import
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's understand how to perform a simple import of the CSV data. The first thing
    to do is to prepare the CSV file that will be imported into JIRA. For this exercise,
    we will import issues into a particular project; these issues will contain data
    such as issue **Summary**, **Status**, **Dates**, and a few other fields.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the CSV file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are going to use MS Excel to prepare the CSV file with the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the CSV file](img/image_10_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If your existing tool has the option to export directly into the CSV file, then
    you can skip this step, but we recommend reviewing your data before importing
    it into JIRA. Usually, the CSV import will not work if the format of the CSV file
    and the data is not correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s very easy to generate a CSV file from an Excel file. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **File** | **Save As** | **File name:** and select **Save as type:** as
    **CSV (Comma delimited)**. If you don't have Microsoft Excel installed, you can
    use LibreOffice Calc, which is an open source alternative for Microsoft Office
    Excel:![Preparing the CSV file](img/image_10_016.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can open the CSV file to verify its format too:![Preparing the CSV file](img/image_10_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our CSV file has the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **CSV Field** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| **Project** | JIRA''s project key needs to be specified in this field |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary** | This field is mandatory and needs to be specified in the CSV
    file |'
  prefs: []
  type: TYPE_TB
- en: '| **Issue Type** | This is important for specifying the issue type |'
  prefs: []
  type: TYPE_TB
- en: '| **Status** | This displays the status of the issue; these are workflow states
    that need to exist in JIRA, and the project workflow should have the states that
    are going to be imported into the CSV file |'
  prefs: []
  type: TYPE_TB
- en: '| **Priority** | The priorities mentioned here should exist in JIRA before
    import |'
  prefs: []
  type: TYPE_TB
- en: '| **Resolution** | The resolutions mentioned here should exist in JIRA before
    import |'
  prefs: []
  type: TYPE_TB
- en: '| **Assignee** | This specifies the assignee of the issue |'
  prefs: []
  type: TYPE_TB
- en: '| **Reporter** | This specifies the reporter of the issue |'
  prefs: []
  type: TYPE_TB
- en: '| **Created** | This is the issue creation date |'
  prefs: []
  type: TYPE_TB
- en: '| **Resolved** | This is the issue resolution date |'
  prefs: []
  type: TYPE_TB
- en: Performing the CSV import
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once your CSV file is prepared, then you are ready to perform the import in
    JIRA:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **System** | **External System Import** | **Import
    from Comma-separated values (CSV)** (under **IMPORT & EXPORT**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **File import** screen in the **CSV Source File** field, click on the
    **Browse...** button to select the CSV file that you just prepared on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you select the CSV file, the **Next** button will be enabled:![Performing
    the CSV import](img/image_10_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Setup** screen, select **Import to Project** as **DOPT**, which is
    the name of our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify **Date format**, and it should match the format of the date values in
    the CSV file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Map fields** screen; we need to map the fields in the CSV file to JIRA
    fields. This step is crucial because in your old system, the field names may be
    different to JIRA fields, so in this step map these fields to the respective JIRA
    fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Map values** screen, map the values of **Status**; in fact, this mapping
    of field values can be done for any field. In our case, the values in the status
    field are the same as in JIRA, so click on the **Begin Import** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will finally get a confirmation that issues have been imported successfully:![Performing
    the CSV import](img/image_10_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you encounter any errors during the CSV import, then it's usually due to
    some problem with the CSV format. Read the error messages carefully and correct
    these issues. As mentioned earlier, the CSV import needs to be performed on the
    test environment first.
  prefs: []
  type: TYPE_NORMAL
- en: The import that we just performed is straightforward, but it's possible to import
    data with complexities too.
  prefs: []
  type: TYPE_NORMAL
- en: Creating subtasks using the CSV file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are cases when issues need to be imported as subtasks. In such cases,
    use the format shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating subtasks using the CSV file](img/image_10_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note the two columns, that is, **Issue ID** and **Parent ID**; populate the
    **Issue ID** column with a random number for the parent task and enter this random
    number in the **Parent ID** column for all the subtasks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Issue ID** and **Parent ID** need to be mapped to **Sub-Tasks** | **Issue
    Id** and **Sub-Tasks** | **Parent Id** during the CSV import respectively, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating subtasks using the CSV file](img/image_10_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Proceed with the CSV import as usual and subtasks will be created.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading attachments using the CSV file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's usually desirable to attach files to the issues that need to be imported
    into JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `csvimport` folder in your `JIRA HOME/import/attachments` directory.
    So, the final path should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The CSV JIRA import can read the particular directory using the `FILE` protocol.
    It's used to access the files stored on the same machine; the full path of the
    files needs to be specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a column called `Attachments` in your CSV file and enter the location in
    the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The file should finally look similar to the following screenshot:![Uploading
    attachments using the CSV file](img/image_10_022.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to map this new `Attachments` column to the **Attachments** JIRA
    field; the rest of the process remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: Your issues may have multiple attachments instead of just one. In such cases,
    add an additional column for each attachment. Similarly, other fields with multiple
    values can be imported by simply adding multiple columns.
  prefs: []
  type: TYPE_NORMAL
- en: Updating existing issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is another very good use of the CSV import tool. So far, we have seen
    how to import data into JIRA, but there are times when existing issues need to
    be modified. For instance, if you want to add a new fixed version to the issues
    of a particular project or if you want to resolve certain issues in bulk; in such
    cases, it's possible to use the CSV import tool.
  prefs: []
  type: TYPE_NORMAL
- en: In the CSV file, just add another column of `Issue Key` and add the columns
    as JIRA fields that need to be updated. If the CSV tool finds the issue key, then
    it will take the rest of the columns and update them in the existing issues.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is also a **Bulk Change** tool in **Issue Navigator**, which
    does the same thing. It's up to your comfort level and use case to choose the
    method convenient to you. We recommend using the **Bulk Change** tool as it's
    much easier compared to the CSV import tool.
  prefs: []
  type: TYPE_NORMAL
- en: Migrate JIRA configurations using the Configuration Manager add-on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed how to fully restore a JIRA instance from a backup file, restore
    a specific project, and how to use the CSV import functionality with important
    data in JIRA. These utilities are so important that they really make the lives
    of JIRA administrators easier. They can perform these activities right from the
    JIRA user interface. The **Project Import** utility and CSV import are used for
    migrating one or more projects from one instance of JIRA to another, but the target
    instance should have the required configuration in place, otherwise these utilities
    will not work. For instance, if there is a project in a source instance with custom
    workflow states along with a few custom fields, then the exact configuration of
    workflow and custom fields should already exist in the target instance. Re-creating
    these configurations and schemes could be a time-consuming and error prone process.
  prefs: []
  type: TYPE_NORMAL
- en: In various organizations, there is also a test environment or staging server
    for JIRA, where all the new configurations are first tested before being rolled
    out to the production instance. Currently, there is no such way to selectively
    migrate the configurations from one instance to another. It has to be done manually
    on the target instance.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Manager is an add-on that does this job. Using this add-on, the
    project specific configuration can be migrated from one instance to another.
  prefs: []
  type: TYPE_NORMAL
- en: Generate a snapshot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will guide you through the steps required to generate a
    project-specific snapshot that can be migrated and deployed on the target JIRA
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Add-ons** | **Find new add-ons** under **ATLASSIAN
    MARKETPLACE**, type `Configuration Manager` in the search box and press the *Enter*
    key:![Generate a snapshot](img/image_10_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Configuration Manager for JIRA** will appear. Click on the **Free trial**
    button to install this add-on on your instance. In the pop-up window that appears
    next, click on the **Accept** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will be asked to enter your Atlassian account to generate a trial
    license.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, go to **Administration** | **Configuration Manager** | **Snapshots**.
    On this screen, you can generate a snapshot of a project's configuration. Click
    on the **Create Snapshot** button:![Generate a snapshot](img/image_10_024.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Select Snapshot Type** screen, make sure that the second tab **Project
    Configuration** is selected on the top right corner of the screen. Enter the **Name**,
    select one or more **Project(s)** from the drop down, tick the checkbox **Include
    custom fields with value in at least one issue** and enter a meaningful description.
    Press the **Next** button to continue:![Generate a snapshot](img/image_10_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Select Filters** screen, select the filters that are used in this project.
    If your project also has Agile boards, you need to select the filters used in
    your project as the Agile boards depend on filters. Press the **Next** button
    to continue:![Generate a snapshot](img/image_10_026.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Select Agile Boards** screen, select the Scrum or Kanban boards that
    you want migrated. Make sure that, as in the previous step, you have selected
    the filters that are used in the boards you want to migrate. Press the **Next**
    button to continue:![Generate a snapshot](img/image_10_027.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Preview Snapshot** screen, review the items that are migrating and
    click on the **Create** button to generate the snapshot:![Generate a snapshot](img/image_10_028.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the snapshot will be generated. You can download the snapshot file
    by clicking on the cog icon under the **Actions** column for the respective snapshot
    and clicking on **Download**:![Generate a snapshot](img/image_10_029.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the snapshot file on your computer. Its name will be `Demo Project Snapshot.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying a snapshot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will guide you through deploying the snapshot that you
    have generated on your source JIRA instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Configuration Manager** | **Deploy**. On this screen
    you can generate a snapshot of a project's configuration. Click on the **From
    Snapshot File** tab on the top right corner. Then, click on the **Browse** button
    and select the `Demo Project Snapshot.zip` from your computer that you saved after
    generating the snapshot:![Deploying a snapshot](img/image_10_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the snapshot file is uploaded to your target JIRA server, it will be listed.
    Click on the **Deploy** link under the **Actions** column specific to your snapshot
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Select Deployment Mode** screen, select the **New Project** tab in
    the top right corner. Enter a project **Name** and **Key**. These will also be
    suggested based on your old project details from the snapshot file. Press the
    **Next** button to continue:![Deploying a snapshot](img/image_10_031.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Analyze Configuration Changes** screen, review the configurations that
    will be added, modified, or removed from the target instance. Please spend considerable
    time on this screen to understand the impact of existing configurations on the
    target JIRA instance. Press the **Next** button to continue:![Deploying a snapshot](img/image_10_032.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Migrate Configuration Changes** screen, the Configuration Manager tells
    us that no issues data migration is required, so press the **Next** button to
    continue:![Deploying a snapshot](img/image_10_033.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Deploy** screen, just press the **Deploy** button to start the deployment:![Deploying
    a snapshot](img/image_10_034.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will get a confirmation message in the **Snapshot deployed** screen:![Deploying
    a snapshot](img/image_10_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Configuration Manager add-on is quite powerful. It can migrate all the project-specific
    configurations like issue types, workflows, custom fields, roles, permission,
    and notification schemes. The simple example that we just showed you in this section
    should give you enough understanding of the usage of this useful add-on.
  prefs: []
  type: TYPE_NORMAL
- en: After moving the configurations and creating a blank project by the Configuration
    Manager add-on, you can now perform data migration using the **Project Import**
    utility that we discussed earlier in this chapter. This add-on can save hundreds
    of man hours by avoiding the manual recreation of your configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to import and export data into JIRA. We started
    with understanding how to take a backup of the entire JIRA instance. You also
    learned how to restore the instance from this backup. We also looked at scenarios
    where you want to import selected projects from the backup file. We spent considerable
    time understanding how to migrate data to JIRA using the CSV file, which provides
    a lot of flexibility in importing not only simple data, but also complex data
    with subtasks and attachments as well. Finally, we also understood how to use
    the Configuration Manager add-on in order to easily migrate configurations from
    one instance of JIRA to another.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will understand how to implement Scrum and Kanban methodologies
    in JIRA using a powerful add-on from Atlassian called **JIRA Agile** for Agile
    tracking. This chapter will cover two scenarios of both techniques. We will discuss
    how to set up and configure the board, and most importantly how to analyze reports.
    You will also learn these two Agile techniques and basic concepts with practical
    examples.
  prefs: []
  type: TYPE_NORMAL
