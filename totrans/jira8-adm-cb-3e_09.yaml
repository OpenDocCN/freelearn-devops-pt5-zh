- en: Jira Service Desk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we focused on the Jira platform from Atlassian, which
    is primarily used for issue-tracking purposes. We covered topics such as customizing
    projects through screens and fields and integrating Jira with other third-party
    services.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at another closely related Jira product, called
    Jira Service Desk. This allows you to run a powerful support system, either alongside
    your engineering projects or independently as an all-purpose support solution.
    We will look at ways you can customize Jira Service Desk to provide a unique experience
    for your end users. Since Jira Service Desk is built on top of Jira, its installation
    procedure is almost identical to that of Jira, and you can refer to the recipes
    in [Chapter 1](db6108d0-082e-4a6f-835d-96ed24fcf2cf.xhtml), *Jira Server Administration*,
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the look and feel of your support portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing the right information for service requests from your customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a knowledge base for your customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborating with your internal teams on service requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking and evaluating performance with a **Service Level Agreement** (**SLA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the look and feel of your support portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira Service Desk has two main interfaces—one for the customers raising requests
    and one for the agents providing solutions. In this recipe, we will look at how
    to customize the service desk portal, which is the frontend user interface used
    by your customers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To fully customize your service desk portal, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Jira Service Desk as an administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to **Administration** > **Applications** > **Configuration** (under Jira
    Service Desk).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **View and customize** link under Help Center.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From here, you can configure a range of customizations for how the service
    desk portal will look when a customer visits it. You can add a logo, banner, color
    scheme, and announcement messages. With announcement messages, you can use wiki
    markup, so you will be able to use styles such as bold and italics and create
    hyperlinks. For example, the following announcement message uses some of this
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Your customizations will be reflected as soon as you make the change. Once
    you are happy with the result, click on the **Save changes** button at the bottom
    of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39fd6e02-52ce-458d-b5d7-811bb49f0491.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have customized the look and feel of your service desk portal, you
    will need to customize the type of requests that customers can make. By planning
    out the request types properly, you can help your customers to better understand
    where to log their requests so that they can be routed to the relevant team members
    for faster resolution. Request types are managed for each service desk (Jira project):'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the service desk that you want to set up request types for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Project settingsoption in the lower-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Request typesoption from the panel on the left-hand side panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new request type by entering the name of the request, its type, and the
    groups it belongs to. Requests in the same group will be displayed together in
    the portal. Note that a request can belong to multiple groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When selecting and creating groups for your requests, try to name them based
    on the common theme shared by all the request types that belong to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e535f0ff-9a45-430c-97bd-75f73279d931.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now take a look at how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira Service Desk leverages many of Jira's built-in capabilities, and its request
    types are built on top of the issue type feature. A request type in a service
    desk is mapped to an issue type in Jira. The main difference here is that the
    request type is what the customer sees, so it allows you to give it a more descriptive
    name to help customers better understand the purpose behind each request type.
    For example, an issue type called **bug** can have a request type called **report**
    and an application defect mapped to it. While they will both mean the same thing
    to a support agent or engineer, the request type will be a lot friendlier in the
    eyes of a customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this reason, when managing request types, you need to make sure the corresponding
    issue types exist for the service desk project before you can map to it. You can
    refer to the *Setting up different issue types for projects* recipe in [Chapter
    2](ac94afe9-5c3e-461c-abcf-9e4eb2bef9fd.xhtml), *Customizing Jira for Your Projects,* for
    detailed information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2add435e-7724-4198-9513-e36c141ac242.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, we have completed our recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing the right information for service requests from your customers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to customize the screen and field layout
    for different request types so that you can capture the necessary information
    from your customers and help your agents to resolve issues quickly. We will also
    look at setting up different screens and fields for agents so that they can capture
    additional information independently from the customer's view.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure the field layout for the customer portal, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the service desk to customize the field layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Project settings **option in the lower-left corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Request type **option from the panel on the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit fields **link for the request type to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add a field **button to add fields to the portal. If you do
    not see the field you want to add, make sure the field is added to the appropriate
    screen used by the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8a30813-381a-4420-868e-81b5ca3fdf8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To customize the field layout for agents, you need to configure the screens
    used for the service desk project. You can refer to the *Setting up customized
    screens for your projects* recipe in [Chapter 2](ac94afe9-5c3e-461c-abcf-9e4eb2bef9fd.xhtml), *Customizing
    Jira for Your Projects,* for detailed information. The most straightforward method
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Screens **option from the panel on the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the screen scheme for the issue (request) type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the screen for the **View Issue **operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search and add the fields that you want to the screen. Fields you add in this
    way will not be shown to customers unless you specifically add them to the request
    type, as outlined earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b44c5162-1a07-4f28-8dae-90b304e18874.png)'
  prefs: []
  type: TYPE_IMG
- en: If your service desk uses different screens for Edit and View, make sure you
    make the same changes to the Edit Issue screen so that your agents can make changes
    to those fields.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Jira Service Desk project''s field layout is powered by Jira''s screen
    configurations, which include screens, screen schemes, and issue type screen schemes.
    For the customer portal, Jira Service Desk provides a simplified version of the
    screen used by the Create Issue operation to keep the user experience smooth.
    This is why, for you to be able to add a field to a request type, the field must first
    be added to the Create Issue operation screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dad297d4-6f2f-47f5-a0ca-c018ee918fe4.png)'
  prefs: []
  type: TYPE_IMG
- en: For the agent's view, Jira Service Desk makes full use of Jira's screen and
    field management features, so you can set up different screens for the Edit and
    View Issue operations.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a knowledge base for your customers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As time progresses, you should start accumulating a wealth of knowledge for
    common problems faced by customers. It is recommended that you capture this knowledge
    and make them searchable and indexable through search engines such as Google so
    that customers can find solutions to these common problems quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up a knowledge base using **Atlassian Confluence** product.
    By integrating with Confluence, your service desk agents will be able to create
    articles to capture problem symptoms and solutions based on a set of predefined
    templates and make them searchable in the service desk.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to create an application link between Jira and Confluence.
    You can refer to the *Integrating Jira with Confluence* recipe in [Chapter 7](e4cabab0-5854-4bb3-8ac5-f3837121acc8.xhtml), *Integrations
    with Jira,* for detailed information. If you have already integrated Jira and
    Confluence, you can skip these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the service desk that you want to set up a knowledge base for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Project settingsoption in the lower-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Knowledge baseoption from the panel on the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Set up a link to Confluencelink. If you do not see the following
    screenshot, then you have already integrated Jira with Confluence, and you can
    skip this section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99e80af6-3833-44a4-8075-aa1433677278.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter the fully qualified URL for your Confluence instance, and click on the Create
    new link button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the onscreen wizard and complete the setup process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the application link in place, we can now go back to the service desk.
    You should now see the options to link the service desk to a Confluence space.
  prefs: []
  type: TYPE_NORMAL
- en: You may have to refresh your page to see these options after the application
    link is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up a Confluence space as a knowledge base for your service desk, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Link to a Confluence spaceoption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the linked Confluence application from the Application drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the space that will become the knowledge base for your service desk.
    If no space is designated at this point, you can click on the Create a knowledge
    base spacelink to create a new space on the fly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b358059d-18a3-45a4-b053-c70de868383c.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Link button after you have selected or created your knowledge base
    Confluence space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last step is to configure the knowledge base access controls so that autosearching
    the portal will return results. If both Jira Service Desk and Confluence are connected
    to the same user repository, such as an LDAP, then they should have the same user
    accounts. Make sure you grant end users read access to the knowledge base space
    and give page access to your agents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set up a knowledge base, there will be a new section called Related
    knowledge base articles for the agent''s view. An agent can create a new knowledge
    base article by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the create an articlelink:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bcf6abfb-c2db-45e5-b793-bcec0208f760.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter the title for the new article, select a label, and then select the template
    to use for the article's content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Create **button. This will take you to the article in Confluence,
    which will be prepopulated, based on the selected template. You can edit the content
    and publish it when ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1db8d265-30d5-4b4b-8b94-f7298ab3ce94.png)'
  prefs: []
  type: TYPE_IMG
- en: It's now time to see how these steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By integrating Jira and Confluence through an application link, we created a
    one-to-one mapping of a Jira service desk and Confluence space. Whenever an agent
    clicks on the create an article link from a request, they will create a new page
    in the mapped Confluence space, based on the selected template.
  prefs: []
  type: TYPE_NORMAL
- en: Confluence comes with two default templates to use for the knowledge base: **how
    to** and **troubleshooting**. You can add more templates to Confluence, and they
    will be available for your agents when they want to create new articles.
  prefs: []
  type: TYPE_NORMAL
- en: 'By setting up a knowledge base for your service desk, search results will include
    knowledge base articles when your customers perform a search from your portal.
    This is shown in the following screenshot as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10c41105-a240-4bc7-8842-d4f09e6fe378.png)'
  prefs: []
  type: TYPE_IMG
- en: Jira Service Desk will also automatically suggest articles based on the customer's
    input when raising new requests, helping them to get solutions more quickly, and
    avoiding the duplication of requests and your team's efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating with your internal teams on service requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The traditional workflow of a service desk involves a customer raising a request,
    and an agent working with the customer to come up with a solution. This usually
    works in scenarios where the problem is simple and straightforward to solve. However,
    in many real-world situations, the problem can be complicated and may require
    multiple people from different teams to collaborate together in order to resolve
    it.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to collaborate with people outside of the
    standard support team. Normally, you will run a single Jira instance host for
    both your service desk and engineering projects, so it is very easy to collaborate
    together in a single system. In this recipe, we will look at a more complex scenario,
    where the support team is using a Jira Service Desk instance, and the engineering
    team is using a separate Jira Software instance, and both teams are working together
    on resolving a customer's request.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to create an application link between your Jira Service Desk
    instance and the Jira Software instance. You can refer to the *Integrating Jira
    with other Jira instances* recipe in [Chapter 7](e4cabab0-5854-4bb3-8ac5-f3837121acc8.xhtml), *Integrations
    with Jira*, for detailed information. If you have already integrated both Jira
    instances, you can skip these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > Applications > Application links.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the Jira Software instance''s URL, and create the application link. Jira
    should automatically detect the target application as Jira. If, for some reason,
    it does not do so, then make sure you select Jira as the Application type when
    prompted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f29617dd-747e-4d00-9aeb-574b3cb0779e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have linked both Jira instances, the agent and/or collaborator will
    be able to link the request in your service desk to the issue in the engineering
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the request in the service desk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Link option under the More menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Jira Software instance from the Server drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the relationship between the request and issue. Usually, you should use
    the is caused byoption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the issue to link to the request. You can type in the issue key directly
    if you know it; otherwise, you can click on the search for an issue link to run
    a search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the Create reciprocal linkoption is checked so that a link will also
    be created for the issue. This will let the engineers know that there is a customer
    request pending on the resolution of the issue, and will help the engineering
    team to prioritize their tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Internal commenttab if you want to add a comment to provide additional
    details to the agent working on the request. Comments added in this way will not
    be visible to the customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Link button to create the link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The screen looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec207c5e-b38f-401a-a9de-81baaa2e9754.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's take a look at how these steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Jira platform has an out-of-the-box feature called an application link,
    which allows you to integrate multiple instances of Atlassian products together—in
    this case, Jira Service Desk and Jira Software. By creating an application link
    between the two, our Jira Service Desk is able to recognize our Jira Software
    instance and access the data it has and, specifically, any issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have created an issue link between the customer request and the engineering
    issue, both systems will be able to query and display each other''s status. This
    means that when an agent looks at the request, they will also be able to see the
    status of the linked engineering issue, even if it is from a different system.
    Look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d9f89e3-23f7-4eaf-b725-9b99bd7dc4d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the engineer completes the issue, the agent will see the status update
    automatically from within the request.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking and evaluating performance with an SLA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An SLA helps you to measure the level of service performance of your team, and
    also provides insights into where improvements can be made.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up a new SLA metric for our service desk, where
    we will measure the amount of time it takes for the team to solve customer requests.
    However, we will not take into account the amount of time spent waiting for additional
    information from customers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up the SLAs, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the service desk that you want to set up SLAs for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Project settingsoption in the lower-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SLAsoption from the panel on the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create SLAoption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a new name for the new SLA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/91aa131e-9b32-41ff-a82e-334b9b1608b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before you can create the new SLA metric by clicking on the Create button,
    you will first need to define how time will be measured:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Issue Createdoption from the Start column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Status: Waiting for customeroption from the Pause on column.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Entered Status: Resolvedoption from the Stop column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ec4b7564-97f8-4b6d-a523-5bc1128ae2fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we have configured our time-counting rules, we need to set our SLA goals
    so that we can measure the team''s performance:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter `priority = High` in the Issues (JQL) text field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Goalto `12h`, which is 12 hours.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Default 24/7 calendar if you want the SLA to be calculated to include
    non-working hours; otherwise, select Sample 9-5 Calendar if you only want to include
    working hours. Then, click on the Addbutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can repeat the three preceding steps to add more goals, and, once you are
    ready, click on the Create button to create the new SLA metric:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/352cc673-92f6-46e1-a444-e6318357863d.png)'
  prefs: []
  type: TYPE_IMG
- en: This completes the steps for this recipe. Let's take a look at how these steps
    actually work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira Service Desk''s SLAs are composed of two parts: how time is to be calculated
    and the goal to achieve under the given criteria. The goal setting part is quite
    straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A JQL query to define the rule**: For example, `priority = High` means that
    all requests within the project with their priority set to High will have this
    SLA goal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The goal to achieve specified in time**: For example, 8h means the goal for
    this SLA is 8 hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The calendar to use**: This defines the time and day when calculating whether
    the SLA goal has been met.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The actual SLA calculation part is slightly more complex. When calculating SLA,
    we need to define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When to start counting**: This is defined in the Start column. In our recipe,
    we selected the Issue Created option, which means that the SLA will start counting
    as soon as a customer has created a request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When to stop counting**: This is defined in the Stop column. In our recipe,
    we selected the Entered Status: Resolved option, which means that as soon as an
    agent puts the request into the Resolved workflow status, the SLA will stop counting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When to pause counting**: This is optional, and is defined in the Pause oncolumn.
    In our recipe, we selected the Status: Waiting for customer option; this means
    that once an agent has requested additional information from the customer, the
    SLA will be paused. Once the customer has provided the requested information,
    the SLA will resume counting again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
