- en: Security Architecture and Design Principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security management, including its goals, security assurance program, and security
    requirements, were explained in previous chapters. This chapter will discuss security
    architecture and design principles. For security architects and developers, building
    software on a mature security framework will greatly reduce not only security
    risks with industry best practices but also implementation efforts. Therefore,
    this chapter introduces the key security elements of a cloud service architecture
    and some mature security frameworks, which can be applied based on the scenario.
    We will also discuss GDPR and data protection techniques in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Security architecture design principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud service security architecture reference (ESAPI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security framework (Shiro, encryption, validation, data masking)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GDPR and data governance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security architecture design principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we would like to discuss two key concepts, which are security
    by design and privacy by design. When we discuss security, it's more about the
    security controls of the whole system such as authentication, authorization, availability,
    accountability, integrity, and confidentiality. For privacy, it focuses specifically
    on privacy data or PII (personal identifiable information). Privacy protection
    is focused on the authorized data handling life cycle and governance.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we categorize some security controls in general terms, you may find some
    differences, although there are some overlapping areas in terms of security and
    privacy:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Security by design** | **Privacy by design** |'
  prefs: []
  type: TYPE_TB
- en: '| **Primary concerns** | Unauthorized access to the system. | Authorized process
    of privacy data. |'
  prefs: []
  type: TYPE_TB
- en: '| **Principles** | According to OWASP, security by design principles are the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Minimize attack surface area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish secure defaults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Principle of least privilege
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Principle of defense in depth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail securely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't trust services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separation of duties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid security by obscurity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep security simple
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix security issues correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Referring to OECD Privacy Principles, the term privacy by design is defined
    by eight principles:'
  prefs: []
  type: TYPE_NORMAL
- en: Collection Limitation Principle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Quality Principle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Purpose Specification Principle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Limitation Principle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security Safeguards Principle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Openness Principle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Individual Participation Principle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accountability Principle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Examples of controls** |'
  prefs: []
  type: TYPE_TB
- en: Access control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unsuccessful login attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-repudiation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration change control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit security events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptographic module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incident monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Cookie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anonymity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obfuscation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restrict
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notify and inform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data masking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following industry references may help you to build a secure architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open Security Architecture (OSA) Patterns**: [http://www.opensecurityarchitecture.org/](http://www.opensecurityarchitecture.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSA CAIQ (Consensus Assessment Initiative Questionnaire)**: [https://cloudsecurityalliance.org/group/consensus-assessments](https://cloudsecurityalliance.org/group/consensus-assessments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google VSAQ (Vendor Security Assessment Questionnaires)**: [https://github.com/google/vsaq](https://github.com/google/vsaq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PCI Self-Assessment Questionnaire (SAQ)**: [https://www.pcisecuritystandards.org/pci_security/completing_self_assessment](https://www.pcisecuritystandards.org/pci_security/completing_self_assessment)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 1500-4 v4 Big Data Interoperability Frame****work Security and Privacy**:  [https://www.nist.gov/publications/nist-big-data-interoperability-framework-volume-4-security-and-privacy](https://www.nist.gov/publications/nist-big-data-interoperability-framework-volume-4-security-and-privacy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-122 Guide to Protecting the Confidentiality of Personally Identifiable
    Information (PII)**: [https://csrc.nist.gov/publications/detail/sp/800-122/final](https://csrc.nist.gov/publications/detail/sp/800-122/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have understood the concepts and principles of security and privacy. However,
    the challenges for most organizations are how to build these into applications
    or services. Therefore, we will discuss some design patterns and also open source
    framework implementations in upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud service security architecture reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Open Security Architecture** (**OSA**) Patterns **SP-011: Cloud Computing
    Pattern** and **SP-008: Public Web Server Pattern** provide an overview diagram
    of the whole system. In addition, **SP-001: client module** and **SP-002 Server
    module** are also a good reference. Take a look at the components of the cloud
    computing pattern in the following link: [http://www.opensecurityarchitecture.org/cms/library/patternlandscape/251-pattern-cloud-computing](http://www.opensecurityarchitecture.org/cms/library/patternlandscape/251-pattern-cloud-computing)'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if you are looking for a questionnaire or checklist for self-assessment
    or for partner security evaluation, here are some suggested references. CSA CAIQ
    consolidated most security standards (including ISO 27001, FedRAMP, NIST 800-53
    R3, and PCI DSS) into a self-assessment questionnaire. VSAQ is mainly for external
    vendor assessment with the aspects of web application security, security and privacy
    programs, infrastructure security, and physical and data center security.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSA CAIQ (Consensus Assessment Initiative Questionnaire)**: [https://cloudsecurityalliance.org/group/consensus-assessments/](https://cloudsecurityalliance.org/group/consensus-assessments/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google VSAQ (Vendor Security Assessment Questionnaires)**: [https://vsaq-demo.withgoogle.com/](https://vsaq-demo.withgoogle.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PCI Data Security Standard Self-Assessment Questionnaire (SQA)**: [https://www.pcisecuritystandards.org/documents/SAQ-InstrGuidelines-v3_2.pdf](https://www.pcisecuritystandards.org/documents/SAQ-InstrGuidelines-v3_2.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Architecture principles may still be too high-level for most developers. Therefore,
    in this section, we will discuss some key open source security frameworks. Depending
    on the purposes of the security objective and programming languages, there are
    various kinds of open source security framework. We will only discuss some major
    or widely used security frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Adoption of a security framework is the best approach to achieve *secure by
    design*. A mature security framework provides security controls such as authentication,
    access control, session management, HTTP security, cryptography, and logging. It
    also enables a junior developer who has little knowledge of security to build
    secure software.
  prefs: []
  type: TYPE_NORMAL
- en: Just remember that the security frameworks we will introduce are third-party
    security components built with our applications. Security applications such as
    anti-virus software, web application firewalls, and intrusion detection will not
    be discussed in this section but will be discussed in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Java web security framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed earlier, the adoption of a web security framework will help us
    to handle lots of security controls. Take Spring Security as an example—a few
    edits of the XML configuration will not only provide login/logout form authentication
    but also CSRF attack, session, and HTTP security header (HSTS, X-content-type,
    XSS, X-Frame-Options) protection:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Java security framework** | **Key characteristics** |'
  prefs: []
  type: TYPE_TB
- en: '| **Spring Security** |'
  prefs: []
  type: TYPE_TB
- en: The Spring Security framework is only for Java- and Spring-based applications.
    It provides lots of out-of-box security controls such as user authentication,
    CSRF attack protection, session fixation protection, a HTTP security header, and
    URL access control. Also, it supports various kinds of authentication such as
    Oauth2.0, CAS, and OpenID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Shiro** |'
  prefs: []
  type: TYPE_TB
- en: Shiro is a more lightweight and simple framework compared to Spring Security.
    The key difference between Shiro and Spring Security is that Shiro doesn't require
    a Spring-based application, and it can run standalone without tying into any web
    framework or a non-web environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| ** Object Access Control (****OACC)** |'
  prefs: []
  type: TYPE_TB
- en: OACC primarily provides authentication and authorization. The key characteristic
    of OACC is that it provides a security relationship with application resources
    while Spring Security defines authorization by URL, methods, and roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A security relationship example definition in OACC may be: (Sara) has (READ,
    EDIT) permissions on (`TimeSheet.xls`). Being able to establish the application
    resource (`TimeSheet.xls`) in a security relationship is a unique authorization
    model in OACC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: For a Java development team, which one is recommended? If the web is built purely
    on Java Spring, Spring Security is still the best choice due to its powerful security
    features and complete technical documents. However, if your web applications are
    running with non-web or non-Spring applications, Shiro is recommended. If your
    application may need resource access control models, try the OACC.
  prefs: []
  type: TYPE_NORMAL
- en: Non-Java web security frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For non-Java programming, here are some recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Programming language** | **Authentication framework** |'
  prefs: []
  type: TYPE_TB
- en: '| **Node.JS** |'
  prefs: []
  type: TYPE_TB
- en: '**Passport framework** is an authentication module for Node.JS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Ruby on Rails** |'
  prefs: []
  type: TYPE_TB
- en: '**Devise Security:** This is a security module for Ruby. It provides security
    features such as password complexity, CAPTCHA, user account inactivity checks,
    verification code, and session control for the web.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ASP.NET** |'
  prefs: []
  type: TYPE_TB
- en: '**ASP.NET Core **provides security features such as authentication, authorization,
    anti-XSS, SSL enforcement, anti-request forgery, encryption, and also APIs to
    support GDPR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Python** |'
  prefs: []
  type: TYPE_TB
- en: '**Yosai** is a security framework for Python applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flask Security:** It provides common security controls to Flask applications
    such as authentication, password hashing, and role management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Web readiness for privacy protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To evaluate the privacy protection readiness for a website, include not only
    general web security controls but also the following major areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TLS for secure** **data transmission**: The misconfiguration of TLS may result
    in insecure data transmission or man-in-the-middle attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Referrer Policy**: The Referrer Policy defines how the browser should handle
    Referrer information, which reveals the user''s original visiting web site. The
    website visiting history is also considered to be personal privacy information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cookie Consent Disclaimer**: To comply with the GDPR, the collection of cookie
    information and the use of any third-party cookies will require explicit cookie
    consent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Security Headers**: The HTTP protocol itself provides web security controls.
    Please also refer to the following table for the suggested HTTP security header
    configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table summarizes the technical parts of privacy security requirements
    and suggested tools to assess and build the web:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Privacy technical requirements** | **Tools** |'
  prefs: []
  type: TYPE_TB
- en: '| Secure Communication: HTTPS by default and secure configuration of TLS. |'
  prefs: []
  type: TYPE_TB
- en: SSLyze, SSLScan, and TestSSLServer included in Pentest Box or Kali Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| The origins of a visiting website source should not be leaked to other websites
    by the referrer header. |'
  prefs: []
  type: TYPE_TB
- en: Referrer Policy defines how the referrer can be used. The configuration of the
    Referrer Policy depends on the requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: no-referrer will ensure the browser never sends the referer header.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the information is needed, it's suggested to configure sending information
    over HTTPS by using 'strict-origin'.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| If Google Analytics is used, enable privacy extension to anonymize IPs. |'
  prefs: []
  type: TYPE_TB
- en: Enable IP masking for Google Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Third-party cookies or embeds services (such as Google Analytics), with user
    consent. |'
  prefs: []
  type: TYPE_TB
- en: Cookie Consent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookie Consent JavaScript plug-in:  [https://github.com/insites/cookieconsent](https://github.com/insites/cookieconsent)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| HTTP Security Headers | The following are the suggested mandatory examples
    of secure http headers.'
  prefs: []
  type: TYPE_NORMAL
- en: Content-Security Policy (CSP)   "default-src 'self' "
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referrer-Policy           "no-referrer"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strict-Transport-Security   "max-age=31536000"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X-content-Type-options    "nosniff"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X-Frame-Options          "SAMEORGIN"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X-Xss-Protection          "1;mode=block"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookie                                   "Secure"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to OWASP Secure Headers Project for details of each security headers definition. 
    |
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also suggested to build in-house privacy scanning tools for your websites. The
    following resources provide online scanning services for the privacy requirements
    mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Privacy Score Assessment: [https://privacyscore.org](https://privacyscore.org).'
  prefs: []
  type: TYPE_NORMAL
- en: Login protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Login protection can be seen as the first defense layer of the application.
    Hackers may use tools or APIs to do brute-force login attacks. CAPTCHA is one
    of the approaches to distinguishing human from machine input. A CAPTCHA requires
    the client to complete visual-perception tasks. However, the CAPTCHA may be defeated
    by OCR or unwitting human labor. In addition to CAPTCHA, we can also have another
    layer of security defense to monitor the number of login failures. If the number
    of login failures reaches a certain threshold level, the system should take action,
    such as banning the IP source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Tools/modules for login protection are summarized in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Login protection techniques** | **Tools/Modules** |'
  prefs: []
  type: TYPE_TB
- en: '| Detect the number of login failures in logs and take action |'
  prefs: []
  type: TYPE_TB
- en: Fail2Ban
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| CAPTCHA solution to prevent machine brute-force login attacks |'
  prefs: []
  type: TYPE_TB
- en: VisualCaptcha to build your own CAPTCHA service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google reCAPTCHA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Cryptographic modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typical use case cases for cryptographic modules are not only data encryption/decryption,
    but also SSL/TLS secure communication, key exchange, X509 certificate handling,
    one-way hashing for message integrity, and random number generation. The recommended
    encryption modules that the development team may need are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Encryption module** | **Adoption scenario** |'
  prefs: []
  type: TYPE_TB
- en: '| OpenSSL  |'
  prefs: []
  type: TYPE_TB
- en: Full-featured and most widely used cryptography and SSL/TLS toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Bouncy Castle Crypto APIs  |'
  prefs: []
  type: TYPE_TB
- en: Lightweight cryptography Java API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| mbed TLS  |'
  prefs: []
  type: TYPE_TB
- en: OpenSSL alternative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptographic and SSL/TLS in embedded products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography C API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| SSLyze |'
  prefs: []
  type: TYPE_TB
- en: Verify the secure TLS configuration of the web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, an operation team may care more about the configuration of encryption
    on servers such as web servers, SSH, Mail, VPNs, database, proxy, and Kerberos.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to Applied Crypto Hardening: [https://betterCrypto.org/static/applied-crypto-hardening.pdf](https://betterCrypto.org/static/applied-crypto-hardening.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Input validation and sanitization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Input validation is like the perimeter security control of the whole application.
    The input not only includes data input from users but also covers the parameters
    passing between function calls, methods, APIs, or systems. The concept of validation
    covers various kinds of technical approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Techniques** | **Purpose** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| **Canonicalization Normalization** | Process input data into known or expected
    form. |'
  prefs: []
  type: TYPE_TB
- en: URL decode/encode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File path or names handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Sanitization** | Sanitization is to remove illegal characters or make potentially
    risky data safe. Always sanitize an output to avoid XSS. |'
  prefs: []
  type: TYPE_TB
- en: 'Escape: replace < > '' " & with HTML entities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Validation** | To check if the input is valid or within the constraint
    data type, length, and so on. |'
  prefs: []
  type: TYPE_TB
- en: IsAlpha, isCreditCard, isDecimal, isIP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'The right order of implementation also matters and reduces the chances of malicious
    data bypassing the validation. Secure coding requires the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Normalize strings before validating them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canonicalize path names before validating them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform any string modifications before validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canonicalize a URL before it is used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the data is received, the data should be canonicalized first to transform
    it into expected forms, then the data will be sanitized to remove illegal characters,
    and the validation may check if it''s acceptable based on business rules. Finally,
    if the data requires output, it always needs to do output sanitization to prevent
    XSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For general canonicalization, sanitization, and validation, we can apply the
    APIs provided by the mature security framework, while the development team can
    focus more on business logic validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Programming languages** | **Validation and Sanitization Framework** |'
  prefs: []
  type: TYPE_TB
- en: '| Java |'
  prefs: []
  type: TYPE_TB
- en: OWASP Java HTML Sanitizer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Ruby on Rails |'
  prefs: []
  type: TYPE_TB
- en: Active Record Validations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Node.js/JavaScript |'
  prefs: []
  type: TYPE_TB
- en: Validators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| JavaScript |'
  prefs: []
  type: TYPE_TB
- en: DOMPurity to sanitize HTML and prevents XSS attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Python |'
  prefs: []
  type: TYPE_TB
- en: Cerberus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Data masking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data masking is the process of obfuscating original/sensitive data to protect
    it. There are five typical key scenarios that require data masking. Different
    tools are required based on different roles or usage scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scenario** | **Involved roles** | **Required tools/modules** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: The application receives data and will do data masking based on defined policies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Developer |'
  prefs: []
  type: TYPE_TB
- en: Data masking modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data masking policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Define the PII data tag and access policies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| DBA |'
  prefs: []
  type: TYPE_TB
- en: PII metadata definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PII access policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Query results with data masking based on defined PII tags and access policies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Data query users |'
  prefs: []
  type: TYPE_TB
- en: Dynamic data masking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: The operation team may monitor and check if there is any PII in data, files,
    configuration, or any unstructured data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Operation team |'
  prefs: []
  type: TYPE_TB
- en: PII data discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Any PII in the logs or files must be masked before further processing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Support team |'
  prefs: []
  type: TYPE_TB
- en: Data Anonymizer tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For data masking techniques, anonymization and pseudonymization are two common
    categories.
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Anonymization ** | **Pseudonymization ** |'
  prefs: []
  type: TYPE_TB
- en: '| **Key Difference** | Anonymous data cannot be re-identified.  | Pseudonymous
    data is a data substitution which allows for some form of re-identification. Encryption
    or hashing are the most common techniques in this category. |'
  prefs: []
  type: TYPE_TB
- en: '| Data | Anonymization is mainly used for sensitive personal information such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: Names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDs (Credit Cards, Social Security numbers and so on.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postal addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telephones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postal codes + cities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Any data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'The table lists common techniques used for data masking, anonymization, and
    pseudonymization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.gif)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a telephone number as an example to tell the key differences between
    anonymization and pseudonymization. If the original value of a telephone number
    is 12345678, then the anonymization of the number will be 123***** and the pseudonymization
    of the phone number will be the hash or encrypted value ADF231DADEF. It also means
    it's impossible for users to know the original value if its anonymization is similar
    to 123*****. However, it is still likely that the hash or encrypted value can
    be reversed to the original value if the algorithm is known or enough data samples
    are collected.
  prefs: []
  type: TYPE_NORMAL
- en: For the implementation of anonymization and pseudonymization, please also refer
    to the ARX Data Anonymization Tool: [http://arx.deidentifier.org/](http://arx.deidentifier.org/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reference to data masking techniques: [https://www.pdpjournals.com/docs/88197.pdf](https://www.pdpjournals.com/docs/88197.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data governance – Apache Ranger and Atlas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to data privacy governance, we will need more than just **role-based
    access control** (**RBAC**) or **attribute-based access control** (**ABAC**) which
    are common in securing access control. Data governance requires additional metadata
    or tags to define the data classification, and also row-level attribute-based
    access control for data masking or row filtering. Take data centers in both the
    EU and US as an example—we would like to have granular access control policies,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: US support team can only query US data, and cannot view EU data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EU support team can only query EU data, and cannot view US data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The age is considered PII and can only be displayed as a range for the US support
    team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The age cannot be displayed to the EU support team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ID is PII and will be applied with data masking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This example shows privacy by data is more about the authorized access control
    of privacy data. The need for techniques such as data governance, data masking,
    encryption, data classification, and granular ABAC is on the rise due to the usage
    of big data with cloud services, GDPR compliance, and also the awareness of personal
    privacy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You may consider building data privacy governance based on the Apache Ranger
    and Atlas frameworks. Apache Ranger is mainly for ABAC while Atlas is for data
    classification.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party open source management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An organization should set up its own internal open source and third-party
    software database and selection criteria. The database keeps records of open source
    or in-house developed components adopted in projects. It will provide a good framework
    selection reference for similar projects such as the web security framework we
    discussed earlier. If you are looking for an open source component search database,
    try Open Hub. You may search open source projects and find what you need for the
    project: [https://www.openhub.net/](https://www.openhub.net/). Furthermore, the
    open source selection criteria help to reduce legal and quality risks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical criteria checklist is listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Selection criteria** | **Example and description** |'
  prefs: []
  type: TYPE_TB
- en: '| Does the open source community fix the security issue in a timely manner?
    |'
  prefs: []
  type: TYPE_TB
- en: High-security risks fixed within 1 month.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Adoption of latest and stable releases |'
  prefs: []
  type: TYPE_TB
- en: Official and stable release by the community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Availability of technical support? |'
  prefs: []
  type: TYPE_TB
- en: The open source community provides official technical support and issues feedback.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Software licenses with GPL and LGPL are less preferred. |'
  prefs: []
  type: TYPE_TB
- en: Licenses with GPL and LGPL are not preferred. If any GPL software components
    are used, custom-developed source code may also need to be available as open source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **binary analysis tool** (**BAT**) is suggested for license scanning based
    on binary files: [http://www.binaryanalysis.org/](http://www.binaryanalysis.org/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Vulnerability status and fixes |'
  prefs: []
  type: TYPE_TB
- en: Search for the vulnerability status of the components. For more details, please
    visit [https://nvd.nist.gov/vuln/search](https://nvd.nist.gov/vuln/search).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Software release or update frequency |'
  prefs: []
  type: TYPE_TB
- en: Was the latest version released within 6 months or several years ago?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Software architecture |'
  prefs: []
  type: TYPE_TB
- en: Is it using the latest software technologies or legacy framework?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the security of open source components, the recommended security practices
    and tools during the DevOps stages are summarized in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Stage** | **Activities** | **Recommended Tools/Practices** |'
  prefs: []
  type: TYPE_TB
- en: '| Design and Selection | Selection of Open Source. |'
  prefs: []
  type: TYPE_TB
- en: '[www.openHub.Net](http://www.openHub.Net)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Source selection checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-house Open source database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package Delivery | Identify all the dependencies in the project and check
    known vulnerabilities. |'
  prefs: []
  type: TYPE_TB
- en: OWASP dependency check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP dependency Track
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package Deployment | On-line services monitoring and scanning of CVE. |'
  prefs: []
  type: TYPE_TB
- en: CVE database ([https://nvd.nist.gov/vuln/search](https://nvd.nist.gov/vuln/search))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NMAP or OpenVAS scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Also, refer to SAFECode Managing Security Risks Inherent in the Use of Third-party
    Components: [https://www.safecode.org/wp-content/uploads/2017/05/SAFECode_TPC_Whitepaper.pdf](https://www.safecode.org/wp-content/uploads/2017/05/SAFECode_TPC_Whitepaper.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed security architecture design principles including the clarification
    of security by design and privacy by design. Security by design is focused on
    **confidentiality, integrity, and availability** (**CIA**) and design by privacy
    is more about the protection of privacy data. The industry-standard CSA, Google,
    PCI, or NIST provide good references. We can also refer to the OSA cloud computing
    pattern to understand the whole security architecture of a cloud service.
  prefs: []
  type: TYPE_NORMAL
- en: To build a security framework, we list some open source security frameworks
    to achieve some security controls instead of reinventing the wheel. For example,
    there is Spring Security and Shiro for web security frameworks in Java, and the
    Password Framework for NodeJS.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to website privacy protection, we discussed what is required legally,
    such as copyright notices, cookies, disclaimers, and data protection notices.
    We listed key security technical controls for web privacy.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed login protection modules such as Fail2Ban and reCAPTCHA, and
    cryptographic modules (OpenSSL, SSLyze). We explained the concept of input validation
    including normalization, sanitization, and validation. To protect sensitive data,
    the scenario of data masking and techniques (anonymization, pseudonymization)
    were explained. Data governance with Apache Ranger and Atlas frameworks was explained
    to classify and mask sensitive data. With lots of third-party components and security
    framework components introduced, we also suggested how an organization should
    manage third-party open source software.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss threat modeling and secure design security
    practices in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following is one of the security by design principles?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Establish secure defaults
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Least Privilege
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Fail securely
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following references consolidated most security standards such
    as ISO, FedRAMP, and NIST?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CSA CAIQ
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Google VSAQ
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PCI DSS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: (OSA) Open Security Architecture Patterns
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What security protection does a Spring Security framework provide?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CSRF attack protection
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTP security headers
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the key difference between Shiro and Spring Security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shiro doesn't require a Java Spring framework
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Intrusion defense
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the followings may apply to the Passport Framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ASP .NET
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Node.JS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ruby on Rails
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following cryptographic modules is specially used for embedded
    applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenSSL
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Mbed TLS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SSLyze
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Fail2Ban
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of these is an example of sanitization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Process input data into known or expected form
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check if the input is valid
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove illegal characters
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the data type
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Privacy by Design, the 7 Foundational Principles**: [https://ipc.on.ca/wp-content/uploads/Resources/7foundationalprinciples.pdf](https://ipc.on.ca/wp-content/uploads/Resources/7foundationalprinciples.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-53 Rev.4 Security and Privacy Controls for Federal Information Systems
    and Organizations**: [https://www.nist.gov/publications/security-and-privacy-controls-federal-information-systems-and-organizations-including-0](https://www.nist.gov/publications/security-and-privacy-controls-federal-information-systems-and-organizations-including-0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST SP800-30 Rev 1 Guide for Conducting Risk Assessments**: [https://csrc.nist.gov/publications/detail/sp/800-30/rev-1/final](https://csrc.nist.gov/publications/detail/sp/800-30/rev-1/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST SP 800-12 Rev 1 An introduction to Information Security**: [https://csrc.nist.gov/publications/detail/sp/800-12/rev-1/final](https://csrc.nist.gov/publications/detail/sp/800-12/rev-1/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SP 800-39 Managing Information Security Risk: Organization, Mission and Information
    System View**: [https://csrc.nist.gov/publications/detail/sp/800-39/final](https://csrc.nist.gov/publications/detail/sp/800-39/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SP 800-37 Rev 1 Guide for Applying the Risk Management Framework to Federal
    Information Systems: a Security life Cycle Approach**: [https://csrc.nist.gov/publications/detail/sp/800-37/rev-1/final](https://csrc.nist.gov/publications/detail/sp/800-37/rev-1/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privacy Pattern**: [https://privacypatterns.org/patterns](https://privacypatterns.org/patterns)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Reference Architecture for Security and Privacy**: [https://media.readthedocs.org/pdf/security-and-privacy-reference-architecture/latest/security-and-privacy-reference-architecture.pdf](https://media.readthedocs.org/pdf/security-and-privacy-reference-architecture/latest/security-and-privacy-reference-architecture.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OSA (Open Security Architecture) Patterns**: [www.opensecurityarchitecture.org/cms/library/patternlandscape](http://www.opensecurityarchitecture.org/cms/library/patternlandscape)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google VSAQ Vendor Security Assessment Questionnaires**: [https://github.com/google/vsaq](https://github.com/google/vsaq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hadoop Data security**: [https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.6.4/bk_security/content/ch_hdp-security-guide-overview.html](https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.6.4/bk_security/content/ch_hdp-security-guide-overview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cryptographic Key Length Recommendation**: [www.keylength.com/](http://www.keylength.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode Managing Security Risks Inherent in the Use of Third-party Components**: [https://www.safecode.org/wp-content/uploads/2017/05/SAFECode_TPC_Whitepaper.pdf](https://www.safecode.org/wp-content/uploads/2017/05/SAFECode_TPC_Whitepaper.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Practices for Secure Development of Cloud Applications**: [https://safecode.org/wp-content/uploads/2018/01/SAFECode_CSA_Cloud_Final1213.pdf](https://safecode.org/wp-content/uploads/2018/01/SAFECode_CSA_Cloud_Final1213.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OECD Privacy Principles** [http://oecdprivacy.org/](http://oecdprivacy.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
