["```\n$ aws cloudformation help # for the list of options \n```", "```\n{ \n\"AWSTemplateFormatVersion\" : \"version date\", \"Description\" : \"Description\", \"Resources\" : { }, \n\"Parameters\" : { }, \n\"Mappings\" : { }, \n\"Conditions\" : { }, \n\"Metadata\" : { }, \n\"Outputs\" : { } \n} \n```", "```\n$ pip install troposphere  \n```", "```\n....\nsetuptools_scm.version.SetuptoolsOutdatedWarning: your setuptools is too old (<12)     \n-----------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-pW4aV4/cfn-flip/        \n```", "```\n$ pip install -U setuptools \nCollecting setuptools\n Downloading https://files.pythonhosted.org/packages/ff/f4/385715ccc461885f3cedf57a41ae3c12b5fec3f35cce4c8706b1a112a133/setuptools-40.0.0-py2.py3-none-any.whl (567kB)\n 100% |████████████████████████████████| 573kB 22.2MB/s\nInstalling collected packages: setuptools\n Found existing installation: setuptools 0.9.8\n Uninstalling setuptools-0.9.8:\n Successfully uninstalled setuptools-0.9.8\nSuccessfully installed setuptools-40.0.0 \n```", "```\n\"\"\"Generating CloudFormation template.\"\"\"\n\nfrom troposphere import (\n    Base64,\n    ec2,\n    GetAtt,\n    Join,\n    Output,\n    Parameter,\n    Ref,\n    Template,\n)  \n```", "```\nApplicationPort = \"3000\"  \n```", "```\nt = Template() \n```", "```\nadd_description(\"Effective DevOps in AWS: HelloWorld web application\") \n```", "```\nt.add_parameter(Parameter(\n    \"KeyPair\",\n    Description=\"Name of an existing EC2 KeyPair to SSH\",\n    Type=\"AWS::EC2::KeyPair::KeyName\",\n    ConstraintDescription=\"must be the name of an existing EC2 KeyPair.\",\n))\n```", "```\nt.add_resource(ec2.SecurityGroup(\n    \"SecurityGroup\",\n    GroupDescription=\"Allow SSH and TCP/{} access\".format(ApplicationPort),\n    SecurityGroupIngress=[\n        ec2.SecurityGroupRule(\n            IpProtocol=\"tcp\",\n            FromPort=\"22\",\n            ToPort=\"22\",\n            CidrIp=\"0.0.0.0/0\",\n        ),\n        ec2.SecurityGroupRule(\n            IpProtocol=\"tcp\",\n            FromPort=ApplicationPort,\n            ToPort=ApplicationPort,\n            CidrIp=\"0.0.0.0/0\",\n        ),\n    ],\n))\n```", "```\nud = Base64(Join('\\n', [\n    \"#!/bin/bash\",\n    \"sudo yum install --enablerepo=epel -y nodejs\",\n    \"wget http://bit.ly/2vESNuc -O /home/ec2-user/helloworld.js\",\n    \"wget http://bit.ly/2vVvT18 -O /etc/init/helloworld.conf\",\n    \"start helloworld\"\n]))\n```", "```\n...\nt.add_resource(ec2.Instance(\n    \"instance\",\n    ImageId=\"ami-cfe4b2b0\",\n    InstanceType=\"t2.micro\",\n    SecurityGroups=[Ref(\"SecurityGroup\")],\n    KeyName=Ref(\"KeyPair\"),\n    UserData=ud,\n)) \n...\n```", "```\n...\nt.add_output(Output(\n    \"InstancePublicIp\",\n    Description=\"Public IP of our instance.\",\n    Value=GetAtt(\"instance\", \"PublicIp\"),\n))\n\nt.add_output(Output(\n    \"WebUrl\",\n    Description=\"Application endpoint\",\n    Value=Join(\"\", [\n        \"http://\", GetAtt(\"instance\", \"PublicDnsName\"),\n        \":\", ApplicationPort\n    ]),\n)) \n...\n```", "```\nprint t.to_json() \n```", "```\n$ python helloworld-cf-template.py > helloworld-cf.template \n```", "```\n$ git clone https://github.com/<your_github_username>/EffectiveDevOpsTemplates \n```", "```\n$ cd EffectiveDevOpsTemplates\n$ cp <path_to_helloworld_template>/helloworld-cf-template.py .\n```", "```\n$ git add helloworld-cf-template.py\n$ git commit -m \"Adding helloworld Troposphere template\"\n$ git push  \n```", "```\n$ curl https://api.ipify.org 54.164.95.231  \n```", "```\n$ pip install ipify\n```", "```\nCannot uninstall 'requests'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.    \n```", "```\n$ pip install --upgrade --force-reinstall pip==9.0.3\n$ pip install ipify\n$ pip install --upgrade pip  \n```", "```\n$ pip install ipaddress \n```", "```\n...\nfrom ipaddress import ip_network\nfrom ipify import get_ip\nfrom troposphere import (\n    Base64,\n    ec2,\n    GetAtt,\n    Join,\n    Output,\n    Parameter,\n    Ref,\n    Template,\n)\n\nApplicationPort = \"3000\"\nPublicCidrIp = str(ip_network(get_ip()))\n...\n```", "```\nSecurityGroupIngress=[\n        ec2.SecurityGroupRule(\n            IpProtocol=\"tcp\",\n            FromPort=\"22\",\n            ToPort=\"22\",\n            CidrIp=PublicCidrIp,\n        ),    \n....\n    ]\n```", "```\n$ python helloworld-cf-template.py > helloworld-cf-v2.template\n$ diff helloworld-cf-v2.template helloworld-cf.template \n46c46\n<             \"CidrIp\": \"54.164.95.231/32\",\n---\n>             \"CidrIp\": \"0.0.0.0/0\",\n 91a92\n>\n$\n```", "```\n $ aws ec2 describe-security-groups \\\n --group-names HelloWorld-SecurityGroup-1XTG3J074MXX\n```", "```\n$ git commit -am \"Only allow ssh from our local IP\"\n$ git push \n```", "```\n$ yum install ansible \n```", "```\n$ ansible --version\n\nansible 2.6.2\n  config file = /etc/ansible/ansible.cfg\n  configured module search path = [u'/root/.ansible/plugins/modules',  \n  u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/lib/python2.7/site-\n  packages/ansible\n  executable location = /bin/ansible\n  python version = 2.7.5 (default, Aug 4 2017, 00:39:18) [GCC 4.8.5 \n  20150623 (Red Hat 4.8.5-16)] \n```", "```\n$ aws cloudformation create-stack \\\n --capabilities CAPABILITY_IAM \\\n --stack-name ansible \\\n --template-body file://helloworld-cf-v2.template \\\n --parameters ParameterKey=KeyPair,ParameterValue=EffectiveDevOpsAWS\n{\n \"StackId\": \"arn:aws:cloudformation:us-east-\n     1:094507990803:stack/ansible/bb29cb10-9bbe-11e8-9ee4-500c20fefad2\"\n}  \n```", "```\n$ git clone https://github.com/<your_github_username>/ansible\n```", "```\n$ cd ansible\n```", "```\n**$ curl -Lo ec2.py** **http://bit.ly/2v4SwE5** **$ chmod +x ec2.py**  \n```", "```\n[ec2] \nregions = all \nregions_exclude = us-gov-west-1,cn-north-1 destination_variable = public_dns_name vpc_destination_variable = ip_address route53 = False \ncache_path = ~/.ansible/tmp cache_max_age = 300 \nrds = False \n```", "```\n$ ./ec2.py  \n```", "```\n[defaults] \ninventory      = ./ec2.py \nremote_user  = ec2-user \nbecome = True \nbecome_method  = sudo \nbecome_user    = root \nnocows     = 1 \n```", "```\n$ ansible --private-key ~/.ssh/EffectiveDevOpsAWS.pem ec2 -m ping \n18.206.223.199 | SUCCESS => {\n    \"changed\": false,\n    \"ping\": \"pong\"\n} \n```", "```\n$ ansible --private-key ~/.ssh/EffectiveDevOpsAWS.pem '18.206.223.*' \\\n-a 'df -h'\n18.206.223.199 | SUCCESS | rc=0 >>\nFilesystem  Size  Used  Avail  Use%  Mounted on\ndevtmpfs    484M  56K   484M   1%    /dev\ntmpfs       494M   0    494M   0%    /dev/shm\n/dev/xvda1  7.8G   1.1G 6.6G   15%   /\n```", "```\nyum install --enablerepo=epel -y nodejs \nwget http://bit.ly/2vESNuc -O /home/ec2-user/helloworld.js \nwget http://bit.ly/2vVvT18 -O /etc/init/helloworld.conf start helloworld\n```", "```\n$ mkdir roles\n$ cd roles  \n```", "```\n$ ansible-galaxy init nodejs\n- nodejs was created successfully  \n```", "```\n$ cd nodejs  \n```", "```\n--- # tasks file for nodejs  \n```", "```\n--- \n# tasks file for nodejs \n\nname: Installing node and npm yum: \nname: \"{{ item }}\" enablerepo: epel state: installed \nwith_items: \nnodejs \nnpm \n```", "```\n$ cd ..\n$ ansible-galaxy init helloworld\n- helloworld was created successfully  \n```", "```\n$ cd helloworld  \n```", "```\n$ wget http://bit.ly/2vESNuc -O files/helloworld.js\n$ wget http://bit.ly/2vVvT18 -O files/helloworld.conf  \n```", "```\n--- \n# tasks file for helloworld \n- name: Copying the application file copy: \nsrc: helloworld.js dest: /home/ec2-user/ owner: ec2-user group: ec2-user \nmode: 0644 \nnotify: restart helloworld \n```", "```\n- name: Copying the upstart file copy: \nsrc: helloworld.conf \ndest: /etc/init/helloworld.conf owner: root \ngroup: root mode: 0644 \n```", "```\n- name: Starting the HelloWorld node service service: \nname: helloworld state: started \n```", "```\n---\n# handlers file for helloworld\n```", "```\n- name: restart helloworld service: \nname: helloworld state: restarted \n```", "```\ndependencies: \n- nodejs \n```", "```\n--- \n- hosts: \"{{ target | default('localhost') }}\" become: yes \nroles: \n- helloworld \n```", "```\n--- \nhosts: webservers roles: \nfoo \nbar \nbaz \n```", "```\nansible-playbook <playbook.yml> [options] \n```", "```\n$ ansible-playbook helloworld.yml \\\n    --private-key ~/.ssh/EffectiveDevOpsAWS.pem \\\n    -e target=ec2 \\\n    --list-hosts\n```", "```\nplaybook: helloworld.yml \n  play #1 (ec2): ec2 TAGS:[] \n    pattern: [u'ec2'] \n    hosts (1): \n      18.206.223.199 \n```", "```\n$ ansible-playbook helloworld.yml \\\n --private-key ~/.ssh/EffectiveDevOpsAWS.pem \\\n -e target=18.206.223.199 \\\n --check\n\nPLAY [18.206.223.199] **************************************************************************************************************************************************\n\nTASK [Gathering Facts] *************************************************************************************************************************************************\nok: [18.206.223.199]\n\nTASK [nodejs : Installing node and npm] ********************************************************************************************************************************\nchanged: [18.206.223.199] => (item=[u'nodejs', u'npm'])\n\nTASK [helloworld : Copying the application file] ***********************************************************************************************************************\nchanged: [18.206.223.199]\n\nTASK [helloworld : Copying the upstart file] ***************************************************************************************************************************\nchanged: [18.206.223.199]\n\nTASK [helloworld : Starting the HelloWorld node service] ***************************************************************************************************************\nchanged: [18.206.223.199]\n\nRUNNING HANDLER [helloworld : restart helloworld] **********************************************************************************************************************\nchanged: [18.206.223.199]\n\nPLAY RECAP *************************************************************************************************************************************************************\n18.206.223.199 : ok=6 changed=5 unreachable=0 failed=0\n```", "```\n$ ansible-playbook helloworld.yml \\\n    --private-key ~/.ssh/EffectiveDevOpsAWS.pem \\\n    -e target=18.206.223.199 \n```", "```\n$ curl 18.206.223.199:3000\nHello World  \n```", "```\n$ git add ansible.cfg ec2.ini ec2.py\n$ git commit -m \"Configuring ansible to work with EC2\"\n$ git add roles helloworld.yml\n$ git commit -m \"Adding role for nodejs and helloworld\"\n$ git push  \n```", "```\n// Send the response body as \"Hello World\" \nresponse.end('Hello World, Welcome again\\n'); \n}).listen(3000); \n```", "```\n$ ansible-playbook helloworld.yml \\\n    --private-key ~/.ssh/EffectiveDevOpsAWS.pem \\\n    -e target=18.206.223.199 \\\n    --check\n```", "```\n$ ansible-playbook helloworld.yml \\\n    --private-key ~/.ssh/EffectiveDevOpsAWS.pem \\\n    -e target=18.206.223.199  \n```", "```\n$ curl 18.206.223.199:3000\nHello World, Welcome again  \n```", "```\n$ git checkout roles/helloworld/files/helloworld.js  \n```", "```\n$ ansible '18.206.223.199' \\\n    --private-key ~/.ssh/EffectiveDevOpsAWS.pem \\\n    --become \\\n    -m yum -a 'name=git enablerepo=epel state=installed' \n$ ansible '18.206.223.199' \\\n    --private-key ~/.ssh/EffectiveDevOpsAWS.pem \\\n    --become \\\n    -m yum -a 'name=ansible enablerepo=epel state=installed'\n```", "```\n[localhost] \nlocalhost ansible_connection=local \n```", "```\n$ git add localhost\n$ git commit -m \"Adding localhost inventory\"\n$ git push \n```", "```\n$ ansible '18.206.223.199' \\\n--private-key ~/.ssh/EffectiveDevOpsAWS.pem \\\n-m cron -a 'name=ansible-pull minute=\"*/10\" job=\"/usr/bin/ansible-pull -U https://github.com/<your_username>/ansible helloworld.yml -i localhost --sleep 60\"'  \n```", "```\n$ curl 54.175.86.38:3000\nHello World  \n```", "```\nansiblebase-cf-template.py. \n```", "```\n$ cd EffectiveDevOpsTemplates \n$ cp helloworld-cf-template.py ansiblebase-cf-template.py \n```", "```\nApplicationName = \"helloworld\" \nApplicationPort = \"3000\" \n```", "```\nApplicationPort = \"3000\" \n\nGithubAccount = \"EffectiveDevOpsWithAWS\" \nGithubAnsibleURL = \"https://github.com/{}/ansible\".format(GithubAccount) \n```", "```\nAnsiblePullCmd = \\ \n\"/usr/bin/ansible-pull -U {} {}.yml -i localhost\".format( GithubAnsibleURL, \nApplicationName \n) \n```", "```\nud = Base64(Join('\\n', [ \"#!/bin/bash\", \n\"yum install --enablerepo=epel -y git\", \"pip install ansible\", \nAnsiblePullCmd, \n\"echo '*/10 * * * * {}' > /etc/cron.d/ansible- pull\".format(AnsiblePullCmd) \n])) \n```", "```\n$ python ansiblebase-cf-template.py > ansiblebase.template\n$ aws cloudformation update-stack \\\n --stack-name ansible \\\n --template-body file://ansiblebase.template \\\n --parameters ParameterKey=KeyPair,ParameterValue=EffectiveDevOpsAWS\n{\n\"StackId\": \"arn:aws:cloudformation:us-\neast-1:511912822958:stack/HelloWorld/ef2c3250-6428-11e7-a67b-50d501eed2b3\"\n}\n```", "```\n$ aws cloudformation create-stack \\\n --stack-name helloworld \\\n --template-body file://ansiblebase.template \\\n --parameters ParameterKey=KeyPair,ParameterValue=EffectiveDevOpsAWS\n{\n \"StackId\": \"arn:aws:cloudformation:us-east-\n     1:094507990803:stack/helloworld/5959e7c0-9c6e-11e8-b47f-\n     50d5cd26c2d2\"\n} \n```", "```\n$ aws cloudformation wait stack-update-complete \\\n        --stack-name ansible\n```", "```\n$ aws cloudformation describe-stacks \\\n    --stack-name ansible \\\n    --query 'Stacks[0].Outputs[0]'\n  {\n     \"Description\": \"Public IP of our instance.\",\n     \"OutputKey\": \"InstancePublicIp\",\n     \"OutputValue\": \"35.174.138.51\"\n  }  \n```", "```\n$ curl 35.174.138.51:3000\nHello World  \n```", "```\nEffectiveDevOpsTemplates repository:\n$ git add ansiblebase-cf-template.py\n$ git commit -m \"Adding a Troposphere script to create a stack that relies on Ansible to manage our application\"\n$ git push  \n```", "```\n$ aws cloudformation delete-stack --stack-name ansible  \n```", "```\naws cloudformation delete-stack --stack-name helloworld \n```"]