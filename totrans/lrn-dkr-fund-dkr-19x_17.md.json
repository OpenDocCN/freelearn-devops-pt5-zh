["```\nversion: \"3.5\"\nservices:\n web:\n   image: nginx:alpine\n   deploy:\n     replicas: 10\n     update_config:\n       parallelism: 2\n       delay: 10s\n...\n```", "```\n$ eval $(docker-machine env node-1)\n```", "```\n$ docker stack deploy -c stack.yaml web\n```", "```\n$ watch docker stack ps web\n```", "```\n$ docker service update --image nginx:1.13-alpine web_web\n```", "```\n$ docker stack rm web\n```", "```\n$ docker service create --name web \\\n --replicas 10 \\\n --update-parallelism 2 \\\n --update-delay 10s \\\n nginx:alpine\n```", "```\nFROM alpine:3.6\n...\nHEALTHCHECK --interval=30s \\\n    --timeout=10s\n    --retries=3\n    --start-period=60s\n    CMD curl -f http://localhost:3000/health || exit 1\n...\n```", "```\nversion: \"3.5\"\nservices:\n  web:\n    image: example/web:1.0\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 60s\n...\n```", "```\nversion: \"3.5\"\nservices:\n  web:\n    image: nginx:alpine\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"-qO\", \"-\", \"http://localhost\"]\n      interval: 5s\n      timeout: 2s\n      retries: 3\n      start_period: 15s\n```", "```\n$ docker stack deploy -c stack-health.yaml myapp\n```", "```\nversion: \"3.5\"\nservices:\n  web:\n    image: nginx:1.12-alpine\n    ports:\n      - 80:80\n    deploy:\n      replicas: 10\n      update_config:\n        parallelism: 2\n        delay: 10s\n\n        failure_action: rollback\n        monitor: 10s\n\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"-qO\", \"-\", \"http://localhost\"]\n      interval: 2s\n      timeout: 2s\n      retries: 3\n      start_period: 2s\n```", "```\n$ echo \"Hello world\" | docker config create hello-config - rrin36epd63pu6w3gqcmlpbz0\n```", "```\n$ docker config ls ID                         NAME           CREATED              UPDATED\nrrin36epd63pu6w3gqcmlpbz0  hello-config   About a minute ago   About a minute ago\n```", "```\n$ docker config docker config inspect hello-config\n[\n    {\n        \"ID\": \"rrin36epd63pu6w3gqcmlpbz0\",\n        \"Version\": {\n            \"Index\": 11\n        },\n        \"CreatedAt\": \"2019-11-30T07:59:20.6340015Z\",\n        \"UpdatedAt\": \"2019-11-30T07:59:20.6340015Z\",\n        \"Spec\": {\n            \"Name\": \"hello-config\",\n            \"Labels\": {},\n            \"Data\": \"SGVsbG8gd29ybGQK\"\n        }\n    }\n]\n```", "```\n$ echo 'SGVsbG8gd29ybGQK' | base64 -d\nHello world\n```", "```\nusername=pguser\ndatabase=products\nport=5432\ndbhost=postgres.acme.com\n```", "```\n$ docker config create app.properties ./my-app.properties\n2yzl73cg4cwny95hyft7fj80u\n```", "```\n$ docker config inspect app.properties | jq .[].Spec.Data | xargs echo | base64 -d username=pguser\ndatabase=products\nport=5432\ndbhost=postgres.acme.com\n```", "```\n$ docker service create \\\n --name nginx \\\n --config source=app.properties,target=/etc/my-app/conf/app.properties,mode=0440 \\\n nginx:1.13-alpine\n\np3f686vinibdhlnrllnspqpr0\noverall progress: 1 out of 1 tasks\n1/1: running [==================================================>]\nverify: Service converged\n```", "```\n$ docker service ps nginx\nID            NAME     IMAGE              NODE DESIRED    STATE    CURRENT STATE ...\nb8lzzwl3eg6y  nginx.1  nginx:1.13-alpine  node-1  Running  Running 2 minutes ago\n```", "```\n$ docker container ls\nCONTAINER ID   IMAGE               COMMAND                  CREATED         STATUS         PORTS ...\nbde33d92cca7   nginx:1.13-alpine   \"nginx -g 'daemon ofâ€¦\"   5 minutes ago   Up 5 minutes   80/tcp ...\n```", "```\n$ docker exec bde33 cat /etc/my-app/conf/app.properties\nusername=pguser\ndatabase=products\nport=5432\ndbhost=postgres.acme.com\n```", "```\n$ docker config rm app.properties\nError response from daemon: rpc error: code = InvalidArgument desc = config 'app.properties' is in use by the following service: nginx\n```", "```\n$ docker service rm nginx\nnginx\n$ docker config rm app.properties\napp.properties\n```", "```\n$ echo \"sample secret value\" | docker secret create sample-secret - \n```", "```\n$ docker secret create other-secret ~/my-secrets/secret-value.txt\n```", "```\n$ docker service create --name web \\\n --secret api-secret-key \\\n --publish 8000:8000 \\\n fundamentalsofdocker/whoami:latest\n```", "```\n$ echo \"my secret key\" | docker secret create api-secret-key -\n```", "```\n$ docker-machine ssh node-3\n```", "```\n$ docker exec -it <container ID> cat /run/secrets/api-secret-key\n```", "```\n$ docker service create --name web \\\n --name web \\\n -p 8000:8000 \\\n --secret source=api-secret-key,target=/run/my-secrets/api-secret-key \\\n fundamentalsofdocker/whoami:latest\n```", "```\n$ echo \"demo secret value\" > ./dev-secrets/sample-secret\n```", "```\n$ docker container run -d --name whoami \\\n -p 8000:8000 \\\n -v $(pwd)/dev-secrets:/run/secrets \\\n fundamentalsofdocker/whoami:latest\n```", "```\n$ docker container exec -it whoami /bin/bash\n```", "```\n/# cd /run/secrets\n/# cat demo-secret\ndemo secret value\n```", "```\nexport DEMO_SECRET=$(cat /run/secrets/demo-secret)\n```", "```\n...\n\nsecrets:\n  demo-secret: \"<<demo-secret-value>>\"\n  other-secret: \"<<other-secret-value>>\"\n  yet-another-secret: \"<<yet-another-secret-value>>\"\n...\n```", "```\nfile=/app/bin/app.conf\ndemo_secret=$(cat /run/secret/demo-secret)\nsed -i \"s/<<demo-secret-value>>/$demo_secret/g\" \"$file\"\n```", "```\ndatabase:\n  name: demo\n  db_password: \"<<db_password_value>>\"\nothers:\n  val1=123\n  val2=\"hello world\"\n```", "```\nfile=/app/whoami.conf\ndb_pwd=$(cat /run/secret/db-password)\nsed -i \"s/<<db_password_value>>/$db_pwd/g\" \"$file\"\n\n/app/http\n```", "```\n$ sudo chmod +x ./entrypoint.sh\n```", "```\nFROM fundamentalsofdocker/whoami:latest\nCOPY ./whoami.conf /app/\nCOPY ./entrypoint.sh /\nCMD [\"/entrypoint.sh\"]\n```", "```\n$ docker image build -t secrets-demo:1.0 .\n```", "```\n$ echo \"passw0rD123\" | docker secret create demo-secret -\n```", "```\n$ docker service create --name demo \\\n --secret demo-secret \\\n secrets-demo:1.0\n```", "```\n$ echo \"newPassw0rD\" | docker secret create db-password-v2 -\n```", "```\n$ docker service create --name web \\\n --publish 80:80\n --secret db-password\n nginx:alpine\n```", "```\n$ docker service update --secret-rm db-password web\n```", "```\n$ docker service update \\\n --secret-add source=db-password-v2,target=db-password \\\n web\n```"]