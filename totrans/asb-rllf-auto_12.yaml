- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating Ansible with Your Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an organization grows its IT infrastructure, more and more tools are often
    needed to solve the technical challenges. Instead of these tools working alone
    in silos, it is desirable to implement integration between these tools to increase
    efficiency and scalability. As an example, the **IT Service Management** (**ITSM**)
    tool can send an alert to approvers, or the container platform can trigger a new
    deployment of the application when a new version has been developed by the team.
    There are an immeasurable number of opportunities in terms of integrating multiple
    siloed tools in IT infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for automation as well; Ansible can be used as the key automation
    tool for implementing integration between multiple infrastructure and application
    support tools. In the previous chapters, you learned about the Ansible automation
    and integration opportunities for the infrastructure (public and private cloud),
    DevOps, networks, applications, and more. In this chapter, you will learn more
    about the enterprise automation solution called **Ansible Automation Platform**
    (**AAP**) and the integration methods between other tools in the IT infrastructure
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by introducing Red Hat AAP and its components, features, and benefits.
    Then, you will learn how to use AAP by creating various automation resources in
    automation controller, such as projects, job templates, and credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Red Hat AAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat AAP components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database management using Red Hat AAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Jenkins with AAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating an automation controller with Slack and notification services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start learning about AAP, the enterprise IT automation tool.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: One or more Linux machines with Red Hat repositories configured. If you are
    using other Linux operating systems instead of **Red Hat Enterprise Linux** (**RHEL**)
    machines, then make sure you have the appropriate repositories configured to get
    packages and updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to Red Hat AAP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Jenkins server and basic knowledge about Jenkins pipelines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Slack application account and basic knowledge about Slack usage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single 60-day self-supported subscription to Red Hat AAP is available for
    testing AAP and its features. Please refer to [https://www.redhat.com/en/technologies/management/ansible/trial](https://www.redhat.com/en/technologies/management/ansible/trial)
    to learn more about the AAP trial subscription.
  prefs: []
  type: TYPE_NORMAL
- en: All the Ansible artifacts, commands, and snippets for this chapter can be found
    in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-12](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-12).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Red Hat AAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, you have learned how to use Ansible, develop playbooks, create roles,
    use content collections, and more for your use cases. Anyone can install and use
    Ansible in their workstation or some random servers in an environment and use
    them for their automation use cases. However, there won’t be any standardization,
    traces, or accountability as each person works on their methods and practices.
    This will result in the following challenges in the organization:'
  prefs: []
  type: TYPE_NORMAL
- en: Individuals work in silos, which will result in no collaboration in the workplace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation artifacts (playbooks, roles, and collections) are not shared between
    individuals or teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No logging or auditing options will be available since the automation is running
    on an individual’s workstation or some random servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less control over who can execute the playbooks or automated jobs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficulty keeping secrets and credentials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of job scheduling and monitoring features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complexity in managing managed nodes information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it comes to enterprise automation, the solution must be able to implement
    governance, standardization, collaboration, accountability and auditing.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat AAP helps organizations cover most of the previously mentioned challenges
    by implementing an enterprise automation solution that can scale the automation
    and orchestrate the infrastructure and applications. AAP includes all the tools
    and features required for enterprise automation, such as **Graphical User Interface**
    (**GUI**) and **Text User Interface** (**TUI**)-based tools, analytics, dashboards,
    auditing, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Note that unlike Ansible (the `ansible-core` or `ansible` package), Red Hat
    AAP is not free and is delivered as a subscription model ([https://www.ansible.com/products/pricing](https://www.ansible.com/products/pricing)),
    like any other Red Hat product. For testing and **proof of concept** (**POC**)
    purposes, request a 60-day trial subscription and refer to https://www.redhat.com/en/technologies/management/ansible/try-it
    to learn more. Please refer to [https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.1/html/red_hat_ansible_automation_platform_installation_guide/index](https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.1/html/red_hat_ansible_automation_platform_installation_guide/index)
    to learn how to install and configure Red Hat AAP.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to get a no-cost RHEL individual developer subscription
    for testing and development purposes. Refer to [https://developers.redhat.com/articles/faqs-no-cost-red-hat-enterprise-linux](https://developers.redhat.com/articles/faqs-no-cost-red-hat-enterprise-linux)
    to learn more about this free RHEL subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat AAP Managed Service in Microsoft Azure
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat offers AAP as a managed service on Microsoft Azure, by which the organization
    can utilize the AAP solution just like any other Microsoft Azure cloud service.
    This is fully supported by Red Hat and the billing will be handled inside the
    same cloud service bill. Refer to [https://www.redhat.com/en/technologies/management/ansible/azure](https://www.redhat.com/en/technologies/management/ansible/azure)
    to learn more about this managed service.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore the various features of Red Hat AAP.
  prefs: []
  type: TYPE_NORMAL
- en: Features of Red Hat AAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following important features are included in Red Hat AAP:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WebUI**: The web-based GUI can help administrators and developers manage
    the entire automation solution from a web browser. Most of the configurations
    in AAP can be executed from the WebUI itself, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.1 – The Red Hat AAP dashboard ](img/B18383_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – The Red Hat AAP dashboard
  prefs: []
  type: TYPE_NORMAL
- en: '**Role-Based Access Control** (**RBAC**): Administrators can create teams and
    roles in AAP and assign the roles with adequate permissions to the users or teams.
    These permissions can be configured for every component in AAP, such as projects,
    job templates, inventories or credentials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging and auditing**: AAP will store the activity logs, including job execution
    history, and it is possible to access the old job details any time from the WebUI.
    AAP also includes the option to integrate with logging aggregators such as Logstash,
    Splunk, Loggly, Sumo Logic, and others so that we can keep your logs in a central
    system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**REST API** (**also known as the RESTful API**): The powerful and well-documented
    REST API will help you integrate AAP with the existing tools and applications
    in your environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation Controller API Guide
  prefs: []
  type: TYPE_NORMAL
- en: The automation controller REST API also helps you manage automation controller
    operations such as job template creation, credential management or configuring
    authentication. Refer to the API guide [https://docs.ansible.com/automation-controller/latest/html/controllerapi/index.xhtml](https://docs.ansible.com/automation-controller/latest/html/controllerapi/index.xhtml)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**Job templates and workflows**: It is possible to predefine and configure
    the job templates and workflow templates to quickly execute complex automation
    jobs ([https://docs.ansible.com/automation-controller/latest/html/userguide/workflows.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/workflows.xhtml)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credential management**: With credentials, you store secrets and sensitive
    information such as passwords, API keys, tokens, and so on. There are several
    predefined credential types available in AAP and it is also possible to create
    custom credential types if required ([https://docs.ansible.com/automation-controller/latest/html/userguide/credential_types.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/credential_types.xhtml)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Automation controller credentials ](img/B18383_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Automation controller credentials
  prefs: []
  type: TYPE_NORMAL
- en: '**Job scheduling**: Automation jobs can be scheduled and executed automatically
    without user intervention, as shown in the following screenshot. This is useful
    for many automation jobs that must be executed in a specific period and without
    manual intervention. For example, we can schedule a weekly or monthly reboot job
    (as we learned in [*Chapter 3*](B18383_03.xhtml#_idTextAnchor052), *Automating
    Your Daily Jobs*) using an automation controller:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Job scheduling in an automation controller ](img/B18383_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Job scheduling in an automation controller
  prefs: []
  type: TYPE_NORMAL
- en: '**Notifications**: AAP supports multiple types of notifications, such as email,
    IRC, and webhook, and tool integration for Grafana, Slack, Mattermost, and others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with Red Hat Insights**: By enabling this integration, it is
    possible to analyze the automation status and data for the automation platforms
    (AAP clusters) in your environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with third-party authentication systems**: Instead of managing
    the local user accounts in AAP, integrate with the existing authentication providers,
    such as Active Directory, Google OAuth2, LDAP, RADIUS, SAMPLE, or TACACS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat AAP Features and Benefits
  prefs: []
  type: TYPE_NORMAL
- en: Please go to [https://www.redhat.com/en/technologies/management/ansible/features](https://www.redhat.com/en/technologies/management/ansible/features)
    to learn more about the features of AAP and their benefits.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn more about the components of Red Hat AAP.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat AAP components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Red Hat AAP is an automation suite that contains multiple components, as shown
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – High-level diagram of Red Hat AAP 2.1 components (source: https://www.ansible.com/blog/introducing-red-hat-ansible-automation-platform-2.1)
    ](img/B18383_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4 – High-level diagram of Red Hat AAP 2.1 components (source: https://www.ansible.com/blog/introducing-red-hat-ansible-automation-platform-2.1)'
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, you will learn about the different components of
    AAP, such as the automation controller, execution environments, and automation
    mesh.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible automation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **automation controller** was referred to as **Ansible Tower** previously.
    It is the control plane and the core component of AAP. With the introduction of
    the Ansible automation controller, the control plane components (WebUI and API)
    become decoupled from the **execution environment** (**EE**), which also helps
    the solution with additional execution nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the automation controller, we can manage the AAP operations from the WebUI,
    such as managing remote nodes (inventory), credentials, projects, job templates,
    and other operations. The automation controller contains many components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A REST API for inventory, credential, and job management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database for storing the resource details, including the automation job’s
    history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Am automation mesh connector and receptor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A message queue and caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A task scheduler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the RBAC configuration, the user will have different permissions on
    the automation controller interface.
  prefs: []
  type: TYPE_NORMAL
- en: What is the Red Hat Ansible Automation Platform Automation Controller?
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about automation controller, check *What is the Red Hat Ansible
    Automation Platform automation controller?* ([https://www.redhat.com/en/technologies/management/ansible/automation-controller](https://www.redhat.com/en/technologies/management/ansible/automation-controller)).
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Tower and AAP Life Cycle
  prefs: []
  type: TYPE_NORMAL
- en: Ansible automation controller 3.8 (Ansible Tower) has been part of AAP since
    version 1.2\. Refer to the Ansible Tower life cycle ([https://access.redhat.com/support/policy/updates/ansible-tower](https://access.redhat.com/support/policy/updates/ansible-tower))
    and AAP life cycle ([https://access.redhat.com/support/policy/updates/ansible-automation-platform](https://access.redhat.com/support/policy/updates/ansible-automation-platform))
    to learn more about these versions.
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible-navigator`) is a TUI utility for interacting with automation execution
    environments. It can be seen in the following screenshot. `ansible-navigator`
    is also helpful for developing and testing automation content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – The ansible-navigator TUI ](img/B18383_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – The ansible-navigator TUI
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using `ansible-playbook` and other `ansible-*` commands, we can use
    `ansible-navigator` to manage all command-line operations of Ansible, such as
    executing playbooks, managing collections, executing environments, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the Ansible navigator documentation ([https://ansible-navigator.readthedocs.io](https://ansible-navigator.readthedocs.io))
    and Ansible navigator cheat sheet ([https://www.techbeatly.com/ansible-navigator-cheat-sheet](https://www.techbeatly.com/ansible-navigator-cheat-sheet))
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Automation execution environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The automaton execution environment provides a standard and portable mechanism
    for executing Ansible playbooks. Execution environments are consistent by design
    and deliver container images that contain the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible Runner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Required Ansible collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other dependencies for the playbook’s execution (for example, Python libraries,
    system packages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Previously, Python virtual environments (for example, `/var/lib/awx/venv/ansible`)
    were used to achieve this functionality. This was not easy to manage and maintain
    in terms of consistency as you needed to manage the Python virtual environments
    on all nodes in the AAP or Ansible Tower cluster. By containerizing the executables
    and dependencies, it is possible to distribute the same image to multiple cluster
    nodes consistently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Components inside the automation execution environment ](img/B18383_12_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Components inside the automation execution environment
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible-builder`) is a command-line utility that can be used to build and
    manage container images for the automation execution environment. Refer to the
    automation execution environment documentation ([https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml))
    to learn more about building and distributing automation execution environments.'
  prefs: []
  type: TYPE_NORMAL
- en: The automation mesh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The automation mesh is a service mesh concept for Ansible automation and was
    introduced in AAP 2.1\. The automation mesh replaces the isolated node concept
    in older versions of AAP (version 1.2 and below) and provides the flexibility
    to scale the automation landscape. The automation mesh replaces the need for jump
    servers (or bastion hosts), and it is possible to place the execution nodes near
    the managed nodes, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – AAP and the automation mesh (source: https://www.ansible.com/blog/whats-new-in-ansible-automation-platform-2.1-automation-mesh)  ](img/B18383_12_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7 – AAP and the automation mesh (source: https://www.ansible.com/blog/whats-new-in-ansible-automation-platform-2.1-automation-mesh)'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the documentation ([https://www.ansible.com/products/automation-mesh](https://www.ansible.com/products/automation-mesh))
    to learn more about the automation mesh.
  prefs: []
  type: TYPE_NORMAL
- en: Automation Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible Automation Hub is the official location for downloading the supported
    and certified Ansible collections. The hosted Automation Hub is available at [https://console.redhat.com/ansible/automation-hub](https://console.redhat.com/ansible/automation-hub),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Ansible Automation Hub ](img/B18383_12_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Ansible Automation Hub
  prefs: []
  type: TYPE_NORMAL
- en: 'To manage your content collection and other supported collections, it is possible
    to use a **Private Automation Hub** (**PAH**). This concept was introduced in
    AAP 1.2\. Content from other sources (such as Red Hat Ansible Automation Hub or
    Ansible Galaxy) can be synced to private automation hubs, as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – Private Automation Hub with AAP ](img/B18383_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – Private Automation Hub with AAP
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the documentation ([https://docs.ansible.com/ansible/latest/reference_appendices/automationhub.xhtml](https://docs.ansible.com/ansible/latest/reference_appendices/automationhub.xhtml))
    and product page ([https://www.ansible.com/products/automation-hub](https://www.ansible.com/products/automation-hub))
    to learn more about Automation Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible AWX and the Ansible Automation Controller
  prefs: []
  type: TYPE_NORMAL
- en: Ansible AWX is an open source community project sponsored by Red Hat. It is
    an upstream project for the automation controller component in Red Hat AAP. (Red
    Hat Ansible Tower 3.2 is the first version based on the Ansible AWX project.)
    Ansible AWX is a fast-moving project ([https://github.com/ansible/awx](https://github.com/ansible/awx))
    that is primarily supported by the community via IRC ([https://web.libera.chat/#ansible-awx](https://web.libera.chat/#ansible-awx))
    and the AWX mailing list ([https://groups.google.com/forum/#!forum/awx-project](https://groups.google.com/forum/#!forum/awx-project)).
    Refer to the project page ([https://www.ansible.com/community/awx-project](https://www.ansible.com/community/awx-project))
    and frequently asked questions ([https://www.ansible.com/products/awx-project/faq](https://www.ansible.com/products/awx-project/faq))
    to learn more about Ansible AWX.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to start using Red Hat AAP for automation
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Database management using Red Hat AAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 8*](B18383_08.xhtml#_idTextAnchor144), *Helping the Database Team
    with Automation*, you learned how to use Ansible to automate database creation
    and user management operations. This section will reuse the same Ansible artifacts
    but in a different repository and execute the job from Red Hat AAP.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to the Red Hat Ansible automation controller WebUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the GitHub repository that contains the necessary Ansible artifacts
    ([https://github.com/ginigangadharan/ansible-database-demo](https://github.com/ginigangadharan/ansible-database-demo))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the target nodes (database node)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job templates are the core resources in the automation controller, but a job
    template requires few other resources as dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – Components and dependencies in Ansible Automation Platform
    ](img/B18383_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – Components and dependencies in Ansible Automation Platform
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn the basic operations in the Ansible automation controller and
    create various resources, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Organizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inventory, managed nodes, and groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A job template with survey forms and extra variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will learn how to access the Ansible automation
    controller and create the resources inside.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Ansible automation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the automation controller IP address or hostname from a supported web
    browser and log in with your username and password, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – Ansible automation controller WebUI login page ](img/B18383_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – Ansible automation controller WebUI login page
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the RBAC configurations and permissions, you will find allowed menus
    and configuration items on the dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.12 – Ansible automation controller dashboard ](img/B18383_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – Ansible automation controller dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'To manage different projects, users, and other resources, create a new *organization*;
    see the example shown in the following screenshot. An organization is a logical
    collection of projects, inventories, teams and users (this is an optional step;
    use the **Default** organization that already exists in the automation controller):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Creating a new organization ](img/B18383_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – Creating a new organization
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created a new organization, create a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project in automation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Click on the **Projects** menu and then click **Add** to create a new project,
    as shown in the following screenshot. For **Source Control URL**, use [https://github.com/ginigangadharan/ansible-database-demo](https://github.com/ginigangadharan/ansible-database-demo):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Creating a new project in the automation controller ](img/B18383_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – Creating a new project in the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: Since the GitHub repository is public, we do not require a credential to access
    it. For private GitHub repositories, you need to provide one; you will learn how
    to create credentials in the next section when we add the inventory and managed
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the project’s sync status, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – Project details and job status ](img/B18383_12_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – Project details and job status
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the automation controller has finished syncing the content
    from the GitHub repository to a local directory (`Playbook Directory: _15__database_management`).'
  prefs: []
  type: TYPE_NORMAL
- en: If you come across any issues while syncing content, check your internet connection
    or connection to the Git server (for private repositories) and ensure the necessary
    access is in place.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the inventory and managed nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous chapters, you created Ansible inventories using static files
    (and dynamic inventory plugins), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16 – Creating an Ansible inventory using a static file  ](img/B18383_12_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – Creating an Ansible inventory using a static file
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create a new inventory, managed nodes, and host groups in the automation
    controller using the WebUI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Inventories** tab on the left-hand side and **Add** a new inventory,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.17 – Creating an Ansible inventory in the automation controller
    ](img/B18383_12_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – Creating an Ansible inventory in the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: 'A new inventory will be created and its status will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.18 – The Ansible inventory on the automation controller ](img/B18383_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – The Ansible inventory on the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select the **Groups** tab at the top and click **Add** to create a new
    host group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.19 – Creating a new host group ](img/B18383_12_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – Creating a new host group
  prefs: []
  type: TYPE_NORMAL
- en: 'New host group details will be displayed, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.20 – New host group details ](img/B18383_12_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – New host group details
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Hosts** tab at the top. Then, click **Add** and select **Add
    new host**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.21 – Adding new hosts to the host group ](img/B18383_12_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – Adding new hosts to the host group
  prefs: []
  type: TYPE_NORMAL
- en: If you have already added the hosts directly, then add the host to this host
    group by selecting **Add existing host**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new host with a hostname and `ansible_host` information, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.22 – Creating a new host ](img/B18383_12_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.22 – Creating a new host
  prefs: []
  type: TYPE_NORMAL
- en: More variables can be added for host groups as hosts under the **Variables**
    section, as shown in *Figures 12.22* and *12.20*.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Your Inventory into the Automation Controller
  prefs: []
  type: TYPE_NORMAL
- en: Instead of adding managed nodes one by one, it is also possible to import your
    inventory from the project source, public cloud, or other inventory management
    systems. Refer to the documentation at [https://docs.ansible.com/automation-controller/latest/html/administration/scm-inv-source.xhtml](https://docs.ansible.com/automation-controller/latest/html/administration/scm-inv-source.xhtml)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Creating credentials in the automation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous chapters, we used SSH keys to access the managed nodes. The
    SSH private key was stored in the Ansible control node (`/home/ansible/.ssh/id_rsa`),
    but in this case, we must pass the private key using a credential.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `devops`) and the SSH private key (you can also use `password` as
    the credential):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.23 – Adding the Machine credential ](img/B18383_12_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.23 – Adding the Machine credential
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have enabled `NOPASSWD` (refer to [*Chapter 1*](B18383_01.xhtml#_idTextAnchor014),
    *Ansible Automation – Introduction*, the *Configuring your managed nodes* section)
    for the `sudo` access, we do not need to enter any data in the **Privilege Escalation**
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.24 – Machine credential privilege escalation fields ](img/B18383_12_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.24 – Machine credential privilege escalation fields
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the credential and verify its details. The passwords and SSH private key
    content will be encrypted and will not be visible to anyone. You can only reset
    the SSH private key content or password in the credential, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.25 – Encrypted SS private key content ](img/B18383_12_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.25 – Encrypted SS private key content
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have created a project, an inventory with a managed node (`dbnode1`),
    and a credential to access the node. Now, you must create a job template using
    the `Chapter-08/postgres-manage-database.yaml` playbook, as explained in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Automation Controller – Credentials
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about the credentials in the automation controller at [https://docs.ansible.com/automation-controller/latest/html/userguide/credentials.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/credentials.xhtml).
    Please go to [https://docs.ansible.com/automation-controller/latest/html/userguide/credential_types.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/credential_types.xhtml)
    to learn more about custom credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new job template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A job template in the automation controller is a preconfigured definition with
    a set of parameters and a playbook for executing an Ansible automation job. To
    execute the same jobs several times, use a job template and pass the parameter
    as needed. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Templates** tab on the left-hand side of the dashboard. Then, click
    on **Add** and select **Add job template**, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.26 – Creating a job template ](img/B18383_12_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.26 – Creating a job template
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the details of the job template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.27 – Job template details  ](img/B18383_12_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.27 – Job template details
  prefs: []
  type: TYPE_NORMAL
- en: Job Templates in the Automation Controller
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the documentation at [https://docs.ansible.com/automation-controller/latest/html/userguide/job_templates.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/job_templates.xhtml)
    to learn more about how to customize job templates with additional options.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have used variables inside the playbook (*Figure 12.28*) to demonstrate
    the operations without complexity. In the actual environment, the variables can
    be fetched from additional variable files, group variables, host variables, or
    extra variables. Now, we must pass the variables and values to the job template
    instead of using the hardcoded variables in the Ansible playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.28 – Hardcoded variables in the Ansible playbook ](img/B18383_12_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.28 – Hardcoded variables in the Ansible playbook
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to override these values by passing the parameters to the playbook
    using the `extra_vars` automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Survey** tab of **Job template**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.29 – Job template survey ](img/B18383_12_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.29 – Job template survey
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new survey question by clicking the **Add** button and filling in
    the details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.30 – Job template survey form for collecting the NODES information
    ](img/B18383_12_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.30 – Job template survey form for collecting the NODES information
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we can see the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer variable’s name is `NODES`, which we will pass to the playbook for
    `hosts` (`hosts: "{{ NODES }}"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A multiple-choice menu will be displayed with options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Proceed to create survey questions for other variables as needed. Also, remember
    to enable the survey, as highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.31 – Ansible survey variables for the job template ](img/B18383_12_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.31 – Ansible survey variables for the job template
  prefs: []
  type: TYPE_NORMAL
- en: Remember to use the `password` type for the variables that carry sensitive information
    such as passwords or secrets.
  prefs: []
  type: TYPE_NORMAL
- en: Surveys in the Automation Controller
  prefs: []
  type: TYPE_NORMAL
- en: A survey can be used to set extra variables for the playbook with user-friendly
    forms and validations. Refer to the documentation at https://docs.ansible.com/automation-controller/latest/html/userguide/job_templates.xhtml#surveys
    to learn more about survey forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'We assume that the following variables will not change every time and do not
    need to be inside the survey form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, add them as extra variables and save the job template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.32 – Extra variables in the Ansible job template ](img/B18383_12_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.32 – Extra variables in the Ansible job template
  prefs: []
  type: TYPE_NORMAL
- en: Also pass variables such as `ansible_become_user` in the host variable or group
    variable section, but this will impact all the jobs on that node, which is not
    the desired configuration in this case.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to execute the automation job that we
    configured previously.
  prefs: []
  type: TYPE_NORMAL
- en: Executing an automation job from the automation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous sections, you configured many resources in the automation controller,
    such as the organization, projects, inventory, managed nodes, credentials, job
    templates, and more. Now, let’s test the job template by launching the automation
    job.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Collection and Execution Environment
  prefs: []
  type: TYPE_NORMAL
- en: Use the collection from the execution environment or the project repository
    (`COLLECTIONS_PATHS = ./collections`). Not all Ansible collections (or latest
    versions) will be available in the execution environment, and it is possible to
    create a custom execution environment with the required collections and libraries.
    Refer to the documentation at [https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml)
    to learn more about creating an execution environment. In this demonstration,
    we will be using the `community.postgresql` Ansible collection, which is already
    available in the project repository (refer to [*Chapter 8*](B18383_08.xhtml#_idTextAnchor144),
    *Helping the Database Team with Automation*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Templates** tab from the automation controller dashboard and find
    the PostgreSQL job template that we created in the previous section. Click on
    the **Launch Template** button (the small rocket icon) and wait for the survey
    template to pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.33 – Launching the job template from the automation controller
    ](img/B18383_12_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.33 – Launching the job template from the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the details in the survey’s form and click **Next**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.34 – Entering the details in the survey form ](img/B18383_12_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.34 – Entering the details in the survey form
  prefs: []
  type: TYPE_NORMAL
- en: 'The details will be displayed on the preview screen. Notice that the survey
    variables are passing as extra variables. Click on the **Launch** button and wait
    for the job screen to load:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.35 – Details of the job in preview ](img/B18383_12_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.35 – Details of the job in preview
  prefs: []
  type: TYPE_NORMAL
- en: 'The job will be executed on the target nodes. Every detail about the job will
    be displayed on the **Output** tab, including the playbook execution output, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.36 – Job execution output on the automation controller ](img/B18383_12_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.36 – Job execution output on the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: Verify the database and user creation on the database nodes (`dbnode1`) as needed.
  prefs: []
  type: TYPE_NORMAL
- en: The same job template can be used to execute the operations on different database
    nodes or databases as the variables are dynamic and do not need to be modified
    in the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to create basic resources and launch the automation
    job in the automation controller. In the next section, you will learn how to integrate
    other applications, such as the Jenkins CI/CD server, with the automation controller
    and trigger automated executions.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Jenkins with AAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jenkins (https://www.jenkins.io) is a well-known open source tool (written
    in the Java programming language) that can be used to implement **continuous integration/continuous
    delivery** (**CI/CD**) and deployment solutions. Automating the build and deployment
    is the key to effective DevOps practices. As shown in the following diagram, developers
    and testers can offload such tasks to CI/CD tools such as Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.37 – CI/CD workflow using Jenkins ](img/B18383_12_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.37 – CI/CD workflow using Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: 'Jenkins can execute many tasks natively or use plugins but for complex tasks,
    Jenkins can utilize the appropriate tools. For example, instead of calling complex
    scripts or commands inside the Jenkins pipeline, a specific job can be offloaded
    to the Ansible automation controller, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.38 – Jenkins integration with AAP for database operations ](img/B18383_12_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.38 – Jenkins integration with AAP for database operations
  prefs: []
  type: TYPE_NORMAL
- en: The automation controller will execute the job based on the parameters passed
    and return the result to Jenkins as feedback (success/fail and other messages).
  prefs: []
  type: TYPE_NORMAL
- en: GitOps and CI/CD Courses
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://www.techbeatly.com/gitops-cicd/](https://www.techbeatly.com/gitops-cicd/)
    to find free GitOps and CI/CD courses and certifications, including those for
    Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: In the following demonstration, you will reuse the database creation job template
    as part of deploying the ToDo application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins server must have been installed with the Ansible Tower plugin ([https://plugins.jenkins.io/ansible-tower](https://plugins.jenkins.io/ansible-tower)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge of Jenkins operations and configurations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `PostgreSQL - Create Database and User Access` job template must have been
    configured on the automation controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application repository ([https://github.com/ginigangadharan/nodejs-todo-demo-app](https://github.com/ginigangadharan/nodejs-todo-demo-app)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible Tower plugin for Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Ansible Tower plugin in Jenkins helps you execute automation jobs on Ansible
    Tower (or the automation controller) by passing the appropriate parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.39 – Ansible Tower plugin for Jenkins ](img/B18383_12_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.39 – Ansible Tower plugin for Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the plugin if you haven’t done so yet and create an Ansible Tower (automation
    controller) connection (add the appropriate credentials needed) under **Manage
    Jenkins** | **Configure System**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.40 – Automation controller configuration for the Ansible Tower
    plugin in Jenkins ](img/B18383_12_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.40 – Automation controller configuration for the Ansible Tower plugin
    in Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: Verify the connection from Jenkins to the Ansible automation controller by tapping
    the **Test Connection** button, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to create and configure multibranch
    pipelines in Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Multibranch pipelines in Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a multibranch pipeline in Jenkins using the ToDo app repository ([https://github.com/ginigangadharan/nodejs-todo-demo-app](https://github.com/ginigangadharan/nodejs-todo-demo-app)),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.41 – A multibranch pipeline in Jenkins ](img/B18383_12_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.41 – A multibranch pipeline in Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, configure the automated pipeline trigger by scanning the source repository
    every minute. By enabling this, Jenkins will scan the repository for changes every
    minute and trigger the build process automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.42 – Scanning multibranch pipeline triggers ](img/B18383_12_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.42 – Scanning multibranch pipeline triggers
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Jenkinsfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `Jenkinsfile` is a `Jenkinsfile`. The following screenshot shows the available
    `Jenkinsfile` in the `todo` application source repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.43 – A Jenkinsfile with environment variables ](img/B18383_12_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.43 – A Jenkinsfile with environment variables
  prefs: []
  type: TYPE_NORMAL
- en: In a production environment, sensitive variables need to be considered when
    storing vault services or credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows calling the database creation job in the automation
    controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.44 – Database creation stage in the Jenkinsfile ](img/B18383_12_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.44 – Database creation stage in the Jenkinsfile
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible_controller_job()` is written at the bottom of the `Jenkinsfile`, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.45 – ansible_controller_job in the Jenkinsfile ](img/B18383_12_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.45 – ansible_controller_job in the Jenkinsfile
  prefs: []
  type: TYPE_NORMAL
- en: Notice the `extraVars` parameter we are passing since those variables are mandatory
    and need to pass via extra variables or a survey form (which is not applicable
    in this case).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will explore the automated build trigger and automated
    database provisioning that can be done via the Ansible automation controller.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering a build in the Jenkins pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A new build will be triggered automatically whenever there is a change (new
    commit) in the repository or whenever the build is initiated manually. The following
    screenshot shows the build history in the job; notice that the **Creating Database**
    stage is highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.46 – Build jobs in the Jenkins pipeline ](img/B18383_12_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.46 – Build jobs in the Jenkins pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the build console logs and find the Ansible automation controller job
    execution with detailed output, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.47 – The Jenkins build console with Ansible job execution details
    ](img/B18383_12_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.47 – The Jenkins build console with Ansible job execution details
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned how to call automation controller jobs from a Jenkins
    pipeline and automate complex build steps.
  prefs: []
  type: TYPE_NORMAL
- en: Further enhancements to the Jenkins pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Explore the integration between Jenkins and the Ansible automation controller
    by adding more Ansible jobs to the pipeline, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a job template in the automation controller for building container images
    and push them to the container registry. (Refer to the Ansible artifacts from
    [*Chapter 10*](B18383_10.xhtml#_idTextAnchor178), *Managing Containers Using Ansible*.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a build step in the `Jenkinsfile` and call the automation controller job
    to build the container image for the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create another job template in the automation controller for deploying applications
    in a Kubernetes cluster by using the container image that was created in the previous
    stage. (Refer to the Ansible artifacts from [*Chapter 11*](B18383_11.xhtml#_idTextAnchor194),
    *Managing Kubernetes Using Ansible*.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a deployment step to the `Jenkinsfile` and call the automation controller
    job to deploy the updated application with the latest container image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, you will learn how to enable notifications in the automation
    controller and integrate it with the Slack messaging service.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating an automation controller with Slack and notification services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 3*](B18383_03.xhtml#_idTextAnchor052), *Automating Your Daily
    Jobs*, you learned how to use the `mail` module to send custom emails using Ansible.
    In the Ansible automation controller, it is possible to configure **Notifications**
    to send emails and messages based on job start, success, or fail status. The following
    notification types are supported in the automation controller:'
  prefs: []
  type: TYPE_NORMAL
- en: Email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IRC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webhook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grafana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mattermost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PagerDuty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rocket.Chat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twilio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple notifications can be created and required notifications can be enabled
    for the job template.
  prefs: []
  type: TYPE_NORMAL
- en: Creating email notifications in the automation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an email notification, open the **Notifications** tab from the dashboard
    and click **Add**. Select the type as **Email** and fill in the details, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: If the email server is open (no authentication required), then leave the **Username**
    and **Password** fields empty.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable TLS or SSL if the email server supports it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter an approved sender email (email whitelisting).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Save the form and create the notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.48 – Creating an email notification in the automation controller
    ](img/B18383_12_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.48 – Creating an email notification in the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created the notification, open the job template that you want
    to enable this notification for and select the **Notifications** tab. Toggle the
    switches for **Start**, **Success**, and **Failure** as needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.49 – Enabling notifications in the job template ](img/B18383_12_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.49 – Enabling notifications in the job template
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the notification will only be triggered if the job
    is successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the job template and verify that you can receive the email on job success.
    A sample email is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.50 – Sample email notification from the automation controller ](img/B18383_12_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.50 – Sample email notification from the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: 'Customize the notification message and its content by editing the notification
    entry, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.51 – Customizing the email notification in the automation controller
    ](img/B18383_12_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.51 – Customizing the email notification in the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to integrate automation control with
    Slack to enable notifications in the Slack channel.
  prefs: []
  type: TYPE_NORMAL
- en: Sending Slack notifications from the automation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Slack is a workplace messaging platform ([https://app.slack.com](https://app.slack.com))
    in which users can send instant messages and create calls, video conferences,
    and more. Slack conversations are organized as Slack channels and multiple channels
    can be created in a workplace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Slack is well known for its flexibility in integrating with your IT and application
    infrastructure. This is because it supports integration with about 2,400 applications
    ([https://slack.com/apps](https://slack.com/apps)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.52 – Slack integration (source: https://slack.com/integrations)
    ](img/B18383_12_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.52 – Slack integration (source: https://slack.com/integrations)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following demonstration, you will learn how to create a Slack authentication
    token to send notifications from the automation controller. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign up/log into Slack and access your existing workplace. (If you do not have
    a workplace to use, then create a new workplace by following the documentation
    at [https://slack.com/help/articles/206845317-Create-a-Slack-workspace](https://slack.com/help/articles/206845317-Create-a-Slack-workspace).)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use an existing channel in your workplace (or create a new channel for testing
    purposes by following the documentation at [https://slack.com/help/articles/201402297-Create-a-channel](https://slack.com/help/articles/201402297-Create-a-channel)).
    For this demonstration, we have created a new channel called `#database-operations`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open [https://api.slack.com](https://api.slack.com) in a web browser, click
    on the **Tutorials** menu (top right) and select **Publish interactive notifications**,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.53 – Publish interactive notifications tutorial ](img/B18383_12_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.53 – Publish interactive notifications tutorial
  prefs: []
  type: TYPE_NORMAL
- en: The tutorial will open at [https://api.slack.com/tutorials/tracks/actionable-notifications](https://api.slack.com/tutorials/tracks/actionable-notifications).
    Select **Create App** from the **Create a pre-configured app** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Slack will ask you to choose your workplace. Here, configure the app’s details,
    such as its name, redirect URL, and other items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the instructions in the tutorial to create the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the app has been created, open the app configuration and copy the OAuth
    token, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.54 – Copying the Slack app OAuth token ](img/B18383_12_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.54 – Copying the Slack app OAuth token
  prefs: []
  type: TYPE_NORMAL
- en: 'Log into the Ansible automation controller and create a new notification with
    its `#database-operations`). Customize the message as well if required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.55 – Creating a Slack notification in the automation controller
    ](img/B18383_12_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.55 – Creating a Slack notification in the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the notification settings for the job template and enable the newly created
    Slack notification, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.56 – Enabling the Slack notification for the job template ](img/B18383_12_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.56 – Enabling the Slack notification for the job template
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the job again and verify the Slack channel to see the message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.57 – Job notification in Slack from the automation controller ](img/B18383_12_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.57 – Job notification in Slack from the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: Explore the **Notifications** option with other applications to implement effective
    notifications for your team and workplace.
  prefs: []
  type: TYPE_NORMAL
- en: Slack Tutorials
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://api.slack.com/tutorials](https://api.slack.com/tutorials)
    to learn more about Slack and its available tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned how to integrate Ansible with Slack to enable notifications.
    Implement the same for other notification and messaging services such as Mattermost,
    Rocket.Chat, and others.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the enterprise automation solution called
    Red Hat AAP. First, you learned about the benefits of using AAP and its features.
    You also learned about the different components of AAP, such as its execution
    environment, automation controller, automation mesh, and Automation Hub.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you learned more about the automation controller by creating different
    resources such as organizations, projects, inventories, managed nodes and groups,
    credential job templates with survey forms and extra variables, and more. You
    also learned how to integrate the Jenkins CI/CD tool with Red Hat AAP to trigger
    the jobs automatically as part of the build and deployment pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you explored the notification options in the automation controller
    and tested them with different types of notifications such as email and Slack.
    All this knowledge will help you implement and manage automation using AAP and
    integrate AAP with different tools in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use Ansible Vault to manage secrets
    and sensitive information for Ansible artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Why choose Red Hat for automation?*: [https://www.redhat.com/en/topics/automation/why-choose-red-hat-for-automation](https://www.redhat.com/en/topics/automation/why-choose-red-hat-for-automation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Deploying Ansible Automation Platform 2.1*: [https://access.redhat.com/documentation/en-us/reference_architectures/2021/html-single/deploying_ansible_automation_platform_2.1/index](https://access.redhat.com/documentation/en-us/reference_architectures/2021/html-single/deploying_ansible_automation_platform_2.1/index)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Red Hat Ansible Automation Platform datasheet*: [https://www.redhat.com/en/resources/ansible-automation-platform-datasheet](https://www.redhat.com/en/resources/ansible-automation-platform-datasheet%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Control your content with private Automation Hub – Ansible blog*: [https://www.ansible.com/blog/control-your-content-with-private-automation-hub](https://www.ansible.com/blog/control-your-content-with-private-automation-hub%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What is a Red Hat AAP automation execution environment?*: [https://www.redhat.com/en/technologies/management/ansible/automation-execution-environments](https://www.redhat.com/en/technologies/management/ansible/automation-execution-environments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
