- en: Chapter 17. JIRA Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA can become cumbersome to manage when used by many users for different use
    cases, especially custom schemes that are shared among projects. Imagine a case
    where a project manager asks you to remove a certain custom field from one of
    his project's screens, but you accidentally remove it from other projects too.
    In this chapter, we will discuss the best practices JIRA administrators can employ
    to maintain their instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A word of caution before modifying default schemes and configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JIRA customization process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using project context to assign different options in multiple projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating too many custom fields—a factor in slow performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a custom field type wisely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JIRA's **Audit Log**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the announcement banner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing regular indexing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Final tips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A word of caution before modifying default schemes and configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A newly-installed, fresh JIRA instance comes with a lot of default schemes for
    issue types, workflows, field configurations, and permissions. These default configurations
    are suitable for simple bug tracking and have a process that is applicable to
    any generic project. Don't be tempted to start customizing the configurations
    too soon. If JIRA is being used for the first time in the company, then it's a
    good idea to pilot it with default configurations. This will give users a good
    idea of what JIRA has to offer and collect feedback from the users.
  prefs: []
  type: TYPE_NORMAL
- en: When you are ready to customize configurations, either start with the blank
    configuration, or create a copy of the default configuration and then make your
    changes in that.
  prefs: []
  type: TYPE_NORMAL
- en: The JIRA customization process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing JIRA should be considered a project in itself. It's quite easy to
    start making changes while configuring JIRA, but you should always plan your customization
    first and document them.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can perform these steps to begin the customization process:'
  prefs: []
  type: TYPE_NORMAL
- en: Pilot JIRA with default configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gather feedback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Document the proposed configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the configurations on **sandbox**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement it on production.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standardize the configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a **Change Control Board** (**CCB**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Piloting JIRA with default configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The move to a new tool always faces resistance from users. JIRA is no exception;
    however, JIRA has the advantage of being intuitive and it allows you to have a
    clear distinction between usage and administrative sections. When deploying JIRA
    for the first time, always use the default configurations and ask users to test
    it for a few days. This will make sure that users first get comfortable with the
    features that come with JIRA out of the box. This pilot should ideally be done
    for at least one candidate from each team, consisting of a project manager, project
    lead, developer, and tester.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering feedback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the end of the pilot phase, ask the users to give their feedback. The following
    questions can be asked on the feedback form:'
  prefs: []
  type: TYPE_NORMAL
- en: Were the default issue types sufficient for your project?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What changes would you like to perform in the workflow?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Were the default fields enough to capture the information?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you want e-mail notifications?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many types of users will be using JIRA?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you want some users to have restricted access?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What kinds of reports would you like to have?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The answers to these important questions will give you a very good understanding
    of desired customizations from various stakeholders in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting and finalizing the proposed configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Merely collecting the feedback is not enough to start the customizations. It's
    very important to first document these customizations in a document to describe
    the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed in detail how to gather the requirements in [Chapter 6](ch06.html
    "Chapter 6.  Sample Implementation of Use Cases"), *Sample Implementation of Use
    Cases*. Ideally, a separate document for each use case should be prepared. This
    document should be updated before making any changes in the system. This will
    ensure that if a new JIRA administrator joins the company, they will not have
    any problems understanding JIRA's customizations.
  prefs: []
  type: TYPE_NORMAL
- en: Once this document is prepared, share it with the stakeholders and ask them
    to give their input. Organize a meeting with them to fine-tune the requirements
    and make necessary changes to this document. Eventually, this document should
    have the details of all the actual customizations that will be performed in JIRA.
    What new issue types need to be created, workflows should be visualized in the
    documents along with the new states that need to be created, and permission schemes
    and notification schemes should also be mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: Testing configurations on sandbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the requirements are finalized, you should test them in a test environment
    first. For this, set up a sandbox JIRA instance (which is an exact copy of your
    production). All the new and old changes in the existing configuration should
    first be tested in the sandbox. It's really important to have the sandbox for
    cases when JIRA needs to be upgraded to a new version and when you want to evaluate
    a new plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The sandbox, which is an exact copy of production, will give the stakeholder
    a chance to test their requested customizations without worrying about any damage
    being done in production.
  prefs: []
  type: TYPE_NORMAL
- en: During this testing phase, the stakeholders will surely give you a lot of feedback
    and ask you to improvise certain customizations that they couldn't perceive earlier.
    Note down all these changes and make any necessary amendments to the document.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing on the production stage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the implementation is successful on the test environment, you can then
    perform the customizations manually, on production. At this time, the JIRA administrator
    will have all the information in front of them in the JIRA configuration document.
    Making actual implementations on production will not take much time.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you are making any changes in the JIRA instance, which is already
    being used by several users, then it's a good idea to first notify them of the
    change. You can write a short release note and mention the changes that are being
    made. This will avoid surprising the users with unexpected changes. Applying changes
    in the configurations usually doesn't require any downtime, but if you make changes
    in the workflow, it's always a good idea to do it when no one is using the instance.
    For this reason, notify users of any downtime well in advance.
  prefs: []
  type: TYPE_NORMAL
- en: Standardizing configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JIRA has a wide range of applications. It's an issue tracking and project management
    tool. This tool can be used not only for bug tracking, but also for test management,
    helpdesk, requirement management, and agile tracking.
  prefs: []
  type: TYPE_NORMAL
- en: Now initially, when JIRA is implemented, it will be customized for a specific
    use case for one or more projects, but eventually, as more teams start using JIRA,
    they will request more customizations. JIRA allows you to use the same configurations
    in multiple projects, but when the number of projects grows, the same schemes
    cannot be used for all of them. So, it becomes very important to standardize your
    configurations in JIRA and ask the new teams to follow them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following scenario in JIRA with three different use
    cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Use case** | **Number of projects** |'
  prefs: []
  type: TYPE_TB
- en: '| Test management | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Helpdesk | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Requirements management | 2 |'
  prefs: []
  type: TYPE_TB
- en: As you can see in the preceding table, there are multiple projects using the
    same configuration. Now, one of the project managers using the test management
    scheme may request that you add a new custom field in their project or make one
    of the existing fields mandatory. These minor customizations will affect all the
    other projects using the same configurations. We can limit these customizations
    to a single project by creating a new set of schemes, but this will lead to more
    maintenance for the JIRA administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid creating multiple schemes for the same use case and, before accepting
    any change in the existing configurations, talk to the stakeholders of all the
    projects using that configuration. If one project manager requests an additional
    custom field, discuss this with other project managers and make the changes after
    confirmation from all the stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: So, it's very important to standardize your configurations as much as possible,
    and reuse these configurations in other projects.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Customizing JIRA for Test Management"),
    *Customizing JIRA for Test Management*, and [Chapter 6](ch06.html "Chapter 6. 
    Sample Implementation of Use Cases"), *Sample Implementation of Use Cases*, we
    discussed how to customize JIRA in detail, with various examples.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a CCB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JIRA administrators have the responsibility of implementing customization requests.
    As discussed in the previous section, configurations should be standardized as
    much as possible, but sometimes changes need to be done in JIRA to support JIRA's
    requirements. Any change, be it large or small, needs to be analyzed first, because
    it may lead to further issues. I recommend a CCB, whose job is to study the customizations
    before implementing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'I recommend the following process:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a project in JIRA for support requests with various issue types such
    as bug, improvements, and new feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ask your users to raise a ticket in this project for any JIRA support.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the ticket is created, analyze the requested customizations and perform
    an impact analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is no impact, implement the changes directly in JIRA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is any impact on other projects, discuss the changes with the stakeholders
    of the other projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the basis of your discussion with stakeholders, make a decision on whether
    or not to implement the change in JIRA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Various scenarios for impact analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the customization requests from users and their
    possible impact on the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Request** | **Used by other projects?** | **Impact** | **Conclusion** |'
  prefs: []
  type: TYPE_TB
- en: '| Addition of a new custom field | Yes | Minor | Confirm this with other stakeholders
    first |'
  prefs: []
  type: TYPE_TB
- en: '| Addition of new values in a select list custom field | Yes | Minor | Either
    confirm this with other stakeholders or use context to create a different set
    of values for that project |'
  prefs: []
  type: TYPE_TB
- en: '| Change the workflow condition | Yes | Major | This is a major change and
    should be discussed with all stakeholders |'
  prefs: []
  type: TYPE_TB
- en: '| Addition of a new workflow state | Yes | Major | This is a major change and
    should be discussed with all stakeholders |'
  prefs: []
  type: TYPE_TB
- en: '| Create a mandatory custom field | Yes | Major | This is a major change and
    should be discussed with all stakeholders |'
  prefs: []
  type: TYPE_TB
- en: '| Installing a new plugin | Yes, applicable globally | Major | Install this
    plugin on sandbox first and ask the stakeholders to evaluate |'
  prefs: []
  type: TYPE_TB
- en: '| Creation of new issue type | Yes | Major | Discuss the needs of this new
    issue type with all stakeholders |'
  prefs: []
  type: TYPE_TB
- en: These are some examples of the requests that JIRA administrators will receive.
    For each request, analyze the impact first before implementing it in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Using project context to assign different options in multiple projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say we have a custom field called **Customer**. This is a select list
    with different values, which users can select while creating an issue. If JIRA
    is used by multiple teams, each working on a different project, it's quite possible
    that the customer list will be different. One project may cater to a different
    set of customers than others. One approach to deal with this situation is to enter
    all the customers in a single list, but this will lead to confusion among the
    team members who raise the tickets and it will also lead to errors, because users
    might select the wrong customers.
  prefs: []
  type: TYPE_NORMAL
- en: A different custom field can be created for each project to deal with this problem
    (each having its own list of customers), but this leads to redundancy, as we would
    store the same type of information in each list.
  prefs: []
  type: TYPE_NORMAL
- en: 'JIRA''s custom fields offer a solution to this problem using context. Perform
    these steps to create a new context:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Issues** | **Custom Fields** (under **FIELDS**)
    and you will see the list of all the custom fields in your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the gear icon for your custom fields and select **Configure**:![Using
    project context to assign different options in multiple projects](img/image_17_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the next screen for **Configure Custom Field: Customer**, click on the **Add
    new context** link.![Using project context to assign different options in multiple
    projects](img/image_17_002.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen for **Add configuration scheme context**, enter the **Configuration
    scheme label** and **Description**. Under **Choose applicable context**, select
    the name of the project for which this context will be available:![Using project
    context to assign different options in multiple projects](img/image_17_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now have a new **Context for Demo project**, but there are no options
    yet. Click on the **Edit Options** link:![Using project context to assign different
    options in multiple projects](img/image_17_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, enter the customer names that are relevant only to a particular
    project:![Using project context to assign different options in multiple projects](img/image_17_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will have two sets of options for this custom field. One is default
    and the other is for a specific project:![Using project context to assign different
    options in multiple projects](img/image_17_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating too many custom fields – A factor in slow performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just discussed how companies should devise a process to manage their customizations
    in their JIRA instance. As the JIRA instance grows in terms of number of issues,
    projects, and users, the performance of the instance will start degrading over
    a period of time. One of the major factors that leads to slow performance is a
    lot of custom fields.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA administrators create custom fields to store data that can be filtered
    out in the reports. This is fine, but an attempt should be made to reuse the existing
    custom fields. For this reason, create fields with generic names so that they
    can be reused easily in different projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some generic custom fields that can be created in JIRA
    instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Custom field** | **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Client**/**Customer** | Select List | This uses project context to create
    different options for multiple projects |'
  prefs: []
  type: TYPE_TB
- en: '| **Category** | Select List | These labels and components should be used in
    most cases, but this generic field can be used in many projects with different
    options using project context |'
  prefs: []
  type: TYPE_TB
- en: '| **External ID** | Text Field | This field will be used to store the ID of
    issues, which is stored in some external tool |'
  prefs: []
  type: TYPE_TB
- en: '| **Type of testing** | Select List | This field can be used when JIRA is used
    for test management |'
  prefs: []
  type: TYPE_TB
- en: '| **Start date** | Date Picker | JIRA does come with a due date, but the start
    date of a task is not available |'
  prefs: []
  type: TYPE_TB
- en: Think twice before adding new custom fields in the system. Your users will request
    that you create many fields, but remember, having too many custom fields can cause
    performance issues. Always try to optimize the use of custom fields. For instance,
    before creating custom fields for **Text Field (multiline)**, try to reuse the
    **Description** field; if you want users to fill in the details using a template
    with a predefined text template, then use the method described in [Chapter 14](ch14.html
    "Chapter 14. Customizing Look, Feel, and Behavior"), *Customizing Look, Feel,
    and Behavior*.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a custom field type wisely
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are gathering the requirements from various stakeholders, they will
    ask you to create new custom fields to capture a specific piece of information.
    In the previous section, we discussed how you should always try to optimize the
    usage of these fields. However, once you have decided on the custom fields that
    need to be created, before creating them in the instance, spend some time working
    with the types of custom fields. Once created, the type of fields cannot be changed
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if you want to store a single value, use **Select List (single
    choice)**, whereas to select multiple values, use **Select List (multiple choices)**.
    To capture dates, there is a date picker, and to store lengthy text, **Text Field
    (multiline)** can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Defining permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's very important to secure your data stored in JIRA. There could be several
    client projects in JIRA whose information cannot be shared with other teams. JIRA
    can also be accessed by your clients and it becomes more important to hide other
    projects from your clients and only give them access to the projects relevant
    to them. In [Chapter 4](ch04.html "Chapter 4. Customizing JIRA for Test Management"),
    *Customizing JIRA for Test Management*, we discussed how a project can be accessed
    only by users of a specific group.
  prefs: []
  type: TYPE_NORMAL
- en: 'JIRA comes with an amazing permission system, which allows configuration at
    a granular level. JIRA has three types of permissions. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Global permissions**: These permissions apply to the whole JIRA instance.
    Permissions such as who can log in and who will be the JIRA administrator can
    be configured here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project permissions**: These permissions apply to a specific project. Permissions
    such as who can access the project, create issues, and close issues can be configured
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issue security levels**: These permissions apply to the issues of a specific
    project to control who can view the issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The permissions need to be defined at all these levels, so make sure that people
    with right access can view the data in JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA's Audit Log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is an **A**udit Log**** in JIRA that keeps track of all the configuration
    changes that happen in JIRA. This log is quite useful for tracking any changes
    in the schemes; the best part is that this log is available through the JIRA administrative
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s access JIRA''s **Audit Log**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **JIRA Administration** | **System** | **Audit Log** (under **TROUBLESHOOTING
    AND SUPPORT**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![JIRA''s Audit Log](img/image_17_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, events such as new user creation
    and modifications in the user group are recorded. The changes tracked by **Audit
    Log** are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: User management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permission changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workflow changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notification scheme changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom field changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JIRA administrator can refer to this **Audit Log** for troubleshooting purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the announcement banner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA is a critical part of the software development life cycle and is used to
    store many kind of issues. Users rely on JIRA to check whether their daily tasks
    and managers use JIRA to keep track of their projects. JIRA administrators sometimes
    need to perform maintenance activities that require downtime for users. As a good
    practice, all the users, or at least the stakeholders, should be notified, but
    to avoid any surprises for the user, it's a good idea to give them an indication
    of any planned downtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'JIRA has an option to add an announcement banner, which is visible all across
    the JIRA instance just after the main navigation. Perform these steps to add the
    announcement banner:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **System** | **Announcement Banner** (under
    **USER INTERFACE**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Announcement** text area, enter your message and click on the **Set
    Banner** button. You can also include HTML tags. Select **Visibility Level** as
    **Public - Show to anyone** to show this announcement to users who are not even
    logged in:![Adding the announcement banner](img/image_17_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot displays the announcement:![Adding the announcement
    banner](img/image_17_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding an introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you deploy new JIRA instances, users need to be trained; however, JIRA
    doesn't require in-depth training to start with basic usage and it's a good practice
    to give useful introductory information to users. This introduction will be visible
    not only to the users who are logged in, but also to the users who are logged
    out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform these steps to add the introductory text:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **System** | **General Configuration** and
    click on the **Edit Settings** button in the top-right corner:![Adding an introduction](img/image_17_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the new screen that opens up, scroll down until you see the text area for
    **Introduction**. Just type in the instructions for the users and click on the
    **Update** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, visit your dashboard and note the **Introduction** box, which is updated
    with your message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Adding an introduction](img/image_17_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Performing regular indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](ch03.html "Chapter 3. Reporting – Using Charts to Visualize the
    Data"), *Searching in JIRA*, we discussed in detail the search capability of JIRA
    and how to find the information you are looking for. JIRA maintains and builds
    an internal search index, which is important for the quick retrieval of data.
    However, after making configuration changes, such as the creation of new field
    configuration schemes, adding new custom fields, and installing new plugins, the
    search index becomes out of sync. It's important to rebuild this search index
    from time to time so that users experience fast search times and can find the
    information they are looking for easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever you make configuration-level changes that involve the search index
    (such as the creation of a new custom field), JIRA will prompt administrators
    to perform the search and you will get a message similar to the following in the
    administration section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing regular indexing](img/image_17_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can either click on the **Indexing** link that appears along with this message
    or navigate to JIRA **Administration** | **System** | **Indexing** (under **ADVANCED**)
    to perform the indexing process.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will get two options to perform **Re-Indexing**. The first option is **Background
    re-index**, which doesn''t lock the JIRA instance and allows users to continue
    working on the JIRA instance, but takes more time. The second option is **Lock
    JIRA and rebuild index**, which locks the instance and blocks users from accessing
    JIRA, but is quite quick:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing regular indexing](img/image_17_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Re-Index** button to start the re-indexing process. Depending
    on the size of your instance, this process may take anywhere from a few seconds
    to a few hours, for large instances.
  prefs: []
  type: TYPE_NORMAL
- en: So, plan your indexing for every 15 days, during a period when there are fewer
    users accessing the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Final tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apart from the information shared in this chapter, there are some important
    maintenance activities, which any JIRA administrator should take care of to ensure
    the longevity and smooth functioning of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform backups from time to time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean up old, big log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plan your re-index only when it is prompted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scan your log file regularly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run **Integrity Checker**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These additional points should be part of your maintenance checklist.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered some of the best practices JIRA administrators should
    follow to maintain their instances. We discussed the customization process they
    should employ in their company to ensure that their JIRA instance doesn't get
    messed up with tons of configurations. We also covered some important aspects
    of housekeeping and regular maintenance activities good JIRA administrators follow.
  prefs: []
  type: TYPE_NORMAL
- en: What should you do when JIRA is running slow or not working at all? As JIRA
    administrators, it's important to make sure that the JIRA service is not impacted.
    JIRA is a critical tool as it's a part of the development process. Developers
    rely on it to check their day-to-day tasks. In the next and final chapter, we
    will cover some common problems that may arise in your instance and, most importantly,
    how to troubleshoot these issues.
  prefs: []
  type: TYPE_NORMAL
