- en: Chapter 7. Putting It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 整合所有内容
- en: In this, our final chapter, we will look at how we put everything we have learned
    in the previous chapters together along with how it could fit with your development
    and deployment workflows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章，我们将回顾如何将前面各章所学的内容结合起来，并探讨它如何与您的开发和部署工作流契合。
- en: Also, we will talk about how to best describe Docker to others, typically you
    will find that people will assume that Docker containers are just like virtual
    machines. We will also look at what the benefits are along with some use cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将讨论如何向他人最好地描述 Docker，通常你会发现人们会认为 Docker 容器就像虚拟机一样。我们还将探讨 Docker 的优势以及一些使用案例。
- en: Workflows
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流
- en: 'The first five chapters of this book work through a typical workflow for working
    with Docker containers through development all the way through to production:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的前五章介绍了一个典型的工作流，涵盖了从开发到生产环境中使用 Docker 容器的全过程：
- en: Local development & packaging ([Chapter 1](ch01.html "Chapter 1. Installing
    Docker Locally"), *Installing Docker Locally* and [Chapter 2](ch02.html "Chapter 2. Launching
    Applications Using Docker"), *Launching Applications Using Docker*)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地开发与打包（[第1章](ch01.html "第1章. 本地安装 Docker")，*本地安装 Docker* 和 [第2章](ch02.html
    "第2章. 使用 Docker 启动应用程序")，*使用 Docker 启动应用程序*）
- en: Staging and remote testing ([Chapter 3](ch03.html "Chapter 3. Docker in the
    Cloud"), *Docker in the Cloud*)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂存与远程测试（[第3章](ch03.html "第3章. Docker 在云端")，*Docker 在云端*）
- en: Production ([Chapter 4](ch04.html "Chapter 4. Docker Swarm"), *Docker Swarm*
    and [Chapter 5](ch05.html "Chapter 5. Docker Plugins"), *Docker Plugins*)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境（[第4章](ch04.html "第4章. Docker Swarm")，*Docker Swarm* 和 [第5章](ch05.html "第5章.
    Docker 插件")，*Docker 插件*）
- en: On-going support ([Chapter 6](ch06.html "Chapter 6. Troubleshooting and Monitoring"),
    *Troubleshooting and Monitoring*)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续支持（[第6章](ch06.html "第6章. 故障排除与监控")，*故障排除与监控*）
- en: In our first few chapters we learned how to install and interact with Docker
    locally, typically when developing an application or software stack a developer
    or system administrator will test locally first.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们学习了如何在本地安装和使用 Docker，通常在开发应用程序或软件堆栈时，开发人员或系统管理员会先在本地进行测试。
- en: Once the application / stack has been fully developed you can share it using
    the Docker Hub as both a public or private image, or if your image contains things
    you do now want to distribute via a third party you can host your own Docker Registry.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序/堆栈完全开发完成，你可以通过 Docker Hub 共享它，作为公有或私有镜像，或者如果你的镜像包含一些你不想通过第三方分发的内容，你可以托管自己的
    Docker 注册表。
- en: Once you have your packaged image, you may need other people to test it. As
    your image is available in a registry your colleagues or friends can pull your
    image and run it as you intended locally on their own machine without the worry
    of having to install and configure either your application or software stack.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了打包好的镜像，你可能需要其他人来测试它。因为你的镜像已在注册表中可用，所以你的同事或朋友可以拉取你的镜像，并按你预期的方式在他们自己的机器上本地运行，而不必担心安装和配置你的应用程序或软件堆栈。
- en: If you need people to test remotely then you can spin up a Docker host on a
    public cloud provider and quickly deploy your application or software stack there.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要让其他人进行远程测试，可以在公有云提供商上启动一个 Docker 主机，并迅速在那部署你的应用程序或软件堆栈。
- en: Once everyone is happy you can deploy your application / software stack a servicein
    a multi-host cluster running Docker Swarm, this means that your service will be
    running in both a highly available and easy maintain environment. Deploying as
    a service will also allow you to easily roll out updates for your application
    or software stack using Swarms in-built service update features.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦大家都满意，你可以在 Docker Swarm 运行的多主机集群中部署你的应用程序/软件堆栈服务，这意味着你的服务将运行在一个高可用且易于维护的环境中。作为服务进行部署，还可以让你利用
    Swarm 内置的服务更新功能轻松地推出应用程序或软件堆栈的更新。
- en: If you need share or persist storage between your containers or hosts then you
    can install one of the many volume plugins, likewise if you need to something
    more advanced than the multi-host networking provided by Swarm, no problem, replace
    it with a network plugin, remember "batteries included, but replaceable".
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在容器或主机之间共享或持久化存储，可以安装众多卷插件中的一个；同样，如果你需要比 Swarm 提供的多主机网络更高级的功能，也没问题，可以用网络插件替换它，记住，“内置电池，但可以替换”。
- en: Finally, if you need to debug your images or running container you can use the
    commands and tools discussed in [Chapter 6](ch06.html "Chapter 6. Troubleshooting
    and Monitoring"), *Troubleshooting and Monitoring*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你需要调试你的镜像或正在运行的容器，你可以使用[第6章](ch06.html "第6章：故障排除与监控")中讨论的命令和工具，*故障排除与监控*。
- en: Describing containers
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述容器
- en: Compartmentalization that comprises both virtualization and containerization
    is the new normal for IT agility. Virtualization has been the enigmatic foundation
    for the enormous success of cloud computing. Now with the containerization idea
    becoming ubiquitous and usable, there is a renewed focus on using containers for
    faster application building, deployment, and delivery. Containers are distinctively
    fitted with a few game-changing capabilities and hence there is a rush in embracing
    and evolving the containerization technologies and tools.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 包含虚拟化和容器化的隔离化是IT敏捷性的新时代常态。虚拟化一直是云计算巨大成功的神秘基础。现在，随着容器化理念的普及和可用，重新聚焦于利用容器加速应用程序的构建、部署和交付。容器具有一些改变游戏规则的独特功能，因此人们纷纷接受并推动容器化技术和工具的发展。
- en: Essentially a container is lightweight, virtualized, portable, and the software-defined
    environment in which software can run in isolation of other software running on
    the same physical host. The software that runs inside a container is typically
    a single-purpose application. Containers bring forth the much-coveted modularity,
    portability, and simplicity for IT environments. Developers love containers because
    they speed up the software engineering whereas operation team loves because they
    can just focus on runtime tasks such as logging, monitoring, lifecycle management
    and resource utilization rather than deployment and dependency management.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，容器是轻量的、虚拟化的、可移植的，是一个软件定义的环境，软件可以在其中独立运行，不与同一物理主机上运行的其他软件发生干扰。运行在容器内的软件通常是单一功能的应用程序。容器为IT环境带来了备受追捧的模块化、可移植性和简化性。开发人员喜爱容器，因为它们加速了软件工程的进程，而运维团队则喜爱容器，因为他们可以专注于运行时任务，如日志记录、监控、生命周期管理和资源利用，而不必担心部署和依赖管理。
- en: Describing Docker
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述Docker
- en: Linux containers are hugely complicated and not user-friendly. Having realized
    the fact that several complexities are coming in the way of massively producing
    and fluently using containers, an open-source project got initiated with the goal
    of deriving a sophisticated and modular platform comprising an enabling engine
    for simplifying and streamlining various containers' lifecycle phases. That is,
    the Docker platform is built to automate the crafting, packaging, shipping, deployment
    and delivery of any software application embedded inside a lightweight, extensible,
    and self-sufficient container.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Linux容器非常复杂且不友好。认识到多种复杂因素妨碍了容器的广泛生产和流畅使用，一个开源项目应运而生，旨在提供一个精密且模块化的平台，包含一个简化和优化容器生命周期各阶段的引擎。也就是说，Docker平台的构建目标是自动化任何软件应用程序的设计、打包、运输、部署和交付，这些应用程序都嵌入在一个轻量、可扩展且自给自足的容器内。
- en: Docker is being positioned as the most flexible and futuristic containerization
    technology in realizing highly competent and enterprise-class distributed applications.
    This is to make deft and decisive impacts as the brewing trend in the IT industry
    is that instead of large monolithic applications distributed on a single physical
    or virtual server, companies are building smaller, self-defined and sustainable,
    easily manageable and discrete ones. In short, services are becoming microservices
    these days to give the fillip to the containerization movement.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker被定位为实现高效且企业级分布式应用的最灵活且具有前瞻性的容器化技术。这一定位旨在对IT行业中的新兴趋势产生巧妙且决定性的影响：现在，企业正构建更小、更自定义、更可持续、易于管理且离散的应用，而不是单一物理或虚拟服务器上分布的大型单体应用。简而言之，服务正在成为微服务，以推动容器化的进程。
- en: The Docker platform enables artistically assembling applications from disparate
    and distributed components and eliminates any kind of deficiencies and deviations
    that could come when shipping code. Docker through a host of scripts and tools
    simplifies the isolation of software applications and makes them self-sustainable
    by running them in transient containers. Docker brings the required separation
    for each of the applications from one another as well as from the underlying host.
    We have been hugely accustomed to virtual machines that are formed through an
    additional layer of indirection in order to bring the necessary isolation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 平台使得从不同的、分布式的组件中艺术性地组装应用成为可能，消除了在代码交付过程中可能出现的任何缺陷和偏差。通过一系列脚本和工具，Docker
    简化了软件应用的隔离，使它们通过在临时容器中运行变得自给自足。Docker 为每个应用之间以及与底层主机之间提供了所需的隔离。我们已经习惯了通过额外的间接层来形成虚拟机，以提供必要的隔离。
- en: This additional layer and overhead consumes a lot of precious resources and
    hence it is an unwanted cause for the slowdown of the system. On the other hand,
    Docker containers share all the resources (compute, storage and networking) to
    the optimal level and hence can run much faster. Docker images, being derived
    in a standard form, can be widely shared and stocked easily for producing bigger
    and better application containers. In short, the Docker platform lays a stimulating
    and scintillating foundation for optimal consumption, management, and maneuverability
    of various IT infrastructures
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个额外的层和开销消耗了大量宝贵的资源，因此它是系统变慢的一个不必要原因。另一方面，Docker 容器共享所有资源（计算、存储和网络），并能够在最优水平上运行，因此可以更快地执行。由于
    Docker 镜像采用标准形式生成，因此可以广泛共享并轻松存储，从而生成更大更好的应用容器。简而言之，Docker 平台为各种 IT 基础设施的最佳消费、管理和操作性奠定了激励人心的基础。
- en: The Docker platform is an open-source containerization solution that smartly
    and swiftly automates the bundling of any software applications and services into
    containers and accelerates the deployment of containerized applications in any
    IT environments (local or remote systems, virtualized or bare metal machines,
    generalized or embedded devices, etc.). The container lifecycle management tasks
    are fully taken care of by the Docker platform. The whole process starts with
    the formation of a standardized and optimized image for the identified software
    and its dependencies. Now the Docker platform takes the readied image to form
    the containerized software. There are image repositories made available publicly
    as well as in private locations. Developers and operations teams can leverage
    them to speed up software deployment in an automated manner.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 平台是一个开源的容器化解决方案，能够聪明而迅速地将任何软件应用和服务打包成容器，并加速容器化应用在任何 IT 环境中的部署（本地或远程系统、虚拟化或裸机、通用设备或嵌入式设备等）。容器生命周期管理任务完全由
    Docker 平台负责。整个过程从为已识别的软件及其依赖关系形成标准化且优化的镜像开始。接着，Docker 平台利用准备好的镜像构建容器化软件。镜像仓库有公开的，也有私有的，开发者和运维团队可以利用这些仓库以自动化的方式加速软件部署。
- en: The Docker ecosystem is rapidly growing with a number of third-party product
    and tool developers in order to make Docker an enterprise-scale containerization
    platform. It helps to skip the setup and maintenance of development environments
    and language-specific tooling. Instead, it focuses on creating and adding new
    features, fixing issues and shipping software. Build once and run everywhere is
    the endemic mantra of the Docker-enabled containerization. Concisely speaking,
    the Docker platform brings in the following competencies.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 生态系统正在迅速发展，许多第三方产品和工具开发者正在努力将 Docker 打造成企业级的容器化平台。它有助于跳过开发环境和特定语言工具的设置与维护，而是专注于创建和添加新功能、修复问题和交付软件。“构建一次，到处运行”是
    Docker 启用容器化的基本口号。简而言之，Docker 平台带来了以下几项能力。
- en: '**Agility**: Developers have freedom to define environments and the ability
    to create applications. IT Operation team can deploy applications faster allowing
    the business to outpace competition.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏捷性**：开发者可以自由定义环境并创建应用，IT 运维团队可以更快地部署应用，帮助企业超越竞争对手。'
- en: '**Controllability**: Developers own all the code from infrastructure to application.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可控性**：开发者拥有从基础设施到应用的所有代码。'
- en: '**Manageability**: IT operation team members have the manageability to standardize,
    secure, and scale the operating environment while reducing overall costs to the
    organization.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可管理性**：IT 运维团队成员可以管理标准化、安全性和扩展操作环境，同时降低组织的总体成本。'
- en: Distinguishing Docker containers
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分 Docker 容器
- en: 'Precisely speaking, Docker containers wrap a piece of software in a complete
    filesystem that contains everything needed to run: source code, runtime, system
    tools, and system libraries (anything that can be installed on a server). This
    guarantees that the software will always run the same, regardless of its operating
    environment:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 精确来说，Docker 容器将软件包装在一个完整的文件系统中，其中包含运行所需的一切：源代码、运行时、系统工具和系统库（可以安装在服务器上的任何东西）。这保证了软件无论在哪种操作环境下都能始终运行相同：
- en: Containers running on a single machine share the same operating system kernel.
    They start instantly and use less RAM. Container images are constructed from layered
    filesystems and share common files, making disk usage and image downloads much
    more efficient.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在单台机器上运行的容器共享相同的操作系统内核。它们启动迅速并且使用的 RAM 较少。容器镜像由分层文件系统构建，并共享通用文件，使得磁盘使用和镜像下载更加高效。
- en: Docker containers are based on open standards. This standardization enables
    containers to run on all major Linux distributions and other operating systems
    such as Windows and macOS.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 容器基于开放标准。这种标准化使得容器能够在所有主要的 Linux 发行版以及其他操作系统如 Windows 和 macOS 上运行。
- en: There are several benefits being associated with Docker containers as enlisted
    below.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Docker 容器相关的有几个好处，如下所列。
- en: '**Efficiency**: Containers running on a single machine all leverage a common
    kernel so they are lightweight, start instantly and make more efficient use of
    RAM.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：在单台机器上运行的容器都利用共同的内核，因此它们轻量级、启动迅速，并且更有效地使用 RAM。'
- en: '**Resource sharing** among workloads allows greater efficiency compared to
    the use of dedicated and single-purpose equipment. This sharing enhances the utilization
    rate of resources'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源共享** 允许工作负载之间比使用专用和单一用途设备更高效。这种共享增强了资源的利用率。'
- en: '**Resource partitioning** ensures that resources are appropriately segmented
    to meet up the system requirements of each workload. Another objective for this
    partitioning is to prevent any kind of untoward interactions among workloads.'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源分区** 确保资源被适当地分割以满足每个工作负载的系统需求。此分区的另一个目标是防止任何工作负载之间的不良交互。'
- en: '**Resource as a Service** (**RaaS**): Various resources can be individually
    and collectively chosen, provisioned and given to applications directly or to
    users to run applications.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源即服务** (**RaaS**)：可以独立选择、配置和提供各种资源，直接供应到应用程序或用户以运行应用程序。'
- en: '**Native Performance**: Containers guarantee higher performance due to its
    lightweight nature and less wastage'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地性能**：由于其轻量级和更少浪费，容器保证了更高的性能。'
- en: '**Portability**: Applications, dependencies, and configurations are all bundled
    together in a complete filesystem, ensuring applications work seamlessly in any
    environment (virtual machines, bare metal servers, local or remote, generalized
    or specialized machines, etc.). The main advantage of this portability is it is
    possible to change the runtime dependencies (even programming language) between
    deployments. Couple this with Volume plugins and your containers are truly portable.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：应用程序、依赖项和配置都打包在一个完整的文件系统中，确保应用程序在任何环境中无缝运行（虚拟机、裸金属服务器、本地或远程、通用或专用机器等）。这种可移植性的主要优势是可以在部署之间更改运行时依赖关系（甚至编程语言）。结合
    Volume 插件，您的容器真正具有可移植性。'
- en: '**Real-time Scalability**: Any number of fresh containers can be provisioned
    in a few seconds in order to meet up the user and data loads. On the reverse side,
    additionally provisioned containers can be knocked down when the demand goes down.
    This ensures higher throughput and capacity on demand. Tools like:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时可伸缩性**：可以在几秒钟内配置任意数量的新容器，以满足用户和数据负载。相反地，当需求降低时，额外配置的容器可以被关闭。这确保了更高的吞吐量和按需容量。类似的工具有：'
- en: Docker Swarm
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Kubernetes ([https://kubernetes.io/](https://kubernetes.io/))
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes ([https://kubernetes.io/](https://kubernetes.io/))
- en: Apache Mesos([http://mesos.apache.org/](http://mesos.apache.org/))
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Mesos([http://mesos.apache.org/](http://mesos.apache.org/))
- en: DC/OS ([https://dcos.io/](https://dcos.io/))
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DC/OS ([https://dcos.io/](https://dcos.io/))
- en: To name but a few of the clustering solutions which further simplify elastic
    scaling
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅举几个进一步简化弹性扩展的集群解决方案。
- en: '**High Availability**: By running with multiple containers, redundancy can
    be built into the application. If one container fails, then the surviving peers
    – which are providing the same capability – continue to provide service. With
    orchestration, failed containers can be automatically recreated (rescheduled)
    either on the same or a different host, restoring full capacity and redundancy.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：通过运行多个容器，可以将冗余构建到应用程序中。如果一个容器失败，那么其他提供相同功能的存活容器将继续提供服务。通过 orchestration，失败的容器可以自动重新创建（重新调度），无论是在同一宿主机还是不同宿主机上，从而恢复完全的容量和冗余性。'
- en: '**Maneuverability**: Applications running in Docker containers can be easily
    modified, updated or extended without impacting other containers in the host.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可操作性**：运行在 Docker 容器中的应用程序可以轻松修改、更新或扩展，而不会影响宿主机中的其他容器。'
- en: '**Flexibility**: Developers are free to use whichever programming languages
    and development tools they prefer.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：开发人员可以自由使用他们喜欢的任何编程语言和开发工具。'
- en: '**Clusterability**: Containers can be clustered for specific purposes on demand
    and there are integrated management platforms for cluster-enablement and management.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群化**：容器可以按需集群化用于特定目的，并且有集成的管理平台用于集群启用和管理。'
- en: '**Composability**: Software services hosted in containers can be discovered,
    matched for, and linked to form business-critical, process-aware and composite
    services.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可组合性**：托管在容器中的软件服务可以被发现、匹配并链接，以形成对业务至关重要的、面向过程的和复合的服务。'
- en: '**Security**: Containers isolate applications from one another and the underlying
    infrastructure by providing an additional layer of protection for the application'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：容器通过为应用程序提供额外的保护层，将应用程序与彼此及底层基础设施隔离开来。'
- en: '**Predictability**: With immutable images, the image always exhibits the same
    behavior everywhere because the code is contained in the image. That means a lot
    in terms of deployment and in the management of the application lifecycle.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可预测性**：通过不可变镜像，镜像始终在任何地方表现出相同的行为，因为代码被包含在镜像中。这在部署和管理应用生命周期方面具有重要意义。'
- en: '**Repeatability**: With Docker, one can build an image, test that image and
    then use that same image in production.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重复性**：使用 Docker，可以构建镜像、测试镜像，然后在生产环境中使用相同的镜像。'
- en: '**Replicability**: With containers, it is easy to instantiate identical copies
    of full application stack and configuration. These can then be used by new hires,
    partners, support teams, and others to safely experiment in isolation.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可复制性**：使用容器，可以轻松实例化相同的完整应用栈和配置的副本。这些副本可以供新员工、合作伙伴、支持团队和其他人使用，以安全地进行隔离实验。'
- en: Virtual Machines versus containers
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟机与容器
- en: Containers quite drastically vary from the highly visible and viable **virtual
    machines** (**VMs**). Virtual machines represent hardware virtualization whereas
    containers facilitate operating system-level virtualization. Some literature points
    out that virtual machines are system or OS containers whereas containers typically
    stand for application containers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 容器与高度可见且可行的**虚拟机**（**VMs**）有显著区别。虚拟机代表硬件虚拟化，而容器则实现操作系统级别的虚拟化。一些文献指出，虚拟机是系统或操作系统容器，而容器通常代表应用程序容器。
- en: On the functional side, containers are like VMs, but there are dissimilar in
    many other ways. Like virtual machines, containers too share the various system
    resources such as processing, memory, storage, etc. The key difference is that
    all containers in a host machine share the same OS kernel of the host operating
    system.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能方面，容器类似于虚拟机，但在许多其他方面有所不同。像虚拟机一样，容器也共享各种系统资源，如处理、内存、存储等。关键的不同点是，宿主机器中的所有容器共享宿主操作系统的相同内核。
- en: Though there is heavy sharing, containers intrinsically maintain a high isolation
    by keeping applications, runtimes, and other associated services separated from
    each other using the recently incorporated kernel features such as namespaces
    and cgroups.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在大量共享，容器本质上通过使用最近引入的内核功能（如命名空间和控制组）将应用程序、运行时和其他相关服务相互隔离，从而保持高度的隔离性。
- en: On the resource provisioning front, application containers can be realized in
    a few seconds, whereas virtual machines often take a few minutes. Containers also
    allow direct access to device drivers through the kernel and this makes I/O operations
    faster.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源配置方面，应用容器可以在几秒钟内实现，而虚拟机通常需要几分钟。容器还允许通过内核直接访问设备驱动程序，从而加速 I/O 操作。
- en: Workload migration to nearby or faraway cloud environments can be accelerated
    with the containerization capability. The tools and APIs provided by the Docker
    container technology are very powerful and more developer-friendly than those
    available with VMs.These APIs allow the management of containers to be integrated
    into a variety of automated systems for accelerated software engineering.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过容器化能力，可以加速将工作负载迁移到附近或远程的云环境中。Docker 容器技术提供的工具和 API 功能非常强大，并且比虚拟机（VM）提供的工具更加开发者友好。这些
    API 允许将容器管理集成到各种自动化系统中，以加速软件工程。
- en: The Docker use cases
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 的使用案例
- en: Containerization is emerging as the way forward for the software industry as
    it brings forth a newer and richer way of building and bundling any kind of software,
    shipping and running them everywhere. That is the fast-evolving aspect of containerization
    promises and provides software portability, which has been a constant nuisance
    for IT developers and administrators for long decades now. The Docker idea is
    flourishing here because of a number of enabling factors and facets. This section
    is specially prepared for telling the key use cases of the Docker idea.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化正在成为软件行业前进的道路，因为它为构建、打包任何类型的软件，运输并在任何地方运行它们提供了更新、更丰富的方式。容器化的快速发展承诺并提供了软件可移植性，这一直是
    IT 开发者和管理员多年来常常面临的困扰。Docker 的理念在这里蓬勃发展，得益于多个促进因素和面向的方面。本节特别准备了关于 Docker 理念的关键使用案例。
- en: Integrating containers into workflows
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将容器集成到工作流中
- en: Workflows are a widely accepted and used abstraction for unambiguously representing
    the right details of any complicated and large-scale business and scientific applications
    and executing them on distributed compute systems such as clusters, clouds, and
    grids. However, workflow management systems have been largely evasive on conveying
    the relevant information of the underlying environment on which the tasks inscribed
    in the workflow are to run. That is, the workflow tasks can run perfectly on the
    environment for which they were designed. The real challenge is to run the tasks
    across multiple IT environments without tweaking and twisting the source codes
    of the ordained tasks. Increasingly the IT environments are heterogeneous with
    the leverage of disparate **operating systems** (**OSes**), middleware, programming
    languages and frameworks, databases, etc. Typically workflow systems focus on
    data interchange between tasks and environment-specific. The same workflow, which
    is working fine in one environment, starts to crumble when it is being migrated
    and deployed on different IT environments. All kinds of known and unknown dependencies
    and incompatibilities spring up to denigrate the workflows delaying the whole
    job of IT setup, application installation and configuration, deployment, and delivery.
    Containers are the best bet for resolving this imbroglio once for all.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流是一种被广泛接受和使用的抽象，用于明确表示任何复杂的大型商业和科学应用的详细信息，并在分布式计算系统（如集群、云和网格）上执行它们。然而，工作流管理系统在传达相关的底层环境信息方面大多存在回避现象，而这些信息对于工作流中的任务执行至关重要。也就是说，工作流任务可以在为其设计的环境中完美运行。真正的挑战在于如何在多个
    IT 环境中运行这些任务，而不必修改和扭曲原始任务的源代码。随着 IT 环境的日益异构，操作系统（**OSes**）、中间件、编程语言和框架、数据库等的差异化被越来越广泛地利用。典型的工作流系统专注于任务之间和特定环境之间的数据交换。一个在某个环境中运行良好的工作流，在迁移并部署到不同的
    IT 环境中时，可能会开始出现问题。各种已知和未知的依赖关系与不兼容性会不断涌现，破坏工作流的顺利执行，延误整个 IT 设置、应用安装和配置、部署以及交付的过程。容器是解决这一复杂局面的一劳永逸的最佳选择。
- en: '*Chao Zheng and Douglas Thain (Integrating Containers into Workflows: A Case
    Study Using Makeflow, Work Queue, and Docker)*has done a good job of analyzing
    several methods in order to experimentally prove the unique contributions of containers
    in empowering workflow / process management systems. They have explored the performance
    of a large bioinformatics workload on a Docker-enabled cluster and observed the
    best configuration to be locally managed containers that are shared between multiple
    tasks.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*Chao Zheng 和 Douglas Thain（将容器集成到工作流中：使用 Makeflow、Work Queue 和 Docker 的案例研究）*
    很好地分析了几种方法，以实验性地证明容器在赋能工作流/过程管理系统方面的独特贡献。他们探讨了在启用 Docker 的集群上运行大规模生物信息学工作负载的性能，并观察到最佳配置是由多个任务共享的本地管理容器。'
- en: Docker for High-Performance Computing (HPC) and Technical Computing (TC) applications
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 在高性能计算（HPC）和技术计算（TC）应用中的应用
- en: (Douglas M. Jacobsen and Richard Shane Canon) – Currently containers are being
    overwhelmingly used for the web, enterprise, mobile and cloud applications. However,
    there are questions being asked and doubts being raised on whether containers
    can be a viable runtime for hosting technical and scientific computing applications.
    Especially there are many high-performance computing applications yearning for
    perfect a deployment and execution environment. The authors of this research paper
    have realized that Docker containers can be a perfect answer for HPC workloads.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: （Douglas M. Jacobsen 和 Richard Shane Canon）– 目前，容器在网页、企业、移动和云应用程序中得到了广泛应用。然而，仍然有一些问题被提出，是否容器能够作为一个可行的运行时环境来承载技术和科学计算应用程序。特别是许多高性能计算应用程序渴望得到完美的部署和执行环境。本文的作者们意识到，Docker
    容器可以是高性能计算（HPC）工作负载的完美解决方案。
- en: In many cases, users desire to have the ability to easily execute their scientific
    applications and workflows in the same environment used for development or adopted
    by their community. Some researchers have tried out the cloud option but the challenges
    there are many. The users need to solve how they handle workload management, file
    systems, and basic provisioning. Containers promise to offer the flexibility of
    cloud-type systems coupled with the performance of bare-metal systems. Furthermore,
    containers have the potential to be more easily integrated into traditional HPC
    environments which mean that users can obtain the benefits of flexibility without
    the added burden of managing other layers of the system (i.e. batch systems, file
    systems, etc.).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，用户希望能够在与开发环境或社区采用的环境相同的环境中轻松执行其科学应用程序和工作流。一些研究人员尝试过云选项，但那里存在许多挑战。用户需要解决如何处理工作负载管理、文件系统和基础资源配置的问题。容器承诺提供云类型系统的灵活性，同时兼具裸金属系统的性能。此外，容器更容易与传统的
    HPC 环境集成，这意味着用户可以在不增加管理其他系统层（如批处理系统、文件系统等）负担的情况下获得灵活性的好处。
- en: '*Minh Thanh Chung* and the team have analyzed the performance of virtual machines
    and containers for high-performance applications and benchmarked the results that
    clearly show containers are the next-generation runtime for HPC applications.
    In short, Docker offers many attractive benefits in an HPC environment. To test
    these, IBM Platform LSF and Docker have been integrated outside the core of Platform
    LSF and the integration leverages the rich Platform LSF plugin framework.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*Minh Thanh Chung* 和团队分析了虚拟机和容器在高性能应用中的性能，并对结果进行了基准测试，结果清晰地表明容器是 HPC 应用程序的下一代运行时。简而言之，Docker
    在 HPC 环境中提供了许多有吸引力的优势。为了验证这些优势，IBM Platform LSF 和 Docker 已经在 Platform LSF 的核心之外进行了集成，并且该集成利用了丰富的
    Platform LSF 插件框架。'
- en: We all know that the aspect of compartmentalization is for resource partitioning
    and provisioning. That is, physical machines are subdivided into multiple logical
    machines (virtual machines and containers). Now on the reverse side, such kinds
    of logical systems carved out of multiple physical machines can be linked together
    to buildavirtual supercomputer to solve certain complicated problems. *Hsi-En
    Yu* and *Weicheng Huang* have described how they built a virtual HPC cluster in
    the research paper *"Building a Virtual HPC Cluster with Auto Scaling by the Docker".*
    They have integrated the auto-scaling feature of service discovery with the lightweight
    virtualization paradigm (Docker) and embarked on the realization of a virtual
    cluster on top of physical cluster hardware.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道，隔离的目的是为了资源的划分和配置。也就是说，物理机器被细分成多个逻辑机器（虚拟机和容器）。而从另一方面来看，这些由多个物理机器构成的逻辑系统可以被连接起来，构建一个虚拟超级计算机，用以解决某些复杂问题。*许恩·余*和*魏成·黄*在研究论文《*通过
    Docker 构建一个自动扩展的虚拟 HPC 集群*》中描述了他们是如何构建虚拟高性能计算集群的。他们将服务发现的自动扩展功能与轻量级虚拟化范式（Docker）结合，并开始实现基于物理集群硬件的虚拟集群。
- en: Containers for telecom applications
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电信应用的容器化
- en: '*Csaba Rotter and the team* has explored and published a survey article on
    the title *"Using Linux Containers in Telecom Applications"*. Telecom applications
    exhibit strong performance and high availability requirements, therefore running
    them in containers requires additional investigations. A telecom application is
    a single or multiple node application responsible for a well-defined task. Telecom
    applications use standardized interfaces to connect to other network elements
    and implements standardized functions. On top of the standardized functions, a
    telecom application can have vendor-specific functionality. There is a set of
    **quality of service** (**QoS**) and **quality of experience** (**QoE**) attributes
    such as high availability, capacity, performance / throughput, etc. The paper
    has clearly laid out the reasons for the unique contributions of containers in
    having next-generation telecom applications.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*Csaba Rotter 和团队*探讨并发布了一篇名为《*在电信应用中使用 Linux 容器*》的调研文章。电信应用具有强大的性能和高可用性要求，因此，将其运行在容器中需要进一步的研究。电信应用是负责特定任务的单节点或多节点应用。电信应用使用标准化接口连接到其他网络元素，并实现标准化功能。在标准化功能之上，电信应用可以有特定厂商的功能。存在一系列**服务质量**（**QoS**）和**体验质量**（**QoE**）属性，如高可用性、容量、性能/吞吐量等。文章清楚地阐述了容器在支持下一代电信应用方面的独特贡献。'
- en: '*Efficient Prototyping of Fault Tolerant Map-Reduce Applications with Docker-Hadoop
    (Javier Rey and the team)* – Distributed computing is the way forward for compute
    and data-intensive workloads. There are two major trends. Data becomes big and
    there are realizations that big data leads to big insights through the leverage
    of pioneering algorithms, script and parallel languages such as Scala, integrated
    platforms, new-generation databases, and dynamic IT infrastructures. MapReduce
    is a parallel programming paradigm currently used to perform computations on massive
    amounts of data. Docker-Hadoop1, a virtualization testbed conceived to allow the
    rapid deployment of a Hadoop cluster. With Docker-Hadoop, it is possible to control
    the nodes characteristics and run scalability and performance tests that otherwise
    would require a large computing environment. Docker-Hadoop facilitates simulation
    and reproduction of different failure scenarios for the validation of an application.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用 Docker-Hadoop 高效原型化容错 Map-Reduce 应用（哈维尔·雷和团队）* – 分布式计算是应对计算和数据密集型工作负载的未来方向。有两个主要趋势。数据变得庞大，并且人们意识到，大数据通过利用开创性的算法、脚本和并行语言如
    Scala、集成平台、新一代数据库以及动态 IT 基础设施，可以带来重大见解。MapReduce 是当前用于对大量数据进行计算的并行编程范式。Docker-Hadoop1
    是一种虚拟化测试平台，旨在支持快速部署 Hadoop 集群。通过 Docker-Hadoop，可以控制节点特性并进行可扩展性和性能测试，否则这些测试需要庞大的计算环境。Docker-Hadoop
    使得模拟和重现不同的故障场景成为可能，从而验证应用的正确性。'
- en: '*Interactive Social Media Applications - AlinCalinciuc* and the team has come
    out with a research publication titled as *OpenStack and Docker: building a high-performance
    IaaS platform for interactive social media applications*. It is a well-known truth
    that interactive social media applications face the challenge of efficiently provisioning
    new resources in order to meet the demands of the growing number of application
    users. The authors have given the necessary description on how Docker can run
    as a hypervisor, and how the authors could manage to enable for the fast provisioning
    of computing resources inside of an OpenStack IaaS using the nova-docker plug-in
    that they had developed.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*互动社交媒体应用 - AlinCalinciuc* 和他的团队发布了一篇名为 *OpenStack 和 Docker：为互动社交媒体应用构建高性能
    IaaS 平台* 的研究论文。众所周知，互动社交媒体应用面临着有效配置新资源的挑战，以满足不断增长的应用用户需求。作者详细说明了 Docker 如何作为虚拟机管理程序运行，以及他们如何通过自己开发的
    nova-docker 插件在 OpenStack IaaS 内部实现计算资源的快速配置。'
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At this point of time, Docker is nothing short of an epidemic and every enterprising
    business across the globe is literally obsessed with the containerization mania
    for their extreme automation, transformation, and disruption.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Docker 已经成为一种“流行病”，全球各地的创业型企业几乎都为容器化的热潮所着迷，因为它能带来极致的自动化、转型和颠覆。
- en: With the blossoming of hybrid IT, the role of Docker-enabled containerization
    is steadily growing to smartly empower IT-enabled businesses. In this chapter,
    we have discussed the prime capabilities and contributions of the Docker paradigm.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 随着混合 IT 的蓬勃发展，基于 Docker 的容器化在智能赋能 IT 业务方面的作用稳步增长。本章讨论了 Docker 模式的主要功能和贡献。
- en: 'It is not often that you can summarize an entire book with a single meme, but
    I think that at the very least your journey into the world of containers will
    resolve this all too common problem:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 很少能用一个梗图总结一本书，但我认为至少你对容器世界的探索将解决这个过于常见的问题：
- en: '![Summary](img/B06455_07_01.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![摘要](img/B06455_07_01.jpg)'
- en: Picture taken by Dave Roth
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 Dave Roth 拍摄
- en: The days of developing code on version of a language with a configuration which
    is only local to a single developer which looks nothing like your production platform
    should now be over as you can easily develop, package and ship consistent containers
    which can run anywhere.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，开发者通常在与生产平台完全不同的本地配置中使用某种语言的版本进行代码开发，但现在这一切已经过去，你可以轻松开发、打包并发布一致的容器，这些容器可以在任何地方运行。
