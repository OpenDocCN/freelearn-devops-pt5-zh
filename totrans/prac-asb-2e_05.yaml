- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating and Consuming Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we have almost constantly referred to and made use of
    Ansible modules. We have treated these as *black boxes* – that is to say, we have
    just accepted that they exist and that they will work in a certain documented
    manner. However, one of the many great things about Ansible is that it is an open
    source project, and as such, not only can you view and modify its source code,
    but you can also develop your own additions. At the time of writing, there are
    3,300+ modules available for Ansible, handling everything from simple commands
    such as copying files and installing packages to configuring highly complex and
    bespoke networking equipment. This large array of modules has grown out of a genuine
    need to solve problems with Ansible, and the number included with each release
    of Ansible increases every time.
  prefs: []
  type: TYPE_NORMAL
- en: Sooner or later, you will come across a specific piece of functionality that
    doesn’t exist in any of the current Ansible modules. Of course, you could attempt
    to fill this gap functionally, either by writing your own module or by contributing
    enhancements to one of the existing modules back to the Ansible project for everyone
    else to benefit from. In this chapter, you will learn the basics of creating modules,
    as well as how to contribute your code back to the upstream Ansible project if
    you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, you will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Executing multiple modules using the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the module index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing module documentation from the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Module return values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing custom modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you have set up your control host with Ansible, as
    detailed in [*Chapter 1*](B20846_01.xhtml#_idTextAnchor015), *Getting Started
    with Ansible*, and are using the most recent version available – the examples
    in this chapter were tested with `ansible-core` version 2.15\. This chapter also
    assumes that you have at least one additional host to test against. Ideally, this
    should be Linux-based. Although we will give specific examples of hostnames in
    this chapter, you are free to substitute them with your own hostname and/or IP
    address. Details of how to do this will be provided in the appropriate places.
  prefs: []
  type: TYPE_NORMAL
- en: The module development work that will be covered in this chapter assumes the
    presence of a Python 3 development environment on your computer and that you are
    running either Linux, FreeBSD, or macOS. Where additional Python modules are needed,
    their installation is documented. The task of building module documentation has
    some very specific requirements around Python 3.10 or later, so you will need
    to install a suitable Python environment if you wish to attempt this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code bundle for this chapter is available here: [https://github.com/PacktPublishing/Practical-Ansible-Second-Edition/tree/main/Chapter%205](https://github.com/PacktPublishing/Practical-Ansible-Second-Edition/tree/main/Chapter%205).'
  prefs: []
  type: TYPE_NORMAL
- en: Executing multiple modules using the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this chapter is all about modules and how to create them, let’s recap how
    to use modules. We’ve done this throughout this book, but we have not drawn attention
    to some of the specifics related to how they work. One of the key things we have
    not discussed is how the Ansible engine talks to its modules and vice versa, so
    let’s explore this now.
  prefs: []
  type: TYPE_NORMAL
- en: 'As ever, when working with Ansible commands, we need an inventory to run our
    commands against. For this chapter, as our focus is on the modules themselves,
    we will use a very simple and small inventory, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, for the first part of our recap, you can run a module very easily via
    an ad hoc command and use the `-m` switch to tell Ansible which module you want
    to run. Hence, one of the simplest commands you can run is the Ansible `ping`
    command, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s examine the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Did you notice the structure of the output – the curly braces, colons, and commas?
    Yes, Ansible uses JSON-formatted data to talk to its modules, and the modules
    report their data back to Ansible in JSON as well. The preceding output is a subset
    of the JSON-formatted data returned to the Ansible engine by the `ping` module.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we never have to worry about this as we work with the modules using
    either `key=value` pairs on the command line or YAML in playbooks and roles. Hence,
    the JSON is shielded from us, but this is an important fact to bear in mind as
    we head into the world of module development later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible modules are just like functions in a high-level programming language,
    in that they take a well-defined list of arguments as input, perform their function,
    and then provide a set of output data, which is also well defined and documented.
    We’ll look at this in more detail later in this chapter. Of course, the preceding
    command didn’t include any arguments, so this was the simplest possible invocation
    of a module via Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s run another command that takes an argument and passes that data
    to the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we provided a single string as an argument to the command module,
    which Ansible, in turn, converts into JSON and passes down to the command module
    when it’s invoked. When you run this ad hoc command, you will see an output similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this instance, the output data does not appear to be JSON formatted; however,
    what Ansible prints to the Terminal when you run a module is only a subset of
    the data that each module returns – for example, both the `CHANGED` status and
    `rc=0` exit code from our command were passed back to Ansible in a JSON-formatted
    data structure – this was just hidden from us.
  prefs: []
  type: TYPE_NORMAL
- en: 'This point doesn’t need to be labored too much, but it is important to set
    the context. It is this context that we shall build upon throughout this chapter,
    so simply remember these key points:'
  prefs: []
  type: TYPE_NORMAL
- en: Communication between Ansible and its modules is done through JSON-formatted
    data structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules take input data that controls how they function (arguments)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules always return data – at the very least, the status of the module’s execution
    (for example, `changed`, `ok`, or `failed`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, before you start coding modules, it makes sense to check whether
    a module that can perform all (or some) of the functionality you need already
    exists. We will explore this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the module index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed in the preceding section, Ansible provides thousands of modules
    to make it fast and easy to develop playbooks and run them across multiple host
    machines. How do you go about finding the right module to begin with, though,
    when there are so many? Fortunately, the Ansible documentation features a well-organized,
    indexed list of modules that you can consult to find your desired module – this
    is available here: [https://docs.ansible.com/ansible/latest/collections/index_module.xhtml](https://docs.ansible.com/ansible/latest/collections/index_module.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s suppose you want to see whether there is a native Ansible module that
    can help you configure and manage your Amazon Web Services S3 buckets. That’s
    a fairly precise, well-defined need, so let’s approach this logically:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by opening the index of all modules in your web browser, as discussed
    previously: https://docs.ansible.com/ansible/latest/collections/index_module.xhtml.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we know that `amazon.aws` modules are certainly indexed at the very beginning
    of this page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are still thousands of modules listed on this page! So, let’s use the
    find function (*Ctrl* + *F*) in the browser to see whether the `amazon.aws.s3`
    keyword appears anywhere:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Amazon modules](img/B20846_05_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Amazon modules
  prefs: []
  type: TYPE_NORMAL
- en: We now have a shortlist of modules to work with – granted, there are several,
    so we still need to work out which one (or ones) we will need for our playbook.
    As shown from the preceding short descriptions, this will depend on what your
    intended task is.
  prefs: []
  type: TYPE_NORMAL
- en: 'The short descriptions should be enough to give you some clues about whether
    the module will suit your needs or not. Once you have an idea, you can click on
    the appropriate document links to view more details about the module and how to
    work with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Amazon S3 module details](img/B20846_05_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Amazon S3 module details
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the documentation page for each module provides a great deal
    of information, including a longer description. If you scroll down the page, you
    will see a list of the possible arguments that you can provide the module with,
    some practical examples of how to use them, and some details about the outputs
    from the module. Also, note the `aws_s3` module from a playbook without installing
    the `boto3` and `botocore` modules on Python 3.6 or later, you will simply receive
    an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All modules must have documentation like this created before they will be accepted
    as part of the Ansible project, so you must keep this in mind if you intend to
    submit your own modules. This is also one of the reasons for Ansible’s popularity
    – with easy-to-maintain and well-documented standards, it is the perfect community
    platform for automation. The official Ansible website isn’t the only place you
    can obtain documentation, however, as it is even available on the command line.
    We shall look at how to retrieve documentation via this route in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing module documentation from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the preceding section, the Ansible project prides itself on
    its documentation, and making this documentation readily accessible is an important
    part of the project itself. Now, suppose you are working on an Ansible task (in
    a playbook, role, or even an ad hoc command) and you are in a data center environment
    where you only have access to the shell of the machine you are working on. How
    would you get access to the Ansible documentation?
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, part of the Ansible installation that we have not discussed yet
    is the `ansible-doc` tool, which is installed as standard along with the familiar
    `ansible` and `ansible-playbook` executables. The `ansible-doc` command includes
    a complete (text-based) library of documentation for all the modules that ship
    with the version of Ansible you have installed. This means that the very information
    you need to work with modules is at your fingertips, even if you are in the middle
    of a data center and without a working internet connection!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples to show you how to interact with the `ansible-doc`
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can list all of the modules that there’s documentation for on your Ansible
    control machine by simply issuing the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many pages of output, which shows you just how many modules there
    are! You can even count them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That’s right – 7,484 modules ship with Ansible 2.15!
  prefs: []
  type: TYPE_NORMAL
- en: 'As before, you can search for specific modules using your favorite shell tools
    to process the index; for example, you could `grep` for `s3` to find all of the
    S3-related modules, as we did interactively in the web browser in the previous
    section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-doc aws_s3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should produce an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-doc ping
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-doc ping
  prefs: []
  type: TYPE_NORMAL
- en: ANSIBLE.BUILTIN.PING    (/home/james/.local/lib/python3.10/site-packages/ansible/modules/ping.py)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'RETURN VALUES:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ping:'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: value provided with the data parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs: []
  type: TYPE_NORMAL
- en: 'sample: pong'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: str'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Simple play to demonstrate a return value'
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: localhost'
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Perform a simple module based task'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.ping:'
  prefs: []
  type: TYPE_NORMAL
- en: 'register: pingresult'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Display the result'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.debug:'
  prefs: []
  type: TYPE_NORMAL
- en: 'var: pingresult'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-playbook retval.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[WARNING]: provided hosts list is empty, only localhost is available. Note
    that'
  prefs: []
  type: TYPE_NORMAL
- en: the implicit localhost does not match 'all'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [Simple play to demonstrate a return value] *******************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Gathering Facts] *********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Perform a simple module based task] **************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Display the result] ******************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost] => {'
  prefs: []
  type: TYPE_NORMAL
- en: '"pingresult": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"failed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP *********************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'localhost : ok=3 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: $ sudo dnf install python python-devel
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ sudo yum install python3 python3-devel
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ sudo apt-get update
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ sudo apt-get install python3-pip python3-dev build-essential
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ brew install python
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ git clone https://github.com/ansible/ansible.git
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: $ cd ansible
  prefs: []
  type: TYPE_NORMAL
- en: $ python -m virtualenv moduledev
  prefs: []
  type: TYPE_NORMAL
- en: New python executable in /home/james/ansible/moduledev/bin/python
  prefs: []
  type: TYPE_NORMAL
- en: Installing setuptools, pip, wheel...done.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: $ vi remote_filecopy.py
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '#!/usr/bin/env python'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copyright: (c) 2018, Jesse Keating <jesse.keating@example.org>'
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'ANSIBLE_METADATA = {''metadata_version'': ''1.1'','
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''status'': [''preview''],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''supported_by'': ''community''}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: DOCUMENTATION = '''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'module: remote_filecopy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'version_added: "2.15"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'short_description: Copy a file on the remote host'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- The remote_copy module copies a file on the remote host from a given source
    to a provided destination.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'source:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Path to a file on the source file on the remote host'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'required: True'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'dest:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Path to the destination on the remote host for the copy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'required: True'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'author:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Jesse Keating (@omgjlk)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ''''''''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: EXAMPLES = '''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Example from Ansible Playbooks
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '- name: backup a config file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'remote_copy:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'source: /etc/herp/derp.conf'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'dest: /root/herp-derp.conf.bak'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ''''''''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: RETURN = '''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'source:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: source file used for the copy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: str'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: "/path/to/file.name"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'dest:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: destination of the copy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: str'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: "/path/to/destination.file"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'gid:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: group ID of destination target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: int'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: 502'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'group:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: group name of destination target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: str'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: "users"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'uid:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: owner ID of destination target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: int'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: 502'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'owner:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: owner name of destination target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: str'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: "fred"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'mode:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: permissions of the destination target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: int'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: 0644'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'size:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: size of destination target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: int'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: 20'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'state:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: state of destination target'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'returned: success'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type: str'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'sample: "file"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ''''''''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'main function, in which we will create an object of the AnsibleModule type
    and use an argument_spec dictionary to obtain the options that the module was
    called with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: shutil.copy(module.params['source'],
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: module.params['dest'])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: module.exit_json(changed=True)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: from ansible.module_utils.basic import *
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'if __name__ == ''__main__'':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: main()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"ANSIBLE_MODULE_ARGS": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"source": "/tmp/foo",'
  prefs: []
  type: TYPE_NORMAL
- en: '"dest": "/tmp/bar"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: $ touch /tmp/foo
  prefs: []
  type: TYPE_NORMAL
- en: $ . moduledev/bin/activate
  prefs: []
  type: TYPE_NORMAL
- en: (moduledev) $ . hacking/env-setup
  prefs: []
  type: TYPE_NORMAL
- en: running egg_info
  prefs: []
  type: TYPE_NORMAL
- en: creating lib/ansible_base.egg-info
  prefs: []
  type: TYPE_NORMAL
- en: writing requirements to lib/ansible_base.egg-info/requires.txt
  prefs: []
  type: TYPE_NORMAL
- en: writing lib/ansible_base.egg-info/PKG-INFO
  prefs: []
  type: TYPE_NORMAL
- en: writing top-level names to lib/ansible_base.egg-info/top_level.txt
  prefs: []
  type: TYPE_NORMAL
- en: writing dependency_links to lib/ansible_base.egg-info/dependency_links.txt
  prefs: []
  type: TYPE_NORMAL
- en: writing manifest file 'lib/ansible_base.egg-info/SOURCES.txt'
  prefs: []
  type: TYPE_NORMAL
- en: reading manifest file 'lib/ansible_base.egg-info/SOURCES.txt'
  prefs: []
  type: TYPE_NORMAL
- en: reading manifest template 'MANIFEST.in'
  prefs: []
  type: TYPE_NORMAL
- en: 'warning: no files found matching ''SYMLINK_CACHE.json'''
  prefs: []
  type: TYPE_NORMAL
- en: 'warning: no previously-included files found matching ''docs/docsite/rst_warnings'''
  prefs: []
  type: TYPE_NORMAL
- en: 'warning: no previously-included files matching ''*'' found under directory
    ''docs/docsite/_build'''
  prefs: []
  type: TYPE_NORMAL
- en: 'warning: no previously-included files matching ''*.pyc'' found under directory
    ''docs/docsite/_extensions'''
  prefs: []
  type: TYPE_NORMAL
- en: 'warning: no previously-included files matching ''*.pyo'' found under directory
    ''docs/docsite/_extensions'''
  prefs: []
  type: TYPE_NORMAL
- en: 'warning: no files found matching ''*.ps1'' under directory ''lib/ansible/modules/windows'''
  prefs: []
  type: TYPE_NORMAL
- en: 'warning: no files found matching ''*.psm1'' under directory ''test/support'''
  prefs: []
  type: TYPE_NORMAL
- en: writing manifest file 'lib/ansible_base.egg-info/SOURCES.txt'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Ansible to run out of checkout...
  prefs: []
  type: TYPE_NORMAL
- en: PATH=/home/james/ansible/bin:/home/james/ansible/moduledev/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/home/james/bin
  prefs: []
  type: TYPE_NORMAL
- en: PYTHONPATH=/home/james/ansible/lib
  prefs: []
  type: TYPE_NORMAL
- en: MANPATH=/home/james/ansible/docs/man:/usr/local/share/man:/usr/share/man
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you may wish to specify your host file with -i
  prefs: []
  type: TYPE_NORMAL
- en: Done!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: (moduledev) $ python remote_filecopy.py args.json
  prefs: []
  type: TYPE_NORMAL
- en: '{"invocation": {"module_args": {"dest": "/tmp/bar", "source": "/tmp/foo"}},
    "changed": true}'
  prefs: []
  type: TYPE_NORMAL
- en: (moduledev) $ ls -l /tmp/bar
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 0 Apr 26 12:35 /tmp/bar
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: $ cd ~
  prefs: []
  type: TYPE_NORMAL
- en: $ mkdir testplaybook
  prefs: []
  type: TYPE_NORMAL
- en: $ cd testplaybook
  prefs: []
  type: TYPE_NORMAL
- en: $ mkdir library
  prefs: []
  type: TYPE_NORMAL
- en: $ cp ~/ansible/moduledev/remote_filecopy.py library/
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Playbook to test custom module'
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: all'
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Test the custom module'
  prefs: []
  type: TYPE_NORMAL
- en: 'remote_filecopy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'source: /tmp/foo'
  prefs: []
  type: TYPE_NORMAL
- en: 'dest: /tmp/bar'
  prefs: []
  type: TYPE_NORMAL
- en: 'register: testresult'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Print the test result data'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.debug:'
  prefs: []
  type: TYPE_NORMAL
- en: 'var: testresult'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: testplaybook
  prefs: []
  type: TYPE_NORMAL
- en: ├── hosts
  prefs: []
  type: TYPE_NORMAL
- en: ├── library
  prefs: []
  type: TYPE_NORMAL
- en: │ └── remote_filecopy.py
  prefs: []
  type: TYPE_NORMAL
- en: └── testplaybook.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-playbook -i hosts testplaybook.yml
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [Playbook to test custom module] ******************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Gathering Facts] *********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [frt01.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [app01.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Test the custom module] **************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'changed: [app01.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: 'changed: [frt01.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Print the test result data] **********************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [app01.example.com] => {'
  prefs: []
  type: TYPE_NORMAL
- en: '"testresult": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"failed": false'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [frt01.example.com] => {'
  prefs: []
  type: TYPE_NORMAL
- en: '"testresult": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"failed": false'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP *********************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'app01.example.com : ok=3 changed=1 unreachable=0 failed=0 skipped=0 rescued=0
    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'frt01.example.com : ok=3 changed=1 unreachable=0 failed=0 skipped=0 rescued=0
    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: (moduledev) $ rm -f /tmp/foo
  prefs: []
  type: TYPE_NORMAL
- en: (moduledev) $ python3 remote_filecopy.py args.json
  prefs: []
  type: TYPE_NORMAL
- en: 'Traceback (most recent call last):'
  prefs: []
  type: TYPE_NORMAL
- en: File "remote_filecopy.py", line 101, in <module>
  prefs: []
  type: TYPE_NORMAL
- en: main()
  prefs: []
  type: TYPE_NORMAL
- en: ^^^^^^
  prefs: []
  type: TYPE_NORMAL
- en: File "remote_filecopy.py", line 94, in main
  prefs: []
  type: TYPE_NORMAL
- en: shutil.copy(module.params['source'],
  prefs: []
  type: TYPE_NORMAL
- en: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  prefs: []
  type: TYPE_NORMAL
- en: File "/opt/homebrew/Cellar/python@3.11/3.11.4/Frameworks/Python.framework/Versions/3.11/lib/python3.11/shutil.py",
    line 419, in copy
  prefs: []
  type: TYPE_NORMAL
- en: copyfile(src, dst, follow_symlinks=follow_symlinks)
  prefs: []
  type: TYPE_NORMAL
- en: File "/opt/homebrew/Cellar/python@3.11/3.11.4/Frameworks/Python.framework/Versions/3.11/lib/python3.11/shutil.py",
    line 256, in copyfile
  prefs: []
  type: TYPE_NORMAL
- en: 'with open(src, ''rb'') as fsrc:'
  prefs: []
  type: TYPE_NORMAL
- en: ^^^^^^^^^^^^^^^
  prefs: []
  type: TYPE_NORMAL
- en: 'FileNotFoundError: [Errno 2] No such file or directory: ''/tmp/foo'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'try:'
  prefs: []
  type: TYPE_NORMAL
- en: shutil.copy(module.params['source'], module.params['dest'])
  prefs: []
  type: TYPE_NORMAL
- en: 'except:'
  prefs: []
  type: TYPE_NORMAL
- en: module.fail_json(msg="Failed to copy file")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: (moduledev) $ rm -f /tmp/foo
  prefs: []
  type: TYPE_NORMAL
- en: (moduledev) $ python3 better_remote_filecopy.py args.json
  prefs: []
  type: TYPE_NORMAL
- en: '{"msg": "Failed to copy file", "failed": true, "invocation": {"module_args":
    {"dest": "/tmp/bar", "source": "/tmp/foo"}}}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: (moduledev) $ touch /tmp/foo
  prefs: []
  type: TYPE_NORMAL
- en: (moduledev) $ python3 better_remote_filecopy.py args.json
  prefs: []
  type: TYPE_NORMAL
- en: '{"invocation": {"module_args": {"dest": "/tmp/bar", "source": "/tmp/foo"}},
    "changed": true}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: $ cd ansible$ python 3 -m venv venv
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ . venv/bin/activate
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (venv) $ source hacking/env-setup
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: running egg_info
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: creating lib/ansible.egg-info
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: writing lib/ansible.egg-info/PKG-INFO
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: writing dependency_links to lib/ansible.egg-info/dependency_links.txt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: writing requirements to lib/ansible.egg-info/requires.txt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: writing top-level names to lib/ansible.egg-info/top_level.txt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: writing manifest file 'lib/ansible.egg-info/SOURCES.txt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: reading manifest file 'lib/ansible.egg-info/SOURCES.txt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: reading manifest template 'MANIFEST.in'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'warning: no files found matching ''SYMLINK_CACHE.json'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: writing manifest file 'lib/ansible.egg-info/SOURCES.txt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Setting up Ansible to run out of checkout...
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PATH=/home/james/ansible/bin:/home/james/ansible/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/home/james/bin
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PYTHONPATH=/home/james/ansible/lib
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: MANPATH=/home/james/ansible/docs/man:/usr/local/share/man:/usr/share/man
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remember, you may wish to specify your host file with -i
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'pip to install the Python requirements so that you can run the ansible-test
    tool:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: (venv) $ cp ~/moduledev/remote_filecopy.py ./lib/ansible/modules/files/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (venv) $ ansible-test sanity --test validate-modules remote_filecopy
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sanity check using validate-modules
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'WARNING: Cannot perform module comparison against the base branch. Base branch
    not detected when running locally.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'WARNING: Reviewing previous 1 warning(s):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'WARNING: Cannot perform module comparison against the base branch. Base branch
    not detected when running locally.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ cd ~/ansible
  prefs: []
  type: TYPE_NORMAL
- en: $ ansible-doc -M moduledev/ remote_filecopy
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: REMOTE_FILECOPY (/home/james/ansible/moduledev/remote_filecopy.py)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The remote_copy module copies a file on the remote host from a
  prefs: []
  type: TYPE_NORMAL
- en: given source to a provided destination.
  prefs: []
  type: TYPE_NORMAL
- en: '* This module is maintained by The Ansible Community'
  prefs: []
  type: TYPE_NORMAL
- en: 'OPTIONS (= is mandatory):'
  prefs: []
  type: TYPE_NORMAL
- en: = dest
  prefs: []
  type: TYPE_NORMAL
- en: Path to the destination on the remote host for the copy
  prefs: []
  type: TYPE_NORMAL
- en: = source
  prefs: []
  type: TYPE_NORMAL
- en: Path to a file on the source file on the remote host
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'docs/docsite/ directory as the next step in the documentation creation process:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ MODULES=hello_module make webdocs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ pip3 uninstall sphinx
  prefs: []
  type: TYPE_NORMAL
- en: $ pip3 install sphinx==2.4.4
  prefs: []
  type: TYPE_NORMAL
- en: $ pip3 install sphinx-notfound-page
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: generating indices... genindex py-modindexdone
  prefs: []
  type: TYPE_NORMAL
- en: 'writing additional pages... search/home/james/ansible/docs/docsite/_themes/sphinx_rtd_theme/search.xhtml:21:
    RemovedInSphinx30Warning: To modify script_files in the theme is deprecated. Please
    insert a <script> tag directly in your theme instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '{% endblock %}'
  prefs: []
  type: TYPE_NORMAL
- en: opensearchdone
  prefs: []
  type: TYPE_NORMAL
- en: copying images... [100%] dev_guide/style_guide/images/thenvsthan.jpg
  prefs: []
  type: TYPE_NORMAL
- en: copying downloadable files... [ 50%] network/getting_started/sample_files/first_copying
    downloadable files... [100%] network/getting_started/sample_files/first_playbook_ext.yml
  prefs: []
  type: TYPE_NORMAL
- en: copying static files... ... done
  prefs: []
  type: TYPE_NORMAL
- en: copying extra files... done
  prefs: []
  type: TYPE_NORMAL
- en: 'dumping search index in English (code: en)... done'
  prefs: []
  type: TYPE_NORMAL
- en: dumping object inventory... done
  prefs: []
  type: TYPE_NORMAL
- en: build succeeded, 35 warnings.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML pages are in _build/html.
  prefs: []
  type: TYPE_NORMAL
- en: 'make[1]: Leaving directory `/home/james/ansible/docs/docsite'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: $ find /home/james/ansible/docs/docsite -name remote_filecopy*
  prefs: []
  type: TYPE_NORMAL
- en: /home/james/ansible/docs/docsite/rst/modules/remote_filecopy_module.rst
  prefs: []
  type: TYPE_NORMAL
- en: /home/james/ansible/docs/docsite/_build/html/modules/remote_filecopy_module.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: /home/james/ansible/docs/docsite/_build/doctrees/modules/remote_filecopy_module.doctree
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: https://github.com/YOUR_ACCOUNT/COLLECTION_REPO.git ~/YOUR_WORKING_DIRECTORY
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ cd ~/ YOUR_WORKING_DIRECTORY
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: https://github.com/ansible-collections/COLLECTION_REPO.git
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ git fetch upstream
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ git rebase upstream/YOUR_BRANCH
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ git checkout -b name_of_my_branch
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'http://github.com/ansible-collections/COLLECTION_REPO). Then, select the Pull
    requests tab. Fill out the PR template with your changes. Then, select create
    a pull request. Note that if your PR looks good to the community, it will be merged:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
