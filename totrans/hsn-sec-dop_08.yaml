- en: Secure Coding Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Secure architecture design and threat modeling are followed by the secure coding
    phase. In the coding phase, we would like to avoid the use of unsafe APIs, buffer
    overflow, sensitive information leakage, and so on. It's difficult for every developer
    to be familiar with all secure coding rules. Therefore, how to apply secure coding
    tools and tips to spot major security issue will be discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure coding industry best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing secure coding baselines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure coding awareness training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tool evaluation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tool optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-risk module review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual code review tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure code scanning tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure compiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common issues in practice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure coding industry best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Secure coding is the foundation of secure software. We have done threat modeling
    and secure architecture design. These require secure coding to make them happen.
    Secure coding can be a challenge for the development team since developers are
    occupied with working on new features, and there may be hundreds of secure coding
    rules to learn. Before we discuss secure coding practices in more detail, we will
    review existing secure coding standards we can refer to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on programming languages, secure coding standards are summarized
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Reference standards** | **Description and reference** |'
  prefs: []
  type: TYPE_TB
- en: '| CERT Secure Coding |'
  prefs: []
  type: TYPE_TB
- en: This provides secure coding standards for C, C++, Java, Perl, and Android.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Find Security Bugs |'
  prefs: []
  type: TYPE_TB
- en: This provides bug patterns with samples of vulnerable code and solution for
    Java.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| CWE |'
  prefs: []
  type: TYPE_TB
- en: This provides vulnerable source code samples from the perspective of common
    software weaknesses. The coding samples cover C, C++, Java, and PHP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Android |'
  prefs: []
  type: TYPE_TB
- en: Android Application Secure Design and Secure Coding Guidebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| OWASP SKF |'
  prefs: []
  type: TYPE_TB
- en: OWASP Security Knowledge Framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used as an internal security knowledge base, which includes OWASP
    ASVS and secure coding knowledge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| PHP Security |'
  prefs: []
  type: TYPE_TB
- en: OWASP PHP Security Cheat Sheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| OWASP Code Review |'
  prefs: []
  type: TYPE_TB
- en: OWASP Code Review Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Apple Secure Coding Guide |'
  prefs: []
  type: TYPE_TB
- en: Apple Secure Coding Guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Go |'
  prefs: []
  type: TYPE_TB
- en: Secure Coding Practices for GO language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| JavaScript |'
  prefs: []
  type: TYPE_TB
- en: JavaScript Secure Coding Practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Python |'
  prefs: []
  type: TYPE_TB
- en: OWASP Python Security Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: We understand the secure coding baseline and standards. Furthermore, the key
    challenge is how to apply these secure coding rules to developers' daily coding
    activities. The following are the recommended approaches to proceed with the secure
    coding practices.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing secure coding baselines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Secure coding baselines are the minimum secure coding requirements and a checklist
    for the project team to move to the next stage. Secure coding baselines are also
    part of the release criteria. It's always suggested you use secure coding guidelines
    based on industry best practices or standards, such as **CERT Secure Coding**, as
    described in the preceding table.
  prefs: []
  type: TYPE_NORMAL
- en: Define secure coding baselines based on each programming language, such as PHP,
    Python, JavaScript, Android, and iOS. The secure coding baseline is better to
    include the information not only secure coding rules but also examples of security
    risks, vulnerable code examples, and suggested ones. Here is an example.
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure code issue – predictable random numbers**:'
  prefs: []
  type: TYPE_NORMAL
- en: The use of a predictable random number can result in vulnerabilities in the
    session ID, token, or encryption initialization vector. It's suggested to use
    `java.security.SecureRandom` instead of `java.util.Random:`
  prefs: []
  type: TYPE_NORMAL
- en: '**`// Vulnerable Code`**'
  prefs: []
  type: TYPE_NORMAL
- en: '`Random rnd = New Random ();`'
  prefs: []
  type: TYPE_NORMAL
- en: '**`// Suggested Code`**'
  prefs: []
  type: TYPE_NORMAL
- en: '`SecureRandom rnd = SecureRandom();`'
  prefs: []
  type: TYPE_NORMAL
- en: 'All projects must be scanned with specified code scanning tools before releases.
    Some organizations may also define release criteria for secure coding practices.
    Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: All the warnings from scanning results that were generated by scanning tools
    must be checked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All compiler warnings (not just errors) should be checked and cleared
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of open defects in the scanning results cannot exceed a certain percentage
    per line of code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, the secure coding baselines require related developer tools and
    training in practice; otherwise, those secure coding rules will be just documents.
  prefs: []
  type: TYPE_NORMAL
- en: Secure coding awareness training
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of secure coding training is to inform the development team of
    the forthcoming secure coding practices we are going to perform. At the initial
    stage of the secure coding awareness training, the focus will be mainly on the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: What are secure coding standards or baselines?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are common industry secure coding issues?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will they impact on a developer's daily tasks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release criteria for secure code scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A case study or scenario-based vulnerable source code example will have better
    training effects than simply secure coding rules. The following are good references
    in this area and provide a lot of vulnerable and secure best practice code samples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP Security Knowledge Framework**: [https://www.securityknowledgeframework.org/](https://www.securityknowledgeframework.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Application Secure Design and Secure Coding Guidebook**: [http://www.jssec.org/dl/android_securecoding_en.pdf](http://www.jssec.org/dl/android_securecoding_en.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Security Bugs Patterns for Java**: [https://find-sec-bugs.github.io/](https://find-sec-bugs.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Teammentor**: [https://owasp.teammentor.net/angular/user/index](https://owasp.teammentor.net/angular/user/index)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tool evaluation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the team realizes the importance and the challenge of secure coding, it
    will look for some tools to make the secure coding easier. The evaluation of a
    scanning tool may include the following considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Considerations** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Usability |'
  prefs: []
  type: TYPE_TB
- en: The target users of the code scanning tools are developers. The usability includes
    the capability to scan parts of the source code, differential scans, scanning
    reports, tracing back to original source code, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Budget |'
  prefs: []
  type: TYPE_TB
- en: If it's an IDE plugin commercial tool, we need to consider how many concurrent
    users' licenses it will need.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Programming languages support |'
  prefs: []
  type: TYPE_TB
- en: Most tools support C/C++ and Java, but do not support script languages, such
    as Python, JavaScript, or PHP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do a survey of the programming languages used by in-house projects and prioritize
    the programming languages that are going to be supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Detection rate and false positive rates |'
  prefs: []
  type: TYPE_TB
- en: It's common for any scanning tools to have false positive rates, depending on
    the scanning engine and rules. A high false positive is not a bad thing, and it
    can also mean the scanner takes a more conservative approach. Find the tool that
    best fits the projects instead of the most well-known.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To evaluate the detection rate, we may use known vulnerable projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Scanning rules update |'
  prefs: []
  type: TYPE_TB
- en: It's important that the tool is constantly updated with rules and scanners.
    One of the key advantages of a commercial tool is that the tool will have up-to-date
    scanning rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Generally, there are two approaches for code scanning. One is static code scanning
    with IDE plugin. It works like a spellcheck and is more intuitive for a developer
    to learn and correct security issues. The other one is to do code scanning with
    a daily build that generates a daily scanning report. Developers will need to
    look into the daily scanning report to fix or to comment on security issues by
    batch. This approach may not be that intuitive for developers, but the compiled
    security scanning may provide better accuracy. To promote adoption of these two
    kinds of scanning tool, starting with a small-scale pilot team is suggested. There
    are some commercial and open source tools available in these two kinds of scanning
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Pros** | **Cons** |'
  prefs: []
  type: TYPE_TB
- en: '| **IDE plugin static code scanning** | Intuitive to developers (works like
    a spellcheck). |'
  prefs: []
  type: TYPE_TB
- en: It may have higher false positives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires every developer to install the plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The detection capability is limited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The license costs for every developer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires enforcement uses of the tool for every developer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Daily complied scanning** |'
  prefs: []
  type: TYPE_TB
- en: Security scanning accuracy based on the project integration and compiled scan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centrally manages the scanning rules and results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to build security metrics and monitor the results for every project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Fully buildable source code is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scanning results need further assignment for developers to check. When a
    developer is assigned to check the reports, he may not be familiar with other
    modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Evaluation of code scanning tools consists of a detection rate, false positive
    rate, potential overhead, and usability for the development team. The vulnerable
    code projects for the evaluation of static code scanning tools are listed in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Vulnerable projects** | **Description** | **Programming languages** |'
  prefs: []
  type: TYPE_TB
- en: '| **NIST Software Assurance Reference Dataset Project** | The project provides
    on-purpose insecure code examples which can be used to test the detection rate
    of secure code scanning tools | Java, C/C++, C#, PHP |'
  prefs: []
  type: TYPE_TB
- en: '| **OWASP Node JS Goat** | It''s a vulnerable website to practice OWASP top
    10 security testing and is built by NodeJS. | Node JS |'
  prefs: []
  type: TYPE_TB
- en: '| **OWASP WebGoat .Net** | It''s a vulnerable website to practice OWASP top
    10 security testing and is built by .NET. | .NET |'
  prefs: []
  type: TYPE_TB
- en: '| **OWASP WebGoat PHP** | It''s a vulnerable website to practice OWASP top
    10 security testing and is built by PHP. | PHP |'
  prefs: []
  type: TYPE_TB
- en: '| **OWASP Rail****sGoat** | It''s a vulnerable website to practice OWASP top
    10 security testing and is built by Ruby. | Ruby on Rails |'
  prefs: []
  type: TYPE_TB
- en: Once the security team has selected scanning tools after testing the results,
    the security team may engage with more development teams to discuss adoption of
    the tools. Before the adoption of the tools, it's suggested to conduct hands-on
    training via demo usage of the results, handling the scanning results, and using
    the scanning tools.
  prefs: []
  type: TYPE_NORMAL
- en: This stage of training is focused more on *how* instead of *what*. Examples
    of hands-on tutorials are how to use scanning tools, how to review security issues,
    how to fix based on the scanning results, how to disable some scanning rules,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Tool optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the teams have been using the code scanning tools for a while, the security
    team may help to optimize the tools, processes, or rules based on user feedback.
    Here are some key factors to be optimized for a large-scale code scanning adoption:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key factors** | **Suggestions** |'
  prefs: []
  type: TYPE_TB
- en: '| Scanning rules customization | The purpose of rules customization is to help
    the project team reduce false positives. The security team may help to disable
    some rules that don''t apply to the projects or change rules that always result
    in false positives. |'
  prefs: []
  type: TYPE_TB
- en: '| Recommendation fixes | Ideally, IDE plugins will present not only security
    warnings but also suggested fixes. However, if the tools you are using don''t
    support the team, using the OWASP Security Knowledge Framework can be an alternative.
      |'
  prefs: []
  type: TYPE_TB
- en: '| Integration | Integrate code scanning tools into Jenkins, and developers''
    IDE plugins. Automation framework. Integration with Jenkins is one of the basics
    of CI/CD. |'
  prefs: []
  type: TYPE_TB
- en: '| Reporting | The team may request further quality metrics reports, such as
    incremental scanning reports based on previous checked results or top common issue
    cross-projects. |'
  prefs: []
  type: TYPE_TB
- en: '| Automation platform | Moving to the next level of secure coding automation
    involves integrating several tools together on an automation platform. Try the
    following open source tools to build your own secure coding automation platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SWAMP-in-a-Box**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JackHammer**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: High-risk module review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The automation code scanning tool can help to detect most source code security
    issues. However, there is still a need for high-risk modules. In addition to source
    code scanning tools, we will also apply blackbox or **Dynamic Application Security
    Testing** (**DAST**), which will be discussed in later chapters. Think like a
    hacker. Which modules will a hacker be interested in? What information can be
    most valuable to a hacker? What might be the weakest link in the whole application?
    The following table  lists high-risk modules that require further review:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **High-risk modules** | **Security Review Focuses** |'
  prefs: []
  type: TYPE_TB
- en: '| Authentication |'
  prefs: []
  type: TYPE_TB
- en: Accounts registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Login and CAPTCHA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password recovery or reset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity and password storage and access control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account lockout control after multiple failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Authorization |'
  prefs: []
  type: TYPE_TB
- en: Sensitive resource access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administration management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Configuration |'
  prefs: []
  type: TYPE_TB
- en: 'There are two kinds of review in the configuration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure configurations of the applications, such as turning off debug mode and
    enabling TLS communication.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The impact of the configuration for each software release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Finance |'
  prefs: []
  type: TYPE_TB
- en: Payment functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order and shopping carts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| File handling |'
  prefs: []
  type: TYPE_TB
- en: File upload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File download
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Database |'
  prefs: []
  type: TYPE_TB
- en: Database query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database add, update, and delete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| API interface |'
  prefs: []
  type: TYPE_TB
- en: Restful API interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party integration interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Legacy |'
  prefs: []
  type: TYPE_TB
- en: Modules that don't support secure communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules that may still use weak encryption algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses of banned or dangerous APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Encryption |'
  prefs: []
  type: TYPE_TB
- en: Uses of banned encryption algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardcoded sensitive information or comments in the source code during development,
    such as IP, email, password, or hidden hotkey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Session |'
  prefs: []
  type: TYPE_TB
- en: Concurrent session control and detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The randomness of the session ID and expiration period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Manual code review tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A manual code review may take some time. A manual code review without proper
    tools and strategies can be like looking for a needle in a haystack. As previously
    discussed, we only do a manual code review for specific high-risk modules, not
    for whole projects. In addition to the selection of target scopes, tools can also
    help us to do a manual code review more efficiently. Here are some open source
    recommended tools that will help make source code reviews more efficient, although
    these are not specialized for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tools** | **Usage scenario** |'
  prefs: []
  type: TYPE_TB
- en: '| **AndroGuard** |'
  prefs: []
  type: TYPE_TB
- en: This includes lots of Python analysis modules to do a reverse-engineering analysis
    of Android applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The generated graph can be viewed by Gephi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Doxygen** |'
  prefs: []
  type: TYPE_TB
- en: This supports a wide range of program languages to generate online HTML or PDF
    documentation. It can also generate a functions call graph that can be viewed
    by Graphviz.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's useful to give us an overview of the program and to identify the modules
    with high-risk that we should focus on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Kscope** |'
  prefs: []
  type: TYPE_TB
- en: This tool can analyze C source code with a tree of calling functions and a call
    graph.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **OpenGrok** |'
  prefs: []
  type: TYPE_TB
- en: This provides Google-like syntax and a RegExp full-text source code search.
    It can also do cross-referencing based on the search results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **WinMerge** |'
  prefs: []
  type: TYPE_TB
- en: This can compare the differences between two files and folders. The comparison
    results are presented in visual colors. It's useful when we are looking for code
    changes between different releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For non-Windows platforms, KDiff3 or Meld are alternative open source options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://kdiff3.sourceforge.net/](http://kdiff3.sourceforge.net/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://meldmerge.org/](http://meldmerge.org/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **NCC Code Navi** |'
  prefs: []
  type: TYPE_TB
- en: The key advantage of the NCC Code Navi tool is the capability to do a keywords
    search across source code files. Right-clicking to launch a CERT search coding
    search is also useful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Secure code scanning tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In terms of source code scanning, there is no-one-size-fits-all solution. There
    are also no scanning tools that can find zero false positives with a 100% accurate
    detection rate. Therefore, for the same programming language, it's common that
    we may apply at least two scanning tools for a cross-reference check.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some commonly used open-source secure coding analysis tools, as in
    2018\. Note that we only list open source tools here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tools** | **Background and key characteristics of the scanning tool** |'
  prefs: []
  type: TYPE_TB
- en: '| **Retire.JS** |'
  prefs: []
  type: TYPE_TB
- en: Detection of vulnerable JavaScript libraries, such as jQuery, AngularJS, Node,
    and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides the command line, grunt plugin, and also OWASP ZAP plugin for integration
    scanning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Clang Static Analyzer** | This provides standalone command line analysis
    for C, C++, and Objective C. |'
  prefs: []
  type: TYPE_TB
- en: '| **Flawfinder** | A simple C/C++ code scanning tool. It''s a Python command
    line scanning tool and can be easily customized based on the needs. |'
  prefs: []
  type: TYPE_TB
- en: '| **DREK** |'
  prefs: []
  type: TYPE_TB
- en: This acts like GREP to search specific security issue by regular expressions,
    but it can generate scanning results in PDF or HTML format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's easy to extend any scanning rules by regular expressions. It can be used
    to scan any programming languages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pylint** | Pylint is a source code checker for the Python programming language. 
    |'
  prefs: []
  type: TYPE_TB
- en: '| **PHPMD** |'
  prefs: []
  type: TYPE_TB
- en: PHP Mess Detector is a PHP source code scanner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DawnScanner** | Security scanner for Ruby Web applications. |'
  prefs: []
  type: TYPE_TB
- en: '| **SpotBugs** |'
  prefs: []
  type: TYPE_TB
- en: This provides a standalone GUI and command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpotBugs can also be used as an Eclipse plugin. It's the successor of FindBugs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **CPP Check** | This is a static code analysis tool for C/C++. |'
  prefs: []
  type: TYPE_TB
- en: '| **Mobile Security Framework (****MobSF)** | The Mobile Security Framework
    is a fully automated scanning tool for Android apps. A developer can just upload
    the APK to the MSF, and the MSF will do all the analysis automatically. |'
  prefs: []
  type: TYPE_TB
- en: '| **Clang Static Analyzer** | This is a code analysis tool for C/C++ and Objective
    C. |'
  prefs: []
  type: TYPE_TB
- en: '| **ESLint** |'
  prefs: []
  type: TYPE_TB
- en: This provides command-line code scanning with JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer here for the secure code scanning rules: [https://eslint.org/docs/rules/](https://eslint.org/docs/rules/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **JSHint** | This is for JavaScript code scanning, and also provides command
    line tools by NodeJS. |'
  prefs: []
  type: TYPE_TB
- en: '| **Infer** | This is a static code analyzer for Java, C/C++, and Objective
    C, provided by Facebook. |'
  prefs: []
  type: TYPE_TB
- en: '| **Phan** | Phan is a static analyzer for PHP. |'
  prefs: []
  type: TYPE_TB
- en: '| **PHP Security Checker** | This checks PHP project dependencies for known
    security issues. |'
  prefs: []
  type: TYPE_TB
- en: '| **OWASP Dependency check** | This supports a wide range of programming frameworks
    and checks the disclosed vulnerabilities with updated NVD data feeds. The tool
    can run as a command line or via integration with Jenkins. |'
  prefs: []
  type: TYPE_TB
- en: '| **VisualCodeGrepper** (**VCG**) | VCG is a language-independent scanning
    tool. The scanning rules can also be easily customized by regular expressions.
    There are also default rules for commonly banned APIs. It provides a GUI and command
    line to scan any piece of source code. |'
  prefs: []
  type: TYPE_TB
- en: '| **PMD** | This is a source code analyzer for Java and JavaScript. It''s mainly
    for common programming flaws. |'
  prefs: []
  type: TYPE_TB
- en: '| **Graudit** | This is a simple script to find potential security issues by
    using GREP to search for specific code patterns. The signatures database templates
    provide clues for what to look for.   |'
  prefs: []
  type: TYPE_TB
- en: '| **SonarQube** | This provides support for more than 20 languages and can
    integrate with CI frameworks. It is also UI-friendly for quality code scanning
    results.  |'
  prefs: []
  type: TYPE_TB
- en: '| **Brakeman** | Static analysis security scanner for Ruby on Rails.  |'
  prefs: []
  type: TYPE_TB
- en: '| **bandit** | Security analysis for Python source code. |'
  prefs: []
  type: TYPE_TB
- en: '| **Error Prone** | Error Prone detects potential Java errors during compile
    time. |'
  prefs: []
  type: TYPE_TB
- en: '| **Dawn** | Dawn is a static analysis security scanner for Ruby web applications.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Here is another categorization by language:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Programming language** | **Scanning tools** |'
  prefs: []
  type: TYPE_TB
- en: '| C/C++ |'
  prefs: []
  type: TYPE_TB
- en: Infer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPP Check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flawfinder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clang Static Analyzer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Java |'
  prefs: []
  type: TYPE_TB
- en: Infer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpotBugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PMD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Android |'
  prefs: []
  type: TYPE_TB
- en: MobSF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| PHP |'
  prefs: []
  type: TYPE_TB
- en: Phan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPMD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Ruby |'
  prefs: []
  type: TYPE_TB
- en: DawnScanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Python |'
  prefs: []
  type: TYPE_TB
- en: Pylint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| JavaScript |'
  prefs: []
  type: TYPE_TB
- en: ESLint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSHint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retire.JS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PMD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependencies vulnerabilities |'
  prefs: []
  type: TYPE_TB
- en: OWASP Dependency check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP Security Checker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retire.JS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Language-independent |'
  prefs: []
  type: TYPE_TB
- en: SonarQube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DREK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graudit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VisualCodeGrepper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Due to rules and detection engine capabilities, the scanning results may vary
    for the same programming language. Using two scanning tools for the same language
    is recommended. For example, one commercial tool for daily compiled scanning and
    another open source tool for developers' IDE plugins. The use of commercial scanning
    tools helps to tell customers how the services are tested while open source scanning
    tools give flexibility for further customization and large-scale deployment without
    budget constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Secure compiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Memory corruption and buffer overflow may result in exploit code injection
    attacks. For the C/C++ programming language, these can be protected by compiler
    options.  By a properly secured configuration of a C/C++ compiler (GCC, MS Visual
    Studio), the application will be able to add an additional layer of runtime defenses
    against exploit code injection attacks. These are also mostly ignored by a development
    team. The common secure options are summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Protection techniques** | **Secure options** | **OS/Compiler** |'
  prefs: []
  type: TYPE_TB
- en: '| Address Space Layout Randomization (ASLR)   | `echo 1 >/proc/sys/kernel/randomize_va_space `
    | Android, Linux OS |'
  prefs: []
  type: TYPE_TB
- en: '| Stack-based buffer overrun protection | `-fstack-protector``–fstack-protector-all`
    | gcc |'
  prefs: []
  type: TYPE_TB
- en: '| GOT Table Protection | `-Wl`,`-z`, `relro`  | gcc |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic link path | `-Wl,--disable-new-dtags,--rpath [path]` | gcc |'
  prefs: []
  type: TYPE_TB
- en: '| Non-executable stack | `-Wl,-z,noexecstack ` | gcc |'
  prefs: []
  type: TYPE_TB
- en: '| Image randomization | `–fpie –pie ` | gcc |'
  prefs: []
  type: TYPE_TB
- en: '| Insecure C runtime function detection | `–D_FORTIFY_SOURCE=2 ``–Wformat-security`
    | gcc |'
  prefs: []
  type: TYPE_TB
- en: '| Stack-based buffer overrun defenses (Canary) | `/GS` | MS (Microsoft)Visual
    C++ |'
  prefs: []
  type: TYPE_TB
- en: '| Address Space Layout Randomization (ASLR) | `/DYNAMICBASE` | MS Visual C++
    |'
  prefs: []
  type: TYPE_TB
- en: '| CPU-level No-eXecute (NX) support. Data Execution Prevention (DEP) | `/NXCOMPAT`
    | MS Visual C++ |'
  prefs: []
  type: TYPE_TB
- en: '| Safe-structured exception handling | `/SAFESEH` | MS Visual C++ |'
  prefs: []
  type: TYPE_TB
- en: '| Enable additional security check | `/SDL` | MS Visual C++ |'
  prefs: []
  type: TYPE_TB
- en: 'For further reference and a description of each protection technique, here
    are some references:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SAFECode Development Practices**: [https://www.safecode.org/publication/SAFECode_Dev_Practices0211.pdf](https://www.safecode.org/publication/SAFECode_Dev_Practices0211.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP C-based ToolChain Hardening**: [https://www.owasp.org/index.php/C-Based_Toolchain_Hardening](https://www.owasp.org/index.php/C-Based_Toolchain_Hardening)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux Audit ASLR**: [https://linux-audit.com/linux-aslr-and-kernelrandomize_va_space-setting/](https://linux-audit.com/linux-aslr-and-kernelrandomize_va_space-setting/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MS Security Best Practice for C++**: [https://msdn.microsoft.com/en-us/library/k3a3hzw7.aspx](https://msdn.microsoft.com/en-us/library/k3a3hzw7.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure Compiler and linker flags for GCC**: [https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/](https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To verify whether the application or the environment has been configured with
    secure options, the following tools are useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CheckSec**: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BinScope**: [https://www.microsoft.com/en-us/download/details.aspx?id=44995](https://www.microsoft.com/en-us/download/details.aspx?id=44995)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common issues in practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many commercial and open source secure coding tools. Does any tool
    offer a low false positive rate with a high detection rate?
  prefs: []
  type: TYPE_NORMAL
- en: 'Answer: There are no perfect or outstanding tools that offer high detection
    rates with low false positive rates. Every tool offers a different scanning results.
    The high positive rate can also mean more conservative scanning, which identifies
    more potential or suspicious code issues. You will find the detection rate and
    scanning results also vary with different tools. Tool A may be able to detect
    an issue that tool B can''t, and vice versa. In practice, it''s also suggested
    to use at least two tools for code scanning as a cross-reference review.'
  prefs: []
  type: TYPE_NORMAL
- en: The scanning results may list over 1,000 issues. Is there any advice on how
    to handle these issues?
  prefs: []
  type: TYPE_NORMAL
- en: 'Answer: For a large-scale project, it''s very common to have such issues. It
    can be overwhelming for the developer team to check all of the issues identified
    by the scanning tool. Here are some possible approaches to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Filter and evaluate those issues scored as high-risk first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize the scanning rules for the project to filter those rules that are
    irrelevant to the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do an incremental scan for the scopes of source code that were newly added or
    recently changed. This may depend on whether the scanning tool provides incremental
    scanning capability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorize common issues for the same root/cause. Maybe 50% of issues are caused
    by the same root/cause, such as the use of the same module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed secure coding industry best practices, such as CERT, CWE,
    Android secure coding, OWASP Code Review, and the Apple secure coding guide. Based
    on those secure coding rules, we established secure coding baselines as part of
    the security policy and release criteria. To allow the team to be familiar with
    secure coding, a training portal was prepared. It was suggested that the secure
    coding knowledge portal should provide not only coding rules but also case studies.
  prefs: []
  type: TYPE_NORMAL
- en: To apply secure coding to developers' daily tasks, secure coding tools must
    be adopted. We evaluated secure coding tools, taking into account usability, budget,
    programming language support, detection rates, and scanning rule maintenance.
    To evaluate the detection rate of a scanning tool, we also introduced some vulnerable
    projects that can be used as testing projects.
  prefs: []
  type: TYPE_NORMAL
- en: Secure coding rules and best practices are guidelines. They require the right
    secure coding tools to make them happen, and also the right approaches to make
    them more effective and efficient.  Therefore, we discussed code review approaches
    and also examples of high-risk modules. For a more efficient manual code review
    for high-risk modules, we also listed some tools that can help.  Finally, we listed
    some common open source secure code scanning tools for different programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will present a case study to walk through security requirements,
    threat modeling, secure architecture, design, and implementation for the development
    stage.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which one of the following is not included in CERT Secure Coding standards?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C/C++
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Find Security Bugs is mainly used for which of the following programming language?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C/C++
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Go
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following can be a release criterion for secure coding?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All source code must be reviewed with specified code scanning tools.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the compiler warnings should be checked and cleared.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the warnings in scanning results which were generated by scanning tools
    must be checked
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the main purpose of using vulnerable projects to evaluate code scanning
    tools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detection rate and false positive rates
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Budget
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Licenses
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following does not mitigate against buffer overflow exploit
    code injection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address Space Layout Randomization (ASLR)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CSRF Token
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Stack-based buffer overrun protection
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Non-Executable Stack
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following is not used to scan dependency vulnerabilities?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OWASP Dependency check
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Security Checker
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Retire.JS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: VisualCodeGrepper
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one is an automated mobile security testing framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MobSF
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenGrok
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Retire.JS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SonarQube
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following tools is not used for the Android security assessment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AndroGuard
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MobSF (Mobile Security Framework)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Flawfinder
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SpotBugs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**NIST 500-297 Report on the Static Analysis Tool**: [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.500-297.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.500-297.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Secure Coding**: [https://www.jssec.org/dl/android_securecoding_en.pdf](https://www.jssec.org/dl/android_securecoding_en.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP PHP Security Cheat Sheet**: [https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet](https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PHP Security Manual**: [https://php.net/manual/en/security.php](https://php.net/manual/en/security.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Code Review**: [https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project](http://Https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Secure Coding Practices**: [https://www.owasp.org/index.php/OWASP_Secure_Coding_Practices_-_Quick_Reference_Guide](https://www.owasp.org/index.php/OWASP_Secure_Coding_Practices_-_Quick_Reference_Guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apple Secure Coding Guide**: [https://developer.apple.com/library/content/documentation/Security/Conceptual/SecureCodingGuide/Introduction.html](https://developer.apple.com/library/content/documentation/Security/Conceptual/SecureCodingGuide/Introduction.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Salesforce Security**: [https://developer.salesforce.com/devcenter/security](https://developer.salesforce.com/devcenter/security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Python Security**: [http://www.pythonsecurity.org/](http://www.pythonsecurity.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFE Practices for Secure Development of Cloud Applications**: [https://safecode.org/wp-content/uploads/2018/01/SAFECode_CSA_Cloud_Final1213.pdf](https://safecode.org/wp-content/uploads/2018/01/SAFECode_CSA_Cloud_Final1213.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C/C++ Banned API**: [https://github.com/Microsoft/ChakraCore/blob/master/lib/Common/Banned.h](https://github.com/Microsoft/ChakraCore/blob/master/lib/Common/Banned.h)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Awesome Static Code Analysis**: [https://github.com/mre/awesome-static-analysis](https://github.com/mre/awesome-static-analysis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oracle Secure Coding Guidelines for Java**: [http://www.oracle.com/technetwork/java/seccodeguide-139067.html](http://www.oracle.com/technetwork/java/seccodeguide-139067.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FindSecBugs Java Bugs Patterns**: [https://Find-sec-bugs.github.io/bugs.htm](https://Find-sec-bugs.github.io/bugs.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SEI CERT Secure Coding Standards**: [https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards](https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MITRE CWE White Paper V3.1**: [https://cwe.mitre.org/data/published/cwe_v3.1.pdf](https://cwe.mitre.org/data/published/cwe_v3.1.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CheckMarx Go Secure Coding:** [https://checkmarx.gitbooks.io/go-scp/](https://checkmarx.gitbooks.io/go-scp/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CheckMarx JavaScript Secure Coding:** [https://checkmarx.gitbooks.io/js-scp/](https://checkmarx.gitbooks.io/js-scp/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
