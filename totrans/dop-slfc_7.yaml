- en: Continuous Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about setting our own Jenkins server and
    using Jenkins for continuous integration, how to configure Jenkins for retrieving
    metadata from Salesforce sandbox, and pushing code to Git's version control. We
    also performed steps to deploy metadata to UAT sandbox, using Jenkins and the
    Ant migration tool.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about code quality using PMD. We will discuss
    continuous testing and executing Apex tests in a deployment using Jenkins. We
    will get to know Selenium, and how to set up Selenium using Firefox. We will also
    go through record and playback for the Salesforce sample application. We will
    discuss using the Qualitia scriptless automation tool with Jenkins, where we get
    test reports in HTML format.
  prefs: []
  type: TYPE_NORMAL
- en: What is code quality?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Code quality** is identify based on some parameters such as best practices standards and
    rule sets. When code quality is increased, then user acceptance testing issues
    and production issues are reduced and productivity is increased. Using this PMD
    report, produced by an open source static source code analyzer that reports on
    issues found in the code, we can allocate extra time for reviewing code, and this
    increases product quality, along with best practice standards and effective governance.'
  prefs: []
  type: TYPE_NORMAL
- en: Checking code quality using a PMD report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two methods for performing the analysis. We will discuss them in the
    next sections.
  prefs: []
  type: TYPE_NORMAL
- en: PMD static analysis for Salesforce Apex using a Visual Studio (VS) Code extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will learn to analyze directly in VS Code on Apex and Visual force
    files. First, you have to install Visual Studio Code on your machine. (We already
    learned how to install VS Code in [Chapter 3](40971566-9729-40d5-b267-f03be16b7245.xhtml),
    *Deployment in Salesforce*).
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio Code and click on Extensions (*Ctrl* + *Shift* + *X*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0aae797b-f30f-43bf-b5ba-aa636b6fbf91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Search extension in Market Place, enter `pmd`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65d5bdd2-fb92-4e29-b3a4-35fff956acb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Apex PMD and click Install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89feb1da-a24b-4364-bf45-114ef6ebd1ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once installation is complete, click Reload and this will restart your VS Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ec7c7e3f-9c1b-4297-83fa-72386e16105c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the file about which you want to analyze the PMD report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e53bcd6-c815-4790-b8f8-9bdb99420311.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, open the command panel by right-clicking and selecting **All Commands**,
    or press *Ctrl* + *Shift* + *P*. Enter Apex `stat` in the command panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/06c7ea59-1611-4b4a-86a1-10e4428aeab6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on Apex Static Analysis: On File. It shows you all the analytical
    results in PROBLEMS.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Resolve all the problems and run Apex Static Analysis: On File again.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PMD static analysis for Salesforce Apex using the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we can run a PMD analysis on all files by using a single command. The
    steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, download the PMD JAR file from [https://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/](https://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/),
    and then take a look at this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f4eab99-47f9-4f76-aaf3-1df60626c3d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Extract the JAR file, go inside the bin file, and copy the path of that folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open **Run** by pressing Windows + *R* and enter the command to open the
    command-line panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to your bin path by entering the path of that folder. If you are on another
    drive, then first go to that drive and enter the copied path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65ad7548-c5b1-4654-aea3-0bc3cd776ffb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, create your command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4292b919-a9a3-4263-8cf4-72c7f3f5a8e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will get an exported CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf33fe75-d40e-4dd1-8dec-eaa14fb9beba.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, open that CSV file and correct your code based on the error types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the CSV file, we get following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem**: This is just a serial number of the problems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package**: In this column, we get the package name of that file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File**: In this column, we get the exact file path of that file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Priority**: There are different types of priorities, from 1 to 3, and they
    are added to this column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line**: In this column, we get the exact line number of the problem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: In this column, we get a single-line description of the problem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rule set**: In this column, we get the rule set''s name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rule**: In this column, we get the rule''s name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are different types of rules and rule sets. Here are some examples of
    rules and rule sets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Best practices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ApexUnitTestClassShouldHaveAsserts`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AvoidGlobalModifier`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AvoidLogicInTrigger`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code style:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClassNamingConventions`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ForLoopsMustUseBraces`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IfElseStmtsMustUseBraces`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IfStmtsMustUseBraces`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MethodNamingConventions`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VariableNamingConventions`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Design:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AvoidDeeplyNestedIfStmts`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CyclomaticComplexity`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExcessiveClassLength`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExcessiveParameterList`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExcessivePublicCount`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NcssMethodCount`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StdCyclomaticComplexity`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TooManyFields`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Errors prone:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AvoidHardcodingId`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmptyCatchBlock`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmptyStatementBlock`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Performance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AvoidSoqlInLoops`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ApexCRUDViolation`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ApexSharingViolations`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ApexSOQLInjection`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ApexXSSFromURLParam`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing Apex tests in a deployment using Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Salesforce code, coverage of Apex components should be more than 75% to deploy
    changes to production. If any test case fails during deployment, then deployment
    to production will also fail. To avoid this, it is recommended that you test your
    deployment in sandbox first before deploying it to production. Sometimes, individual
    code coverage of Apex components may be less than 75%, but overall code coverage
    for your organization should be 75% or more. To ensure test cases don't fail in
    production, you can execute a subset of test cases in sandbox after it's deployed.
    We have already seen deploying changes from one sandbox to another in the previous
    chapter. We just need to make small changes in `build.xml` to specify the subset
    of tests to execute while deploying.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample `build.xml` with test cases to execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To run specific tests, the value of the `testLevel` parameter should be set
    to `RunSpecifiedTests`. A child element, `</runTest>`, is used to specify the
    test classes to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run all test cases from `sf:deploy` tasks with the `runAllTests="true"`
    attribute, `package.xml` should be empty, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a sample `build.xml` used to run all test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The  role of Jenkins in deployment will be the same; developers just need to
    change the parameters in the `build.xml` and the `package.xml` configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: What is continuous testing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Continuous testing** is the process of executing test cases after new changes
    are deployed to the environment. In continuous testing, we evaluate deployments
    at every stage so that any bugs introduced in the existing code are reported earlier
    in the software development cycle. Software changes are continuously moved from
    the development to the test environment, and the testing team needs to test all
    the existing functionalities, along with new functionalities. Manual testing takes
    a longer time to complete, and feedback from the testing team is required to make
    further decisions about application delivery. Continuous testing helps us to get
    immediate feedback and makes the testing cycle easier. Having continuous testing
    in place reduces the business risk involved in releasing software with bugs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/534af3ff-1a56-4f75-8bae-b8ed592a31e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Continuous testing is dein the preceding diagram. Whenever any new feature is
    developed by the development team, developers push code in a source code versioning
    system such as Git, so that the changes are tracked. Once a feature is ready in
    the development environment, it is moved to a continuous integration server such
    as Jenkins. Jenkins will build the source code, and once the build is deployed
    to the test environment, we will configure the Jenkins job to execute the test
    cases. For continuous testing, we can use tools to write and execute automation
    test cases, such as Selenium, Katalon Studio, Qualitia, and so on. In this chapter,
    we will only focus on the Selenium testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium is an open source tool used for automating tests we run on a web application.
    Selenium is a web-based application. We can automate the testing using Selenium.
    Selenium supports many browsers, including Chrome, Firefox, and Safari. You don't
    need scripting or development knowledge to get started with Selenium, a person
    with administration experience can also start setting up Selenium. Using a record/playback
    tool in Selenium, we can perform tests without knowledge of the scripting language.
    Selenium supports multiple platforms, including Windows, Linux, and Mac. We are
    going to look at the steps to set up Selenium on Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Selenium using Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will set up Selenium with Firefox on macOS. The installation steps for Firefox
    might differ, depending on your operating system. We will be using Mac in this
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some prerequisites for installing Firefox on Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Operating systems: macOS 10.9, 10.10, 10.11, 10.12, and 10.13'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recommended hardware: Macintosh computer with an Intel x86 processor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 512 MB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 200 MB hard drive space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The installation steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://www.mozilla.org/firefox/new/?utm_medium=referralandutm_source=support.mozilla.org](https://www.mozilla.org/firefox/new/?utm_medium=referral&utm_source=support.mozilla.org).
    It will automatically detect the platform you are using and provide a download
    link in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the download button; it will start downloading Firefox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the download is complete, open the `Firefox.dmg` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag and drop Firefox into the applications folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81e3a441-ed8c-4577-9151-38d48a2ec14a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will start copying the `Firefox.dmg` file to **Applications**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/253530b4-b67e-4fca-83eb-34e28e9ce8c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Open Firefox from Applications. You will see a warning that Firefox is being
    installed from the internet. Click on Open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have Firefox installed on our system. We can skip email verification in Firefox.
    Open [https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)
    in Firefox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Selenium IDE section and click on the For Firefox link. It will redirect
    you to the Add Selenium IDE extension page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/395b0c46-84a3-401b-a11b-709245d0c0ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Add to Firefox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/85f699b3-cd82-4e06-bcd9-02c934e55f75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This extension require some permissions to work. Click on Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c5447505-f2f9-41bb-a4aa-28ef85bf26a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the **Selenium IDE** plugin is added, you will see the popup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0408b34a-1d46-4653-beaf-23f7b81fbe02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Selenium IDE plugin is installed in Firefox, you can launch it by
    clicking on the Selenium IDE icon in the top-right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ba2a7df-b23c-4e90-9168-1df869d69563.png)'
  prefs: []
  type: TYPE_IMG
- en: Recording tests using Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps to record tests are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Selenium is launched, you will see the following window. Provide the base
    URL as [https://login.salesforce.com](https://login.salesforce.com/) and click
    on Start Recording:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/105a400d-abdf-4edd-bd81-ba991d712475.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Every action you perform in Firefox will be tracked by Selenium. Open [https://login.salesforce.com](https://login.salesforce.com/),
    provide a username and password to log in, and click on Login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/95a5f065-7561-40e2-a6f5-9a6eb90d905c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once logged in, you can click on any item or perform any action. You will see
    a notification about commands being recorded by Selenium:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc290cbf-167f-457a-9acf-3545b19f3339.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After performing the task, click on Logout. You can see the steps being recorded
    by Selenium in this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ac1376b-6745-4af3-b100-1d9a6af6fec3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the commands stored in the Selenium IDE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0250600a-a729-4c8d-baad-77659344e0f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Selenium IDE window, and you will see the data collected by Selenium.
    Click on Stop Recording:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/554a664f-7ae6-4a92-828d-0695dd753806.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the recording under any name, for example, `Sample`. You can keep the
    names specific to the tests you performed as a meaningful naming convention:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac702fd0-dc45-4f2e-8d41-e18bc97f1465.png)'
  prefs: []
  type: TYPE_IMG
- en: Playing back the recorded tests using Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A record step is completed by Selenium. Now, we can use the same file to re-run
    the steps. This process is called **playback**:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Selenium IDE from the Firefox browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Open Project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1d089ae-86d5-4763-b18f-9830fb35a72d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Browse to the file we stored in the record step as `Sample.side`. Open this
    file and click on **Run** **Current Test**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d902684-7b35-4117-9e60-6e87febc6da2.png)'
  prefs: []
  type: TYPE_IMG
- en: Selenium will open Salesforce UEL and perform steps from the sample test case.
    Log in to Salesforce and log out after performing the test case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the logs in Selenium''s **Log** console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74cc487c-7ef1-4468-94a9-e660c5c0ab68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Stop Test execution** if you want to stop execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7200150-33a7-4765-b4e3-022bb5040741.png)'
  prefs: []
  type: TYPE_IMG
- en: We can write test cases in any language and execute test cases after deploying
    to Salesforce sandbox. Selenium can be used to automate tests. Whenever we deploy
    code from the development sandbox to the UAT sandbox or from sandbox, to production,
    we can execute test cases with Selenium to cover each and every scenario and make
    sure the application is bug-free. Manually testing all functionality can take
    a long time, and we end up having longer testing cycles. Releasing changes to
    production frequently involves a lot of testing and feedback loops to ensure the
    quality of the application.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a Jenkins job for the execution of test cases with Selenium on
    the deployment sandbox. If the sandbox is not a full-copy sandbox, then we might
    need to add some test data, change email IDs of users, and so on. For such tasks,
    we can use Selenium to automate and speed up the process of software testing and
    delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Qualitia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Qualitia** is a scriptless testing tool. Qualitia is a functional test automation
    platform that provides us with a way to automate testing without scripting. Qualitia
    integrates with Jenkins as well. Qualitia is based on Selenium, in that it doesn''t
    require you to write any scripts. After executing test cases in sandbox, Qualitia
    presents the results for the test cases in HTML format so that they are readable
    by the end user. We can host these HTML files on a file server and developers
    and testers will be able to access them using web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: Qualitia provides integration with Jenkins. We can execute automated test cases
    after deploying to the UAT sandbox. Also, we will be able to schedule our automated
    tests once per day in our pre-production or staging sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: Running test cases with Qualitia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run test cases with Qualitia, we need to integrate it with Jenkins. Qualitia's
    job will be executed on the Windows server, so if we don't have Jenkins on the
    Windows server, then we can add the Windows client to the Jenkins server and run
    Qualitia test cases on it. We need the Qualitia JAR and path to the XML test cases
    and Chrome's driver in order to execute tests. Qualitia will run a test case sandbox
    and generate reports in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Use case – continuous testing using Qualitia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram shows the integration of open source tools with Salesforce
    sandbox and provides versioning, scriptless testing, and automated deployments
    using GitLab, the Force.com Migration tool, Jenkins, and Qualitia:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aad46350-1373-406c-85c1-5a913953d185.png)'
  prefs: []
  type: TYPE_IMG
- en: In the previous scenario, developers work with Eclipse and the Force.com IDE.
    sandbox will be in sync with the Eclipse workspace. After the changes are complete,
    the developer will push changes to Git and mention the components to be deployed
    in the `package.xml`  file. This Git push will trigger the Jenkins job, which
    will execute the Ant deployment script and deploy changes from the developer's
    sandbox to the test sandbox. If our deployment is successful, then it will trigger
    another job to run Qualitia tests, creating a report in HTML format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the tools used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Git**: For tracking Salesforce changes in Git'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Force.com Migration tool**: For Salesforce deployments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins**: To automate deployments to the pre-UAT environment, with Jenkins
    and an Ant script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Qualitia**: Scriptless testing tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: We can use Selenium for automation testing instead of Qualitia.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about code quality and continuous testing. We discussed
    the tools used in automation testing, such as Selenium and Qualitia. We learned
    the step-by-step process for setting up Selenium with Firefox. We performed a
    test case on a sample Salesforce application, using record and playback in Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed use cases for the Qualitia scriptless automation tool, used to
    perform tests on the Salesforce application and store the results of automation
    tests in HTML format. We demonstrated a use case of using a diagram with Git for
    version control Jenkins as a continuous integration server, and Qualitia for executing
    automation tests on a Salesforce application. We can replace Qualitia with Selenium
    if we wish to.
  prefs: []
  type: TYPE_NORMAL
