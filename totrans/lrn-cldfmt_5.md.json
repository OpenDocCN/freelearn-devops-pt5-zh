["```\nexports.handler = (event, context, callback) => {\n    var data = event['msg'];\n    callback(null, 'Received: ' + data);\n};\n```", "```\n{\n  \"msg\": \"testing value\"\n}\n```", "```\n$ pip install awscli\n```", "```\n$ aws lambda invoke --invocation-type RequestResponse --function-name my-simple-lambda --payload '{\"msg\": \"this is AWS CLI\"}' output.txt \n```", "```\n$ nano output.txt\n```", "```\n{\n  \"Type\" : \"AWS::Lambda::Function\",\n  \"Properties\" : {\n    \"Code\" : Code,\n    \"DeadLetterConfig\" : DeadLetterConfig,\n    \"Description\" : String,\n    \"Environment\" : Environment,\n    \"FunctionName\" : String,\n    \"Handler\" : String,\n    \"KmsKeyArn\" : String,\n    \"MemorySize\" : Integer,\n    \"ReservedConcurrentExecutions\" : Integer,\n    \"Role\" : String,\n    \"Runtime\" : String,\n    \"Timeout\" : Integer,\n    \"TracingConfig\" : TracingConfig,\n    \"VpcConfig\" : VPCConfig,\n    \"Tags\" : [ Resource Tag, ... ]\n  }\n}\n```", "```\nType: \"AWS::Lambda::Function\"\nProperties: \n  Code:\n    Code\n  DeadLetterConfig:\n    DeadLetterConfig\n  Description: String\n  Environment:\n    Environment\n  FunctionName: String\n  Handler: String\n  KmsKeyArn: String\n  MemorySize: Integer\n  ReservedConcurrentExecutions: Integer\n  Role: String\n  Runtime: String\n  Timeout: Integer\n  TracingConfig:\n    TracingConfig\n  VpcConfig:\n    VPCConfig\n  Tags: \n    Resource Tag\n```", "```\n{\n    \"Description\" : \"This is a simple Lambda function is Node.js\",\n    \"Parameters\": { \n        \"LambdaFunctionName\":{\n            \"Description\": \"AWS Lambda function name\",\n            \"Type\": \"String\"\n        }\n      },\n    \"Resources\":{\n        \"TestLambdaFunction\" : {\n            \"Type\" : \"AWS::Lambda::Function\",\n            \"Properties\" : {\n                \"FunctionName\" : {\n                    \"Ref\": \"LambdaFunctionName\"\n                },\n                \"Handler\" : \"index.handler\",\n                \"Role\" : { \"Fn::GetAtt\" : [\"TestLambdaExecutionRole\", \"Arn\"] },\n                \"Code\" : {\n                    \"ZipFile\" : { \"Fn::Join\" : [ \"\\n\", [ \n                        \"exports.handler = (event, context, callback) => {\",\n                        \" var data = event['msg'];\",\n                        \" callback(null, 'Received: ' + data);\", \n                        \"}\"\n                    ]]}\n                },\n                \"Timeout\" : \"10\", \n                \"Runtime\" : \"nodejs6.10\"\n            }\n        },\n        \"TestLambdaExecutionRole\": {\n            \"Type\": \"AWS::IAM::Role\",\n            \"Properties\": {\n                \"AssumeRolePolicyDocument\": {\n                    \"Version\": \"2012-10-17\",\n                    \"Statement\": [\n                        {\n                            \"Effect\": \"Allow\",\n                            \"Principal\": {\n                                \"Service\": [\n                                    \"lambda.amazonaws.com\"\n                                ]\n                            },\n                            \"Action\": [\n                                \"sts:AssumeRole\"\n                            ]\n                        }\n                    ]\n                },\n                \"Path\": \"/\"\n            }\n        }\n    }\n}\n```", "```\nDescription: This is a simple Lambda function is Node.js\nParameters:\n  LambdaFunctionName:\n    Description: AWS Lambda function name\n    Type: String\nResources:\n  TestLambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName:\n        Ref: LambdaFunctionName\n      Handler: index.handler\n      Role:\n        Fn::GetAtt:\n        - TestLambdaExecutionRole\n        - Arn\n      Code:\n        ZipFile:\n          Fn::Join:\n          - \"\\n\"\n          - - exports.handler = (event, context, callback) => {\n            - \" var data = event['msg'];\"\n            - \" callback(null, 'Received: ' + data);\"\n            - \"}\"\n      Timeout: '10'\n      Runtime: nodejs6.10\n  TestLambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      Path: \"/\"\n```", "```\n$ aws lambda invoke --invocation-type RequestResponse --function-name my-lambda-cloudformation --payload '{\"msg\": \"this is AWS CLI\"}' output-lambda.txt\n```", "```\n$ nano output-lambda.txt\n```", "```\n{\n  \"Type\" : \"AWS::DynamoDB::Table\",\n  \"Properties\" : {\n    \"AttributeDefinitions\" : [ AttributeDefinition, ... ],\n    \"GlobalSecondaryIndexes\" : [ GlobalSecondaryIndexes, ... ],\n    \"KeySchema\" : [ KeySchema, ... ],\n    \"LocalSecondaryIndexes\" : [ LocalSecondaryIndexes, ... ],\n    \"PointInTimeRecoverySpecification\" : PointInTimeRecoverySpecification,\n    \"ProvisionedThroughput\" : ProvisionedThroughput,\n    \"SSESpecification\" : SSESpecification,\n    \"StreamSpecification\" : StreamSpecification,\n    \"TableName\" : String,\n    \"Tags\" : [ Resource Tag, ... ],\n    \"TimeToLiveSpecification\" : TimeToLiveSpecification\n  }\n}\n```", "```\nType: \"AWS::DynamoDB::Table\"\nProperties:\n  AttributeDefinitions:\n    - AttributeDefinition\n  GlobalSecondaryIndexes:\n    - GlobalSecondaryIndexes\n  KeySchema:\n    - KeySchema\n  LocalSecondaryIndexes:\n    - LocalSecondaryIndexes\n  PointInTimeRecoverySpecification: \n    PointInTimeRecoverySpecification\n  ProvisionedThroughput:\n    ProvisionedThroughput\n  SSESpecification:\n    SSESpecification\n  StreamSpecification:\n    StreamSpecification\n  TableName: String\n  Tags: \n    - Resource Tag\n  TimeToLiveSpecification: \n    TimeToLiveSpecification\n```", "```\nvar AWS = require('aws-sdk');\nvar ddb = new AWS.DynamoDB();\nexports.handler = (event, context, callback) => {\n    var params = {\n        TableName: 'mydynamodb',\n        Item: {\n           'id': {S:new Date().getTime().toString()},\n           'email': {S:event.email},\n           'name': {S:event.name},\n           'country' : {S:event.country},\n           'age' : {N:event.age},\n        }\n    };\n    ddb.putItem(params, function(err, data) {\n       if (err) {\n          callback(err, 'Error');\n       } else {\n          callback(null, 'Insert data was successful');\n       }\n    });\n}\n```", "```\n{ \n  .....\n\n        },\n        \"myDynamoDBTable\" : {\n            \"Type\" : \"AWS::DynamoDB::Table\",\n            \"Properties\" : {\n                \"TableName\": \"mydynamodb\",\n                \"AttributeDefinitions\": [ \n                  {\"AttributeName\" : \"id\", \"AttributeType\" : \"S\"}\n                ],\n                \"KeySchema\": [\n                  { \"AttributeName\": \"id\", \"KeyType\": \"HASH\" }\n                ],\n                \"ProvisionedThroughput\" : {\n                   \"ReadCapacityUnits\" : \"5\",\n                   \"WriteCapacityUnits\" : \"5\"\n                } \n            }\n        },\n        \"TestLambdaExecutionRole\": {\n...                \n                            \"Resource\": [\n                                {\"Fn::Join\" : [\"\", [\"arn:aws:dynamodb:\", {\"Ref\": \"AWS::Region\"}, \":\", {\"Ref\": \"AWS::AccountId\"}, \":table/mydynamodb\"]]}\n                            ]\n                        }]\n                    }\n                }],\n...\n        }\n    }\n  }\n```", "```\n...\nResources:\n  ...\n      Code:\n        ZipFile:\n          Fn::Join:\n          - \"\\n\"\n          -\n      Timeout: '10'\n      Runtime: nodejs6.10\n  myDynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n ...\n      - AttributeName: id\n        KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits: '5'\n        WriteCapacityUnits: '5'\n  TestLambdaExecutionRole:\n...\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Policies:\n      - PolicyName: dynamodb\n        PolicyDocument:\n          Version: '2012-10-17'\n...\n```", "```\n{\"email\": \"user1@email.com\", \"name\":\"hessa\", \"country\":\"DE\", \"age\":\"32\"}\n```", "```\n$ aws lambda invoke --invocation-type RequestResponse --function-name lambda-dynamodb-func --payload '{\"email\": \"user1@email.com\", \"name\":\"hessa\", \"country\":\"DE\", \"age\":\"32\"}' lambda-dynamodb.txt\n```", "```\n$ nano lambda-dynamodb.txt\n```", "```\nvar region = process.env.AWS_REGION; \nexports.handler = (event, context, callback) => {\n     var data = event['msg'];\n     callback(null, 'Received: ' + data + ' . Region: ' + region); \n}\n```", "```\n{\"msg\": \"this is AWS CLI\"}\n```", "```\n$ aws lambda invoke --invocation-type RequestResponse --function-name lambda-multiregions-func --payload '{\"msg\": \"this is AWS CLI\"}' output-multiregion.txt\n```", "```\n$ nano output-multiregion.txt\n```"]