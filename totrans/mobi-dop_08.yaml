- en: Deploying Applications on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover how to deploy applications to the cloud and look
    at the prerequisites to do so. Before going forward, we need to understand why
    we want to deploy applications to the cloud. We have gone through the differences
    of Cloud versus on-premises systems in [Chapter 1](69772d4d-8571-421f-83a8-a23b0411e8aa.xhtml),
    *Introduction*.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have gone through various DevOps mechanisms, which are where you
    will start writing your code and pushing it to a code repository (GitHub), as
    the commands are pretty straightforward (such as `git add`, `git commit`, and
    `git push`).
  prefs: []
  type: TYPE_NORMAL
- en: Once the new version of the code is available in GitHub, it will be pulled as
    a new change to the **Continuous Integration** and **Continuous Deployment** (**CI**/**CD**)
    pipeline. We have demonstrated two examples in our book of how to deploy a CI/CD
    pipeline (Teamcity and VSTS). CI will start the process of building different
    parts of the software, including the code/software, database, and other dependent
    components of the pipeline. The software scripts will then be deployed to the
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Before we deploy the code, we need to set up the environment, and the environment
    here includes a set of machines running on AWS. The virtual machines in AWS are
    called **Elastic Compute Cloud** (**EC2**). As the software is running on multiple
    machines, we have to make sure the requests go to all the machines. For that,
    we will create an **Elastic Load Balancer** (**ELB**). An ELB distributes user
    requests to multiple EC2 nodes and gives a single DNS host entry to point end
    user requests. In this chapter, we will also use **Auto Scaling Groups** (**ASGs**),
    used to scale in and out EC2 instances on the basis of various metrics, such as
    workload, CPU, memory consumption, and so on. You can configure an ASG to meet
    your application requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover application deployment on AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creation of an instance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightsail
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EC2 CLI
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Terraform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Elastic Load Balancer, launch configuration, and Auto Scaling Groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s continue with creating an EC2 instance. There are various methods
    to create EC2 instances in AWS. We will be going through the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Lightsail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EC2 CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teraform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightsail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightsail is a one-click easy service to create instances, and it is very important
    for testing applications and development environments where you don't want to
    spend time on spinning and maintaining nodes. Lightsail also supports creating
    instances with predefined templates for MEAN, LAMP, Node.js, and LEMP (Nginx).
    Let's see how we can create instances with Lightsail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the required steps to create instances in Lightsail:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the AWS console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Lightsail under the Compute section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6922c2d-f0bf-4b9b-bd65-f44faf1bc143.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first screen of Lightsail is pretty straightforward; just click on Create
    instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c5652dfe-97fd-4557-b1f3-395ffbd32805.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you will be asked a bunch of basic questions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select your instance location:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e39f7cdd-24e0-4d45-8625-dec00865b207.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Pick your instance image and select a blueprint:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1252a228-14a4-4a6b-a68a-82be3157457b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Create New and create a key pair for your instance:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f4be806-5f33-45f7-88cf-32b7ee77cefa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide a name to the key and click on Generate key pair:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b1751af-564f-4ce9-b190-cf06d364109e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose your instance plan:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5aedc6a1-b969-4354-af1d-110fe2cf90ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Name the instance. You can create multiple instances as per your requirements.
    Instances will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/14ca0e8a-d3f6-4044-aadd-b5cca78e9b91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can connect to the instance by clicking on the three dots at the top-right
    corner of the instance icon and clicking on Connect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c77af472-ccc7-4e5d-abfe-2165dbf7c2af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A connection screen will be shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f0484c1e-52dd-413a-bd9b-bfd145bddc83.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the instance has been created. We will now create instances using Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Terraform provides simple Infrastructure as a Service for multiple cloud providers
    and existing house systems. Using Terraform, we can manage very low-level tasks,
    such as creating an instance, adding EBS volume to the instance, and registering
    the instance to Route 53\. We will be using Terraform as self-service code; for
    example, for when we have developed the code and we want to deploy it somewhere,
    do the integration testing, and then destroy the machines/cluster. The setup can
    be very useful for software showcase/trial, multiple cloud setup, and replaceable
    infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Terraform installation can be done through downloading a single binary package.
    Download the binary package from [https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html)
    according to your OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation is done, verify it by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will see how to create EC2 instances using Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory for your configuration file. Terraform will load all the
    files (`*.tf`) inside the directory called `workspace`, so make sure to keep the
    necessary files inside the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Terraform uses the `*.tf` format, known as Terraform configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Creating instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To pass the variable for the AWS instance type, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can also define `secret` variables in a file called `terraform.tfvars` or
    `*.auto.tfvars`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the AMI before you create an instance; `ami-id` will be different for
    all the regions. Please use the proper image ID as per your region. You can use
    tools such as Packer to create your own golden AMI. I''ve also attached Ansible
    code that you can use to create custom AMIs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Use providers, such as `"aws"`, to create instances in AWS. You can also set
    multiple providers in the configuration file to create instances in multiple providers
    in one go:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Don't pass the `access_key` and `secret_key` variables if you want to use IAM
    roles. We will create IAM roles in a later section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, `access_key` and `secret_key` can be saved in `~/.aws/credentials` using
    the `profile` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**# aws configure --profile user1**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**AWS Access Key ID [None]: ABCDEFGHIJKLMNOPQ**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**AWS Secret Access Key [None]: wjVDFVdfdfklfF/G6vFGFGr/fsjfERDFFDGgFGDFGDF**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**Default region name [None]: us-west-2**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**Default output format [None]: json**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Region details are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Region** | **Region Name** |'
  prefs: []
  type: TYPE_TB
- en: '| US East (Ohio) | `us-east-2` |'
  prefs: []
  type: TYPE_TB
- en: '| US East (N. Virginia) | `us-east-1` |'
  prefs: []
  type: TYPE_TB
- en: '| US West (N. California) | `us-west-1` |'
  prefs: []
  type: TYPE_TB
- en: '| US West (Oregon) | `us-west-2` |'
  prefs: []
  type: TYPE_TB
- en: '| Asia Pacific (Tokyo) | `ap-northeast-1` |'
  prefs: []
  type: TYPE_TB
- en: '| Asia Pacific (Seoul) | `ap-northeast-2` |'
  prefs: []
  type: TYPE_TB
- en: '| Asia Pacific (Osaka-Local) | `ap-northeast-3` |'
  prefs: []
  type: TYPE_TB
- en: '| Asia Pacific (Mumbai) | `ap-south-1` |'
  prefs: []
  type: TYPE_TB
- en: '| Asia Pacific (Singapore) | `ap-southeast-1` |'
  prefs: []
  type: TYPE_TB
- en: '| Asia Pacific (Sydney) | `ap-southeast-2` |'
  prefs: []
  type: TYPE_TB
- en: '| Canada (Central) | `ca-central-1` |'
  prefs: []
  type: TYPE_TB
- en: '| China (Beijing) | `cn-north-1` |'
  prefs: []
  type: TYPE_TB
- en: '| China (Ningxia) | `cn-northwest-1` |'
  prefs: []
  type: TYPE_TB
- en: '| EU (Frankfurt) | `eu-central-1` |'
  prefs: []
  type: TYPE_TB
- en: '| EU (Ireland) | `eu-west-1` |'
  prefs: []
  type: TYPE_TB
- en: '| EU (London) | `eu-west-2` |'
  prefs: []
  type: TYPE_TB
- en: '| EU (Paris) | `eu-west-3` |'
  prefs: []
  type: TYPE_TB
- en: '| South America (São Paulo) | `sa-east-1` |'
  prefs: []
  type: TYPE_TB
- en: 'Initialize the configuration file by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once the configuration is done, the AWS plugin is set in a separate directory
    for further use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the configuration in the same directory where your `main.tf` exists. You
    can also pass multiple variables in the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The output is pretty human-readable and equivalent to Git output. The output
    contains the implementation steps in detail. If the implementation starts with
    `+` (a plus sign), that means Terraform is creating resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before starting the creation of instances, Terraform will ask for confirmation.
    You can review the plan and click `yes`. If you are running Terraform as part
    of your automation, add `auto-approve` to automatically approve all the configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The instance creation can take some time and once the instances are available,
    you can look for them in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the current status of Terraform, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Modifying instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To modify the instances, you need to make changes in `main.tf`. For example,
    I''m updating the elastic IP of the instance. The `aws_eip` module is used for
    allocation of elastic IPs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and run the following commands again to make the changes in the
    instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Type `yes` to accept the changes and see the changes using the AWS console,
    or run the `terraform show` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the output by creating another `output.tf` file in the same directory.
    Add the following configuration details in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can query separately to the IP output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Terminating instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instances can be terminated with single commands. Make sure to run the commands
    from the same directory where your `main.tf` exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you want to forcefully destroy the instance, use the `"-force"` flag with
    the command.
  prefs: []
  type: TYPE_NORMAL
- en: Example of instance creation using Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have a sample configuration file to create an instance and set up a Route
    53 DNS using that instance. Save the file as `main.tf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve put the source details in another file, so a single configuration file
    can be used to create multiple machines. Create an `ec2_nodes` folder and create
    `main.tf` inside the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will create another output file inside the same directory, `ec2_nodes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Terraform installation using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: EC2 CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS CLI contains multiple modules to manage AWS resources. EC2 CLI is a very
    straightforward way of creating and managing instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install AWS CLI (commands):'
  prefs: []
  type: TYPE_NORMAL
- en: '`**$ curl -O https://bootstrap.pypa.io/get-pip.py // Download pip**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**$ python get-pip.py --user // Install pip for the user**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**$pip install awscli --upgrade --user // Install AWS CLI (remove --user if
    you want to install for all users)**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will contain all the details of the instance, including the instance
    ID as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get the details of the instance ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To terminate an instance, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating an Elastic Load Balancer, launch configuration, and Auto Scaling Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to create ELB and ASG using AWS CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic Load Balancer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ELB automatically distributes a load/traffic across multiple instances in
    a part of different **availability zones** (**AZs**). The member instances can
    be part of single AZ or multiple AZs. An ELB becomes the single point of contact
    for the DNS and the end users. An ELB also monitors the instance via a health
    check; if the instance is healthy, then only the requests will be routed to the
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have already created instances, we will create an ELB using CLI. The
    command to do so is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the newly created instance to the ELB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: An ELB can be monitored using CloudWatch, access logs, and AWS CloudTrail. An
    ELB can be internal or internet facing. Internet-facing ELBs can be associated
    with domain names.
  prefs: []
  type: TYPE_NORMAL
- en: Auto Scaling Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s understand basic infrastructure scaling:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scale out**: Achieving scalability by increasing the number of EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale up**: Achieving scalability by resizing the capacity (compute, memory,
    and EBS) of existing EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale down**: Decreasing the number of EC2 instances of the configuration
    for existing EC2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto Scaling takes care of scale out and scale down. Auto Scaling components
    are managed into groups so that they can be treated as separate logical units
    for management and scaling purposes. Auto Scaling Groups use **launch configuration**
    as a template to create EC2 instances
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Scaling plans will define the threshold and conditions for triggering the ASG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: IAM roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS IAM role gives an extra layer of security by managing and rotating the keys
    themselves. Keys are encrypted credentials known as access key and secret key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access key example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: A policy is JSON document consist of permission delegated from one AWS service
    to another AWS service. The default permission of an IAM role is all deny (by
    default blocks all the requests to any service until specified explicitly). Sample
    policy is for creating and managing an EC2 instance, S3 bucket, and Route 53.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample policy (save the following text as `myTestKeyPolicy.json`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at various methods of creating EC2 instances for
    our software deployment. Once an instance has been created, push the software
    jars into your instances. Use the private instance IP, username (`ec2-user`),
    and private key (`test.pem`) to connect to your machine. Once the testing is completed,
    make sure you terminate the test instances so you don't pay for them.
  prefs: []
  type: TYPE_NORMAL
- en: '**T2.micro** EC2 instance type is free for use for one year for new AWS accounts.'
  prefs: []
  type: TYPE_NORMAL
- en: Later on in the chapter, we went through the creation of ELBs and ASGs using
    AWS CLI.
  prefs: []
  type: TYPE_NORMAL
- en: You can register your ELB DNS name with your domain service provider (for example,
    Route 53, GoDaddy, and BigRock) to resolve your application.
  prefs: []
  type: TYPE_NORMAL
- en: You can also try putting some workload into your application and see whether
    Auto Scaling is increasing the number of instances, and then remove the workload
    to test the termination policy.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use distributed filesystems, such as EFS, NFS, and GlusterFS, to
    share the workspaces among all nodes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the optimization and monitoring of applications
    using Test Cloud and Android monitoring tools. Test cloud is a mobile testing
    tool powered by Xamarin that it tests the applications of over 2000 devices. Android
    Monitor provides a GUI to debug and optimize applications.
  prefs: []
  type: TYPE_NORMAL
