- en: Chapter 11. Working with Agile Boards in JIRA Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will understand how to implement two Agile methodologies
    called **Scrum** and **Kanban** in JIRA for Agile tracking. The key concepts of
    **JIRA Agile** that will be covered are creating, planning, and managing the tasks.
    We will discuss how to set up and configure the board. Most importantly, we will
    discuss how to analyze reports. Scrum masters and Project managers will give you
    insight on how to use JIRA Agile, which will enable you to manage work following
    the Agile concept. Real-life examples will be used to understand Scrum and Kanban
    boards.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered are:'
  prefs: []
  type: TYPE_NORMAL
- en: Product overview—JIRA Software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrum boards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kanban boards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple teams and projects using boards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product overview – JIRA Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen various aspects of JIRA, such as customization, and we
    have also seen how to install new add-ons to extend the functionality of JIRA.
    Many organizations use Agile-based methodologies for their projects, and until
    version 6.x there was a popular add-on called JIRA Agile that had to be purchased
    separately. However, starting from version 7.x, the JIRA as it used to be known
    had been split into three applications—JIRA Core, JIRA Software, and JIRA Service
    Desk. We also discussed this in [Chapter 1](ch01.html "Chapter 1. Planning Your
    JIRA Installation"), *Planning Your JIRA Installation*.
  prefs: []
  type: TYPE_NORMAL
- en: The customizations and configurations that we have discussed in this book are
    relevant to JIRA Core as well as JIRA Software and JIRA Service Desk. In [Chapter
    15](ch15.html "Chapter 15. Implementing JIRA Service Desk"), *Implementing JIRA
    Service Desk*, we will understand how to use it for managing your support projects,
    but in this chapter we will focus on Agile boards, which comes with your JIRA
    Software application.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA Software provides great features for implementing Agile techniques in your
    JIRA instance. Whether you are already familiar with Agile concepts or are completely
    new to Agile, this add-on will make your Agile journey not only easy, but also
    wonderful.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the JIRA Software application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you already have the JIRA Software application installed, then you don't
    need to do anything else— your instance already has the capability to create Agile
    boards. However, if you are only using JIRA Core or the JIRA Service Desk application,
    then you need to install JIRA Software application.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the following URL and download the latest version of JIRA Software `jira-software-application.obr`
    file on your computer from [https://marketplace.atlassian.com/plugins/com.atlassian.jira.jira-software-application/versions](https://marketplace.atlassian.com/plugins/com.atlassian.jira.jira-software-application/versions).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Administration** | **Applications** | **Versions & licenses**, then
    click on the **Upload an application** link in the top right corner. In the pop-up
    that appears, upload the `jira-software-application.obr` file that you just downloaded:![Installing
    the JIRA Software application](img/image_11_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will install the JIRA Software application. Now, you should go to the following
    URL to generate an evaluation license for application at [http://my.atlassian.com/](http://my.atlassian.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you should be able to create Agile boards in your instance. You will notice
    a new menu item,**Boards** at the top:![Installing the JIRA Software application](img/image_11_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to **Boards** | **View All Boards**, as shown in the previous screenshot.![Installing
    the JIRA Software application](img/image_11_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop up that appears, you will see the option to either create a Scrum
    board or Kanban board. Let's create both the boards one at a time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In JIRA Software, you can create both Scrum and Kanban boards; both are used
    for a specific purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Scrum boards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scrum is an Agile technique used in complex projects. This technique is widely
    used in software development projects, but it can be applied to any process easily.
    To know more about the Scrum technique, refer to [https://www.scrumalliance.org/why-scrum](https://www.scrumalliance.org/why-scrum).
  prefs: []
  type: TYPE_NORMAL
- en: The Scrum technique focuses on breaking up the requirements into small doable
    tasks. Then, a prioritized list of these tasks is created (called a **sprint**),
    which can be performed in a period of one to four weeks. The objective of this
    sprint is to create a deliverable feature or product and not just a prototype.
    More sprints can be created to complete the whole requirement and finish the product
    or project. The tasks that are yet to be done are kept in a list called a **backlog**.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA Agile lets you implement the Scrum technique in your process with the help
    of Scrum boards.
  prefs: []
  type: TYPE_NORMAL
- en: Agile project setup and JIRA Agile configuration basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scrum boards can be created from any existing JIRA project that contains predefined
    issues. It''s possible to create a Scrum board from a new blank project as well.
    Also, if you want to understand how JIRA Agile works, it''s possible to create
    a sample project prepopulated with sample data. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the navigation menu, click on **Boards** | **View All Boards** | **Create
    board**, and in the **Create an Agile board** pop-up, click on the **Create a
    Scrum board with sample data**:![Agile project setup and JIRA Agile configuration
    basics](img/image_11_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating a sample project that will contain dummy data. This will help
    us understand all the features of a Scrum board.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Agile project setup and JIRA Agile configuration basics](img/image_11_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Enter the **Project name**, **Project key**, and **Project lead** and click
    on the **Create board** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have just created a project with sample data along with a Scrum board. You
    can also create a Scrum board and select your existing project to populate it.
  prefs: []
  type: TYPE_NORMAL
- en: Populating, ranking, and estimating a backlog using story points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the newly created project we have a Scrum board, which is displayed by default,
    so you will now see the list of issues that are pending, that is, not yet resolved
    in the **Backlog** window, and a sample sprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Populating, ranking, and estimating a backlog using story points](img/image_11_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Backlog** contains issues that are pending in the project or board. These
    issues are yet to be planned for execution. In the project sidebar, the first
    tab is **Backlog**, followed by **Active sprints**. As soon as the sprint has
    started, you manage and work on it using the **Active sprints** tab.'
  prefs: []
  type: TYPE_NORMAL
- en: The sample Scrum board already contains a sprint that has certain issues in
    a specific order. Sprint is a time period during which specific planned activities
    need to be finished. The Scrum master or the project manager can define the order
    in which issues need to be completed. This order is also known as **rank**, and
    the team who is working on these issues needs to follow this order. The rank is
    important because there are certain tasks that need to be completed before other
    tasks can be started.
  prefs: []
  type: TYPE_NORMAL
- en: In a Scrum methodology, the estimation of individual tasks is not only done
    on the basis of the amount of time spent, but also on the complexity of the tasks.
    For instance, there are two tasks whose time estimate is one day, but the first
    task is complex to execute, for example if it is the first time that the task
    has been executed by the team. The complexity is measured by story points. The
    story point can be any number between 1 to 10 or any number in the Fibonacci sequence,
    that is, 1, 1, 2, 3, 5, 8, 13, 21\. The higher the number, the more complex the
    task.
  prefs: []
  type: TYPE_NORMAL
- en: A Scrum master can assign story points to the issues in the sprint, although
    it's not mandatory to have story points with each issue in the sprint. However,
    having them will give the team an idea about the complexity of the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Planning and creating sprints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sample Scrum board already contains one running sprint; let's create a new
    sprint. JIRA Software allows you to create another sprint even if the active sprint
    is not complete; however, the new sprint cannot be started. It is possible to
    enable the **Parallel Sprints** feature in JIRA Agile that lets us run multiple
    sprints together.
  prefs: []
  type: TYPE_NORMAL
- en: 'The planning of the sprint has to be done in the **Plan** mode of the Scrum
    board. Perform these steps to run multiple sprints together:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **Applications** | **JIRA Software configurations**
    (under **JIRA SOFTWARE**):![Planning and creating sprints](img/image_11_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the checkbox for **Parallel Sprints**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That is it, just go back to your board and start planning your next sprint.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go back to the project, and in the **Backlog** tab click on the **Create Sprint**
    button just before the issue backlog:![Planning and creating sprints](img/image_11_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An empty sprint will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, start dragging your issues from **Backlog** to your sample sprint (in our
    case **Sample Sprint 3**):![Planning and creating sprints](img/image_11_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have put all your issues in the sprint, you may reorder them within
    the sprint and define their rank, that is, which issue needs to be performed first,
    second, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, you can also create epics to group multiple stories together. Epic
    is nothing but a large story. It's quite easy to create an epic. Click on the
    **Create epic** link on the left-hand side of the sprint:![Planning and creating
    sprints](img/image_11_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up window, enter **Epic Name** and **Summary**. Click on the **Create**
    button to continue:![Planning and creating sprints](img/image_11_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can create more epics; finally, drag issues from your sprint to the epic.
    This will assign issues to be part of these epics:![Planning and creating sprints](img/image_11_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After assigning issues to epic, you can start the sprint. Click on the **Start
    Sprint** link in the top-right corner. In the pop-up window, enter **Sprint Name**,
    select **Duration** and **Start Date**, and **End Date** will be updated automatically:![Planning
    and creating sprints](img/image_11_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that a sprint is never started until you have planned your issues well,
    ordered them, and estimated the story points. The moment you start the sprint,
    you will be taken to the **Active sprints** tab in the Scrum board. Here, you
    will see a list of all the issues in your sprints across three columns, that is,
    **To Do**, **In Progress**, **Done**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning and creating sprints](img/image_11_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Active sprints** tabs, the individual assignee can drag the issue to
    either the **In Progress** column or the **Done** column. This is similar to making
    workflow transitions.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of customizations that can be done in the **Active sprints**
    to make it more effective.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring swimlanes, card colors, edit card fields, and quick filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Active sprints** is the section in the board that is monitored by the team
    members once the sprint is running. When the number of people working on the sprint
    is too high, it may get difficult for them to find the issues they are working
    on. Let''s take a look at some of the customizations done to the Scrum board.'
  prefs: []
  type: TYPE_NORMAL
- en: Swimlanes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The issues that appear in the **Work** mode can be grouped together so that
    it becomes easy for the respective member to find that issue on the board. Also,
    when the issues are dragged from one column to another, they can only be dragged
    within their group, which is known as a swimlane. The default swimlane is the
    **Story** issue type. Let''s change this:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Board** | **Configure** | **Swimlanes** (under **CONFIGURATION**):![Swimlanes](img/image_11_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Assignees** for **Base Swimlanes on** from the drop-down list and set
    **Unassigned issues** as **Show below other swimlanes**:![Swimlanes](img/image_11_016.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The swimlane can also be based on epics, and it's possible to have no swimlane
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: Card colors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The individual issues that appear in the **Active sprints** are displayed in
    a rectangular block called a card. The color of these cards can be changed based
    on its **Issue Types**, **Priorities**, **Assignees**, or **Queries**. The default
    option for the card color is the issue type; let''s change it to issue priorities:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Board** | **Configure** | **Card colors** (under **CONFIGURATION**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Priorities** from the drop-down list for **Colors based on**:![Card
    colors](img/image_11_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the color box to change the color to the color of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Card fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The card in the **Backlog** and **Active sprints** displays the **Issue Id**
    and **Issue Summary**, but it''s possible to add up to three additional fields.
    Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Board** | **Configure** | **Card layout** (under **CONFIGURATION**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The additional three fields can be added for the **Backlog** and the **Active
    sprints**. We will add one additional field in the **Active sprints**. From the
    **Field Name** drop-down list, select **Priority** and click on the **Add** button
    on the right-hand side.![Card fields](img/image_11_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In total, you can add three additional fields that can appear on the card. This
    provision is provided so that fields that provide additional information can be
    made visible for the whole team to view.
  prefs: []
  type: TYPE_NORMAL
- en: Quick filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We saw how you can customize swimlanes to group several issues. Imagine a situation
    where there are 20 issues in the Active sprints that are assigned to you in the
    currently active sprint, but there are certain issues that are of the highest
    priority. In such cases, it will be nice to be able to not only quickly filter
    out the issues that are assigned to you, but also the issues that are due today.
    Perform these steps to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Board** | **Configure** | **Quick Filters** (under **CONFIGURATION**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **Name** of the quick filter as `Highest Priority`. In the **JQL**
    column, enter `priority = Highest` as the query and click on the **Add** button:![Quick
    filters](img/image_11_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have done some customizations in our board. Let's go back to the **Active
    sprints**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Quick filters](img/image_11_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can see that a new quick filter has been added at the top called **Highest
    Priority**; click on this link and the board will only display issues whose priority
    is highest. Note that the swimlane is now based on the **Assignee** of the issue.
    The issue priority is now added to the card. Also, the color of the card is based
    on the priority of the issue.
  prefs: []
  type: TYPE_NORMAL
- en: These customizations help the team to work efficiently so that they don't need
    to spend a lot of time finding the relevant information.
  prefs: []
  type: TYPE_NORMAL
- en: The Burndown chart and Velocity charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have learned how to plan, estimate, and start the sprint, along with various
    configurations available to perform in the board. We have checked how the team
    can view their tasks in the sprint. Now, it's time to monitor the progress of
    the team. There are two reports that are of prime importance—one is the **Burndown
    chart**. This chart gives a clear picture of the current status of the sprint.
    The second is the **Velocity chart**. This chart helps in understanding the capacity
    of the team in terms of how much work it can handle. These two reports help the
    Scrum master in monitoring the progress of the project. Let's take a look at both
    these reports.
  prefs: []
  type: TYPE_NORMAL
- en: The Burndown chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While planning the sprint, we primarily did two important things. Firstly, we
    prioritized the order in which the issues need to be completed. Secondly, we estimated
    the story points for issues. These story points, which we initially planned, give
    workers an idea of the complexity of the task. Now, the moment the sprint starts,
    a baseline is formed between the start date and the end date. This baseline is
    displayed with a grey line in the chart and it depicts the ideal scenario for
    executing the issues from the start date of the sprint until the end date. When
    the issue is resolved, its story points are burned and the total remaining story
    points of the whole sprint decreases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to project sidebar **Reports** | **Burndown Chart** (under **Agile**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Burndown chart](img/image_11_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the team starts working on the issues, another line of red color starts
    following the baseline. Looking at this chart, the whole team can easily figure
    out if they are on track or off track. If the line for **Remaining Values** is
    progressing above the baseline **Guideline**, then it shows that the story points
    are being burned slowly. Eventually, all the issues in the sprint will not be
    completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just after the Burndown chart, the details of the individual issues are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Burndown chart](img/image_11_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this table, you can see how many issues there were at the beginning of the
    sprint. As the issues are resolved, their story points are deducted from the total
    story points of the sprint. The total story points and the remaining story points
    will be displayed to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the Burndown chart again and focus towards the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Burndown chart](img/image_11_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's clear by looking at this Burndown chart that by the end of the sprint,
    not all story points were burned; these unfinished issues will be added back to
    the backlog when the sprint is completed.
  prefs: []
  type: TYPE_NORMAL
- en: The Velocity chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every sprint has a total number of story points at the beginning. Ideally, the
    team working on the sprint should burn all these points. In real cases, it's not
    always possible to complete all the tasks by the end of the sprint. One of the
    main responsibilities of the Scrum master is to make sure that the team have just
    enough story points to burn, not too many and not too few. However, at the beginning
    of the sprint, it's not that easy to estimate the amount of story points a team
    can burn. The velocity chart simply displays the amount of story points planned
    versus the amount actually completed by the team. This comparison is shown for
    the past few sprints so that the average number of story points that the team
    can burn can be calculated. This is known as the capacity of the team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the project sidebar **Reports** | **Velocity** (under **Agile**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Velocity chart](img/image_11_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This chart gives us a very clear indication of the story points that the team
    has been able to complete in previous sprints. If you take the average of all
    the story points that your team has been able to burn until now, you will know
    your capacity. This helps the Scrum master to plan the next sprint with enough
    resources in the team.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban boards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed the Scrum methodology, widely used for software development
    projects where requirements are broken down into smaller tasks, estimated using
    story points, and finally planned by the Scrum master or product manager. The
    Scrum technique is applicable in any process that requires planning, but there
    are various cases where the team is continuously working on activities as and
    when required. A typical example of this use case is customer support projects,
    where a certain number of people are assigned to handle the issues that are raised
    for a particular product or project by the company. Usually, these support issues
    require immediate response and detailed planning is not required.
  prefs: []
  type: TYPE_NORMAL
- en: In such scenarios, the overall visualization of the pending issues is important.
    A Kanban board doesn't have any **Plan** mode like the Scrum board. It only has
    the **Work** mode, which is similar to the Scrum board.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Kanban board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Kanban board can be created using existing projects or filters. To understand
    how the Kanban technique works in JIRA, a sample board and project can be created.
    Perform these steps to create them:'
  prefs: []
  type: TYPE_NORMAL
- en: In the navigation menu, click on **Boards** | **View All Boards** | **Create
    board**, and in the **Create an Agile board** pop-up, click on the **Create a
    Kanban board with sample data**:![Setting up the Kanban board](img/image_11_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **Project name**, **Project key**, **Project lead** and click on the
    **Create board** button.![Setting up the Kanban board](img/image_11_026.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you will notice, the **Active sprints** tab is not present in the **Kanban
    board**. The team sees the **Kanban board** only. This board is quite similar
    to the Scrum board; you can also configure the swimlanes based on assignees; by
    default, the swimlanes in the Kanban board are configured to use the `priority
    = Highest` query. This means that issues that should be resolved immediately are
    displayed at the top.
  prefs: []
  type: TYPE_NORMAL
- en: The people who have these issues assigned can move the issue from one column
    to another. These columns signify the workflow states. Most of the configurations
    that we did for the Scrum board can be done on the Kanban board as well; let's
    perform some configurations that we did not check in the Scrum board.
  prefs: []
  type: TYPE_NORMAL
- en: Column constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a team works on support issues, it's important to resolve the issues as
    soon as possible. Usually, companies sign **Service Level Agreement** (**SLA**),
    that is, with their customers where they need to agree on the resolution time.
    In situations like these, the whole team should get the overall picture of the
    issues they need to work on. For instance, if there are fewer people available
    on the support issues, then there is a limitation on the number of issues these
    people can work on at a given point in time. In the sample Kanban board, you will
    notice that the **In progress** column is red whenever there is more than one
    issue in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say you want to alert the team whenever there are more than four issues
    in the backlog:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Board** | **Configure** | **Columns** (under **CONFIGURATION**).![Column
    constraints](img/image_11_027.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Column management**, first select **Column Constraint** as **Issue Count**.
    As shown in the previous screenshot, enter the maximum number of issue counts
    in the **Backlog** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, create one more issue in your sample project so that your backlog has more
    than four issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to your Kanban board and check the **Backlog** column:![Column constraints](img/image_11_028.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The rest of the configuration is exactly the same as what we have done for Scrum.
    You can configure swimlanes, add quick filters, and also add a few additional
    fields in the card layout. The procedure of configuring these was already discussed
    in the Scrum section earlier, and it's the same for Kanban boards.
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple teams and projects using boards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The sample projects and boards that we created to understand Scrum and Kanban
    techniques used only one project, but JIRA Software boards can be configured to
    use multiple projects too.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your team members are working on different projects for the same client,
    then it will make more sense to manage the work from a single board. Scrum and
    Kanban boards can be configured for issues that either come from one, two, or
    multiple projects. Perform these steps to manage the work from a single board:'
  prefs: []
  type: TYPE_NORMAL
- en: In the navigation menu, click on **Boards** | **View All Boards** | **Create
    board,** and in the **Create an Agile board** pop-up, click on the **Create a
    Scrum board** button or **Create a Kanban board** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up window, you can either create a new project with a new board or
    also create a board from a filter, but we can select the second option, that is,
    **Board from an existing project** and click on the **Next** button:![Managing
    multiple teams and projects using boards](img/image_11_029.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, enter **Board name** and select multiple **Project(s)**.
    Click on **Create board** to finish:![Managing multiple teams and projects using
    boards](img/image_11_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your newly created board will now have issues from all the projects that you
    have selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The issues from multiple projects can now be added for the sprint in the Scrum
    board or will appear in the Kanban backlog and your team can work on them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to implement Scrum and Kanban Agile methodologies
    using the Software application. We understood how to use both boards and learned
    various configurations that can be performed in them. The JIRA Software can either
    be used as a standalone instance or it can also be installed as an application
    in an existing JIRA Core application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss Groovy Script Runner, which is an amazing
    add-on used to perform complex customizations in the workflow, access powerful
    JQL functions, and run various scripts that can be used by JIRA administrators
    to maintain the instance efficiently.
  prefs: []
  type: TYPE_NORMAL
