- en: Running Your Private Docker Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行您的私有 Docker 基础设施
- en: 'In [Chapter 4](../Text/Ch04.xhtml), *Publishing Images,* we discussed Docker
    images and clearly explained that Docker containers are the runtime implementations
    of Docker images. Docker images and containers are plenty these days as the containerization
    paradigm has taken the IT domain by storm. Therefore, there is a need for worldwide
    enterprises to keep their Docker images in their own private infrastructure for
    security considerations. So, the concept of deploying Docker Hub to our own infrastructure
    has emerged and evolved. Docker Hubs are paramount and pertinent to registering
    and then depositing the growing array of Docker images. Primarily, Docker Hub
    is specially made to centralize and centrally manage information on the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 4 章](../Text/Ch04.xhtml)《发布镜像》中，我们讨论了 Docker 镜像，并清晰地解释了 Docker 容器是 Docker
    镜像的运行时实现。如今，Docker 镜像和容器数量众多，因为容器化范式已经在 IT 领域掀起了风暴。因此，全球企业有必要出于安全考虑，将其 Docker
    镜像存放在自己的私有基础设施中。因此，将 Docker Hub 部署到我们自己的基础设施的概念应运而生并不断发展。Docker Hub 对于注册和存储日益增多的
    Docker 镜像至关重要且相关。Docker Hub 主要用于集中管理以下内容：
- en: User accounts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户账户
- en: Checksums of the images
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像的校验和
- en: Public namespaces
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共命名空间
- en: 'This chapter is developed with a focus on providing all the relevant information
    to enable you and the Docker container crafters to design, populate, and run your
    own private Docker Hubs in your own backyards. This chapter covers the following
    important topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点提供相关信息，帮助您和 Docker 容器开发者设计、构建并运行您自己的私有 Docker Hub。这一章涵盖以下重要内容：
- en: Docker Registry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 注册表
- en: Docker Registry use cases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 注册表的使用案例
- en: Running your own Docker Registry and pushing the image to a newly created registry
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行您自己的 Docker 注册表并将镜像推送到新创建的注册表
- en: Webhook notifications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webhook 通知
- en: Docker Registry HTTP API support
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Docker 注册表 HTTP API
- en: Docker Registry
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 注册表
- en: The Docker Registry implementation has completely changed from the previous
    version mentioned in the earlier edition of this book. Docker Registry 2.0 is
    the new implementation for storing and distributing Docker images. It supersedes
    the previous Docker Registry implementation ([https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)).
    The new implementation is available at [https://github.com/docker/distribution](https://github.com/docker/distribution).
    This is open source under the Apache license. The registry is a stateless, highly
    scalable server-side application that stores and lets you distribute Docker images.
    The Docker Registry index is deprecated in the new release. Previously, the Docker
    Registry used index internally to authenticate the user.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 注册表的实现已完全改变，与本书早期版本中提到的旧版本不同。Docker 注册表 2.0 是用于存储和分发 Docker 镜像的新实现。它取代了先前的
    Docker 注册表实现（[https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)）。新实现可以在
    [https://github.com/docker/distribution](https://github.com/docker/distribution)
    上找到。它是 Apache 许可证下的开源项目。该注册表是一个无状态、高度可扩展的服务器端应用程序，用于存储和分发 Docker 镜像。新版本中不再使用 Docker
    注册表索引。以前，Docker 注册表内部使用索引来进行用户认证。
- en: Docker Registry 2.0 is completed, new, and implemented in Go and supports the
    Docker Registry HTTP API v2\. The current Docker Hub ([https://hub.docker.com](https://hub.docker.com))
    is based on the new Docker Registry 2.0 with Docker Engine 1.6 or above. This
    makes it more reliable and transparent to its users. All cloud providers have
    adopted this new Docker Registry including AWS and IBM.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 注册表 2.0 已完成，采用全新的 Go 实现，并支持 Docker 注册表 HTTP API v2。当前的 Docker Hub ([https://hub.docker.com](https://hub.docker.com))
    基于新版本的 Docker 注册表 2.0，并支持 Docker Engine 1.6 或更高版本。这使得它对用户来说更加可靠且透明。所有云服务提供商，包括
    AWS 和 IBM，已采用这一新的 Docker 注册表。
- en: 'The new registry implementation provides the following benefits:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 新的注册表实现提供以下优势：
- en: Faster push and pull
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的推送与拉取
- en: Secure and efficient implementation
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全高效的实现
- en: Simplified deployment
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化部署
- en: Pluggable storage backend
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可插拔存储后端
- en: Webhook notifications
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webhook 通知
- en: 'The general architecture of Docker Registry shows, as in the following image,
    how it is integrated with Nginx at frontend and storage at backend:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 注册表的总体架构如下图所示，展示了它如何在前端与 Nginx 集成，在后端与存储集成：
- en: '![](img/image_05_001.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_001.png)'
- en: 'The salient features of the registry are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表的显著特点如下：
- en: The registry is compatible with Docker Engine version 1.6.0 or higher.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该注册表与 Docker Engine 1.6.0 或更高版本兼容。
- en: The default storage driver is the local POSIX filesystem, which is suitable
    for development or small deployments. It also supports different storage backends
    (S3, Microsoft Azure, OpenStack Swift, and Aliyun OSS).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认存储驱动为本地POSIX文件系统，适用于开发或小型部署。它还支持不同的存储后端（S3、Microsoft Azure、OpenStack Swift和阿里云OSS）。
- en: It natively supports TLS and basic authentication.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它原生支持TLS和基本身份验证。
- en: In the new version, the registry also supports a robust notification system.
    The registry supports sending Webhook notifications in response to events happening
    within the registry. Notifications are sent in response to manifest pushes and
    pulls and layer pushes and pulls. These actions are serialized into events. The
    events are queued into a registry-internal broadcast system, which queues and
    dispatches events to endpoints ([https://docs.docker.com/registry/notifications/#endpoints](https://docs.docker.com/registry/notifications/#endpoints)).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在新版本中，注册表还支持强大的通知系统。注册表支持在注册表内部发生事件时发送Webhook通知。通知响应镜像清单和图层的推送与拉取。所有这些操作都被序列化为事件，事件会被排入注册表内部广播系统，该系统排队并将事件分发到端点（[https://docs.docker.com/registry/notifications/#endpoints](https://docs.docker.com/registry/notifications/#endpoints)）。
- en: 'The latest Docker Registry releases two options:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的Docker注册表发布了两种选项：
- en: Docker Trusted Registry
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker可信注册表
- en: Docker Registry
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker注册表
- en: 'Let''s talk about the two options in detail:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论一下这两种选项：
- en: '**Docker Trusted Registry** (**DTR**): This is the enterprise grade solution
    from Docker. DTR supports high availability and is installed on the Docker **Universal
    Control Plane** (**UCP**) cluster. The details are available at the following
    website:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker可信注册表**（**DTR**）：这是Docker的企业级解决方案。DTR支持高可用性，并安装在Docker **通用控制平面**（**UCP**）集群中。详细信息请参见以下网站：'
- en: '[https://docs.docker.com/docker-trusted-registry/](https://docs.docker.com/docker-trusted-registry/).'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/docker-trusted-registry/](https://docs.docker.com/docker-trusted-registry/)。'
- en: DTR supports image management and it has built-in security and access control.
    It can also be integrated with LDAP and **Active Directory** (**AD**) and supports
    **Role Based Access Control** (**RBAC**).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: DTR支持镜像管理，并具有内置的安全性和访问控制。它还可以与LDAP和**Active Directory**（**AD**）集成，并支持**基于角色的访问控制**（**RBAC**）。
- en: 'The general architecture of DTR is shown in the following diagram:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: DTR的一般架构如下图所示：
- en: '![](img/image_05_002.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_002.png)'
- en: 'DTR has a built-in authentication mechanism. DTR running on a node consists
    of the following containers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DTR具有内置的身份验证机制。运行在节点上的DTR由以下容器组成：
- en: '`dtr-api-<replica_id>`: Executes the DTR business logic. It serves the DTR
    web application, and API.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-api-<replica_id>`：执行DTR业务逻辑。它为DTR Web应用程序和API提供服务。'
- en: '`dtr-garant-<replica_id>`: Manages DTR authentication.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-garant-<replica_id>`：管理DTR身份验证。'
- en: '`dtr-jobrunner-<replica_id>`: Runs cleanup jobs in the background.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-jobrunner-<replica_id>`：在后台运行清理作业。'
- en: '`dtr-nautilusstore-<replica_id>`: Stores security scanning data.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-nautilusstore-<replica_id>`：存储安全扫描数据。'
- en: '`dtr-nginx-<replica_id>`: Receives HTTP and HTTPS requests and proxies them
    to other DTR components. By default it listens to ports `80` and `443` of the
    host.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-nginx-<replica_id>`：接收HTTP和HTTPS请求，并将其代理到其他DTR组件。默认监听主机的`80`和`443`端口。'
- en: '`dtr-notary-server-<replica_id>`: Receives, validates, and serves content trust
    metadata, and is consulted when pushing or pulling to DTR with content trust enabled.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-notary-server-<replica_id>`：接收、验证并提供内容信任元数据，在启用内容信任时，推送或拉取到DTR时会咨询此服务。'
- en: '`dtr-notary-signer-<replica_id>`: Performs server-side timestamp and snapshot
    signing for content trust metadata.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-notary-signer-<replica_id>`：为内容信任元数据执行服务器端时间戳和快照签名。'
- en: '`dtr-registry-<replica_id>`: Implements the functionality for pulling and pushing
    Docker images. It also handles how images are stored.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-registry-<replica_id>`：实现拉取和推送Docker镜像的功能，并处理镜像的存储方式。'
- en: '`dtr-rethinkdb-<replica_id>`: A database for persisting repository metadata.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-rethinkdb-<replica_id>`：用于持久化仓库元数据的数据库。'
- en: 'DTR uses the following internal named volumes for persistence of data:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: DTR使用以下内部命名卷来持久化数据：
- en: '`dtr-ca`: The private keys and certificates are stored here'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-ca`：私钥和证书存储在这里'
- en: '`dtr-etcd`: This is used by etcd for storing DTR internal configurations'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-etcd`：这是etcd用于存储DTR内部配置的组件'
- en: '`dtr-registry`: This is the volume where images are stored'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-registry`：这是存储镜像的卷'
- en: '`dtr-rethink`: This is used by RethinkDB to persist DTR data, such as users
    and repositories'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dtr-rethink`：RethinkDB用于持久化DTR数据，如用户和仓库'
- en: By default, DTR stores the images on the local filesystem of the host machine.
    For highly available installations of DTR, it supports cloud storage or network
    filesystems also. DTR can be configured to support Amazon S3, OpenStack Swift,
    and Microsoft Azure.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，DTR 将镜像存储在主机机器的本地文件系统上。对于高度可用的 DTR 安装，它还支持云存储或网络文件系统。DTR 可以配置为支持 Amazon
    S3、OpenStack Swift 和 Microsoft Azure。
- en: '**Docker Registry**: The registry is a stateless, highly scalable server-side
    application that stores and distributes Docker images. The registry is open source,
    under the permissive Apache License ([http://en.wikipedia.org/wiki/Apache_License](http://en.wikipedia.org/wiki/Apache_License)).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Registry**：Registry 是一个无状态、高度可扩展的服务器端应用程序，用于存储和分发 Docker 镜像。Registry
    是开源的，采用宽松的 Apache 许可证（[http://en.wikipedia.org/wiki/Apache_License](http://en.wikipedia.org/wiki/Apache_License)）。'
- en: In this book, we will focus on the second option of the open source Docker Registry.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将重点介绍开源 Docker Registry 的第二种选择。
- en: Docker Registry use cases
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Registry 的使用场景
- en: Docker Registry stores the Docker images and provides the basic functionalities
    of pulling, pushing, and deleting the images. In a typical workflow, a commit
    to your source revision control system would trigger a build on your CI system,
    which would then push a new image to your registry if the build is successful.
    A notification from the registry would then trigger a deployment on a staging
    environment or notify other systems that a new image is available.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry 存储 Docker 镜像，并提供拉取、推送和删除镜像的基本功能。在典型的工作流中，对源代码版本控制系统的提交将触发 CI
    系统上的构建，如果构建成功，CI 系统将把新镜像推送到 Registry。Registry 会发送通知，触发在暂存环境中的部署，或通知其他系统新镜像已可用。
- en: 'Docker Registry is used when the user needs to do the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户需要执行以下操作时，会使用 Docker Registry：
- en: Tighten control where images are kept
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格控制镜像存储位置
- en: Own the images distribution pipeline
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有镜像分发管道
- en: Integrate image storage and distribution with the backend development workflow
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将镜像存储和分发与后端开发工作流集成
- en: 'The important use cases of registry are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Registry 的重要使用场景如下：
- en: '**Pull or download an image**: The user requests an image using the Docker
    client from Docker Registry, the registry in turn responds back to the user with
    the registry details. Then, the Docker client will directly request the registry
    to get the required image. The registry authenticates the user with an index internally.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取或下载镜像**：用户使用 Docker 客户端从 Docker Registry 请求镜像，Registry 会返回给用户相关的 Registry
    详细信息。然后，Docker 客户端将直接请求 Registry 获取所需的镜像。Registry 内部会通过索引对用户进行身份验证。'
- en: '**Push or upload an image**: A user requests to push the image, gets the registry
    information, and then pushes the image directly to the registry. The registry
    authenticates the user and finally, responds to the user.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推送或上传镜像**：用户请求推送镜像，获取 Registry 信息，然后将镜像直接推送到 Registry。Registry 会验证用户身份，最后回应用户。'
- en: '**Delete an image**: The user can also request to delete an image from the
    repository.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除镜像**：用户还可以请求从仓库中删除镜像。'
- en: The user has the option to use the registry with or without the index. Using
    the registry without the index is best suited for storing private images.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以选择使用带有或不带有索引的 Registry。使用不带索引的 Registry 最适合存储私有镜像。
- en: In addition to the preceding use cases, Docker Registry also supports version
    control for images. It can be integrated with **Continuous Integration** (**CI**)
    and **Continuous Development** (**CD**) systems. When a new image is successfully
    pushed to the registry, then a notification from the registry will trigger a deployment
    on a staging environment or notify other systems that a new image is available.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前述的使用场景，Docker Registry 还支持镜像的版本控制。它可以与 **持续集成**（**CI**）和 **持续开发**（**CD**）系统集成。当一个新镜像成功推送到
    Registry 时，Registry 会发送通知，触发在暂存环境中的部署，或通知其他系统新镜像已可用。
- en: 'In Docker Registry V2, the following new use cases are also supported:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker Registry V2 中，还支持以下新使用场景：
- en: '**Image verification**: Docker Engine would like to run the verified image
    so it wants to ensure that the image is downloaded from a trusted source and no
    tampering has occurred. Docker Registry V2 returns a manifest and Docker Engine
    verifies the manifest''s signature before downloading the image. After each layer
    is downloaded, the Engine verifies the digest of the layer ensuring that the content
    is as specified by the manifest.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜像验证**：Docker Engine 想要运行已验证的镜像，因此它需要确保镜像是从受信任的来源下载的，并且没有被篡改。Docker Registry
    V2 会返回一个清单，Docker Engine 会验证该清单的签名，然后才会下载镜像。在每一层下载之后，Engine 会验证该层的摘要，以确保内容符合清单所指定的内容。'
- en: '**Resumable push**: It is possible to lose network connectivity while uploading
    the image to Docker Registry. Now, Docker Registry has the ability to inform Docker
    Engine that the file upload has already started. Therefore, Docker Engine will
    respond by only sending the remaining data to complete the image upload.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可恢复推送**：在将镜像上传到 Docker Registry 时，可能会丢失网络连接。现在，Docker Registry 具备通知 Docker
    Engine 文件上传已开始的能力。因此，Docker Engine 将只发送剩余的数据来完成镜像上传。'
- en: '**Resumable pull**: When downloading an image, the connection is interrupted
    before the completion. Docker Engine keeps the partial data and requests to avoid
    downloading the repeated data. This is implemented as the HTTP range requests.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可恢复拉取**：在下载镜像时，如果连接在完成之前中断，Docker Engine 会保留部分数据并请求避免重新下载重复的数据。这是通过 HTTP
    范围请求实现的。'
- en: '**Layer upload deduplication**: Company Y''s build system creates two identical
    Docker layers from build processes A and B. Build process A completes uploading
    the layer before B. When process B attempts to upload the layer, the registry
    indicates that it''s not necessary because the layer is already known. If processes
    A and B upload the same layer at the same time, both the operations will proceed
    and the first to complete will be stored in the registry (note that we may modify
    this to prevent dogpile with some locking mechanism).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层上传去重**：公司 Y 的构建系统通过构建过程 A 和 B 创建了两个相同的 Docker 层。构建过程 A 在 B 之前完成该层的上传。当 B
    过程尝试上传该层时，注册表会指示不需要，因为该层已知。如果 A 和 B 同时上传相同的层，两个操作都会继续，首先完成的操作会被存储在注册表中（请注意，我们可能会修改此行为以防止同时请求发生，并使用某些锁机制来处理）。'
- en: This is the reason why Docker Registry V2 needs Docker Engine version 1.6 or
    above to support these features.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Docker Registry V2 需要 Docker Engine 版本 1.6 或更高版本来支持这些功能的原因。
- en: Running Docker Registry and pushing the image
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 Docker Registry 并推送镜像
- en: It is fairly easy to install and run Docker Registry, but operating in a production
    environment requires other non-functional requirements also such as security,
    availability, and scalability. Also, logging and log processing, systems monitoring,
    and Security 101 are the required features for production grade systems. Most
    of the providers use DTR, as explained earlier in the production system. However,
    Docker Registry is good enough to use in your non-production environment preferably
    in the intranet environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和运行 Docker Registry 相对简单，但在生产环境中操作还需要考虑其他非功能性要求，如安全性、可用性和可扩展性。此外，日志记录和日志处理、系统监控以及安全基础知识也是生产级系统所必需的功能。如前所述，许多提供商使用
    DTR 作为生产系统的一部分。然而，Docker Registry 足以在非生产环境中使用，尤其是在内部网络环境中。
- en: 'In this section, we will use the Ubuntu 14.04 machine to install, run, and
    test Docker Registry. Docker Engine will be installed as described in [Chapter
    1](../Text/Ch01.xhtml), *Getting Started with Docker*. We will perform the following
    steps to run our own registry, and finally, push the image:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Ubuntu 14.04 机器来安装、运行和测试 Docker Registry。Docker Engine 的安装过程已在[第
    1 章](../Text/Ch01.xhtml)《*Docker 入门*》中介绍。我们将执行以下步骤来运行我们自己的注册表，最后推送镜像：
- en: '**Running Docker Registry on localhost**: Like most servers, Docker Registry
    does not need to be installed on client systems where Docker client is running.
    Docker Registry can be installed to any server which supports Docker and is network
    reachable. So multiple Docker clients can access the running Docker Registry.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在本地主机上运行 Docker Registry**：像大多数服务器一样，Docker Registry 不需要安装在运行 Docker 客户端的客户端系统上。Docker
    Registry 可以安装在任何支持 Docker 且可以通过网络访问的服务器上。因此，多个 Docker 客户端可以访问正在运行的 Docker Registry。'
- en: Docker Registry accepts the connection on TCP port `5000`, so this is not blocked
    by the firewall in your system.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry 在 TCP 端口 `5000` 上接收连接，因此不会被系统中的防火墙阻塞。
- en: If you push a lot of images to Docker Registry, they will fill up the space
    quickly, so it is recommended that you configure enough space where the images
    are kept. On the local file system, the storage path is normally `/var/lib/registry`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向 Docker Registry 推送大量镜像，它们会很快占满空间，因此建议为存储镜像配置足够的空间。在本地文件系统中，存储路径通常是`/var/lib/registry`。
- en: '**Start the registry**: The following command downloads the registry image
    from Docker Hub and starts a container in the background:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动 Registry**：以下命令从 Docker Hub 下载 Registry 镜像，并在后台启动一个容器：'
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Check Docker Registry is running on localhost**: The following command verifies
    that Docker Registry is up and running at port `5000` on localhost:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查 Docker Registry 是否在本地运行**：以下命令验证 Docker Registry 是否在本地的`5000`端口上运行：'
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Get and tag the image**: The most common image to test Docker is the `hello-world`
    image available from Docker Hub. Pull the image from the local registry:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取并标记镜像**：最常见的测试 Docker 镜像是 Docker Hub 提供的`hello-world`镜像。通过本地注册表拉取该镜像：'
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following command tags the image with `localhost:5000`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将镜像标记为`localhost:5000`：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, the list of images available on the localhost machine are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本地机器上可用的镜像列表如下：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Push the image**: This `hello-world` image can now be pushed to the newly
    created Docker Registry:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**推送镜像**：现在可以将这个`hello-world`镜像推送到新创建的 Docker Registry：'
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Pull the image**: This `hello-world` image can now be pulled back from the
    newly created Docker Registry:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**拉取镜像**：现在可以从新创建的 Docker Registry 拉取这个`hello-world`镜像：'
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Stop Docker Registry and delete**: Now use the following command to stop
    and delete Docker Registry:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**停止 Docker Registry 并删除**：现在使用以下命令停止并删除 Docker Registry：'
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Storage**: Docker Registry retains all the registry data as Docker volume
    on the host filesystem. The Docker volume can be mounted on the `/var/lib/registry`
    path, and use the following command to direct Docker Registry to point to this
    path:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**存储**：Docker Registry 会将所有注册数据保存在主机文件系统的 Docker 卷中。Docker 卷可以挂载到`/var/lib/registry`路径，并使用以下命令将
    Docker Registry 指向此路径：'
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The storage drivers can be configured for `inmemory`, `s3`, `azure`, `swift`,
    `oss`, and `gcs`: [https://github.com/docker/distribution/blob/master/docs/storage-drivers/index.md](https://github.com/docker/docker.github.io/blob/master/registry/storage-drivers/index.md).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 存储驱动程序可以配置为`inmemory`、`s3`、`azure`、`swift`、`oss`和`gcs`：[https://github.com/docker/distribution/blob/master/docs/storage-drivers/index.md](https://github.com/docker/docker.github.io/blob/master/registry/storage-drivers/index.md)。
- en: Running the Docker Registry on localhost with an SSL certificate
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在本地使用 SSL 证书运行 Docker Registry
- en: In this section, we will emulate the concept of running Docker Registry securely
    using SSL. In the current scenario of running Docker Registry on localhost, Docker
    Engine needs to be secured using TLS.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将模拟使用 SSL 安全运行 Docker Registry 的概念。在当前的本地 Docker Registry 运行场景下，需要使用
    TLS 对 Docker 引擎进行加密。
- en: 'Follow these steps to run Docker Registry securely:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安全运行 Docker Registry：
- en: '**Getting certificates**: We will be using self-signed certificates for TLS
    certificates. First create the `certs` directory, then run the `openssl` command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取证书**：我们将使用自签名证书作为 TLS 证书。首先创建`certs`目录，然后运行`openssl`命令：'
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Copy the `certs` directory to the certificates directory of Ubuntu 16.o4 in
    the `/usr/local/share/ca-certificates` path. This path is specific to Ubuntu (Debian)
    systems and you may need to use a different path if using Red Hat systems:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`certs`目录复制到 Ubuntu 16.04 中`/usr/local/share/ca-certificates`路径下的证书目录。该路径特定于
    Ubuntu（Debian）系统，如果使用的是 Red Hat 系统，可能需要使用不同的路径：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Also copy the `domain.crt` file to `/etc/docker/certs.d/myregistrydomain.com:5000/ca.crt`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 还需将`domain.crt`文件复制到`/etc/docker/certs.d/myregistrydomain.com:5000/ca.crt`。
- en: Ensure to create the `certs.d` and `myregistrydomain.com:5000` directories before
    running the preceding command.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在运行上述命令之前创建`certs.d`和`myregistrydomain.com:5000`目录。
- en: 'Restart Docker Engine:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 Docker 引擎：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Docker Registry can be started, as follows, in the secure mode:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以如下所示启动 Docker Registry 并以安全模式运行：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now you should be able to push the images from the remote Docker host:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该能够从远程 Docker 主机推送镜像：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Point your `myregistrydomain.com` to localhost (`127.0.0.1`) by updating `/etc/hosts` 
    by adding `127.0.0.1 myregistrydomain.com`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更新`/etc/hosts`并添加`127.0.0.1 myregistrydomain.com`，将`myregistrydomain.com`指向本地地址（`127.0.0.1`）。
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running Docker Registry with restrictions
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用限制运行 Docker Registry
- en: 'The security of Docker Registry is very vital. It is recommended that you run
    it behind the secure firewall and **Intrusion Protection System** (**IPS**) /
    **Intrusion Defense System** (**IDS**) in a secure network. Also, it is assumed
    that registry will only accept a secure connection on HTTPS. In addition to these,
    Docker Registry can provide access restriction, and the simplest way to implement
    this is through basic authentication. The basic authentication is standard authentication
    with web servers using a login name and password:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here we list out the steps to be done for securely accessing Docker Registry:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Since we are running this registry in the secure mode, use a self-signed certificate
    and enable TLS.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, restart the Docker process to get the updated configuration.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now rerun the registry and make sure the current running registry is stopped:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The user needs to log in from a remote machine to test registry user authentication:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Push and pull the images from the remote machine:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Managing Docker Registry with Docker Compose
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Docker Registry grows more complex, dealing with its configuration will be
    tedious. So it is highly recommended that you use Docker Compose. Docker Compose
    will be discussed later in [Chapter 8](../Text/Ch08.xhtml), *Orchestrating Containers*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'The `docker-compose.yml` file is created as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, run the command to run the registry:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This ensures Docker Registry is up and running again.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing consideration
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the enterprise deployments of Docker Registry, the load balancer is required
    to distribute loads across registry clusters. To make load balancer work correctly,
    we need to consider storage driver, HTTP secret, and Redis cache (if configured)
    to be same for the cluster of registries. If any of these parameters are different,
    the registry will have trouble serving the requests.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: For example, the storage driver used for Docker images should be the same across
    all instances of registry. If a particular mount point is used as a filesystem,
    it should be accessible and attached to all instances of registries. Similarly,
    if an S3 or IBM object storage is used, registries should be able to access the
    same storage resource. The HTTP secret coordinates uploads also must be the same
    across instances. Actually, configuring different Redis cache for different registry
    instances may work as of now. However, this is not a good practice and it will
    be expensive in terms of more requests being redirected to the backend.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Webhook notifications
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Docker Registry has the in-built capability of sending notifications based
    on registry activities:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_003.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: Notifications are sent to the endpoints via HTTP. This complete notification
    is based on the listener and broadcaster architecture. Each endpoint has its own
    queue and all actions (push/pull/delete) trigger the events. These events are
    queued and once the event reaches the end of the queue, it triggers an HTTP request
    to the endpoint. The events are sent to each endpoint, but the order is not guaranteed.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Events have a well-defined JSON structure and are sent as the body of the notification.
    One or more events are sent in the structure and are called an **envelope**. An
    envelope may contain one or more events. The registry is also capable of receiving
    responses from endpoints. The responses with 2XX or 3XX response codes are considered
    as valid responses and consider the message delivered.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Docker Registry HTTP API support
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker Registry has an HTTP interface to interact with Docker Engine. This is
    used to manage information about Docker images and enable their distribution.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: The key update from V1 is the set of changes in the Docker image format and
    concept of signed manifest. The new, self-contained image manifest simplifies
    image definition and improves security. This specification will build on that
    work, leveraging new properties of the manifest format to improve performance,
    reduce bandwidth usage, and decrease the likelihood of backend corruption.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete documentation of the Docker Registry V2 APIs can be found here:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/docker/distribution/blob/master/docs/spec/api.md.](https://github.com/docker/distribution/blob/master/docs/spec/api.md)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'The important APIs are discussed here:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'API version check:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /v2/`: This API provides version support information based on its response
    statuses.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `curl` command to check the Docker Registry API version:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The supported error codes are `401 Unauthorized` and `404 Not Found`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing repositories:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /v2/_catalog`: This API provides the content of repositories.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `curl` command to get the contents of repository:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The reader may recall that while starting Docker Registry, we uploaded only
    one file.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Pulling an image: The Docker image mainly consists of two parts—a JSON manifest
    and individual layer files.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pulling an image manifest can be fetched using the following URL:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here is the `curl` command to get the image manifest details.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Pulling the layers of an image stored in blob:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will be an exercise for the reader to download the image using `<digest>`
    received in the preceding pulling manifest API.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of methods and URIs are covered in the following table:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Path** | **Entity** | **Description** |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/v2/` | Base | Check that the endpoint implements the Docker Registry
    API V2 |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/v2/<name>/tag/list` | Tags | Fetch the tags under the repository
    identified by name |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/v2/<name>/manifests/<reference>` | Manifest | Fetch the manifest
    identified by name and reference, where reference can be a tag or digest |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| `PUT` | `/v2/<name>/manifests/<reference>` | Manifest | Put the manifest
    identified by name and reference, where reference can be a tag or digest |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` | `/v2/<name>/manifests/<reference>` | 清单 | 提交由名称和引用标识的清单，其中引用可以是标签或摘要
    |'
- en: '| `Delete` | `/v2/<name>/manifests/<reference>` | Manifest | Delete the manifest
    identified by name and reference, where reference can be a tag or digest |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `Delete` | `/v2/<name>/manifests/<reference>` | 清单 | 删除由名称和引用标识的清单，其中引用可以是标签或摘要
    |'
- en: '| `GET` | `/v2/<name>/blobs/<digest>` | Blob | Retrieve the blob from the registry
    identified by a digest |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/v2/<name>/blobs/<digest>` | Blob | 从注册中心检索由摘要标识的 Blob |'
- en: '| `DELETE` | `/v2/<name>/blobs/<digest>` | Blob | Delete the blob from the
    registry identified by a digest |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | `/v2/<name>/blobs/<digest>` | Blob | 从注册中心删除由摘要标识的 Blob |'
- en: '| `POST` | `/v2/<name>/blobs/uploads` | Initiate blob upload | Initiate a resumable
    blob upload; if successful, an upload location will be provided to complete the
    upload |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | `/v2/<name>/blobs/uploads` | 启动 Blob 上传 | 启动一个可恢复的 Blob 上传；如果成功，将提供一个上传位置来完成上传
    |'
- en: '| `GET` | `/v2/<name>/blobs/uploads/<uuid>` | Blob upload | Retrieve the status
    of upload identified by `uuid` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/v2/<name>/blobs/uploads/<uuid>` | Blob 上传 | 检索由 `uuid` 标识的上传状态
    |'
- en: '| `PATCH` | `/v2/<name>/blobs/uploads/<uuid>` | Blob upload | Update a chunk
    of data for the specified upload |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `PATCH` | `/v2/<name>/blobs/uploads/<uuid>` | Blob 上传 | 更新指定上传的一个数据块 |'
- en: '| `PUT` | `/v2/<name>/blobs/uploads/<uuid>` | Blob upload | Complete the upload
    specified by `uuid` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` | `/v2/<name>/blobs/uploads/<uuid>` | Blob 上传 | 完成由 `uuid` 标识的上传 |'
- en: '| `DELETE` | `/v2/<name>/blobs/uploads/<uuid>` | Blob upload | Cancel outstanding
    upload processes, releasing associated resources |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | `/v2/<name>/blobs/uploads/<uuid>` | Blob 上传 | 取消未完成的上传过程，释放相关资源
    |'
- en: '| `GET` | `/v2/_catalog` | Catalog | Retrieve a sorted JSON list of repositories
    from the registry |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/v2/_catalog` | 目录 | 从注册中心检索排序后的仓库 JSON 列表 |'
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Docker Engine allows every value-adding software solution to be containerized,
    indexed, registered, and stocked. Docker is turning out to be a great tool for
    systematically developing, shipping, deploying, and running containers everywhere.
    While `docker.io` lets you upload your Docker creations to its registry for free,
    anything you upload there is publicly discoverable and accessible. Innovators
    and companies aren't keen on this and therefore insist on private Docker Hubs.
    In this chapter, we explained all the steps, syntaxes, and semantics for you in
    an easy-to-understand manner. We showed how to retrieve images to generate Docker
    containers, and described how to push our images to Docker Registry in a secure
    manner in order to be found and used by authenticated developers. The authentication
    and authorization mechanisms, a major part of the whole process, have been explained
    in detail. Precisely speaking, this chapter is conceived and concretized as a
    guide for setting up your own Docker Hubs. As world organizations are showing
    exemplary interest in having containerized clouds, private container hubs are
    becoming more essential.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 引擎允许所有增值软件解决方案被容器化、索引、注册和存储。Docker 正逐渐成为一个用于系统化开发、运输、部署和在任何地方运行容器的伟大工具。虽然
    `docker.io` 允许你将 Docker 创建物免费上传到其注册中心，但你上传的任何内容都可以被公开发现和访问。创新者和公司对此并不热衷，因此坚持使用私有
    Docker Hub。在本章中，我们以易于理解的方式解释了所有步骤、语法和语义。我们展示了如何获取镜像以生成 Docker 容器，并描述了如何以安全的方式将镜像推送到
    Docker Registry，以便经过身份验证的开发人员能够找到并使用它们。身份验证和授权机制是整个过程的重要组成部分，已进行了详细解释。准确来说，本章的设计和实现是作为设置你自己的
    Docker Hub 的指南。随着全球组织对容器化云的示范性兴趣，私有容器 Hub 正变得更加重要。
- en: At this point in time, we understand that distribution and management of Docker
    images is possible using Docker Hub, DTR, and the Docker open source registry.
    Both Docker Hub and DTR are commercial products that incorporate the open source
    registry capabilities into their respective solutions. Docker Hub is a multi-tenant
    service while DTR and the open source registry provide users with the option to
    host private registries behind their own firewall or a dedicated cloud environment.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经理解了使用 Docker Hub、DTR 和 Docker 开源注册中心来分发和管理 Docker 镜像。Docker Hub 和 DTR
    都是商业产品，将开源注册中心的功能集成到各自的解决方案中。Docker Hub 是一个多租户服务，而 DTR 和开源注册中心则为用户提供了在自己防火墙后或专用云环境中托管私有注册中心的选项。
- en: In the next chapter, we will dive deep into containers, which is the natural
    progression from images. We will demonstrate the capability to run services, such
    as a web server in a Docker container and its interaction with the host machine
    and the outside world.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨容器，这是从镜像开始的自然发展。我们将展示在 Docker 容器中运行服务的能力，例如 web 服务器，以及它与主机和外部世界的交互。
