["```\n    $ cd ~/The-Ultimate-Docker-Container-Book\n    ```", "```\n    $ mkdir ch06 && cd ch06\n    ```", "```\n$ brew install node\n```", "```\n$ choco install -y nodejs\n```", "```\n    $ mkdir node-sample && cd node-sample\n    ```", "```\n    $ npm init\n    ```", "```\n    $ npm install express –save\n    ```", "```\n\"dependencies\": {    \"express\": \"^4.18.2\"\n}\n```", "```\n    $ code .\n    ```", "```\n    $ node index.js\n    ```", "```\nApplication listening at 0.0.0.0:3000\n```", "```\n    $ docker image build -t sample-app .\n    ```", "```\n    $ docker container run --rm -it \\    --name my-sample-app \\    -p 3000:3000 \\    sample-app\n    ```", "```\nApplication listening at 0.0.0.0:3000\n```", "```\n    const hobbies = [    'Swimming', 'Diving', 'Jogging', 'Cooking', 'Singing'];app.get('/hobbies', (req,res)=>{    res.send(hobbies);})\n    ```", "```\n    $ node index.js\n    ```", "```\n    $ docker image build -t sample-app .\n    ```", "```\n    $ docker container run --rm -it \\    --name my-sample-app \\    -p 3000:3000 \\    sample-app\n    ```", "```\n$ docker container run --rm -it \\    --volume /projects/sample-app:/app \\\n    alpine /bin/sh\n```", "```\n$ docker container run --rm -it \\    --volume $(pwd):/app \\\n    -p 3000:3000 \\\n    sample-app\n```", "```\n    app.get('/status', (req,res)=>{    res.send('OK');})\n    ```", "```\n    $ docker container run --rm -it \\    --name my-sample-app \\    --volume $(pwd):/app \\    -p 3000:3000 \\    sample-app\n    ```", "```\n    $ curl localhost:3000/statusOK\n    ```", "```\n    $ docker container exec my-sample-app cat index.js\n    ```", "```\n...app.get('/hobbies', (req,res)=>{\n    res.send(hobbies);\n})\napp.get('/status', (req,res)=>{\n    res.send('OK, all good');\n})\n...\n```", "```\n    $ curl http://localhost:3000/statusOK, all good\n    ```", "```\n    $ npm install -g nodemon\n    ```", "```\n    app.get('/colors', (req,res)=>{    res.send(['red','green','blue']);})\n    ```", "```\n    [nodemon] restarting due to changes...[nodemon] starting `node index.js`Application listening at 0.0.0.0:3000\n    ```", "```\n    [\"red\", \"green\", \"blue\"]\n    ```", "```\nCMD node index.js\n```", "```\n    $ docker image build \\    -f Dockerfile.dev \\    -t node-demo-dev .\n    ```", "```\n    $ docker container run --rm -it \\    -v $(pwd):/app \\    -p 3000:3000 \\    node-demo-dev\n    ```", "```\n    $ docker container rm -f $(docker container ls -aq)\n    ```", "```\n    $ cd ch06/java-springboot-demo\n    ```", "```\n    $ code .\n    ```", "```\n    $ docker image build -t java-demo .\n    ```", "```\n    $ docker container run --name java-demo --rm \\    -p 8080:8080    -v $(pwd)/.:/app    java-demo\n    ```", "```\n$ brew install python\n```", "```\n$ choco install python\n```", "```\n$ python3 --version\n```", "```\nPython 3.10.8\n```", "```\n    $ mkdir python-demo && cd python-demo\n    ```", "```\n    $ code .\n    ```", "```\n    flask\n    ```", "```\n    $ pip3 install -r requirements.txt\n    ```", "```\n    $ nodemon --exec python3 main.py\n    ```", "```\n    $ curl localhost:5000\n    ```", "```\nHello World!\n```", "```\n    from flask import jsonify@app.route(\"/colors\")def colors():    return jsonify([\"red\", \"green\", \"blue\"])\n    ```", "```\n    $ curl localhost:5000/colors\n    ```", "```\n[\"red\", \"green\", \"blue\"]\n```", "```\n    $ docker image build -t python-sample .\n    ```", "```\n    $ docker container run --rm \\    -p 5000:5000 \\    -v $(pwd)/.:/app \\    python-sample\n    ```", "```\n$ brew install --cask dotnet-sdk\n```", "```\n$ choco install -y dotnet-sdk\n```", "```\n$ dotnet –version\n```", "```\n7.0.100\n```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book/ch06\n    ```", "```\n    $ dotnet new webapi -o csharp-sample\n    ```", "```\n    $ cd csharp-sample\n    ```", "```\n    $ code .\n    ```", "```\n    $ curl http://localhost:5080/WeatherForecast\n    ```", "```\n    ...    return Enumerable.Range(1, 10).Select(......\n    ```", "```\n    $ dotnet watch run\n    ```", "```\n    $ curl http://localhost:5080/WeatherForecast\n    ```", "```\n    $ docker image build -f Dockerfile-dev \\    -t csharp-sample .\n    ```", "```\n    $ docker container run --rm \\    --name csharp-sample \\    -p 5000:5000 \\    -v $(pwd):/app \\    csharp-sample\n    ```", "```\n    $ curl localhost:5000/weatherforecast\n    ```", "```\n    $ docker container rm --force csharp-sample\n    ```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book/ch06/node-sample\n    ```", "```\n    $ code .\n    ```", "```\n    $ docker container run --rm -it \\    --name node-sample \\    -p 3000:3000 \\    -p 9229:9229 \\    -v $(pwd):/app \\    node-demo-dev node --inspect=0.0.0.0 index.js\n    ```", "```\n    $ curl localhost:3000/colors\n    ```", "```\n    $ docker container rm --force node-sample\n    ```", "```\n    $ docker container run --rm \\    --name node-sample \\    -p 3000:3000 \\    -p 9229:9229 \\    -v $(pwd):/app \\    node-sample-dev nodemon --inspect=0.0.0.0 index.js\n    ```", "```\n    {    \"type\": \"node\",    \"request\": \"attach\",    \"name\": \"Docker: Attach to Node\",    \"remoteRoot\": \"/app\",    \"restart\": true},\n    ```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book/ch06/csharp-sample\n    ```", "```\n    $ code .\n    ```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book/ch06/python-demo\n    ```", "```\n    $ code .\n    ```", "```\n    $ python3 main.py\n    ```", "```\n    $ cd ~/The-Ultimate.Docker-Container-Book/ch06/csharp-sample\n    ```", "```\n    $ code .\n    ```", "```\n    $ dotnet add package Microsoft.Extensions.Logging\n    ```", "```\n<PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"7.0.0\" />\n```", "```\n    var builder = WebApplication.CreateBuilder(args);\n    ```", "```\n    $ dotnet run\n    ```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book/ch06\n    ```", "```\n    $ mkdir jaeger-demo\n    ```", "```\n    $ code .\n    ```", "```\n    $ docker compose up -d\n    ```", "```\n    @BeanRestTemplate restTemplate() {    return new RestTemplate();}\n    ```", "```\n    spring.application.name=jaeger-demo:api\n    ```", "```\n    server.port=8090spring.application.name=jaeger-demo:inventory\n    ```", "```\n    $ docker compose down\n    ```", "```\n$ docker compose up -d\n```"]