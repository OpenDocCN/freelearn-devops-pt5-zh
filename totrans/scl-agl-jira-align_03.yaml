- en: '*Chapter 2*: Implementing Jira Align'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will go through the fundamentals of implementing Jira Align
    to map the key objects and attributes. You will learn what is required to analyze
    an existing program in Jira Software and what it takes to translate the actual
    work into Jira Align. This chapter further elaborates on the dimensions of people,
    work, time, and outcomes, which are supported within your Jira Align and Jira
    Software toolset. Lastly, you will learn an approach to extend from program to
    portfolio and bridge strategy with execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing existing programs in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping people, work, time, and outcomes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Jira Align
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending to the portfolio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing existing programs in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key factor in the success of Jira Align is the quality of underlying data
    from Jira Software. As a part of the tool solution integration, you'll want to
    analyze the team-level data in Jira to determine whether it is scalable and connectable.
    If not, you'll want to standardize and optimize the data prior to integrating
    with Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now perform the following steps to start the health check of your data:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Jet by Jira Align app from the Atlassian Marketplace, as shown
    in the following screenshot, available for Jira Cloud, Server, and Data Center
    hosting options. Ask your Jira administrator to install the app on your Jira instance:![Figure
    2.1 – Jet by Jira Align, Atlassian Marketplace](img/Figure_2.1_B16328.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.1 – Jet by Jira Align, Atlassian Marketplace
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Jet by Jira Align is a native Jira app built for analyzing the underlying health
    of your team data and practices in Jira. The app runs seven prioritized health
    checks and provides detailed insights by highlighting the areas requiring action
    to fix or improve the data. The more health checks that pass, the smoother your
    integration with Jira Align will be.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Access the Jira wizard under **Jira Administration** | **Manage apps** | **Jira
    Align** | **Jet**. You will see the following start screen for the step-by-step
    wizard:![Figure 2.2 – Jet by Jira Align, step-by-step wizard](img/Figure_2.2_B16328.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.2 – Jet by Jira Align, step-by-step wizard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you get started, you can select up to 20 boards to analyze. A board typically
    represents one agile team. You may select multiple boards that belong to a single
    team of teams or program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A Scrum team will work off of a sprint tied to a Jira board and all Jira issues
    planned within a sprint will belong only to a single team. It is important that
    only one team works off of a Jira board. This principle applies to Kanban team
    boards as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When selecting multiple boards for analysis, it's best to select boards from
    the same project or that share the same field and issue type configurations. Selecting
    boards from different projects can cause field mapping discrepancies that skew
    results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For Jira Cloud, next-gen boards are not officially supported. This is due to
    the unique field structure in next-gen. You could still analyze next-gen project
    boards by choosing to run each board individually.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here''s how the board selection screen appears:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Jet by Jira Align, step 2 – select your team boards](img/Figure_2.3_B16328.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.3 – Jet by Jira Align, step 2 – select your team boards
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, you will map the Jira fields and issue types to compare the Jira data
    structure against the seven health checks and analyze the health of the boards:![Figure
    2.4 – Jet by Jira Align, step 3 – map your configuration](img/Figure_2.4_B16328.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.4 – Jet by Jira Align, step 3 – map your configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you click on the **Advanced Settings** link, it will open the **Advanced
    Settings** screen, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Jet by Jira Align, step 3 – advanced settings](img/Figure_2.5_B16328.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.5 – Jet by Jira Align, step 3 – advanced settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Analyze your boards and check the progress in terms of checks passed. When
    the board analysis is complete, you can view the **Health Report**. For the checks
    displaying **Needs Work**, follow the recommended action to improve the data and
    rerun the health check:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Jet by Jira Align, step 4 – health report analysis](img/Figure_2.6_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Jet by Jira Align, step 4 – health report analysis
  prefs: []
  type: TYPE_NORMAL
- en: Let's now discuss the seven health checks, including their criticality on a
    scale of 1 to 5, with 5 being the most critical, and recommended actions if **Needs
    Work** is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Health check #1: Stories should be linked to epics.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Criticality: 3**'
  prefs: []
  type: TYPE_NORMAL
- en: Stories with parent Jira epics represent how team-level work connects to strategic
    work. All team-level work should be traceable and reportable against a measurable
    goal. This check ensures that tactical execution in Jira can connect to strategy
    in Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: You can simply treat it by linking orphan stories to parent Jira epics.
  prefs: []
  type: TYPE_NORMAL
- en: '**Health check #2: Stories should have estimated story points.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Criticality: 2**'
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that stories are estimated using story points to provide progress
    visibility in burndown charts and improve planning based on historical velocity
    (points per sprint). Ensuring that all stories are estimated will improve your
    delivery predictability based on actual velocity.
  prefs: []
  type: TYPE_NORMAL
- en: You can improve it by adding point estimates to your unestimated stories.
  prefs: []
  type: TYPE_NORMAL
- en: '**Health check #3: Epics should have an assigned fix version.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Criticality: 3**'
  prefs: []
  type: TYPE_NORMAL
- en: An assigned fix version for a Jira epic defines the release in which the feature
    will be shipped. The releases are tied to a project in Jira where the Jira epics
    are located. Fix versions are equivalent and map to release vehicles in Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: You can fix it by assigning a fix version to all planned Jira epics.
  prefs: []
  type: TYPE_NORMAL
- en: '**Health check #4: There should only be one project assigned to a Jira board.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Criticality: 5**'
  prefs: []
  type: TYPE_NORMAL
- en: An agile board in Jira should represent a team. Having multiple projects linked
    to a single board can make it difficult to measure team-level progress. For example,
    you may struggle with multiple team sprints with overlapping dates.
  prefs: []
  type: TYPE_NORMAL
- en: You can fix it by ensuring that only one project is linked to a board by navigating
    to **Board Settings**, selecting **Edit Filter Shares**, and removing all but
    one project. You may also fail this check if there are no projects associated
    with your board.
  prefs: []
  type: TYPE_NORMAL
- en: '**Health check #5: Mark custom fields as optional, not required.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Criticality: 5**'
  prefs: []
  type: TYPE_NORMAL
- en: Custom field configuration can affect your ability to integrate with Jira Align.
    Any Jira custom field that is set as mandatory will fail to sync between Jira
    and Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: You can fix this by making your Jira issue custom fields optional.
  prefs: []
  type: TYPE_NORMAL
- en: '**Health check #6: A single sprint should only be tied to one board.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Criticality: 5**'
  prefs: []
  type: TYPE_NORMAL
- en: Because a board should only represent one team, if you have a sprint on multiple
    boards, it can be difficult to measure team-level progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to health check #4, follow the instructions to make sure you only have
    one project per board. If your team is structured such that you can''t edit **Filter
    Shares**, instead select **Edit Filter Query** and ensure that only a single team''s
    sprints are tied to a Jira board.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Health check #7: Sprints on a Jira board should not have overlapping dates.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Criticality: 5**'
  prefs: []
  type: TYPE_NORMAL
- en: Sprints represent a (usually 2-week) planning and execution time slot for a
    single team. Only one sprint should be active at a time.
  prefs: []
  type: TYPE_NORMAL
- en: You can improve it by making sure the start and end dates for your sprints don't
    overlap and that there is only one active sprint at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs: []
  type: TYPE_NORMAL
- en: 'Health checks #1, #2, and #3 are great to have when scaling; however, they
    won''t stop you from moving ahead with your Jira Align journey.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Health checks #4, #5, #6, and #7 are very important to get right before connecting
    to Jira. The affected data will impact how work is visualized and synced into
    Jira Align.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Health checks #6 and #7 do not apply to Kanban team boards. However, the Kanban
    teams should have an agreement to work on a common cadence aligned to sprints
    and a PI.'
  prefs: []
  type: TYPE_NORMAL
- en: To bring predictability and forecast insights into Jira Align, define a dataset
    and import only data completed within the last quarter, currently in progress,
    and future planned work.
  prefs: []
  type: TYPE_NORMAL
- en: We have identified which data needs improving by analyzing existing programs
    in Jira. Let's now set the boundaries and map people, work, time, and outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping people, work, time, and outcomes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira Align provides a holistic view of how people engage in work over periods
    of time in order to achieve outcomes. These four dimensions are key to planning
    and alignment and play a significant role in business agility. While the teams
    continue their work in the best-of-breed Jira Software, Jira Align connects team-level
    execution with top-level strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which team-level work can be organized in Jira.
    Keep in mind that a *project* in Jira represents a container for work items and
    is hence analogous to a backlog. Also note that there is not a *team* entity in
    Jira''s database. Therefore, Jira Align will derive teams based on Jira project/board
    combinations. Here are the two top options for mapping projects/boards in Jira
    to teams in Jira Align:'
  prefs: []
  type: TYPE_NORMAL
- en: One Jira project per team of teams, one board per team, and one active sprint
    per board. This option requires a custom team field in Jira to drive each board.
    We recommend including Jira epics in the same project when using this option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Jira project per team, one board per team, and one active sprint per board.
    For this option, you need an additional Jira project to contain Jira epics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Which option should you choose? Either one project per team of teams or one
    project per team is acceptable. Let''s now take a look at how to use one project
    per team of teams:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – One team of teams project structure](img/Figure_2.7_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – One team of teams project structure
  prefs: []
  type: TYPE_NORMAL
- en: One project per team of teams requires the use of a custom field for teams in
    Jira to separate team boards. Jira issues don't store the board ID, and a single
    team selector field should be used to identify the team assignment for each story.
    The team field sets the board filter and prevents a sprint from being shared by
    multiple team boards in one Jira project. Teams can create additional boards and
    workflows for visualizations, but those won't be mapped to Jira Align. It's best
    to come up with a naming convention for the team boards that are connected to
    Jira Align. Larger organizations tend to opt for one project per team of teams
    to reduce the number of projects in Jira. For example, if there are 20 portfolios,
    each with 10 programs, each with 10 teams, that would be 2,000 Jira projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The smaller the company, the more it makes sense to go with the best practice
    of one project per team – it''s simpler and doesn''t require a team custom field.
    An organization can also use a combination of the approaches if need be. Here
    is the structure for one program project with many team projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Many team projects structure](img/Figure_2.8_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Many team projects structure
  prefs: []
  type: TYPE_NORMAL
- en: Note that with this option, the program project should contain only Jira epics,
    which will get synced with Jira Align features.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to have only one active sprint per team agile board (teams can have
    future sprints planned without activating them).
  prefs: []
  type: TYPE_NORMAL
- en: Avoid overlapping sprint dates and maintain a common sprint cadence between
    teams, a best practice for agile at scale.
  prefs: []
  type: TYPE_NORMAL
- en: It's recommended for a story to be completed by one team in a single sprint.
    If a story needs to be shared, then clone it for each individual team.
  prefs: []
  type: TYPE_NORMAL
- en: If there are any unfinished stories at the end of a sprint, split them or move
    them to the backlog before completing the sprint.
  prefs: []
  type: TYPE_NORMAL
- en: For a Jira project with many team agile boards, do not share sprints across
    boards as this will create a conflict between boards.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid creating fake sprints as an extra holding sprint or backlog within the
    backlog. Jira Align will assume these are real planned future sprints.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've got containers for team-level work items in Jira, we return to
    the concept that people perform work over time to achieve outcomes. Team-level
    work is executed in Jira while Jira Align sits on top of Jira to connect execution
    with strategy. Teams track work in Jira using the native issues and a hierarchy
    of Jira epics, stories, and sub-tasks. Jira epics represent a feature at the program
    level that teams deliver within a program increment or business quarter. Jira
    epics are broken down into stories, and further still into sub-tasks, to be delivered
    within a single sprint.
  prefs: []
  type: TYPE_NORMAL
- en: At the portfolio level, you track high-level work items called *themes* and
    *portfolio epics*, which are linked to your program-level work items, Jira epics
    or *features*. Organizations developing complex systems often require an additional
    work level between portfolio epics and features called *capabilities*. Introduce
    the additional level with caution as it adds extra levels of complexity that require
    added resources and measures to manage, maintain, and report at the capability
    level.
  prefs: []
  type: TYPE_NORMAL
- en: 'At each level, work items contribute to measurable outcomes, roll up to parent
    work items, and ultimately connect to the enterprise strategy, as depicted in
    the following diagram. Notably, your toolset should support these practices at
    each level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Tools with people, work, time, and outcomes](img/Figure_2.9_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Tools with people, work, time, and outcomes
  prefs: []
  type: TYPE_NORMAL
- en: 'It is critical that the organization comes to a common agreement on how to
    align tools with people, work, time, and outcomes to successfully set up Jira
    Align. A key aspect of alignment is agreeing upon terminology. Whether your organization
    adopts SAFe or not, we recommend referring to the SAFe glossary as a reference
    when defining your dimensions: [https://www.scaledagileframework.com/glossary/](https://www.scaledagileframework.com/glossary/).'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the model shown in *Figure 2.9* also leads to [*Chapter 3*](B16328_03_Final_NM_ePub.xhtml#_idTextAnchor037),
    *Navigating Jira Align*, where you will learn to load, visualize, and report upon
    work at various levels of scale.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started and set up Jira Align by going through a quick fundamental
    setup and apply what we have discovered so far.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Jira Align
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with Jira Align, we will look at how to perform a quick setup
    using the information you discovered during the previous two phases: analyzing
    existing programs in Jira and mapping people, work, time, and outcomes. We will
    then onboard new users into Jira Align.'
  prefs: []
  type: TYPE_NORMAL
- en: As part of organizational alignment for transformation, it is important that
    everyone speaks a common language. As illustrated in *Figure 1.1*, *Alignment
    toward transformation by connecting strategy with execution*, language helps an
    organization shape their culture by improving transparent communication flowing
    from leadership to the knowledge workers and vice versa. Experience has shown
    that it is important to keep the language as close to the common industry terminology
    or chosen framework as possible. This not only helps develop competencies internally,
    but also makes onboarding faster with effective communication when a new knowledge
    workforce joins an organization.
  prefs: []
  type: TYPE_NORMAL
- en: As the organization matures in language, they start developing a shorthand form
    of communication that abbreviates useful principles and practices. This often
    creates a sense of togetherness and identity. When everyone speaks the same language,
    it feels cohesive and creates stronger relationships to bridge differences. The
    consistency in language has a positive ripple effect both inside and outside the
    organization, helping to build trust, reliability, and credibility. Overall, the
    alignment in language helps reduce misunderstandings and increases productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Jira Align is designed to adapt to your organization's transformation journey.
    You can rename the work objects, navigation menus, date labels, release attributes,
    currency, and finance terminologies in Jira Align to allow your organization to
    closely match your chosen practices and team tools. You can configure the platform
    terminology in Jira Align to match your framework, such as **Large-Scale Scrum**
    (**LeSS**), **Scaled Agile Framework** (**SAFe**), and **Disciplined Agile Delivery**
    (**DAD**). For example, a *driver* in LeSS can be identified as a *business driver*
    in SAFe and a *goal* in DAD. Likewise, you may want to call your Jira epic a *feature*,
    your sprint an *iteration*, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can configure platform terminology under **Administration** | **Settings**
    | **Platform Terminology**, and user record terminology under **Administration**
    | **Settings**| **User Record Terminology**. Once you update the terminologies,
    be sure to click on the **Update Terminology** button to save the changes and
    re-login to Jira Align for the updates to take effect. Here is the platform terminology
    setup screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Jira Align platform terminology setup](img/Figure_2.10_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Jira Align platform terminology setup
  prefs: []
  type: TYPE_NORMAL
- en: Once the terminologies are configured, we will start creating the entries for
    the physical and virtual organizational attributes in Jira Align. The physical
    attributes include the enterprise's organization structure and operational regions.
    Next, for the virtual organization, we will create a portfolio and associate multiple
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will first create the organization structure under **Administration** |
    **Setup** | **Organization Structure** by clicking on the **Add New** button,
    which presents the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Jira Align organization structure setup](img/Figure_2.11_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Jira Align organization structure setup
  prefs: []
  type: TYPE_NORMAL
- en: The organization structure allows you to represent your organizational business
    units and how they relate to one another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create the physical regions in which your organization operates.
    This information is used when creating portfolios, programs, users, and releases
    for functionalities tied to time tracking in Jira Align. You can add regions under
    **Administration** | **Setup** | **Regions** by clicking on the **Add Regions**
    button to open the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Jira Align regions setup](img/Figure_2.12_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Jira Align regions setup
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create the virtual organization attributes, beginning with the
    portfolio by going to **Administration** | **Setup** | **Portfolios** and clicking
    on the **Add Portfolio** button. Creating a portfolio requires the following mandatory
    details:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Mutants`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mutants Portfolio` portfolio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mutants Network`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mutants Portfolio Leadership Team`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Europe`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These settings are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Jira Align portfolio setup](img/Figure_2.13_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Jira Align portfolio setup
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed the required details, click on **Save**. You can now
    add the individual portfolio leadership team members under the **Members** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create the programs and link them to the portfolio by going to
    **Administration** | **Setup** | **Programs** and clicking on the **Add Program**
    button. Creating a program requires the following mandatory details:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Superheroes`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mutants`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Superheroes Program Leadership Team`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you complete the required details, click on **Save**. You can now add
    the individual program leadership team members under the **Members** tab. When
    you need to run more than one program, you can repeat the steps to create and
    associate multiple programs with the portfolio. For example, we have created and
    associated the **Transformers** program and the **Superheroes** program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Jira Align program setup](img/Figure_2.14_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Jira Align program setup
  prefs: []
  type: TYPE_NORMAL
- en: You may create and manage additional attributes, such as customers, cost centers,
    countries, cities, and custom hierarchies under the **Administration** | **Setup**
    menu to further define your views and reporting in Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will next create teams and associate them with the program. The teams will
    be created by going to **Team** | **Manage** | **Teams** and clicking on the **Add
    Team** button. Creating a team requires the following mandatory details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type**: Choose **Agile Team** for creating a Scrum team and **Kanban Team**
    for a Kanban team. Let''s create an agile team for the Superheroes program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Team Batman`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Add a description for your team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team Short Name**: Add a five-character short name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sprint Prefix**: Add a team prefix to your team sprints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**: Choose the program that your team belongs to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have completed the required details, click on **Save**. You can now
    add the team photo under the **Details** tab and individual team members under
    the **Members** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Jira Align team setup](img/Figure_2.15_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Jira Align team setup
  prefs: []
  type: TYPE_NORMAL
- en: 'You will repeat these configuration steps to create your virtual structure
    and then use the **Configuration** bar to navigate the virtual organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Jira Align virtual organizational structure](img/Figure_2.16_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Jira Align virtual organizational structure
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will create a program increment cadence and the related anchor
    sprints in Jira Align as preparations to connect to Jira. The program increment
    will be created by going to **Program** | **Manage** | **Program Increments**
    and clicking on the **Add Program Increment** button. Creating a program increment
    requires the following mandatory details:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Mutants` portfolio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**: Choose all the programs that will share the program increment
    cadence *Superheroes and Transformers*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2020 Q4`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2020 Q4`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`20Q4`. This will be used for reporting purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start Date**: Add a start date to your program increment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Finish Date**: Add a finish date to your program increment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Add a description to your program increment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: Choose a status to track your program increment. The available
    statuses are **Planning**, **In Progress**, **Done**, and **Archive**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you complete the required details, click on **Save**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Jira Align program increment setup](img/Figure_2.17_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Jira Align program increment setup
  prefs: []
  type: TYPE_NORMAL
- en: If your programs do not share a common program increment, then repeat the preceding
    steps and ensure that you add a prefix to your program increment number, name,
    and short name to uniquely identify the other program increment cadences.
  prefs: []
  type: TYPE_NORMAL
- en: We can now create anchor sprints for the program increment. For this, choose
    the **SYNC SPRINTS** tab under the selected program increment. You can mass add
    anchor sprints that follow a common sprint cadence or you can add a single anchor
    sprint that can represent your **IP (Innovation and Planning)** sprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'To mass add anchor sprints, select the **Mass Add** toggle and provide the
    following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Q4S`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First Date**: Add the first sprint start date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Standard` `Sprint`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10` `Week` `Days` to select a 2-week cadence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Daily Max**: Choose the maximum daily work allocation in hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Daily Defect**: Choose the expected daily defect allocation in hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total Anchors**: Choose the number of anchor sprints to generate. Choose
    **5** to create five anchor sprints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, click on the **Create Anchors** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Jira Align anchor sprint mass add](img/Figure_2.18_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Jira Align anchor sprint mass add
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a single anchor sprint, select the **Single Add** toggle and provide
    the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Q4S6 (12/14-01/01)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Q4S6`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dates**: Add a sprint start date and finish date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: Choose the anchor sprint type *IP (Innovation & Planning) Sprint*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duration**: Choose the duration of your sprint if you haven''t added a sprint
    finish date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Daily Max**: Choose the maximum daily work allocation in hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Daily Defect**: Choose the expected daily defect allocation in hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, click on the **Create Sprint** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Jira Align anchor sprint single add](img/Figure_2.19_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Jira Align anchor sprint single add
  prefs: []
  type: TYPE_NORMAL
- en: 'Once all the anchor sprints are created, you can now generate the team sprints
    in bulk using the **Generate Team Sprints** button, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Jira Align team sprints generation](img/Figure_2.20_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Jira Align team sprints generation
  prefs: []
  type: TYPE_NORMAL
- en: Once you confirm, Jira Align will generate the associated sprints for all the
    teams in the chosen programs and program increments.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will repeat these steps to generate as many program increments as you need
    for planning and executing work. The program increments will now be available
    to the applicable programs and will be available to choose from the **Program
    Increment** filter in the **Configuration** bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Jira Align program increment configuration bar](img/Figure_2.21_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Jira Align program increment configuration bar
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can onboard new users into Jira Align by going to **Administration**
    | **Access Control** | **People** and clicking on the **Add User** button. Adding
    a new user requires the following mandatory details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Type**: Choose **Internal** to create fully functional, role-based Jira
    Align users. For users who only require access to the ideation module, choose
    **External**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First Name**: Add the user''s first name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Last Name**: Add the user''s last name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email**: Add the user''s email address. Jira Align will send all user correspondence
    to the given email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Title**: Add a title for the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Role**: Choose a role from the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise Hierarchy**: Choose the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Region**: Choose the region.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**City**: Choose the city.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost Center**: Choose the applicable cost center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, click on the **Save** button to create the new user. Jira Align will
    send a new user setup invitation via email to onboard the user onto the platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Jira Align user account](img/Figure_2.22_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Jira Align user account
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs: []
  type: TYPE_NORMAL
- en: User access control in Jira Align is based on roles. There are predefined sets
    of roles that can be used or copied to create new roles. Roles are configured
    using functionality toggles at different levels of the application, such as the
    Team, Program, Solution, and Portfolio levels.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to mass import users, you can go to **Administration** | **Access
    Control** | **People** | **More Actions** and click on **Import User Records**.
    This will provide a user import template to guide you through the bulk user import.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid updating user records in the **user interface** (**UI**), you can export
    user records by going to **Administration** | **Access Control** | **People**
    | **More Actions**, clicking on **Export**, and then editing and re-importing
    the file into Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira Align supports **single-sign-on** (**SSO**), which can be configured by
    going to the **Administration** | **Settings** | **Platform** | **Security** tab
    and providing the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enable SSO**: Set the option to **Yes**. This option will display when **Disable
    Manual Sign In** is set to **Yes** (see next item).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable Manual Sign In**: The default value is **No**. Setting the option
    to **Yes** will disable manual sign in, along with the security settings, resend
    password option, login page, and new user setup email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAML 2.0 Identity Providers**: Click on the **Add SAML Provider** button
    and then copy and paste the SAML 2.0 (security assertion markup language) XML
    (extensible markup language) metadata. Under **NameID Lookup By**, select either
    the **Email** or **External ID** field for user authentication. A user''s external
    ID can be set on the **Edit User** page and synced through the external connectors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sign In URL**: This option is only available if the manual sign in option
    is disabled. Set the URL that you want to direct users to when they try to access
    Jira Align.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sign Out URL**: Set the URL that you want to redirect users to when they
    click **Sign Out**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the preceding details, once you connect to Jira, there will be
    Jira-integrated users who will obtain access to Jira Align. Let's now connect
    Jira Align to Jira and start mapping the objects and fields with Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Jira Align, you will create and manage portfolio and program backlogs while
    agile teams continue to work in Jira Software with zero to minimal disruption.
    Jira Align connects to one or many Jira instances and the connector supports all
    three Jira hosting platforms: Atlassian Cloud, Server, and Data Center. Jira Align
    is a SaaS first solution with enterprise-grade hosting. A Jira Align on-premises
    solution is available for organizations that require additional controls in terms
    of their data security and privacy. The following diagram represents how the Jira
    Align platform connects to one or many Jira platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Jira connector hosting platforms](img/Figure_2.23_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Jira connector hosting platforms
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs: []
  type: TYPE_NORMAL
- en: Jira Align on-premises has the same code base as Jira Align SaaS and supports
    integration with the Atlassian Cloud Jira Software. If you chose to deploy Jira
    Align on-premises, you are most likely to integrate with Jira Software Data Center,
    as illustrated in *Figure 2.23*.
  prefs: []
  type: TYPE_NORMAL
- en: For physically connecting to Jira Software, it is required to establish a permanent
    application link between Jira and Jira Align via the Jira Connector. To establish
    the connection, you will need a Jira service account with permission to access
    the data in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will first create and configure an application link in Jira Software by
    going to `Jira Align`, and application type, `Generic Application`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – Jira application link](img/Figure_2.24_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – Jira application link
  prefs: []
  type: TYPE_NORMAL
- en: 'Now switch to Jira Align, go to **Administration** | **Jira Settings**, and
    click on the **Jira Connectors** button. Add a connector and then complete the
    following details for the connection before you click on the **Active** button.
    This will prompt you to enter the Jira service user login details for the Jira
    connector to access Jira via the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25 – Jira Align, manage Jira connectors](img/Figure_2.25_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – Jira Align, manage Jira connectors
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the technical prerequisites for integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira instance accessibility**: The Jira instance should be accessible to
    Jira Align via the internet or the **virtual private network** (**VPN**).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira instance with secure access**: The Jira instance should have a publicly
    trusted **SSL** (**secure socket layer**) certificate for secure **HTTPS** (**hypertext
    transfer protocol secure**) access.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira user access**: You will need a dedicated Jira service user provisioned
    with the following project permissions: Create Issues, Edit Issues, Assign Issues,
    Manage Sprints, Browse, and Manage Reporter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Jira connector requires access to the Jira API, which should be exposed
    outside the firewall to access from the Jira Align application. If your Jira is
    hosted in the Atlassian Cloud, then it is pretty straightforward connecting to
    the Jira API. If your Jira is hosted on-premises, then your Jira most probably
    sits behind a firewall, and enabling external access to the Jira API and integrating
    to Jira becomes a challenge to address. The following diagram represents how the
    Jira API should be exposed and accessible to the Jira connector in Jira Align:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Jira Connector API access and connectivity](img/Figure_2.26_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – Jira Connector API access and connectivity
  prefs: []
  type: TYPE_NORMAL
- en: 'You may achieve this by one or a combination of three options after Jira has
    been configured:'
  prefs: []
  type: TYPE_NORMAL
- en: Opening firewall ports/whitelisting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverse proxy and/or API gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-premises agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Due to an organization''s network policies, complex infrastructure, and security
    requirements, you may need to involve various technical roles, including Edge
    Network Security, Sysadmin, Jira Admin, Network Admin, and IT C-suite executives,
    to successfully enable and allow the Jira API access to the Jira connector. These
    are the four API-based URLs that the Jira connector requires:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/rest/auth/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/rest/api/2/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/rest/agile/1.0/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/rest/greenhopper/1.0/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The verbs needed for each of these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /rest/**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /rest/**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE /rest/**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT /rest/**`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, /rest/** should be replaced with the endpoints listed previously, for
    example /rest/auth.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the connection is established, we will start connecting the Jira artifacts.
    The following image based on the 10X: Jira Integration Guide document details
    how Jira and Jira Align artifacts are mapped and synced via the Jira API connector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.27 - Jira Align Jira integration mapping, adapted from 10X: Jira
    Integration Guide](img/Figure_2.27_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.27 - Jira Align Jira integration mapping, adapted from 10X: Jira Integration
    Guide'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the Jira Integration Guide by going to the user menu, selecting
    **Help** | **Quick Links** | **Guides,** and then clicking on **10X: Jira Integration
    Guide**.'
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand the core data mapping between Jira Align and Jira
    Software projects, boards, work item types, and fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Atlassian provides templates for Jira Integration Data Collection to facilitate
    data mapping during preliminary requirements gathering. You can download the templates
    by going to the user menu, selecting **Help** | **Knowledge Base** | **Integrations**
    | **10X: Jira Integration Guide,** and then clicking on **10X: Jira Integration
    Data Collection**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the field mappings required as discussed earlier, there are
    some recommended optional Jira Align field mappings between Jira epics and Jira
    Align features. You can configure them under the **Administration** | **Connectors**
    | **Jira Settings** | **Jira Setup** tab and look for the **Custom Fields** section.
    Next, you will enter your custom field ID in the following format: **customfield_100xx**,
    where *100xx* is the ID located in Jira Software. Keep in mind that these will
    require you to create custom fields in Jira Software as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MMF** (**Minimum Marketable Feature**): A **Yes/No** field that syncs bi-directionally
    to indicate whether the feature represents the minimum marketable functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feature Product**: A single selection drop-down field that syncs bi-directionally
    to display the product with which a feature is associated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Why? Details**: A multiline text field that syncs one way (Jira Align to
    Jira) to display details on why a work item is in the backlog and how it connects
    to strategic objectives'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feature Parent**: A single selection drop-down field that syncs one way (Jira
    Align to Jira) to display the parent work item (capability or portfolio epic)
    of the feature'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program increment**: A single selection drop-down field that syncs one way
    (Jira Align to Jira) to display the program increment or business quarter in which
    the feature will be delivered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Jira Align Why? definition**, a custom text (multiline) field, should
    be created in Jira Software and added to the applicable Jira epic issue screen.
    Next, the custom field should be configured as a **Wiki style renderer** in the
    Jira field configuration. This configuration would allow the **Why?** button data
    to be presented in a wiki-formatted table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The data syncs one way, from Jira Align to Jira Software. We recommend that
    the Jira Align Why? definition custom field is set as read-only, or any changes
    made in the custom field will be overwritten upon the next sync with Jira Align.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In addition, any required custom fields in Jira Software should be set as optional
    in order for the custom fields to successfully sync with Jira Align.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you use Rich Text Format in Jira fields to be integrated with Jira Align,
    go to the **Administration** | **Connections** | **Jira Settings** | **Jira Setup**
    tab and choose **HTML** as the option for **Rich Text Format**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We saw how Jira issue types (epics, stories, and bugs) map to Jira Align work
    items (features, stories, and defects). Note, too, that Jira sub-tasks map to
    Jira Align tasks and that Jira tasks can be mapped to a Jira Align story of *type
    = task*. But what about the status of these Jira issue types? Jira workflows are
    comprised of the statuses and transitions that issues move through as part of
    the development life cycle. These workflows are connected to Jira Align via a
    mapping of Jira statuses to Jira Align states (forward mapping) and of Jira Align
    states to Jira statuses (reverse mapping). Note that ideally, all workflows connected
    to Jira Align are consistent to make administration easier, but whatever workflows
    are agreed upon must not be altered without coordination with the Jira Align administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now configure the forward state mapping between Jira and Jira Align.
    You can configure the state mapping under the **Administration** | **Connectors**
    | **Jira Settings** | **State Mapping** tab. The forward state mapping is a global
    setting and can be configured for the following work items: features (Jira epics),
    stories, tasks (Jira sub-tasks), and defects (Jira bugs). You will need to set
    the Jira Canceled State ID to allow any issues canceled in Jira to move to the
    canceled recycle bin in Jira Align. Any canceled work item in Jira Align will
    set the issues in Jira to the canceled state. The following screen shows how to
    configure the forward state mapping in Jira Align:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.28 – Jira Align forward state mapping](img/Figure_2.28_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.28 – Jira Align forward state mapping
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will set the reverse state mapping between Jira Align and Jira. For
    this you will first need to manage Jira projects under **Administration** | **Connectors**
    | **Jira Settings** | **Manage Projects**. To add a new Jira project, click on
    the **Add Project** button and provide the project key, project name, choose the
    associated program, and then click on **Save**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.29 – Jira Align manage projects](img/Figure_2.29_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.29 – Jira Align manage projects
  prefs: []
  type: TYPE_NORMAL
- en: 'The reverse state mapping is available for each Jira project for the following
    work items: features (Jira epics), stories, and defects (Jira bugs). You will
    need to click on the **State Mapping** link for each Jira project to configure
    the reverse state mapping. The following screen shows how to configure the reverse
    state mapping for a chosen Jira project in Jira Align:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.30 – Jira Align reverse state mapping](img/Figure_2.30_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.30 – Jira Align reverse state mapping
  prefs: []
  type: TYPE_NORMAL
- en: Once the mapping is configured, you can click on **Update** to save it to the
    project or click on the **Update all Jira Projects** button to apply the reverse
    state mapping to all available Jira projects in Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will configure the field mappings for each Jira project by going
    to the **Manage Projects** tab and clicking on the **Manage Custom Fields** button.
    Here you will configure the Jira custom field mappings: Jira Team and Team values,
    Jira Link Actions, Jira Product, Jira MMF, and Jira Priority field values, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.31 – Jira Align reverse custom field mapping](img/Figure_2.31_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.31 – Jira Align reverse custom field mapping
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that fields and states are mapped, let''s see how to audit changes and
    orphan records. You can report on Jira issues that Jira Align no longer has access
    to via the API. These issues are known as orphans and you can report on them under
    the **Administration** | **Connectors** | **Jira Management** | **Jira Deleted
    Issue** tab. The resulting orphan Jira issues report lists two types of missing
    issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Any Jira Align-linked Jira issues that were permanently deleted by a user in
    Jira. The issues are displayed with a red warning icon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any Jira issues that had their parent project permission changed such that the
    Jira service account no longer has access to the issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips and Tricks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the report also displays API parsing errors via a yellow icon, which
    can be ignored or filtered out using the error types, as the issues still exist
    in Jira.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is recommended to run this report once a week and schedule the run during
    non-working hours to prevent any interruptions to the regular syncing of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s see how to view an audit log. Simply go to the **Manage Projects**
    tab and click on the **View Logs** button to view audit logs on the Jira synchronization
    process. The log captures changes to the data regarding managing projects, Jira
    setup, custom issue types, Jira integration, pulling Jira user data, and state
    mappings. You can filter the Jira log report according to the following items:
    Configuration, Jira API, Issues, Sprints, and Release Vehicles. You can filter
    the configuration data further by date, and it serves as a change log if you need
    to track who changed what and when on the Jira Connector configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have connected to Jira, let's explore how to connect tactical execution
    in Jira to strategy in Jira Align by extending to the portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Extending to the portfolio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A portfolio is more than a collection of programs. It is the unit responsible
    for linking strategy to execution. The portfolio team translates mission and vision
    into strategic themes and lightweight business cases for epics through which the
    themes are realized. But extending Jira Align to the portfolio level traditionally
    comes later in an enterprise implementation after several successful programs
    are up and running.
  prefs: []
  type: TYPE_NORMAL
- en: For years, the Jira Align implementation roadmap has closely followed that of
    the leading framework it supports, SAFe, beginning with the establishment of the
    core leadership team who are not only bought in, but drive the transformation
    day to day. From there, programs (teams of teams) are identified, trained, and
    onboarded in Jira Align where they refine their backlogs and prepare for quarterly
    planning (PI planning if following SAFe). They leverage Jira Align's powerful
    Product Roadmaps, Program Room, Program Board, Dependency Maps, Risk ROAM report,
    and so on, to execute their quarterly increment. Then, building on the success
    of the first launched program, the guiding group engages in a *rinse and repeat*
    for the next program, and so on. One of our successful clients launched seven
    programs this way in the course of a year, realizing 33% faster time-to-market
    in year 1, 37% in year 2, and 45% in year 3.
  prefs: []
  type: TYPE_NORMAL
- en: Program-level success, where teams of teams deliver features to market faster,
    with higher quality and higher value has traditionally been the sweet spot of
    both scaling frameworks and tools that support them. For this reason, extending
    program-level success to the portfolio has come later, after launching several
    programs. However, there is a more recent trend to establish the portfolio level
    in Jira Align early on and connect it with program-level execution concurrent
    with launching the first few programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this approach, portfolio leadership may be onboarded in Jira Align prior
    to the first programs and begin creating high-level work items: themes that may
    span years and portfolio epics that span business quarters. They may also create
    high-level goals, such as annual OKRs that will be realized through the work of
    programs as they are onboarded. A portfolio-level funnel can be created in Jira
    Align using process steps visualized on a Kanban for leadership to track the state
    of epics from concept through to delivery. This is done as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.32 – Portfolio-level epic funnel](img/Figure_2.32_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.32 – Portfolio-level epic funnel
  prefs: []
  type: TYPE_NORMAL
- en: 'The portfolio team can periodically prioritize epics using **Weighted Shortest
    Job First** (**WSJF**), which Jira Align calculates after you enter a score for
    the four parameters: Business Value, Time Value, Risk Reduction/Opportunity Enablement
    Value, and Job Size. The following screenshot shows the WSJF parameters used to
    calculate the score:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.33 – Calculated WSJF based on parameter scores](img/Figure_2.33_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.33 – Calculated WSJF based on parameter scores
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the portfolio epic backlog ranked by WSJF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.34 – Portfolio epic backlog ranked by WSJF](img/Figure_2.34_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.34 – Portfolio epic backlog ranked by WSJF
  prefs: []
  type: TYPE_NORMAL
- en: 'The portfolio team can also use Jira Align''s Value Engineering functionality
    to determine whether work items are worth building, and later, based on collected
    metrics, whether to pivot or persevere based on the *build-measure-learn* approach
    popularized by Eric Ries in *The Lean Startup*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.35 – Value engineering data shown on the epic details panel](img/Figure_2.35_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.35 – Value engineering data shown on the epic details panel
  prefs: []
  type: TYPE_NORMAL
- en: The rise in popularity of establishing the portfolio in Jira Align earlier in
    the implementation makes sense as organizations wish to connect strategy with
    execution, from themes to portfolio epics to features, to stories and tasks. Referring
    again to *Figure 1.1*, the sooner you connect strategy with execution, the sooner
    you achieve the ripple effect leading from alignment to business transformation.
    Once the levels are connected in Jira Align, the organization has visibility into
    key financial reports, such as investment by theme and investment versus actuals,
    as well as real-time status from live product roadmaps and progress bars for work
    item rollups in the work tree.
  prefs: []
  type: TYPE_NORMAL
- en: There are, however, considerations as to whether an organization is ready to
    extend Jira Align to the portfolio. Those who achieve the greatest success at
    the portfolio level adopt the practices discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing a portfolio vision and roadmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You cannot connect execution with strategy if the latter is ill-defined. Jira
    Align provides canvas templates to help the portfolio team define its vision statement
    and value proposition. The following screenshot shows a template for the portfolio
    vision canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.36 – Portfolio canvas template](img/Figure_2.36_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.36 – Portfolio canvas template
  prefs: []
  type: TYPE_NORMAL
- en: 'The portfolio team can then define high-level directional roadmaps, such as
    epics grouped by theme, spanning across business quarters. The following screenshot
    shows the portfolio roadmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.37 – Roadmap of portfolio epics by theme](img/Figure_2.37_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.37 – Roadmap of portfolio epics by theme
  prefs: []
  type: TYPE_NORMAL
- en: Funding value streams and teams, not projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In agile budgeting, you fund persistent teams and bring the work to them, as
    opposed to traditional budgeting, where you fund projects and assemble teams to
    deliver them. If following SAFe, you will have value stream budgets that remain
    fixed each quarter and adjust the allocation of funding across value streams about
    twice a year. The persistent teams then develop work items to deliver upon these
    value streams. Each quarter, work is funneled to the teams who break down higher-level
    work items into features that can be delivered within the quarter and stories
    that can be delivered within sprints. The group of sprints comprising the quarter,
    usually five or six of them, is called a Program Increment in SAFe, but whether
    following SAFe or not, the practice remains generally the same when operating
    at scale.
  prefs: []
  type: TYPE_NORMAL
- en: An important aspect of agile budgeting is that it relies on the average cost
    of a story point based on a blended rate. The financial reports in Jira Align,
    such as the investment by theme and investment versus actuals reports, rely on
    this approach. Organizations that leverage this approach have found it to be lighter
    and less burdensome than traditional budgeting and have even obtained **capital
    expense** (**CapEx**) and **operating expense** (**OpEx**) costs in this manner.
    However, while the average point cost approach often closely matches other methods,
    it is important to note that Jira Align is not meant to be the organization's
    financial system of record.
  prefs: []
  type: TYPE_NORMAL
- en: The rise in interest in establishing the portfolio level early in a Jira Align
    implementation also coincides with the launch of SAFe's Lean Portfolio Management
    certification in Fall 2019\. More and more organizations are moving toward funding
    and managing value streams. Indeed, 78% of respondents to the 14th Annual State
    of Agile survey stated that their organization has implemented, is implementing,
    or has expressed interest in, approaches focused on value streams.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the enterprise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this modern software and digital age, you will find that most organizations
    are starting, or have started, their transformation journey. But those achieving
    the best outcomes have taught us that business and technology teams alike need
    to be connected, aligned, and stay in sync. Attaining business agility requires
    connecting the entire enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: It is important that your non-technical teams, such as HR, procurement, compliance,
    and finance, embrace and understand the value of agile to propel an organization
    forward in achieving goals such as accelerating the time to market. Any and all
    functions of the business required to deliver value to customers must be onboard
    and engaged at the right levels to keep the flow of value delivery consistent
    and unblocked. When the entire enterprise knows the product roadmap and required
    support for the teams (staffing, tooling, security reviews, and suchlike), organizational
    silos are reduced while business agility increases.
  prefs: []
  type: TYPE_NORMAL
- en: If you are yet to extend your team-level execution to the portfolio, then you
    may face challenges regarding transparency, consistency, and predictability. The
    best way to bridge this gap is for teams at all levels to gain visibility to work,
    measure outcomes, and continually optimize investments to maximize value – in
    short, get them onboarded and acquainted with Jira Align. We'll now help you get
    oriented with the tool, beginning with basic navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the fundamentals of implementing Jira Align. We
    learned the importance of analyzing existing programs, aligning the organizational
    language, and mapping people, work, time, and outcomes. We then looked at a quick
    setup to connect team-level execution in Jira with programs and strategy in Jira
    Align. Lastly, we covered the importance of extending to the portfolio sooner
    rather than later when implementing Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to analyze the underlying data and prepare Jira Software for
    Jira Align. You know the technical requirements to set up and connect Jira Align
    with Jira. Lastly, you've seen three proven practices on how to extend agile practices
    to the portfolio level.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we move beyond implementation to the actual use of Jira
    Align, beginning with the basics of navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is it important to align the organizational language and reflect it in Jira
    Align?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the most critical health checks when analyzing existing programs in
    Jira?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you organize projects/boards in Jira to map with teams in Jira Align?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the integration mapping between Jira and Jira Align?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three practices adopted by organizations that have achieved success
    at the portfolio level?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Jira 8 Essentials – Fifth Edition*, by Patrick Li (Packt, 2019)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hands-On Agile Software Development with Jira*, by David Harned (Packt, 2018)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
