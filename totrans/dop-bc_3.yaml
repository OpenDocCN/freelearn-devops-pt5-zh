- en: Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The first rule of any technology used in a business is that automation applied
    to an efficient operation will magnify the efficiency. The second is that automation
    applied to an inefficient operation will magnify the inefficiency."'
  prefs: []
  type: TYPE_NORMAL
- en: '- Bill Gates'
  prefs: []
  type: TYPE_NORMAL
- en: We have seen DevOps practices and continuous integration until now. However,
    recently, containers have become a buzz word and everyone wants to have a hands-on
    experience with it. The main reason is to utilize the resources effectively and
    efficiently. Docker is an open source initiative for OS virtualization that automates
    the deployment of applications inside software containers. It is extremely useful
    to utilize containers for Dev or QA environments for better resource utilization.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will try to install and create a sample container. The objective
    is to get familiar with Docker containers and get a feel of how containers can
    be utilized for application deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter provides a quick overview of containers. We will be focusing on
    the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the difference between virtual machines and containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Tomcat container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker provides isolated user spaces and hence provides user-based processes,
    space, and filesystems. Behind the scenes, it shares the Linux host kernel. The
    following diagram illustrates the working mechanism of a Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00287.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Docker has two main components with a client-server architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Host**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Hub**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at them in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Host**: The Docker Host contains the Docker daemon, containers, and
    images. The Docker engine is an important component that provides the core Docker
    technology. This core Docker technology enables images and containers. When we
    install Docker successfully, we run a simple command. In our case, we will consider
    CentOS for the container. To run an interactive shell in the CentOS image, use
    docker `run -i -t <image> /bin/bash`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-i` flag initiates an interactive container
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-t` flag creates a pseudoterminal that attaches `stdin` and `stdout`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The image is a CentOS image
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/bin/bash` starts a shell'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When we run this command, it verifies whether the CentOS image is available
    locally. If it is not available, it will download the image from Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: An image has a filesystem and parameter that can be used at runtime, while a
    container is an instance of an image with a state. It is simple to understand
    that containers change, while images do not.
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Hub**: Docker Hub is a **Software as a Service** (**SaaS**) for sharing
    and managing Docker containers. It is a kind of centralized registry service provided
    by Docker. As a user, we can use it to build and ship applications. It allows
    us to create a pipeline to integrate with code repositories and for collaboration,
    image discovery, and automation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the difference between virtual machines and containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start installation of docker and creation of a container, it will
    be useful to get an understanding of why containers are different and how they
    are different from virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand the basic difference between virtual machines and containers.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a **virtual machine** (**VM**), we need to install an operating system with
    the appropriate device drivers; hence,the footprint or size of a virtual machine
    is huge. A normal VM with Tomcat and Java installed may take up to 10 GB of drive
    space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00289.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's an overhead of memory management and device drivers. A VM has all the
    components a normal physical machine has in terms of operation.
  prefs: []
  type: TYPE_NORMAL
- en: In a VM, the hypervisor abstracts resources. Its package includes not only the
    application, but also the necessary binaries and libraries, and an entire guest
    operating system, for example, CentOS 6.7 and Windows 2003.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud service providers use a hypervisor to provide a standard runtime environment
    for VMs. Hypervisors come in type 1 and type 2 categories.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A container shares the operating system and device drivers of the host. Containers
    are created from images, and for a container with Tomcat installed, the size is
    less than 500 MB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Containers are small in size and hence effectively give faster and better performance.
    They abstract the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: A container runs as an isolated user space, with processes and filesystems in
    the user space on the host operating system itself, and it shares the kernel with
    other containers. Sharing and resource utilization are at their best in containers,
    and more resources are available due to less overhead. It works with very few
    required resources.
  prefs: []
  type: TYPE_NORMAL
- en: Docker makes it efficient and easier to port applications across environments.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly install the Docker on Windows 10\. In our case, it is a Windows
    Home edition; so, we need to install Docker toolbox from [https://www.docker.com/products/docker-toolbox](https://www.docker.com/products/docker-toolbox):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Download button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00294.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It will redirect you to [https://github.com/docker/toolbox/releases/tag/v1.12.5](https://github.com/docker/toolbox/releases/tag/v1.12.5)
    or the page with the latest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download DockerToolbox. Click on the `exe` file of Docker toolbox to install
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Next > on the welcome page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the preferred location to install Docker Toolbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Keep all the default components for installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Additional Tasks that should be performed and click on Next >:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Docker toolbox installation will install the virtual box too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before starting operations on Docker, we need to enable the virtualization
    technology in the Windows system, or else we will get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating CA using `C:UsersMitesh.dockermachinecertsca.pem`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a client certificate using `C:UsersMitesh.dockermachinecertscert.pem`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Running pre-create checks... Error with pre-create check: "This computer doesn''t
    have VT-X/AMD-v enabled. Enabling it in the BIOS is mandatory" Looks like something
    went wrong in step ´Checking if machine default exists´... Press any key to continue...`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to Settings and click on Advanced Startup. Restart the system. Change the
    BIOS setting to enable Virtualization Technology:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00205.gif)'
  prefs: []
  type: TYPE_IMG
- en: Once the system is restarted, click on Docker Quickstart Terminal on the desktop.
    It will run precreate checks and download `boot2docker.iso` and run the virtual
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'After all proper configuration and checks, Docker is up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00207.gif)'
  prefs: []
  type: TYPE_IMG
- en: To get details on how to install Docker in CentOS, read DevOps for web development,
    available at [https://www.packtpub.com/networking-and-servers/devops-web-development](https://www.packtpub.com/networking-and-servers/devops-web-development).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Docker is up and running, we are ready to create docker containers. Note
    the IP address of the default docker machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a sample hello world container. Execute `docker run hello-world`.
    If you get the `"Hello from Docker!"` message, then we have created the container
    successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00113.gif)'
  prefs: []
  type: TYPE_IMG
- en: As we need to deploy a JEE application, we will create a Tomcat container in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Tomcat container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create a container with the Tomcat web server installed
    so that we can deploy Java-based web applications into it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an account in Docker hub and Login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can search different images from the Docker hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can find the Tomcat image at [https://hub.docker.com/_/tomcat/](https://hub.docker.com/_/tomcat/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use Docker''s `pull` command to get the Tomcat image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the Tomcat image is available, verify it using the `docker images` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00121.gif)'
  prefs: []
  type: TYPE_IMG
- en: To run docker container from the image, run `docker run -it --rm -p 8888:8080
    tomcat:8.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the IP address of the default docker machine and port `8888` in the browser
    to verify whether Tomcat is running properly in the container or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To get the IP address of the virtual machine, execute `docker-machine ls` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s verify whether we have access to the Tomcat manager application in this
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.gif)'
  prefs: []
  type: TYPE_IMG
- en: What we will do here is, create a new image with our own `tomcat-users.xml`,
    where we will create a user with the `manager-script` role to access the Tomcat
    manager application.
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory. Go to that directory and create a `tomcat-users.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file with the name `Dockerfile` in the same directory and add the
    following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the Docker Quickstart Terminal, go to the directory that we have created.
  prefs: []
  type: TYPE_NORMAL
- en: Execute `docker build -t devops_tomcat_sc` .
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the image is successfully built, verify it using docker images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Execute `docker run -it -p 8888:8080 devops_tomcat_sc:8.0` and verify the number
    of containers using `docker ps -a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can stop the container using `docker stop <container_name>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00296.gif)'
  prefs: []
  type: TYPE_IMG
- en: To change the name of the container, use `docker run -it -p 9999:8080 --name
    bootcamp_tomcat devops_tomcat_sc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the name using `docker ps -a`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00299.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the virtual machine IP address and `9999` as a port number to access Tomcat
    running in the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the manager access with the `manager-script` role using the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00305.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s just try to deploy an application using the `Deploy to Container` plugin
    in Tomcat. If one build job generates WAR files, then copy it from that build
    using the copy artifact plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00311.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Post-build Actions, select Deploy war/ear to a container. Give the username
    and password provided in tomcat-users.xml. Give the Tomcat URL. Click on Apply/Save:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00314.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Build Now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to Console Output and verify the deployment process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the application URL using the Tomcat URL and application context:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are done.
  prefs: []
  type: TYPE_NORMAL
- en: Thus you can see that we have created an image, a container, and deployed the
    application in the Tomcat container.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So we have seen in this chapter how to install Docker containers in Windows
    10, and how to use Docker hub to find images available in the public domain.
  prefs: []
  type: TYPE_NORMAL
- en: We have executed the hello world container to verify whether Docker has been
    successfully installed or not. Once we have verified the Docker installation,
    we used Docker hub to get the Tomcat image and successfully created a Tomcat 8
    container and accessed it through the browser.
  prefs: []
  type: TYPE_NORMAL
- en: We also used Jenkins to deploy the application in the Tomcat container. Our
    objective was to utilize the docker container for application deployment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover how we can utilize the configuration management
    tool Chef for setting up the run-time environment so that we can deploy Java-based
    web applications in the virtual machine.
  prefs: []
  type: TYPE_NORMAL
