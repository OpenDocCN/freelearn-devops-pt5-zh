- en: Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: '"The first rule of any technology used in a business is that automation applied
    to an efficient operation will magnify the efficiency. The second is that automation
    applied to an inefficient operation will magnify the inefficiency."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “任何技术在商业中使用的第一条规则是，自动化应用于高效的操作会放大效率。第二条规则是，自动化应用于低效的操作会放大低效。”
- en: '- Bill Gates'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- 比尔·盖茨'
- en: We have seen DevOps practices and continuous integration until now. However,
    recently, containers have become a buzz word and everyone wants to have a hands-on
    experience with it. The main reason is to utilize the resources effectively and
    efficiently. Docker is an open source initiative for OS virtualization that automates
    the deployment of applications inside software containers. It is extremely useful
    to utilize containers for Dev or QA environments for better resource utilization.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到 DevOps 实践和持续集成。然而，最近，容器已经成为一个流行词，大家都希望亲自体验它。主要原因是为了更有效地利用资源。Docker
    是一个开源的操作系统虚拟化项目，自动化应用程序在软件容器中的部署。它在开发或质量保证环境中非常有用，可以更好地利用资源。
- en: In this chapter, we will try to install and create a sample container. The objective
    is to get familiar with Docker containers and get a feel of how containers can
    be utilized for application deployment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试安装和创建一个示例容器。目标是熟悉 Docker 容器，并了解如何利用容器进行应用程序部署。
- en: 'This chapter provides a quick overview of containers. We will be focusing on
    the following topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了对容器的快速概述。我们将集中讨论本章中的以下主题：
- en: Overview of Docker containers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 容器概述
- en: Understanding the difference between virtual machines and containers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解虚拟机和容器之间的区别
- en: Installing and configuring Docker
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Docker
- en: Creating a Tomcat container
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Tomcat 容器
- en: Overview of Docker containers
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 容器概述
- en: 'Docker provides isolated user spaces and hence provides user-based processes,
    space, and filesystems. Behind the scenes, it shares the Linux host kernel. The
    following diagram illustrates the working mechanism of a Docker container:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了隔离的用户空间，从而提供基于用户的进程、空间和文件系统。在幕后，它共享 Linux 主机的内核。以下图示说明了 Docker 容器的工作机制：
- en: '![](img/00287.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00287.jpeg)'
- en: 'Docker has two main components with a client-server architecture:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 有两个主要组件，采用客户端-服务器架构：
- en: '**Docker Host**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 主机**'
- en: '**Docker Hub**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Hub**'
- en: 'Let''s take a look at them in more detail:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下它们：
- en: '**Docker Host**: The Docker Host contains the Docker daemon, containers, and
    images. The Docker engine is an important component that provides the core Docker
    technology. This core Docker technology enables images and containers. When we
    install Docker successfully, we run a simple command. In our case, we will consider
    CentOS for the container. To run an interactive shell in the CentOS image, use
    docker `run -i -t <image> /bin/bash`:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 主机**：Docker 主机包含 Docker 守护进程、容器和镜像。Docker 引擎是一个重要组件，提供核心的 Docker 技术。这一核心
    Docker 技术使得镜像和容器得以实现。当我们成功安装 Docker 后，只需运行一个简单的命令。在我们的案例中，我们将使用 CentOS 作为容器。要在
    CentOS 镜像中运行交互式 Shell，可以使用命令 `docker run -i -t <image> /bin/bash`：'
- en: The `-i` flag initiates an interactive container
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i` 标志启动交互式容器'
- en: The `-t` flag creates a pseudoterminal that attaches `stdin` and `stdout`
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t` 标志创建一个伪终端，连接 `stdin` 和 `stdout`'
- en: The image is a CentOS image
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像是一个 CentOS 镜像
- en: '`/bin/bash` starts a shell'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/bin/bash` 启动一个 Shell'
- en: When we run this command, it verifies whether the CentOS image is available
    locally. If it is not available, it will download the image from Docker Hub.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行此命令时，它会验证 CentOS 镜像是否本地可用。如果不可用，它会从 Docker Hub 下载该镜像。
- en: An image has a filesystem and parameter that can be used at runtime, while a
    container is an instance of an image with a state. It is simple to understand
    that containers change, while images do not.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像有文件系统和可在运行时使用的参数，而容器是具有状态的镜像实例。理解容器会发生变化，而镜像不会变化是很简单的。
- en: '**Docker Hub**: Docker Hub is a **Software as a Service** (**SaaS**) for sharing
    and managing Docker containers. It is a kind of centralized registry service provided
    by Docker. As a user, we can use it to build and ship applications. It allows
    us to create a pipeline to integrate with code repositories and for collaboration,
    image discovery, and automation.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Hub**：Docker Hub 是一个 **软件即服务**（**SaaS**），用于共享和管理 Docker 容器。它是 Docker
    提供的一种集中式注册服务。作为用户，我们可以使用它来构建和交付应用程序。它允许我们创建一个管道，集成代码仓库，进行协作、镜像发现和自动化。'
- en: Understanding the difference between virtual machines and containers
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解虚拟机和容器之间的差异
- en: Before we start installation of docker and creation of a container, it will
    be useful to get an understanding of why containers are different and how they
    are different from virtual machines.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始安装 Docker 和创建容器之前，了解容器为什么与虚拟机不同以及它们之间的差异会很有帮助。
- en: Let's understand the basic difference between virtual machines and containers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解虚拟机和容器之间的基本区别。
- en: Virtual machines
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟机
- en: 'In a **virtual machine** (**VM**), we need to install an operating system with
    the appropriate device drivers; hence,the footprint or size of a virtual machine
    is huge. A normal VM with Tomcat and Java installed may take up to 10 GB of drive
    space:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **虚拟机** (**VM**) 中，我们需要安装一个操作系统，并配备适当的设备驱动程序；因此，虚拟机的占用空间非常大。一个正常的虚拟机，安装了 Tomcat
    和 Java，可能需要高达 10 GB 的硬盘空间：
- en: '![](img/00289.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00289.jpeg)'
- en: There's an overhead of memory management and device drivers. A VM has all the
    components a normal physical machine has in terms of operation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 存在内存管理和设备驱动程序的开销。虚拟机拥有正常物理机器所具备的所有组件。
- en: In a VM, the hypervisor abstracts resources. Its package includes not only the
    application, but also the necessary binaries and libraries, and an entire guest
    operating system, for example, CentOS 6.7 and Windows 2003.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机中，虚拟化程序抽象了资源。它的包不仅包括应用程序，还包括必要的二进制文件和库，以及整个来宾操作系统，例如 CentOS 6.7 和 Windows
    2003。
- en: Cloud service providers use a hypervisor to provide a standard runtime environment
    for VMs. Hypervisors come in type 1 and type 2 categories.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商使用虚拟化程序（hypervisor）为虚拟机提供标准的运行时环境。虚拟化程序分为类型 1 和类型 2。
- en: Containers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: 'A container shares the operating system and device drivers of the host. Containers
    are created from images, and for a container with Tomcat installed, the size is
    less than 500 MB:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 容器共享主机的操作系统和设备驱动程序。容器是从镜像创建的，对于安装了 Tomcat 的容器，其大小不到 500 MB：
- en: '![](img/00292.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00292.jpeg)'
- en: Containers are small in size and hence effectively give faster and better performance.
    They abstract the operating system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 容器体积小，因此提供更快更好的性能。它们将操作系统进行了抽象。
- en: A container runs as an isolated user space, with processes and filesystems in
    the user space on the host operating system itself, and it shares the kernel with
    other containers. Sharing and resource utilization are at their best in containers,
    and more resources are available due to less overhead. It works with very few
    required resources.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 容器以隔离的用户空间运行，进程和文件系统位于主机操作系统的用户空间中，并且与其他容器共享内核。容器的共享和资源利用效率非常高，并且由于开销较少，能够提供更多的资源。它在资源要求非常少的情况下就能正常工作。
- en: Docker makes it efficient and easier to port applications across environments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 使得跨环境迁移应用变得高效且更容易。
- en: Installing and configuring Docker
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Docker
- en: 'Let''s quickly install the Docker on Windows 10\. In our case, it is a Windows
    Home edition; so, we need to install Docker toolbox from [https://www.docker.com/products/docker-toolbox](https://www.docker.com/products/docker-toolbox):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速在 Windows 10 上安装 Docker。对于我们来说，是 Windows 家庭版；所以我们需要从 [https://www.docker.com/products/docker-toolbox](https://www.docker.com/products/docker-toolbox)
    安装 Docker Toolbox：
- en: 'Click on the Download button:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下载按钮：
- en: '![](img/00294.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00294.jpeg)'
- en: It will redirect you to [https://github.com/docker/toolbox/releases/tag/v1.12.5](https://github.com/docker/toolbox/releases/tag/v1.12.5)
    or the page with the latest version.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会将您重定向到 [https://github.com/docker/toolbox/releases/tag/v1.12.5](https://github.com/docker/toolbox/releases/tag/v1.12.5)
    或包含最新版本的页面。
- en: 'Download DockerToolbox. Click on the `exe` file of Docker toolbox to install
    it:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 DockerToolbox。点击 Docker Toolbox 的 `exe` 文件进行安装：
- en: '![](img/00093.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.jpeg)'
- en: 'Click on Next > on the welcome page:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在欢迎页面上点击“下一步 >”：
- en: '![](img/00095.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00095.jpeg)'
- en: 'Select the preferred location to install Docker Toolbox:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择安装 Docker Toolbox 的首选位置：
- en: '![](img/00097.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.jpeg)'
- en: Keep all the default components for installation.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留安装的所有默认组件。
- en: '![](img/00098.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.jpeg)'
- en: 'Select Additional Tasks that should be performed and click on Next >:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择应执行的附加任务，然后点击“下一步 >”：
- en: '![](img/00100.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)'
- en: 'Click on Install:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安装：
- en: '![](img/00101.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00101.jpeg)'
- en: 'Docker toolbox installation will install the virtual box too:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker Toolbox 安装将同时安装 VirtualBox：
- en: '![](img/00103.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00103.jpeg)'
- en: 'Click on Finish:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成：
- en: '![](img/00204.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00204.jpeg)'
- en: 'Before starting operations on Docker, we need to enable the virtualization
    technology in the Windows system, or else we will get the following error:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始Docker操作之前，我们需要在Windows系统中启用虚拟化技术，否则我们将遇到以下错误：
- en: Creating CA using `C:UsersMitesh.dockermachinecertsca.pem`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`C:UsersMitesh.dockermachinecertsca.pem`创建CA
- en: Creating a client certificate using `C:UsersMitesh.dockermachinecertscert.pem`
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`C:UsersMitesh.dockermachinecertscert.pem`创建客户端证书
- en: '`Running pre-create checks... Error with pre-create check: "This computer doesn''t
    have VT-X/AMD-v enabled. Enabling it in the BIOS is mandatory" Looks like something
    went wrong in step ´Checking if machine default exists´... Press any key to continue...`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`运行预创建检查... 预创建检查错误: "此计算机未启用VT-X/AMD-v。必须在BIOS中启用它" 看起来在步骤''检查是否存在默认机器''中出了问题...
    按任意键继续...`'
- en: 'Go to Settings and click on Advanced Startup. Restart the system. Change the
    BIOS setting to enable Virtualization Technology:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到设置并点击高级启动。重启系统。更改BIOS设置以启用虚拟化技术：
- en: '![](img/00205.gif)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00205.gif)'
- en: Once the system is restarted, click on Docker Quickstart Terminal on the desktop.
    It will run precreate checks and download `boot2docker.iso` and run the virtual
    machine.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 系统重启后，点击桌面上的Docker Quickstart Terminal。它将执行预创建检查并下载`boot2docker.iso`，然后运行虚拟机。
- en: 'After all proper configuration and checks, Docker is up and running:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有配置和检查后，Docker已成功启动：
- en: '![](img/00207.gif)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00207.gif)'
- en: To get details on how to install Docker in CentOS, read DevOps for web development,
    available at [https://www.packtpub.com/networking-and-servers/devops-web-development](https://www.packtpub.com/networking-and-servers/devops-web-development).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取如何在CentOS中安装Docker的详细信息，请阅读《DevOps for Web Development》，可以在[https://www.packtpub.com/networking-and-servers/devops-web-development](https://www.packtpub.com/networking-and-servers/devops-web-development)找到。
- en: 'Once Docker is up and running, we are ready to create docker containers. Note
    the IP address of the default docker machine:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Docker正常运行，我们就可以创建docker容器了。请注意默认docker机器的IP地址：
- en: '![](img/00210.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00210.jpeg)'
- en: 'Let''s create a sample hello world container. Execute `docker run hello-world`.
    If you get the `"Hello from Docker!"` message, then we have created the container
    successfully:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例的hello world容器。执行`docker run hello-world`。如果你看到`"Hello from Docker!"`消息，那么我们已经成功创建了容器：
- en: '![](img/00113.gif)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00113.gif)'
- en: As we need to deploy a JEE application, we will create a Tomcat container in
    the next section.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们需要部署一个JEE应用程序，在接下来的部分我们将创建一个Tomcat容器。
- en: Creating a Tomcat container
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Tomcat容器
- en: 'In this section, we will create a container with the Tomcat web server installed
    so that we can deploy Java-based web applications into it:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个已安装Tomcat Web服务器的容器，以便可以将基于Java的Web应用程序部署到其中：
- en: 'Create an account in Docker hub and Login:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker hub上创建一个帐户并登录：
- en: '![](img/00115.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00115.jpeg)'
- en: 'We can search different images from the Docker hub:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从Docker hub中搜索不同的镜像：
- en: '![](img/00239.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00239.jpeg)'
- en: You can find the Tomcat image at [https://hub.docker.com/_/tomcat/](https://hub.docker.com/_/tomcat/).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在[https://hub.docker.com/_/tomcat/](https://hub.docker.com/_/tomcat/)找到Tomcat镜像。
- en: 'Use Docker''s `pull` command to get the Tomcat image:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Docker的`pull`命令获取Tomcat镜像：
- en: '[PRE0]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the Tomcat image is available, verify it using the `docker images` command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Tomcat镜像可用，通过执行`docker images`命令验证它：
- en: '![](img/00121.gif)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.gif)'
- en: To run docker container from the image, run `docker run -it --rm -p 8888:8080
    tomcat:8.0`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从镜像中运行docker容器，执行`docker run -it --rm -p 8888:8080 tomcat:8.0`。
- en: 'Use the IP address of the default docker machine and port `8888` in the browser
    to verify whether Tomcat is running properly in the container or not:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中使用默认docker机器的IP地址和端口`8888`来验证Tomcat是否在容器中正常运行：
- en: '![](img/00123.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: To get the IP address of the virtual machine, execute `docker-machine ls` command.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取虚拟机的IP地址，执行`docker-machine ls`命令。
- en: 'Let''s verify whether we have access to the Tomcat manager application in this
    container:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证是否可以访问这个容器中的Tomcat管理应用程序：
- en: '![](img/00125.gif)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.gif)'
- en: What we will do here is, create a new image with our own `tomcat-users.xml`,
    where we will create a user with the `manager-script` role to access the Tomcat
    manager application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里要做的是，创建一个带有我们自己`tomcat-users.xml`的新镜像，在该文件中创建一个拥有`manager-script`角色的用户来访问Tomcat管理应用程序。
- en: Create a directory. Go to that directory and create a `tomcat-users.xml` file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个目录。进入该目录并创建一个`tomcat-users.xml`文件。
- en: 'Add the following content in it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中添加以下内容：
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a new file with the name `Dockerfile` in the same directory and add the
    following content:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一目录中创建一个名为 `Dockerfile` 的新文件，并添加以下内容：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the Docker Quickstart Terminal, go to the directory that we have created.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker Quickstart Terminal 中，进入我们创建的目录。
- en: Execute `docker build -t devops_tomcat_sc` .
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `docker build -t devops_tomcat_sc` 。
- en: 'Once the image is successfully built, verify it using docker images:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像成功构建后，使用 docker images 来验证：
- en: '![](img/00127.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00127.jpeg)'
- en: Execute `docker run -it -p 8888:8080 devops_tomcat_sc:8.0` and verify the number
    of containers using `docker ps -a`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `docker run -it -p 8888:8080 devops_tomcat_sc:8.0` 并使用 `docker ps -a` 验证容器数量。
- en: 'We can stop the container using `docker stop <container_name>`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `docker stop <container_name>` 来停止容器：
- en: '![](img/00296.gif)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00296.gif)'
- en: To change the name of the container, use `docker run -it -p 9999:8080 --name
    bootcamp_tomcat devops_tomcat_sc`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改容器的名称，请使用 `docker run -it -p 9999:8080 --name bootcamp_tomcat devops_tomcat_sc`。
- en: 'Verify the name using `docker ps -a`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `docker ps -a` 验证名称：
- en: '![](img/00299.gif)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00299.gif)'
- en: 'Use the virtual machine IP address and `9999` as a port number to access Tomcat
    running in the container:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用虚拟机的 IP 地址和 `9999` 作为端口号访问容器中运行的 Tomcat：
- en: '![](img/00133.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00133.jpeg)'
- en: 'Verify the manager access with the `manager-script` role using the following
    URL:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 URL 使用 `manager-script` 角色验证管理器访问：
- en: '![](img/00305.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00305.jpeg)'
- en: 'Let''s just try to deploy an application using the `Deploy to Container` plugin
    in Tomcat. If one build job generates WAR files, then copy it from that build
    using the copy artifact plugin:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用 Tomcat 中的 `Deploy to Container` 插件部署应用程序。如果某个构建任务生成了 WAR 文件，则使用复制构件插件从该构建中复制它：
- en: '![](img/00311.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00311.jpeg)'
- en: 'In Post-build Actions, select Deploy war/ear to a container. Give the username
    and password provided in tomcat-users.xml. Give the Tomcat URL. Click on Apply/Save:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建后操作中，选择将 WAR/ EAR 部署到容器。提供 tomcat-users.xml 中的用户名和密码。提供 Tomcat URL。点击应用/保存：
- en: '![](img/00314.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00314.jpeg)'
- en: 'Click on Build Now:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 点击立即构建：
- en: '![](img/00141.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00141.jpeg)'
- en: 'Go to Console Output and verify the deployment process:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 转到控制台输出并验证部署过程：
- en: '![](img/00143.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00143.jpeg)'
- en: 'Verify the application URL using the Tomcat URL and application context:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Tomcat URL 和应用程序上下文验证应用程序的 URL：
- en: '![](img/00145.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00145.jpeg)'
- en: Now we are done.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了。
- en: Thus you can see that we have created an image, a container, and deployed the
    application in the Tomcat container.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如此一来，你可以看到我们已经创建了一个镜像、一个容器，并在 Tomcat 容器中部署了应用程序。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So we have seen in this chapter how to install Docker containers in Windows
    10, and how to use Docker hub to find images available in the public domain.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在本章中看到了如何在 Windows 10 中安装 Docker 容器，以及如何使用 Docker hub 查找公共域中可用的镜像。
- en: We have executed the hello world container to verify whether Docker has been
    successfully installed or not. Once we have verified the Docker installation,
    we used Docker hub to get the Tomcat image and successfully created a Tomcat 8
    container and accessed it through the browser.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行了 hello world 容器以验证 Docker 是否成功安装。一旦验证了 Docker 安装，我们就使用 Docker hub 获取了 Tomcat
    镜像，并成功创建了一个 Tomcat 8 容器并通过浏览器访问它。
- en: We also used Jenkins to deploy the application in the Tomcat container. Our
    objective was to utilize the docker container for application deployment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用 Jenkins 在 Tomcat 容器中部署了应用程序。我们的目标是利用 Docker 容器进行应用程序部署。
- en: In the next chapter, we will cover how we can utilize the configuration management
    tool Chef for setting up the run-time environment so that we can deploy Java-based
    web applications in the virtual machine.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何利用配置管理工具 Chef 来设置运行时环境，以便在虚拟机中部署基于 Java 的 Web 应用程序。
