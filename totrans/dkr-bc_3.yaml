- en: Chapter 3. Docker in the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The third tool, alongside Docker and Docker Compose, which we installed during
    [Chapter 1](ch01.html "Chapter 1. Installing Docker Locally"), *Installing Docker
    Locally* was Docker Machine; this is a command line tool which allows you to manage
    both local and remote Docker hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to look at the basic usage of three of the public
    cloud drivers by using Docker Machine to provision Docker hosts in them. We will
    be launching our Docker hosts in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Digital Ocean [https://www.digitalocean.com/](https://www.digitalocean.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Web Services - [https://aws.amazon.com/](https://aws.amazon.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Azure - [https://azure.microsoft.com/](https://azure.microsoft.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All using a single command.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker Machine can connect to the following services, provision a Docker host,
    and configure your local Docker client to be able to communicate with the newly
    launched remote instance the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As well as the three public cloud providers already mentioned, Docker Machine
    also supports:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Compute Engine - [https://cloud.google.com/compute/](https://cloud.google.com/compute/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rackspace - [http://www.rackspace.co.uk/cloud/](http://www.rackspace.co.uk/cloud/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM Softlayer [http://www.softlayer.com](http://www.softlayer.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exoscale - [https://www.exoscale.ch/](https://www.exoscale.ch/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware vCloud Air - [http://vcloud.vmware.com/](http://vcloud.vmware.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also supports the following self-hosted platforms:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack - [https://www.openstack.org/](https://www.openstack.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Hyper-V - [http://www.microsoft.com/virtualization/](http://www.microsoft.com/virtualization/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware vSphere - [http://www.vmware.com/uk/products/vsphere/](http://www.vmware.com/uk/products/vsphere/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, it allows you to launch Docker hosts locally using VirtualBox - [https://www.virtualbox.org/](https://www.virtualbox.org/).
    This is great if your local workstation doesn't meet the minimum specifications
    for Docker for Mac or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The Digital Ocean driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us start creating some instances in the cloud. First, let us launch a machine
    in Digital Ocean.
  prefs: []
  type: TYPE_NORMAL
- en: There are two prerequisites for launching an instance with Docker Machine in
    Digital Ocean, the first is a Digital Ocean account and the second is an API token.
  prefs: []
  type: TYPE_NORMAL
- en: To sign up for a Digital Ocean account, please visit [https://www.digitalocean.com/](https://www.digitalocean.com/)
    and click **Sign Up**. Once you have or are logged in to your account, you can
    generate an API token by clicking on the **API** link in the top menu.
  prefs: []
  type: TYPE_NORMAL
- en: To grab your token, click on **Generate New Token** and follow the onscreen
    instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You only get one chance to make a record of your token; please make sure you
    store it somewhere safe as it will allow anyone who has it to launch instances
    into your account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the token, you can launch your instance using Docker Machine.
    To do this, run the following command, making sure to replace the example API
    token with your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note, the tokens used in these examples have been revoked.
  prefs: []
  type: TYPE_NORMAL
- en: This will launch an instance called **dotest** in your Digital Ocean account.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you check your Digital Ocean control panel, you should now see the instance
    which was created by Docker Machine listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Digital Ocean driver](img/B06455_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also confirm our Digital Ocean Docker host is running by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return all the machines we have running, confirming their state,
    IP address, Docker version, and name. There is also a column which lets you know
    which of the Docker Machine managed Docker hosts your local client is configured
    to communicate with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Digital Ocean driver](img/B06455_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, your local Docker client is configured to communicate with our local
    Docker installation; as we launched our local Docker installation using Docker
    for Mac or Windows, or you have Docker installed on Linux Docker Machine will
    not list it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change it so it interacts with the Digital Ocean instance.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you have to change some local environment variables; luckily, Docker
    Machine provides an easy way to find out what these are and change them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out what they all you must do is simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will tell you exactly what you need to run to change from the `default`
    machine to `dotest`; the best thing is that the command itself formats the results
    in such a way which they can execute, so if we run the command again, but this
    time in a way where the output will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if you have launched your instance using PowerShell on Windows then use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And now if you get a listing from Docker Machine, you will notice that the
    `dotest` environment is now the active one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Digital Ocean driver](img/B06455_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have our Digital Ocean instance active, you can run the `docker container
    run` command on your local machine, and they will have been executed on the Digital
    Ocean instance; let's test this by running the `hello-world` container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the image download and then the output of running the `hello-world`
    container if you then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You should see that the `hello-world` container exited a few seconds ago.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can SSH into the Digital Ocean instance using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once logged in, run the `docker container ls –a` command to demonstrate that
    the `docker container run` you ran locally was executed on the Digital Ocean instance.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of this setup is that you shouldn't have to SSH to your instances
    often.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing you may have noticed is that all we told Docker Machine is that we
    want to use Digital Ocean and our API token; at no point did we tell it which
    region to launch the instance in, what specification we wanted, or even which
    SSH key to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Machine has some sensible defaults which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: digitalocean-image = ubuntu-16-04-x64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: digitalocean-region = nyc3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: digitalocean-size = 512mb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As I am based in the UK, let's look at changing the region and specification
    of the host launched by Docker Machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we should remove the `dotest` instance by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will terminate the 512 MB instance running in NYC3.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to terminate instances you are not using as they will will cost
    you for each hour they are active; remember, one of the key advantages of using
    Docker Machine is that you can quickly spin up instances both quickly and with
    as little interaction as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have removed the old instance, let''s add some additional flags to our
    `docker-machine` command to launch the new instance in the desired region and
    specification, we will be calling our new instance `douktest`. The updated `docker-machine
    create` command now looks like this (again, remember to replace the example API
    token with your own):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see similar output from the command as before; once the instance
    has been deployed, you can make it active by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you enter the control panel, you will notice that the instance has launched
    in the specified region and at the desired specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Digital Ocean driver](img/B06455_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For full details on each of the regions and what machine types are available
    in each one you can query the Digital Ocean API by running the following command
    (again, remember to replace the API token):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will output information about each region.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing; we still haven''t found out about the SSH key. Each time you
    run Docker Machine a new SSH key for the instance you are launching is created
    and uploaded to the provider; each key is stored in the `.docker` folder in your
    users home directory. For example, the key for `douktest` can be found by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you will also find the certificates used to authenticate the Docker agent
    with the Docker installation on the instance and the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Digital Ocean driver](img/B06455_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So that covers launching a host in Digital Ocean; how about launching something
    more exciting than the Hello World container?
  prefs: []
  type: TYPE_NORMAL
- en: 'No problem, let''s use Docker Compose to launch a variation of the WordPress
    stack we used in [Chapter 2](ch02.html "Chapter 2. Launching Applications Using
    Docker"), *Launching Applications Using Docker*. Start by going to the `/bootcamp/chapter03/wordpress`
    folder and then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To check you have your Docker client configured to use your Digital Ocean Docker
    host. Once you are sure your client is using the remote host, simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will download the images we need, then launch two containers. This time
    you will be able to access the WordPress installation on `port 80` on your Digital
    Ocean host. To find the IP of your host, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on a Mac or Linux machine to open your browser and go to your installation
    page run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The terminal session below shows the output you can expect to see from the
    previous commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Digital Ocean driver](img/B06455_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then be able to complete your WordPress installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Digital Ocean driver](img/B06455_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I wouldn't recommend leaving your WordPress installation at the installation
    screen for long as it is possible that someone could complete the installation
    on your behalf and get up to no good.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have finished your Digital Ocean, host run the following command to
    terminate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have learned how to launch a Docker host in Digital Ocean let's
    move on to Amazon Web Services.
  prefs: []
  type: TYPE_NORMAL
- en: The Amazon Web Services driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't already have an **Amazon Web Services** (**AWS**) account, you
    should sign up for one at [http://aws.amazon.com/](http://aws.amazon.com/); if
    you are new to AWS, then you will be eligible for their free tier [http://aws.amazon.com/free/](http://aws.amazon.com/free/).
  prefs: []
  type: TYPE_NORMAL
- en: I would recommend reading through Amazon's getting started guide if you are
    unfamiliar with AWS before working through this section of the chapter; you can
    find the guide at [http://docs.aws.amazon.com/gettingstarted/latest/awsgsg-intro/gsg-aws-intro.html](http://docs.aws.amazon.com/gettingstarted/latest/awsgsg-intro/gsg-aws-intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The AWS driver is like the Digital Ocean driver in that it has some sensible
    defaults, Rather than going into too much detail about how to customize the EC2
    instance launched by Docker Machine, we will stick with the defaults. For AWS
    driver, these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: amazonec2-region = us-east-1 (North Virginia)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: amazonec2-ami = ami-fd6e3bea (Ubuntu 16.04)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: amazonec2-instance-type = t2.micro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: amazonec2-root-size = 16GB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: amazonec2-security-group = docker-machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note, if **amazonec2-security-group** does not exist, it will be created
    for you by Docker Machine; if it does exist, then Docker Machine will use the
    pre-existing rules instead.
  prefs: []
  type: TYPE_NORMAL
- en: Before we launch our instance, we will also need to know our **AWS Access**
    and **AWS Secret** keys and the **VPC ID** we will be launching our instance into;
    to get these, please log in to the AWS console which can be found at [https://console.aws.amazon.com/](https://console.aws.amazon.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Most of you will be logging with your AWS root account. As your AWS root account
    shouldn't have any Access and Secret keys associated with it we should add a separate
    user for Docker Machine by going to **Services** | **IAM** | **Users** and then
    selecting your user and going to the **Security Credential**s tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'There you should see a button which says **Add user**, click this and you will
    be taken to a screen where you can set your user details. Enter the **User name**
    `docker-machine` and then for the **Access type** tick the **Programmatic access**
    check box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Amazon Web Services driver](img/B06455_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you have entered the details, click on **Next: Permissions** to be taken
    to the next step. On the permissions page, click on **Attach existing policies
    directly** and then in the **Policy type** search box, enter `SystemAdministrator`
    and hit return to filter the policies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tick the check box next to `SystemAdministrator` and then click on **Ne** **xt:
    Review**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Amazon Web Services driver](img/B06455_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the review page, click on **Create user** and after a few seconds, you should
    receive confirmation your user has been successfully created.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you click on **Download .csv** as you will not be shown the Secret
    access key again. Now you have your Access key ID and Secret access key.
  prefs: []
  type: TYPE_NORMAL
- en: Before you find your VPC ID, you should make sure you are in the correct region
    by ensuring that it says, **N. Virginia** in the top-right of your AWS console;
    if it doesn't, select it from the drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Amazon describes Amazon VPC (Amazon Virtual Private Cloud) as letting you provision
    a logically isolated section of the AWS Cloud where you can launch resources in
    a virtual network which you define. You have complete control over your virtual
    networking environment, including the selection of your own IP address range,
    the creation of subnets, and configuration of route tables and network gateways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have ensured you are in the correct region, go to **Services** then
    **VPC** and click on **Your VPCs**; you don''t need to worry about creating and
    configuring a VPC as Amazon provides you with a default VPC in each region. Select
    the VPC and you should see the something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Amazon Web Services driver](img/B06455_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Make a note of the VPC ID; you should now have enough information to launch
    your instance using Docker Machine. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, you should see something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Amazon Web Services driver](img/B06455_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should also be able to see an EC2 instance launched in the AWS Console
    by clicking on **Services** | **EC2** | **Instances**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Amazon Web Services driver](img/B06455_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You may have noticed Docker Machine created the security group and assigned
    an SSH key to the instance without any need for us to get involved, keeping within
    the principle that you don't need to be an expert in configuring the environments
    you are launching your Docker instance into.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we terminate the instance, let''s switch our local Docker client over
    to use the AWS instance and launch the **Hello World** container by running the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, once you have launched an instance using Docker Machine and
    switch your local Docker client to it, there is no difference in usage between
    running Docker locally or on a cloud provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start to rack up cost we should terminate our test AWS instance by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And then confirm in the AWS console that the instance has terminated correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Amazon Web Services driver](img/B06455_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you don't do this, the EC2 instance will quite happily sit there costing,
    you $0.013 per hour until it is terminated.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note, this is not Docker for AWS, we will be covering this service in
    [Chapter 4](ch04.html "Chapter 4. Docker Swarm"), *Docker Swarm*.
  prefs: []
  type: TYPE_NORMAL
- en: The Microsoft Azure driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may have noticed from the terminal and browser screenshots, so far, we
    have been using Docker for Mac; let's look at the Microsoft Azure driver using
    Docker for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you will need a Microsoft Azure account; if you don't already
    have one, you can sign up at [https://azure.microsoft.com/](https://azure.microsoft.com/).
    Once you have your account, the only piece of information you need to get started
    is your subscription ID; you can find this in the billing section of the portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have your subscription ID, you can authenticate Docker Machine with
    Azure, to do this enter the following command, making sure to replace the subscription
    ID with your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![The Microsoft Azure driver](img/B06455_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will receive an activation code to authorise Docker Machine; go to [https://aka.ms/devicelogin/](https://aka.ms/devicelogin/)
    and enter the code you have been given:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Microsoft Azure driver](img/B06455_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking **Continue** will take you a page which then shows you the permissions
    which Docker Machine is going to grant:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Microsoft Azure driver](img/B06455_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click **Accept,** you should see Docker Machine start bootstrapping
    the environment. The process will take several minutes; once it completes, you
    should see something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Microsoft Azure driver](img/B06455_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, Docker Machine has done the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Created a resource group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configured a network security group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configured a network subnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a virtual network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigned a public IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a network interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a storage account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launched a virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you go to the resource group within the Azure Portal you should see your
    virtual machine is launched and ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Microsoft Azure driver](img/B06455_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Like the Mac and Linux versions of Docker Machine we need to configure our
    local Docker client to communicate with the remote host, to do this we need to
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the equivalent of running the following on Mac or Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check that Azure is now active by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our client talking to our Azure remote host, we can launch
    the **Hello World** container by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the Mac and Linux version of Docker Machine, you can SSH into your
    Azure host by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the output below, we can see the **Hello World** container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Microsoft Azure driver](img/B06455_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here you can interact with the Azure host as you would do any other Docker
    host. Once you are ready to terminate your Azure host, all you need to do is run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a short while to remove the host and all the resources associated
    with it, once complete, you should see something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Microsoft Azure driver](img/B06455_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Checking the **Activity log** in the docker-machine **Resource group** using
    the Azure portal should show you the resources being removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Microsoft Azure driver](img/B06455_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As highlighted by the PowerShell output, it is best to check that everything
    has been properly terminated, the easiest way to do this is to remove the resource
    group itself, to do this click on the three dots (**...**) on the right-hand side
    of the **docker-machi** **ne** resource.
  prefs: []
  type: TYPE_NORMAL
- en: After you have followed the on-screen prompts, which include typing the name
    of the resource you are choosing to remove, you should receive confirmation that
    the resource group has been removed.
  prefs: []
  type: TYPE_NORMAL
- en: While we have used Windows to look at Azure, the process, other than switching
    the local client to use the remote host, is the same on Mac and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note, this is not Docker for Azure, we will be covering this service
    in [Chapter 4](ch04.html "Chapter 4. Docker Swarm"), *Docker Swarm*.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The examples we have used in this chapter have been launching Ubuntu instances.
    Docker Machine also supports:'
  prefs: []
  type: TYPE_NORMAL
- en: Debian (8.0+) - [https://www.debian.org/](https://www.debian.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Enterprise Linux (7.0+) - [https://www.redhat.com/](https://www.redhat.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CentOS (7+) - [https://www.centos.org/](https://www.centos.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fedora (21+) - [https://getfedora.org/](https://getfedora.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RancherOS (0.3) - [http://rancher.com/rancher-os/](http://rancher.com/rancher-os/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other thing to mention about Docker Machine is that by default it operates
    an opt-in for crash reporting, considering the number of different configuration
    /environment combinations Docker Machine can be used with it is important that
    Docker gets notified of any problems to help them make a better product.
  prefs: []
  type: TYPE_NORMAL
- en: 'If for any reason, you want to opt out, then running the following command
    will disable crash reporting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information on Docker Machine you can see the official documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Machine - [https://docs.docker.com/machine/](https://docs.docker.com/machine/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Machine Drivers - [https://docs.docker.com/machine/drivers/](https://docs.docker.com/machine/drivers/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Machine Command Reference - [https://docs.docker.com/machine/reference/](https://docs.docker.com/machine/reference/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see from examples we have worked through; Docker Machine is a powerful
    tool as it allows users of all skill levels to be able to launch an instance in
    a cloud provider without having to roll their sleeves up and get stuck in configuring
    server instances.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we are going to look at launching multiple Docker hosts
    in the same cloud providers and then configuring a Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
