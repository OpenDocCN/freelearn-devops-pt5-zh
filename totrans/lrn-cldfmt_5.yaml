- en: Building Lambda Functions Using AWS CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A serverless solution is a problem-solving technique to address issues regarding
    dynamic infrastructure. In this chapter, we'll explore how to use AWS Lambda to
    apply a serverless solution. We will build an AWS Lambda through the use of AWS
    CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AWS Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building AWS Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CloudFormation template for AWS Lambda functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying AWS Lambda through CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying AWS Lambda and DynamoDB with CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying AWS Lambda to specific regions through CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda is an AWS service that provides a serverless compute service. We
    can build functions with various programming languages, then AWS Lambda will take
    care of our infrastructure and its scaling.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can access other AWS resources from Lambda function. In the following diagram,
    you can see how a Lambda function accesses AWS resources. Client apps, such as
    on browser, mobile, or CLI, can invoke our Lambda functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Lambda functions in an internet environment'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll explore Lambda functions with CloudFormation. We'll also
    combine other AWS resources inside the Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll build a simple Lambda function in order to understand how the Lambda
    function works.
  prefs: []
  type: TYPE_NORMAL
- en: Building AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we build AWS Lambda through CloudFormation, we'll develop the AWS Lambda
    application. The objective is to understand AWS Lambda development, especially
    for readers with no experience of AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda works in various AWS regions. Visit the AWS Lambda Management Console
    at [https://console.aws.amazon.com/lambda/](https://console.aws.amazon.com/lambda/).
     A sample of the AWS Lambda Management Console window can be seen in *Figure 5.2*.
    Then, select your region for AWS Lambda development.
  prefs: []
  type: TYPE_NORMAL
- en: 'For testing, we build a simple AWS Lambda application. We use Node.js for the
    Lambda function. To implement the AWS Lambda function, we do the following three
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the IAM role
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Developing the AWS Lambda function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing AWS Lambda
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These steps will be followed in the next sections. The AWS Lambda Management
    Console is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2: AWS Lambda Management Console
  prefs: []
  type: TYPE_NORMAL
- en: Creating the IAM role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon AWS applies security policies on AWS resources. To access the AWS Lambda
    resources, we should apply a policy in order to create and execute AWS Lambda.
    In this section, we create a role on IAM roles section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an IAM role, we can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a browser and navigate to [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a list of IAM roles by clicking on the Roles menu; you should see the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3: AWS IAM Management Console
  prefs: []
  type: TYPE_NORMAL
- en: To create a role, click on the Create role button to get the screen shown in
    the *Figure 5.4.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Lambda option for the AWS service and then click on the Next: Permissions
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4: Selecting a trusted entity
  prefs: []
  type: TYPE_NORMAL
- en: After you click the button, you should get the screenshot shown in *Figure 5.5. *You
    will be asked to select permission policies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the AWSLambdaFullAccess policy for full access to AWS Lambda resources
    and then click on the Next: Review button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5: Attaching permission policies on the IAM role
  prefs: []
  type: TYPE_NORMAL
- en: You get a review screen, which is shown in *Figure 5.6. *Review your input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in your new role, for instance, `my-simple-lambda-role`. Once done, click
    on the Create role button to create the IAM role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6: Reviewing the created role
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, you can check your new role on IAM Roles. For instance, here is
    my IAM role, `my-simple-lambda-role`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7: A list of IAM roles on IAM Management Console
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created an IAM role. In the next section, you will develop
    AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Developing AWS Lambda using Web Management Console (WMC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created an IAM role that will be applied on AWS Lambda. In this section,
    we'll develop a simple AWS Lambda function. We use the Node.js application. We
    receive a message input, `msg`, and then send it to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to develop the AWS Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and navigate to the AWS Lambda Management Console at [https://console.aws.amazon.com/lambda/](https://console.aws.amazon.com/lambda/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Create function button to create a new Lambda function. Once done,
    you will get the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: Creating AWS Lambda'
  prefs: []
  type: TYPE_NORMAL
- en: Fill the the Lambda function name, for instance, `my-simple-lambda`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Node.js from Runtime drop-down. In this demo, I use Node.js 6.10\. You
    can use the latest Node.js version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Role drop-down, select the Choose an existing role option, then select
    the IAM role you created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, click on the Create function button to create your Lambda function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should get a Lambda function with a web editor, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9: Writing code for Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'We write our Node.js program inside the web editor. Write the following scripts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save your function by clicking on the Save button and then publish your Lambda
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Publish new version on the Actions drop-down list. You will be asked
    to fill in a version description, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10: Providing a release note on publishing AWS Lambda
  prefs: []
  type: TYPE_NORMAL
- en: Now, your AWS Lambda has been published. Next, we'll test our AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Testing AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we created and published AWS Lambda using WMC. In
    this section, we will perform testing for our AWS Lambda function. We are going
    to test with two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: A test-event tool from AWS Lambda Management Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AWS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first approach is to use AWS Lambda Management Console. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and navigate to AWS Lambda Management Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your Lambda function, then click on the Test button (see *Figure 5.9*). You
    should get the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.11: Creating the test event'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Create new test event option and fill in your event name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the code form, you can write the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once done, click on the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test your Lambda function by clicking on the Test button. If successful, you
    should get a response from the Lambda, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12: Showing a test result
  prefs: []
  type: TYPE_NORMAL
- en: You have finished testing the Lambda function through the management console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can perform testing using the AWS CLI. To install the AWS CLI, read
    the instructions at [https://aws.amazon.com/cli/](https://aws.amazon.com/cli/).
    For Windows, you can download it from [https://s3.amazonaws.com/aws-cli/AWSCLI64.msi](https://s3.amazonaws.com/aws-cli/AWSCLI64.msi)
    for 64-bit, and [https://s3.amazonaws.com/aws-cli/AWSCLI32.msi](https://s3.amazonaws.com/aws-cli/AWSCLI32.msi)
    for 32-bit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run with Linux or macOS, you can install the AWS CLI using `pip`. You
    can type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can perform testing for AWS Lambda; the Lambda function name is `my-simple-lambda`.
    Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once successful, you should see the following response output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13:  Testing AWS Lambda from the AWS CLI
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the output file, `output.txt`, using your text editor. For instance, I
    use `nano` and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the contents of the output file, which is a response from AWS
    Lambda. For instance, here is my output file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14: Opening the output file by invoking the Lambda
  prefs: []
  type: TYPE_NORMAL
- en: You have finished testing the AWS Lambda function. Next, we'll build AWS Lambda
    through AWS CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation template for AWS Lambda functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS CloudFormation provides an **Infrastructure as Code** (**IaC**) solution
    to build a dynamic infrastructure. In the previous section, we learned how to
    build AWS Lambda. Now, we continue our journey with CloudFormation. We will build
    AWS Lambda through AWS CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CloudFormation template for AWS Lambda can be found at [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html).
    The template can be described in JSON as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For YAML, we can define the CloudFormation template for AWS Lambda as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Not all attributes from the CloudFormation template of the Lambda are required.
    The following are required attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Code`: The contents of the source code from your Lambda function. You can
    put the source code as inline text. You also can put it into Amazon S3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Handler`:  The name of the Lambda function (within your source code) that
    the Lambda calls to start running your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Role`: An IAM role that is applied to execute the AWS Lambda function. It''s
    the **Amazon Resource Name** (**ARN**) of the AWS Identity. Make sure your IAM
    role has access rights to execute the Lambda function, including your other required
    resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Runtime`: A runtime environment for the Lambda function that you are uploading.
    For instance, it could be Python or Node.js.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll deploy AWS Lambda using CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Lambda functions using AWS CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll learn how to deploy Lambda functions using AWS CloudFormation.
    Our Lambda function scenario is similar to the `my-simple-lambda` function from
    the previous demo.
  prefs: []
  type: TYPE_NORMAL
- en: First, we make a CloudFormation template to create AWS Lambda. Then, we upload
    the template to CloudFormation. Then, we get AWS Lambda running. We'll perform
    these tasks in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CloudFormation template for the Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we deploy the Lambda function through CloudFormation, we should prepare
    the CloudFormation template. We can write the template in JSON or YAML.
  prefs: []
  type: TYPE_NORMAL
- en: In this demo, we create the Lambda function as in the previous demo. Our Lambda
    function receives the `msg` input and then passes it to the function output. We
    also define a parameter, `LambdaFunctionName`, to get the Lambda function name.
    For the IAM role, we create a new IAM role, called `TestLambdaExecutionRole`,
    that will be passed to the Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a complete CloudFormation template in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save these scripts into a file called `Lambda-CloudFormation.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the CloudFormation template in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Save these scripts into a file called `Lambda-CloudFormation.yaml`. After we
    have created the CloudFormation template file, we will deploy it to CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying AWS Lambda to CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We continue to deploy the AWS Lambda function to CloudFormation. We upload the `Lambda-CloudFormation.json`
    or `CloudFormation.yaml` file for the CloudFormation template. In this section,
    we'll create a CloudFormation stack and then put the template file into the stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement our demo, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and navigate to AWS CloudFormation at [https://console.aws.amazon.com/cloudformation/home](https://console.aws.amazon.com/cloudformation/home).
    You should get the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15: A form from the CloudFormation management console
  prefs: []
  type: TYPE_NORMAL
- en: To create a new stack, click on the Create new stack button; you'll get the
    screen shown in *Figure 5.16*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Upload a template to Amazon S3 option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our CloudFormation template file, which has already been created, and
    then click on the Next button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16: Selecting the CloudFormation template
  prefs: []
  type: TYPE_NORMAL
- en: 'You should get the screen shown in *Figure 5.17*. Fill in the stack name and
    function name. For instance, I set my stack name as `test-lambda` and my function
    name as `my-lambda-cloudformation`. Once done, click on the Next button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17: Filling in the stack and Lambda function names
  prefs: []
  type: TYPE_NORMAL
- en: 'You should get the following screen. We don''t do anything on this screen.
    Just click on the Next button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18: Setting the CloudFormation parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'You should get the following review screen. Review all input and then click
    on the Create button to create a stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.19: Review for creating a stack
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have clicked the Create button, you should get the CloudFormation
    dashboard. Ensure your stack has already been created with the CREATE_COMPLETE status.
    The following screenshot confirms my stack was created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.20: Showing the stack status
  prefs: []
  type: TYPE_NORMAL
- en: You also can verify your Lambda function on AWS Lambda Management Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your browser and navigate to [https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home).
    You should see your Lambda function that was created through CloudFormation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.21: Showing a list of AWS Lambda
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can test using the AWS CLI. For instance, the Lambda function name is `my-lambda-cloudformation`.
    We can perform this test by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If successful, you get the following response output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.22: Calling the AWS Lambda function from the AWS CLI'
  prefs: []
  type: TYPE_NORMAL
- en: If you have security problems when invoking the Lambda function from the AWS
    CLI, verify your account permissions. You can check on the IAM management console
    at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
    Your account should have AWSLambdaExecute and/or AWSLambdaRole permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'After invoking the Lambda function, open the output file so you get the contents
    of the output file. Type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following response output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.23: Opening the output file, output-lambda.txt
  prefs: []
  type: TYPE_NORMAL
- en: You have learned how to build AWS Lambda using CloudFormation. Next, we'll explore
    the AWS Lambda function with the DynamoDB database through the CloudFormation
    template.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation for AWS Lambda and DynamoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes we want to build a Lambda function with storage capabilities. Amazon
    AWS provides storage services that we can integrate with AWS Lambda. In this section,
    we'll explore how to use DynamoDB in AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: AWS DynamoDB is a storage service from AWS. It's storage based on NoSQL. You
    can review DynamoDB's features on its official website at [https://aws.amazon.com/dynamodb/](https://aws.amazon.com/dynamodb/).
    AWS DynamoDB provides various SDK APIs to enable you to access DynamoDB in your
    own programs, such as Java, JavaScript, Node.js, .NET, PHP, Python, and Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: Technically, DynamoDB can be operated easily. You can use the DynamoDB Management
    Console at [https://console.aws.amazon.com/dynamodb/](https://console.aws.amazon.com/dynamodb/).
    Then, you can create a table with key attributes. You can deploy DynamoDB in various
    regions. It takes benefits in accessibility from your customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''ll build a Lambda function to insert data into DynamoDB.
    We implement a Lambda function using Node.js through CloudFormation for the deployment
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.24: Lambda and DynamoDB interaction'
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement our demo, we will perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CloudFormation template for Lambda and DynamoDB
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying the CloudFormation template
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Lambda-invoking policy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the Lambda function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These tasks will be explored in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the CloudFormation template for AWS DynamoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CloudFormation template for AWS DynamoDB can be found at [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html).
    The template can be described in JSON as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can define the template in YAML as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You should define three required attributes—`AttributeDefinitions`, `KeySchema`,
    and `ProvisionedThroughput`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AttributeDefinitions`: This consists of a list of attributes that describe
    the key schema for the table and indexes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeySchema`: This consists of attributes that make up the primary key for the
    table. You can define the KeySchema type in `HASH` or `RANGE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProvisionedThroughput`: This describes the throughput values, which are values
    for the `ReadCapacityUnits` and `WriteCapacityUnits` attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll create a CloudFormation template to build Lambda and DynamoDB resources.
  prefs: []
  type: TYPE_NORMAL
- en: Building a CloudFormation template for Lambda and DynamoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build a CloudFormation template for Lambda and DynamoDB, we can modify our
    previous CloudFormation template for Lambda. We add DynamoDB resources and a policy.
    We replace our Lambda function in order to access DynamoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll start to create the Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing DynamoDB from Lambda functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our scenario in the Lambda function is to get JSON data from the parameter input
    of the Lambda function, and then insert it into DynamoDB.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the `DynamoDB` object from our Node.js application through the AWS
    SDK. After we get data from the Lambda function, we can insert the data into DynamoDB
    using the `putItem()` API. You can read more about this API at [https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we insert data into the DynamoDB table, called `mydynamodb`.
    We can implement our Lambda function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This Lambda function will return the `Insert data was successful` message in
    the event of a successful operation. Otherwise, we get an `Error` message with
    a detailed error description.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the CloudFormation template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We modify our CloudFormation template for the Lambda from the previous section.
    We replace the content of the `Code` attribute with our Lambda function code.
    We also define the DynamoDB resource, called `myDynamoDBTable`.
  prefs: []
  type: TYPE_NORMAL
- en: Since our Lambda function accesses DynamoDB, we should configure an additional
    policy inside `TestLambdaExecutionRole`. We add the `ManagedPolicyArns` attribute,
    which gives access rights to call the `dynamodb:PutItem` action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is our modified CloudFormation template for Lambda and DynamoDB
    in JSON (`lambda-dynamodb.json`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the CloudFormation template in YAML (`lambda-dynamodb.yaml`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Save all CloudFormation template files, `lambda-dynamodb.json`, and/or `lambda-dynamodb.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll deploy our the template file to AWS CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the CloudFormation template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we prepare our CloudFormation template file, we can continue to deploy
    the template in AWS CloudFormation. In this section, we'll use CloudFormation
    Management Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the same method to upload the CloudFormation template file to AWS CloudFormation.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and navigate to CloudFormation Management Console at [https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the CloudFormation template file that we have created to access the Lambda
    and DynamoDB resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can upload `lambda-dynamodb.json` or `lambda-dynamodb.yaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once done, you will be asked to fill in the stack name and the Lambda function
    name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.25: Creating a new CloudFormation stack'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Next button and follow the instructions until the end of the upload
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the process is complete, check your CloudFormation status on the CloudFormation
    dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.26: The CloudFormation stack was created'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your CloudFormation stack has the CREATE_COMPLETE status in order
    to continue to the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can verify the DynamoDB table with the name `mydynamodb` on DynamoDB Management
    Console at [https://console.aws.amazon.com/dynamodb/](https://console.aws.amazon.com/dynamodb/).
    You should see your DynamoDB table, `mydynamodb`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.27: The DynamoDB table, mydynamodb, was created from CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify your Lambda function on the Lambda Management Console at [https://console.aws.amazon.com/lambda/](https://console.aws.amazon.com/lambda/).
    You should see your Lambda function, lambda-dynamodb-func, in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.28: The Lambda function, lambda-dynamodb-func was created from CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have finished deploying your Lambda function with the DynamoDB resource
    through CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll configure the user policy in order to invoke the Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Lambda invocation policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll continue to invoke our Lambda function through the AWS CLI. To enable
    invoking the Lambda function, your AWS CLI user should have the access policy
    to access Lambda and DynamoDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we add DynamoDB permissions to access this resource. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and navigate to IAM Management Console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your account, from the Users menu, and add permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add AmazonDynamoDBFullAccess permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.29: Adding permission to the IAM user'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, click on the Next: Review button. You should get the following review
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.30: Adding AmazonDynamoDBFullAccess'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you think it''s finished, click on the Add permissions button. Your account
    should have DynamoDB permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.31: The AmazonDynamoDBFullAccess permission was added to an IAM user'
  prefs: []
  type: TYPE_NORMAL
- en: You have finished adding permissions to invoke the Lambda function from the
    AWS CLI. Next, we'll test invoking the Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test our Lambda function using the AWS CLI, open the Terminal. We send JSON
    data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We pass this data while invoking the AWS Lambda function. The Lambda function
    is `lambda-dynamodb-func`. We also set the output file with `lambda-dynamodb.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can type this command to invoke our Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If successful, you should get the following `200` status code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.32: Invoking the Lambda function'
  prefs: []
  type: TYPE_NORMAL
- en: 'You also get an output file, `lambda-dynamodb.txt`. You can open it using the
    `nano` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you should see a response message from our Lambda function. For instance,
    here is my output file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.33: Displaying the output file, lambda-dynamodb.txt'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify the data was inserted into the DynamoDB table. You can open
    DynamoDB Management Console at [https://console.aws.amazon.com/dynamodb/](https://console.aws.amazon.com/dynamodb/).
    You should see the data. You can see my data output in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.34: Displaying data on the DynamoDB Management Console'
  prefs: []
  type: TYPE_NORMAL
- en: You have finished building the Lambda function with access to DynamoDB through
    CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll deploy the Lambda function on various regions through CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Lambda function to multiple regions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to deploy Lambda functions through CloudFormation. We also
    accessed DynamoDB resources inside the Lambda function. In this section, we'll
    deploy a Lambda function to various regions with CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: You can follow the next steps to implement our demo and deploy the Lambda function
    to multiple regions.
  prefs: []
  type: TYPE_NORMAL
- en: Preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with certain regions on CloudFormation, we can use a CloudFormation
    StackSet. You learned about this in [Chapter 4](part0070.html#22O7C0-ff9c6455e1444393ad97060c22881bf4),
    *AWS CloudFormation StackSets*. In this demo, we'll build a Lambda function to
    be deployed to certain regions.
  prefs: []
  type: TYPE_NORMAL
- en: To follow this demo, you should have already configured security policies for
    CloudFormation StackSet. You did that in [Chapter 4](part0070.html#22O7C0-ff9c6455e1444393ad97060c22881bf4),
    *AWS CloudFormation StackSets*. You should deploy these template files to CloudFormation
    Stack in the `AWSCloudFormationStackSetAdministrationRole.yml` and `AWSCloudFormationStackSetExecutionRole.yml`
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please read [Chapter 4](part0070.html#22O7C0-ff9c6455e1444393ad97060c22881bf4), *AWS
    CloudFormation StackSets* to learn how to deploy them to CloudFormation template
    files. In the following screenshot, you can see that the `AWSCloudFormationStackSetAdministrationRole.yml`
    and `AWSCloudFormationStackSetExecutionRole.yml` CloudFormation template files
    were deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.35: Applying security permissions for CloudFormation StackSet'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll develop a CloudFormation template for the Lambda function that targets
    multiple regions.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a CloudFormation template for the Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this demo, we'll modify our CloudFormation template file `Lambda-CloudFormation.json`/`Lambda-CloudFormation.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is our Lambda function code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This function returns a message with the region information included. It's done
    by calling the `process.env.AWS_REGION` API. Save the CloudFormation template
    file as `Lambda-multi-regions.json` or `Lambda-multi-regions.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll deploy this CloudFormation template to a CloudFormation StackSet.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Lambda function to multiple regions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we've prepared a CloudFormation StackSet and created the CloudFormation
    template file, we can continue to deploy the template to StackSet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this demo, we use the CloudFormation StackSet Management Console. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and navigate to the CloudFormation StackSet Management Console
    at [https://console.aws.amazon.com/cloudformation/stacksets/](https://console.aws.amazon.com/cloudformation/stacksets/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Create StackSet button and you should get the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.36: Selecting a template for CloudFormation StackSet'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Upload a template to Amazon S3 option and upload `Lambda-multi-regions.json`
    or `Lambda-multi-regions.yaml` by clicking on the Browse button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Next button to get the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.37: Filling in the StackSet and Lambda function names'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the StackSet and Lambda function names and click on the Next button. You
    will get the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.38: Setting the account and target regions'
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the ARN code from your account in the Deploy stacks in accounts option.
    You will also be asked to fill in regions for deployment targets. In this demo,
    I selected three regions—US East (N.Virginia), Asia Pacific (Singapore), and EU
    (Frankfurt).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Next button until you get the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.39: Reviewing the CloudFormation StackSet'
  prefs: []
  type: TYPE_NORMAL
- en: Review all input and, after completing the review, click on the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CloudFormation provisions your template for the targeted regions. If successful,
    you should see SUCCEEDED in your StackSet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.40: CloudFormation StackSet was created with three regions'
  prefs: []
  type: TYPE_NORMAL
- en: Now you have finished deploying an AWS CloudFormation StackSet with the Lambda
    function. Next, we will invoke this function.
  prefs: []
  type: TYPE_NORMAL
- en: Invoking the Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you can invoke your Lambda function. In this demo, I use the AWS CLI.
    We send this data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The Lambda function is `lambda-multiregions-func`. You can invoke this Lambda
    function from the AWS CLI as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If successful, you''ll get a status code of `200`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.41: Invoking the Lambda function with the US East region'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your output file to get a response from the AWS Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The sample output is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.42: Opening the output file'
  prefs: []
  type: TYPE_NORMAL
- en: You have finished deploying the Lambda function in certain regions through CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned how to deploy Lambda functions through CloudFormation. Then, we included
    DynamoDB resources inside Lambda function codes. Finally, we deployed a Lambda
    function to various regions with CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how to work with an AWS IoT deployment through
    CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use these questions to test your understanding of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: List the steps to deploy the AWS Lambda function with CloudFormation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you develop a CloudFormation template for the Lambda function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you deploy the Lambda function tocertain regions using CloudFormation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
