- en: Scalable Data Implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered the storage solutions objective. We covered
    some of the different storage features that Azure offers, as well as when and
    how to use them. We also covered designing for NoSQL storage, and when to use
    the available solutions.
  prefs: []
  type: TYPE_NORMAL
- en: This is the second chapter of the Domain Design Data Implementation objective.
    It covers designing for Azure data services, including a high-level overview of
    the services and solutions that Azure provides. It also covers relational databases
    in Azure. This consists of the Azure SQL Database and how to design for performance,
    availability, and two open source relational databases, such as MySQL and PostgreSQL
    on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should know which data service or relational
    database to use for your solutions and when.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Data Factory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure SQL Data Warehouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Data Lake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Analysis Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure SQL Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Database for MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Database for PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code for this chapter can be downloaded from [https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%208](https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%208).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Catalog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Data Catalog provides a central repository where you can find all of the
    data sources that are used inside your organization. Most employees inside an
    organization are not aware of where enterprise data is located or who is responsible
    for that data. With Azure Data Catalog, any user (such as a developer or analyst,
    for instance) can discover and consume the data source from a central place.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Catalog provides one data catalog per Azure AD Tenant, even if you
    have multiple subscriptions associated with the tenant. A copy of the data source metadata and
    the location of the data source is added to the catalog. The data itself remains
    at the original location. Azure Data Catalog offers search functionality to easily
    discover the data, as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can import a data source in the Azure Data Catalog using the tooling that
    Microsoft provides. Azure Data Catalog supports a variety of data sources that
    can be published using the import tool, such as Azure Blob Storage, Azure Data
    Lake, SQL Server, and third-party data sources such as Oracle, MySQL, and more. When
    a data source is added to the catalog, the metadata can be enriched to provide
    extra information to the users.
  prefs: []
  type: TYPE_NORMAL
- en: There are two different versions of the Azure Data Catalog—**Free **and **Standard:**
  prefs: []
  type: TYPE_NORMAL
- en: '**Free**: Offers unlimited users and 5,000 registered data assets; the data
    assets are discoverable by all users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard**: Offers unlimited users, 100,000 registered data assets, and asset-level
    authorization, restricting visibility'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure Data Catalog can also be used programmatically by calling the Data
    Catalog REST API. It provides calls for registering and deleting data, and for
    working with annotations.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete overview of the data sources that Azure Data Catalog supports,
    you can refer to the article at [https://docs.microsoft.com/en-us/azure/data-catalog/data-catalog-dsr](https://docs.microsoft.com/en-us/azure/data-catalog/data-catalog-dsr).
    For more information about the Data Catalog REST API, you can refer to the article
    at [https://docs.microsoft.com/en-us/rest/api/datacatalog/#search-syntax-reference](https://docs.microsoft.com/en-us/rest/api/datacatalog/#search-syntax-reference).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Factory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure Data Factory is a cloud service for big data processing and analytics.
    It uses raw data from various data sources to create valuable insights for business
    decision makers, analysts, and data scientists. The following features are used
    to process and compose the data into data-driven workflows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data pipelines**: Represent a group of activities that perform a unit of
    work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activities**: One activity represents a step in a pipeline. For instance,
    you can create a Copy Activity to copy data from an Azure Blob Storage account
    to an HDInsight cluster. Azure Data Factory supports three types of activities:
    data movement activities, data transformation activities, and data control activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datasets**: These represent the data from the data stores which are used
    for input and output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linked services**: Azure Data Factory uses linked services to connect to
    the data sources. You can relate this to connection strings. There are two types
    of linked services—one for connecting to a data store and one for connecting to
    compute resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Triggers**: A trigger starts the execution of the data pipeline. Data Factory
    supports schedule triggers and tumbling window triggers, which run on a periodic
    interval. There is no trigger to start the pipeline from custom code. If you want
    to start it from inside an application, the best method is to change the start
    time of the schedule trigger to the time you want to start the operation, from
    inside your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipeline run**: This is an instance of data pipeline execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameters**: You can pass arguments to parameters inside the pipeline. They
    are key-value pairs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control flow**: This represents an orchestration of activities. You can process
    activities in sequence, create for-each iterators, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create a Data Factory service and data pipelines from the Azure Portal
    using the Azure Data Lake UI (only from Edge or Chrome), .NET, Python, PowerShell,
    ARM, or by calling the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this book, Azure offers two versions of Azure Data Factory:
    V1 and V2\. V2 is currently in preview. For a detailed overview of the differences
    between the versions, you can refer to [https://docs.microsoft.com/en-us/azure/data-factory/compare-versions](https://docs.microsoft.com/en-us/azure/data-factory/compare-versions).'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Factories can only be created in the East US, East US2, and West
    Europe regions. However, they can access data stores and compute services in other
    Azure regions to move data between data stores or process data using compute services.
  prefs: []
  type: TYPE_NORMAL
- en: Azure SQL Data Warehouse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure SQL Data Warehouse offers an Enterprise Data Warehouse in the cloud. It
    uses **Massively Parallel Processing** (**MPP**) combined with Azure Storage,
    to provide high performance and scalability. To create valuable insights into
    the data stored inside the Data Warehouse, Azure uses Hadoop/Spark and machine
    learning.
  prefs: []
  type: TYPE_NORMAL
- en: Data is stored in relational tables with columnar storage. When using columnar
    storage, the data is written and read in columns, instead of the rows used in
    traditional row-oriented databases. So, when you query the data, columnar storage
    skips all of the irrelevant data by immediately jumping to the appropriate column.
    This will make your queries run a lot faster. For instance, when you want to look
    up the average age of all of your customers, columnar storage will jump to the
    age column immediately, instead of looking at each row for the age column. This
    also provides better compression of the data, which results in lower storage costs.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using MPP, Azure SQL Data Warehouse decouples the storage layer from the
    compute layer, which makes it easy to scale out. MPP uses multiple compute nodes
    to process the data. A client application or storage solution uses PolyBase T-SQL
    commands to add data to the control node. The control node runs the MPP engine,
    which uses the **Data Movement Service** (**DMS**) for moving the data between
    the nodes. It is also responsible for optimizing the queries for parallel processing.
    When optimized, the MPP engine will pass the queries on to the available compute
    nodes to execute them in parallel. The compute nodes will then be responsible
    of storing the data inside Azure Storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd92ab31-b189-41a2-877b-2b11b43692f2.png)'
  prefs: []
  type: TYPE_IMG
- en: MPP architecture
  prefs: []
  type: TYPE_NORMAL
- en: Decoupling the storage layer from the compute layer is also more cost-effective.
    You can independently scale out the compute nodes of the storage layer, or pause
    the compute capacity so that you only have to pay for the storage.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Lake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Data Lake is a big data storage and analytics service that can store an
    unlimited amount of structured, semi-structured, or unstructured data. It is based
    on the Hadoop Yes Another Resource Negotiator (YARN) cluster management platform,
    which can scale dynamically across Azure SQL Server instances or instances of
    Azure SQL Data Warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Hadoop YARN, you can refer to the Hadoop website
    at [https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html](https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Hadoop YARN offers three types of solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Lake Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Data Lake Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure HDInsight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Data Lake Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Data Lake Store is a storage repository for big data workloads, where
    you can store raw data. A data lake is a container where you can store all kinds
    of data, such as structured, semi-structured, and unstructured data. Data is still
    unprocessed when it is added to the data lake. This is different from a data warehouse,
    where you store structured and processed data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Data Lake Store is built for Hadoop, which is available from the HDInsight
    cluster in Azure. It uses the Hadoop filesystem to store the data. Applications
    call the WebHDFS-compatible REST APIs to add data to the filesystem. It offers
    unlimited storage, and data can be analyzed using Hadoop analytic frameworks such
    as MapReduce or Hive. Azure HDInsight clusters can also be configured by using
    an out-of-the-box connection to directly access data stored in the Azure Data
    Lake Store. You can use Azure Data Lake Store data inside machine learning models,
    and you can create batch queries or store data inside a data warehouse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9487796-83c8-4eb2-9c06-af07f6e2f0ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure Data Lake Store
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Lake Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Data Lake Analytics is a feature of Azure Data Lake that can be used to
    analyze your data. Your data can come from various data sources, and after the
    data is analyzed, it can be written to various data sources as well. It works
    with Azure Data Lake Store, Azure Blob Storage, and Azure SQL Database.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Lake Analytics uses a serverless approach; you don't have to manage
    a cluster, and you only pay for the actual analysis of your data. It can scale
    dynamically, and it is integrated with Azure AD for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'It comes with two price packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pay-as-you-go**: Here, you pay only for your use, per minute. There is no
    further commitment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monthly commitment**: This price package comes with a couple of different
    possibilities, where you pay upfront for a certain amount of hours—100, 500, or
    1,000 hours, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the different price packages, you can refer to [https://azure.microsoft.com/en-us/pricing/details/data-lake-analytics/](https://azure.microsoft.com/en-us/pricing/details/data-lake-analytics/).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Analytics uses U-SQL to analyze the data. U-SQL is the big data query
    language, and it can be used in combination with C#, R, Python, and Cognitive
    Services. You can create scripts from the Azure Portal and create jobs to execute
    them on the data. You can use Visual Studio, Visual Studio Code, PowerShell, and
    CLI for submitting U-SQL scripts, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing your data using Data Lake Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this demo, we are going to create a Data Lake Analytics account and analyze
    some data, storing it in Azure Data Lake Store afterwards. An Azure Data Lake
    Store account is mandatory for Data Lake Analytics, so we will create that as
    well:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New** and type Data Lake Analytics in the search bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new blade opens up. At the time of writing this book, Data Lake Analytics
    can only be created in the regions Central US, East US 2, and North Europe. Add
    the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/311d90c1-d52e-4f56-91b6-af33e18c9a65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create an Azure Data Lake Analytics account
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Data Lake Store** to create the account for storing your data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/06013bc0-ee9b-455d-97a6-0be62e2d15a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Create an Azure Data Lake Store
  prefs: []
  type: TYPE_NORMAL
- en: Click OK twice to create both the Data Lake Store and the Data Lake Analytics
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now navigate to the Data Lake Analytics account. Next, upload the sample
    file `SearchLogs.tsv` to Azure Data Lake Store. Click on **Data explorer** in
    the left-hand menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7aefe58-e3a7-4ccb-969e-c2bc554e560f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Data Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder and name it `input`. Upload `SearchLogs.tsv`to the folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4359d172-603e-4d33-a45b-c5cd2580a554.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new input folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on New job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea2abe2f-1fbe-4317-90b5-699dfb6bfcc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure Data Lake overview
  prefs: []
  type: TYPE_NORMAL
- en: 'Name the job, and add the following code to it. This extracts the raw data
    from the `SearchLog` file and creates a new file with headers, and then stores
    it in a folder called `output` in the Azure Data Lake Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the job. The following output will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9ac7e232-d376-429c-a67c-9851bef7e823.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Azure Data Lake output
  prefs: []
  type: TYPE_NORMAL
- en: You can now see the result in the Data Explorer. There is a new folder called `output`
    added, where the output file is stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure HDInsight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure HDInsight is a service which deploys Hadoop components in the form of
    clusters in the cloud. Apache Hadoop is a very popular open source framework for
    processing and analyzing big data. The Hadoop components on Azure make it very
    easy to process data because Azure handles the creation of the clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'HDInsight offers the following cluster types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Hadoop**: Hadoop can process data in parallel using MapReduce, a programming
    language that can process data efficiently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Spark**: Spark can process data in parallel as well by using in-memory
    processing for better performance. You can use it with SQL, streaming data, and
    machine learning solutions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache HBase**: This offers a NoSQL database on Hadoop which can be used
    as input or output for MapReduce jobs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft R Server**: Offers a server for hosting and managing R scripts.
    R is mostly used by data scientists, and provides scalable methods for analyzing
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Storm**: Offers processing for large streams of data in a very fast
    way. You can use this to analyze real-time sensor data, for instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Interactive Query (Preview)**: Hive queries can now run faster using
    the in-memory caching mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Kafka**: Offers streaming for data pipelines, message queuing, and
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure HDInsight uses Azure Blob Storage and Azure Data Lake Store as storage
    solutions. You can build applications on Azure HDInsight using Java, Python, and
    .NET by using the HDInsight .NET SDK and more.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Analysis Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Analysis Services use the same architecture that SQL Server Analysis uses,
    and provides enterprise-grade data modeling in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily create a hybrid environment by connecting Azure Analysis Services
    with your on-premises SQL Analysis Servers. Data from various sources, such as
    SQL Server Analysis, SQL Server, Azure SQL Server, and more, can then easily be
    combined. Inside Azure Analysis Services, the models can be processed much faster
    when compared to on-premises environments. This way, client applications such
    as Power BI, Excel, Reporting Services, and other third-party applications, can
    query the data and deliver dashboards much faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/624e300e-f892-418b-b368-431c3d50b617.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure Analysis Services
  prefs: []
  type: TYPE_NORMAL
- en: Azure SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure SQL Database offers a relational database in the cloud. It uses the SQL
    Server on-premises code base, but by using Azure SQL Database over SQL Server
    on-premises, you don't have to manage the underlying platform, the operating system,
    or buy any licenses. Besides that, Microsoft releases updates for Azure SQL Database
    first, and then for SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: Azure SQL Database offers scalability without causing any downtime for your
    databases. It offers column base indexes, which make your queries perform much
    faster. There is built-in monitoring for your databases and built-in intelligence
    for increasing the performance of your database automatically, and it provides
    high availability by providing automatic backups and Point-in-time restores. You
    can also use active geo-replication, for global applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure SQL Database offers the following tiers for your databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Elastic Database Pools**: Elastic pools is a feature that helps in managing
    and scaling databases that have unpredictable usage demands. All databases in
    an Elastic Pool are deployed on the same database server and share the same resources.
    By managing the pool of databases and not the individual databases, they can share
    performance and scaling. The performance of this tier is expressed in **elastic
    Database Transaction Units** (**eDTUs**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Individual databases**: This is a good fit if you have a database with predictable
    performance. Scaling is done for each database separately. The performance of
    this tier is expressed in **Database Transaction Units** (**DTUs**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about Database Transaction Units (DTUs) and elastic Database
    Transaction Units (eDTUs), you can refer to the article at [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-what-is-a-dtu](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-what-is-a-dtu).
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of different service plans and pricing tiers available for
    Azure SQL Database. As they change often, you can refer to the pricing page for
    an overview at [https://azure.microsoft.com/en-us/pricing/details/sql-database/](https://azure.microsoft.com/en-us/pricing/details/sql-database/).
    However, it is strongly advised to look at the different plans for the 70-535
    exam.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Server Stretch Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL Service Stretch Database was introduced in SQL Server 2016, and is a feature
    that can move or archive your cold data from your on-premises SQL Server to the
    Azure SQL Database. This results in better performance for your on-premises server,
    and the stretched data resides in the cloud, where it is easily accessible for
    other applications.
  prefs: []
  type: TYPE_NORMAL
- en: Inside SQL Server, you can mark a table as a stretch candidate, and SQL Server
    will move the data to Azure SQL Database transparently. Large transactional tables
    with lots of historical data can benefit from enabling for stretch. These are
    mostly massive tables with hundreds or millions of rows in them, which don't have
    to be queried frequently.
  prefs: []
  type: TYPE_NORMAL
- en: High availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even when your databases are hosted in Azure, there is still a chance that failures
    and outages will occur. In the case of an outage (such as a total regional failure,
    which can be caused by a natural disaster, an act of terrorism, war, a government
    action, or a network or device failure external to the data centers of Microsoft),
    your data still needs to be accessible.
  prefs: []
  type: TYPE_NORMAL
- en: To create highly available SQL Server databases on Azure, you can use failover
    groups and active geo-replication, which are covered in more detail in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Backup and recovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure creates geo-redundant backups for each service tier automatically. These
    backups are then copied to **read-access geo-redundant storage** (**RA-GRS**). Azure
    SQL Database creates a full database backup every week, and a differential backup
    every hour. A differential backup creates a backup from the data that has changed
    since the last full backup. Azure SQL Database also creates a transaction log
    backup every 5 to 10 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The retention period of these backups varies for each service tier:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: Has a retention of 7 days'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard**: Has a retention of 35 days'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium**: Has a retention of 35 days'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These retention periods can be extended by creating a **l****ong-term backup
    retention policy**. By using the LTR policy, the retention period can be extended
    up to 10 years. The backups are copied to the Azure Recovery Services Vault, and
    data is encrypted at rest. The Azure Recovery Services Vault manages all of the
    backups and automatically removes backups that have expired. The LTR policy can
    be created from the Azure Portal or from PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the backups for the following restoring scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Point-in-time restore**: A database can be restored to any Point-in-time
    within the retention policy on the same logical server. A new database, which
    is fully accessible, is created. You can use Point-in-time restore for every service
    tier, and for single databases and databases deployed into elastic pools. A Point-in-time
    restore can be restored from the Azure Portal, PowerShell, or the REST API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deleted database restore**: A deleted database can be restored up to the
    time of deletion on the same logical server. You can restore a deleted database
    to an earlier Point-in-time as well. A deleted database restore can be executed
    from the Azure Portal, PowerShell, and the REST API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geo-restore**: Using geo-restore, you can restore a database backup to any
    server in any region. You can only use geo-restore for geo-redundant backups.
    Backups that are created manually are not supported. For this type of restore,
    you can use the Azure Portal, PowerShell, and the REST API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Recovery Services Vault restore**: You can use this type of restore
    for restoring a database to a certain Point-in-time in the available retention
    policy. This way, you can restore an old version of a database for an application,
    for instance. For this type of restore, you can use the Azure Portal, PowerShell,
    and the REST API, as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active geo-replication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geo-replication is a business continuity feature that allows you to replicate
    the primary database, up to four read-only secondary databases, in the same or
    different Azure regions. You can use the secondary databases to query data, or
    for failover scenarios when there is a data center outage. Active geo-replication
    has to be set up by the user or the application manually.
  prefs: []
  type: TYPE_NORMAL
- en: Failover groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Failover groups is a feature that automatically manages the failovers. It automatically
    manages the geo-replication relationship between the databases, the failover at
    scale, and the connectivity. To use failover groups, the primary and the secondary
    databases need to be created inside of the same Azure subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic failover supports replication of all of the databases that are created
    in the same failover group to only one secondary database server, in a different
    region. This is different when using active geo-replication, which can replicate
    up to four secondary databases.
  prefs: []
  type: TYPE_NORMAL
- en: You can set and manage geo-replication from the Azure Portal, PowerShell, Transact
    SQL, and the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring active geo-replication and failover groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we are going to set up active geo-replication and failover
    groups for a single database. Note that this can be done for an Elastic Pool,
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, create the SQL Database. Click on New and type `SQL Database` in the
    search bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the next screen, add the following settings in the creation blade and click
    on **Create**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b7d0eb6-4e07-49ba-a60d-a9e7a4248706.png)'
  prefs: []
  type: TYPE_IMG
- en: Create SQL Database
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Create a new server, add the following settings, and click on Select:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f517fb4-2ceb-42de-96f9-6321feb7bcac.png)'
  prefs: []
  type: TYPE_IMG
- en: Create SQL Server
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the pricing tier; in this blade, you can select the pricing tier and
    the DTUs and eDTUs that you want to configure for the database. For now, you can
    keep the default settings and click Apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b1a4dc6-7968-4c9e-a5b8-b575ee84ad42.png)'
  prefs: []
  type: TYPE_IMG
- en: Select pricing tier
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create to create the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the database and, in the left-hand menu, click Geo-Replication.
    There, you can configure to which regions you want your database to be replicated.
    You can select every region, but the paired region is recommended. You can also
    click the top banner to create a failover group for your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70c03926-2f5d-4ebd-90bf-aa484293c65b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Geo-replication settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the region, and a new blade will pop up. In there, you have to create
    the second database in a new server. The steps for creating the new server are
    identical to the steps that were taken for the first server. Add the following
    settings, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28334205-be60-4a10-8f37-5574cd0b8d44.png)'
  prefs: []
  type: TYPE_IMG
- en: Create secondary server
  prefs: []
  type: TYPE_NORMAL
- en: 'To automatically replicate the database, you need to add it to a failover group.
    Click the banner and add the following settings. Pick the secondary database created
    in the previous step as a secondary server and click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc254639-c004-4baa-9e3d-12a2ac32d55f.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatic Failover
  prefs: []
  type: TYPE_NORMAL
- en: Azure Database for MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Database for MySQL is an implementation of the open source relational
    database MySQL in the cloud. The Azure offering offers the same functionality
    and capabilities as the MySQL Community Edition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MySQL Database is widely used by PHP developers, and for a lot of PHP applications,
    like the open source CMS WordPress, for instance. MySQL offers the following features
    and capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open source**: MySQL is open source but owned by Oracle. It offers commercial
    versions as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ACID compliancy**: It offers Atomicity, Consistency, Isolation, Durability
    (ACID) transactions. This ensures that there is no data loss in the case of failure.
    MySQL offers ACID compliancy when using InnoDB and NDB Cluster Storage engines.
    InnoDB has been the default MySQL storage engine since version 5.6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Replication**: MySQL offers master-standby replication, which includes single
    master to one standby and multiple standbys, circular replication (A to B to C,
    and back to A), and master to master.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: MySQL can under-perform at a heavy load and when it needs
    to execute complex queries. It is most suitable for web-based projects that need
    simple, straightforward data transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: MySQL offers security based on **Access Control Lists** (**ACLs**)
    for all connections, queries, and other operations. It offers support for SSL-encrypted
    connections between MySQL clients and servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NoSQL features**: MySQL only offers JSON data type support, and not support
    for indexing JSON.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensibility**: MySQL has no support for extensibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concurrency**: MySQL only has multiversion concurrency control (MVCC) support
    in InnoDB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Programming languages**: You can only use the MySQL programming language
    to communicate with the data in the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By running your MySQL Database on Azure, on top of all the features and capabilities
    that MySQL offers, Microsoft offers automatic scaling, high availability, encryption
    for data at rest, automatic backup and Point-in-time restore for up to 35 days,
    enterprise security and compliance, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL on Azure offers the following pricing tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: Offers a maximum of 1 TB of storage, four logical CPUs, and locally
    redundant backups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General purpose**: Offers a maximum of 1 TB of storage, four logical CPUs, scalable
    I/O throughput, and locally redundant and geographically redundant backups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory optimized: **Offers a maximum of 1 TB of storage, five logical CPUs,
    scalable I/O throughput, and locally redundant and geographically redundant backups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about the features and capabilities that the MySQL Community
    Edition offers, you can refer to [https://www.mysql.com/products/community/](https://www.mysql.com/products/community/).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Database for PostgreSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Database for PostgreSQL is an implementation of the open source relational
    database PostgreSQL in the cloud. It is also based on the community version of
    the open source PostgreSQL database engine. PostgreSQL offers capabilities similar
    to MySQL, but there are differences as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'It offers the following features and capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open source**: PostgreSQL is completely open source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ACID compliancy**: Offers ACID transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Replication**: PostgreSQL provides master-standby replication, including single
    master to one standby and multiple standbys, hot standby/streaming replication,
    bi-directional replication, logical log streaming replication, and cascading replication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: It supports a variety of performance optimizations, and is
    most suitable for systems that require the execution of complex queries and where
    read and write speeds are crucial. PostgreSQL performs well in OLTP/OLAP systems
    and with business intelligence applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: PostgreSQLoffers role-based and inherited role-based security.
    It offers native SSL support for client/server communications, and it offers row
    level security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concurrency**: PostgreSQL has full multiversion concurrency control (MVCC) support
    and is extremely responsive in high volume environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NoSQL features**: PostgreSQL supports JSON and other NoSQL features, such
    as native XML support, JSON indexing, and key-value pairs with HSTORE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensibility**: PostgreSQLoffers support for extensibility, such as adding
    new functions, types, new index types, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Programming languages**: Offers programming language extensions for JavaScript,
    .Net, R, C/C++, Java, Perl, Python, Ruby, Tcl, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On top of all of the features that PostgreSQL provides, Azure Database for PostgreSQL
    offers automatic scaling, high availability, encryption for data at rest, automatic
    backup and Point-in-time restore, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'PostgreSQL on Azure offers identical pricing tiers as MySQL on Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: Offers a maximum of 1 TB of storage, four logical CPUs, and locally
    redundant backups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General purpose**: Offers a maximum of 1 TB of storage, four logical CPUs, scalable
    I/O throughput, and locally redundant and geographically redundant backups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory optimized**: Offers a maximum of 1 TB of storage, five logical CPUs,
    scalable I/O throughput, and locally redundant and geographically redundant backups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about the features and capabilities that the PostgreSQL
    database offers, you can refer to [https://www.postgresql.org/](https://www.postgresql.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have completed the designing data implementations objective.
    We've covered the various data implementation solutions that Azure provides, such
    as the various Azure Data Services and the various relational databases that Azure
    offers. You should now know which database you should use in different scenarios,
    how to manage your backup and restore, and how to design for high availability
    and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will kick off designing security and identity solutions with securing
    Azure resources.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assessments* section at the end
    of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Can you restore deleted databases in Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use SQL Server Stretch Database to extend your on-premises data storage
    to Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use T-SQL for analyzing data in Azure Data Analytics?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the following links for more information about the topics that
    are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Data Catalog documentation**: [https://docs.microsoft.com/en-us/azure/data-catalog/](https://docs.microsoft.com/en-us/azure/data-catalog/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get started with Azure Data Catalog**: [https://docs.microsoft.com/en-us/azure/data-catalog/data-catalog-get-started](https://docs.microsoft.com/en-us/azure/data-catalog/data-catalog-get-started).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is Azure SQL Data Warehouse?**: [https://docs.microsoft.com/en-us/azure/sql-data-warehouse/sql-data-warehouse-overview-what-is](https://docs.microsoft.com/en-us/azure/sql-data-warehouse/sql-data-warehouse-overview-what-is).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overview of Azure Data Lake Store**: [https://docs.microsoft.com/en-us/azure/data-lake-store/data-lake-store-overview](https://docs.microsoft.com/en-us/azure/data-lake-store/data-lake-store-overview).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overview of Microsoft Azure Data Lake Analytics**: [https://docs.microsoft.com/en-us/azure/data-lake-analytics/data-lake-analytics-overview](https://docs.microsoft.com/en-us/azure/data-lake-analytics/data-lake-analytics-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Introduction to Azure HDInsight and the Hadoop and Spark technology stack**: [https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-introduction](https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-introduction).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure SQL Database documentation**: [https://docs.microsoft.com/en-us/azure/sql-database/](https://docs.microsoft.com/en-us/azure/sql-database/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scaling out with Azure SQL Database**: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-scale-introduction](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-scale-introduction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stretch Database**: [https://docs.microsoft.com/en-us/sql/sql-server/stretch-database/stretch-database](https://docs.microsoft.com/en-us/sql/sql-server/stretch-database/stretch-database)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designing highly available services using Azure SQL Database**: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-designing-cloud-solutions-for-disaster-recovery](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-designing-cloud-solutions-for-disaster-recovery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learning about automatic SQL Database backups**: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-automated-backups](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-automated-backups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recovering an Azure SQL Database using automated database backups**: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-recovery-using-backups](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-recovery-using-backups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is Azure Database for MySQL?**: [https://docs.microsoft.com/en-us/azure/mysql/overview](https://docs.microsoft.com/en-us/azure/mysql/overview).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is Azure Database for PostgreSQL?**: [https://docs.microsoft.com/en-us/azure/postgresql/overview](https://docs.microsoft.com/en-us/azure/postgresql/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
