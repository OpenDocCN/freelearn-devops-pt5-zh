- en: DevOps Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about different DevOps processes, frameworks,
    and best practices. We will present DevOps process maturity frameworks and progression
    models with checklist templates for each phase of DevOps. We will also become
    familiar with Agile terminology and methodology and the benefits accrued by an
    organization by adopting it. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps progression frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps maturity models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agile and DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DevOps standard processes prescribed across the industry and adopted by
    organizations are listed here; we will discuss them in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Source code management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build  management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous delivery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure as Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application performance monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routine automation/continuous improvement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevOps frameworks--under DevOps frameworks, we will study the life cycle models,
    maturity states, progression and best practices frameworks, and also Agile methodology:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps project life cycle
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Maturity states
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Progression frameworks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps practices frameworks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Agile methodology
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The adoption of DevOps best practices will help to align people and progress
    towards organizational goals. DevOps offers multiple process frameworks at every
    stage of software development. Full-scale implementation of DevOps in an organization
    requires a cultural shift integrating departments, people, and the process of
    software life cycles.  It enables organizations to move higher on the maturity
    road map in terms of compliance and process adherence:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52f7d8bf-991f-4558-8e49-17d06bedd297.png)'
  prefs: []
  type: TYPE_IMG
- en: DevOps process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the DevOps standard processes prescribed across the industry
    and adopted by organizations, discussed in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Source Code Management (SCM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Source code management systems have been in use for decades, offering many functions
    and benefits. However, integrating them with DevOps processes offers robust integration
    and automation. A source code management system enables multiple developers to
    develop code concurrently across multiple development centers spread across diverse
    geographies. SCM helps in the management of code base and version control at the
    file level, so developers don't overwrite each other's code, and they have ability
    to work in parallel on files in their respective branches.
  prefs: []
  type: TYPE_NORMAL
- en: Developers merge their code changes to the main or sub branch which can be tracked,
    audited, enquired for bug fixes, and rolled back if needed.  Branching is an important
    functionality of SCM, multiple branches of the software are maintained for different
    major and minor releases, tracking the features and bug fixes across various release
    versions. SCM enables managing process adherence across environments of development,
    test and production, facilitating entire software life cycle management from development
    to support.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DevOps process framework emphasizes the adoption of SCM for accruing the
    following benefits for the organization:'
  prefs: []
  type: TYPE_NORMAL
- en: Coordination of services between members of a software development team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a single source of truth for any version, minor or major
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review changes before implementing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track co-authoring, collaboration, and individual contributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit code changes and rollback facility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incremental backup and recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SCM tools prevalent in the market are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: IBM ClearCase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perforce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PVCS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Team Foundation Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Team Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual SourceSafe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open source SCM tools are as follows--their popularity is also attributed to
    DevOps'' widespread adoption:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subversion** (**SVN**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concurrent Version System** (**CVS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SCCS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revision control systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitbucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code reviews are an important process to improve the quality of software instances
    before they are integrated into the main stream. They help identify and remove
    common vulnerabilities such as memory leaks, formatting errors and buffer overflows.
    Code review or inspection can be both formal and informal. In a formal code review,
    the process is through multiple methods such as formal meetings, and interactions
    to review the code line by line. Informal code reviews can be over the shoulder,
    emails, pair programming where a few authors codevelop, or tool assisted code
    reviews--these are also called **code walkthroughs**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A code review process framework benefits the organization as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration between software development team members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identification and elimination of code defects before integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvement of code quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick turnaround of development cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Proprietary tools for code review automation:'
  prefs: []
  type: TYPE_NORMAL
- en: Crucible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Codacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upsource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open source tools for code review automation:'
  prefs: []
  type: TYPE_NORMAL
- en: Review board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phabricator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gerrit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Configuration Management** (**CM**) is the broad subject of governing configuration
    items at enterprise level, as per **Infrastructure Library** (**ITIL**); even
    the **configuration management database** (**CMDB**) is part of the CM strategy.
    Configuration management includes identification, verification, and maintenance
    of configuration items of both software and hardware, such as patches and versions.
    In simple terms, it''s about managing the configuration of a system and ensuring
    its fitness for its intended purpose. A configuration management tool will validate
    the appropriateness of the configurations on the system as per the requirements
    and its interoperability between systems. A common example is to ensure the code
    developed on a development system is effectively functional on a QA (test) system
    and production systems. Any loss of configuration parameters between the systems
    will be catastrophic for the application''s performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As per DevOps, the benefits of incorporating configuration management processes
    and tools for an organization can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Facilitates organizations with impact analysis due to the configuration change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows automated provisioning on different systems such as dev, QA, and prod
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilitates audit, account, and verification of the systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduces redundant work by ensuring consistency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effectively manages simultaneous updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoids configuration related problems of a single version of the truth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplifies coordination between team members of development and operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is helpful in tracking defects and resolving them in time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helps in predictive and preventive maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few popular configuration management tools for infrastructure are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: BMC Software's Atrium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hewlett Packard Enterprise's Universal Configuration Management Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few popular software configuration management tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Chef
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Juju
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build management is the process of preparing a build environment to assemble
    all the components of a software application as a finished, workable product,
    fit for its intended purpose. The source code, the compilers, dependencies with
    hardware and software components, and so on, are compiled to function as a cohesive
    unit. Builds are manual, on demand and automatic. On-demand automated builds reinitiate
    with a script to launch the build and are used in few cases. Scheduled automated
    builds are the case with continuous integration servers running nightly builds.
    Triggered automated builds in a continuous integration server are launched just
    after being committed to a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'As per DevOps, the benefits of build management processes and tools for an
    organization can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The vital function of ensuring software is usable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures reusability and reliability of the software in client environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increases the efficiency and quality of software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's also a regulatory requirement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few build tools that are in use are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buildr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MSbuild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make (CMake/QMake)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifacts repository management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A build Artifacts repository manager is a dedicated server for hosting multiple
    repositories of binary components (executables) of successful builds. By centralizing
    the management of diverse binary types, it reduces the complexity of access along
    with their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Manage artifact life cycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure builds are repeatable and reproducible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organized access to build artifacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convenient to share builds across teams and vendors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retention policies based on artifacts for audit compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High availability of artifacts with access controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few repository tools that are in use are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Sonatype Nexus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JFrog Artifactory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Archiva
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NuGet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Npm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Release management is the process of a software life cycle to facilitate a release's
    movement from development, testing, and deployment to support/maintenance. It
    interfaces with several other DevOps process areas in the SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: Release management has been an integral part of the development process for
    decades. However, its inclusion into the DevOps framework makes a complete cycle
    for automation.
  prefs: []
  type: TYPE_NORMAL
- en: Release management is an iterative cycle initiating by a request for the addition
    of new features or changes to existing functionality. Once the change is approved,
    the new version is designed, built, tested, reviewed, and after acceptance, deployed
    to production. During the support phase, there could be a possibility of enhancement
    or performance leading to the initiation of a new development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of adopting release management are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Product life cycle holistic management, tracking and integrating every phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orchestrate all the phase activities--development, version control, build, QA,
    systems provisioning, production deployment, and support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track the status of recent deployments in each of the environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit history of all activities of work items that are associated with each
    release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The automation of release management relies on automating all of its stages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teams can author release definitions and automate deployment in repeatable,
    reliable ways while simultaneously tracking in-flight releases all the way to
    production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine grain access control for authorized access and approval for change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few release management tools are:'
  prefs: []
  type: TYPE_NORMAL
- en: Electric Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Octopus Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quikbuild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UrbanCode Release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CA Service Virtualization (LISA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BMC Release Process Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plutora Release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CA Release Automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serena Release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StackStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing manually for every possible scenario is tedious, labor intensive, time
    consuming and expensive. Test automation, or automatic testing, is for running
    test cases without manual intervention. Though not all test cases qualify to be
    automatically run, the majority can be scheduled. Automation is achieved by running
    the test cases with an automation tool or through the scheduling of automation
    scripts. Recent test data is used as input and the results are captured for analysis.
    The goal of test automation is to supplement manual testing by reducing the number
    of test cases to be run manually--not to replace manual testing all together.
  prefs: []
  type: TYPE_NORMAL
- en: Automation testing is for test cases that are repetitive, monotonous, tedious,
    and time consuming, that have defined input and boundary conditions. It's not
    suitable for frequently changing, ad hoc or first time execution test cases. Software
    automation testing can be based on a few types of frameworks data; keyword, modular,
    and hybrid.
  prefs: []
  type: TYPE_NORMAL
- en: Testing big data systems encompasses multiple technologies, integrations, frameworks and testing
    modules such as functional, security, usability, performance, integration testing,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of adopting test automation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Improve software quality and responsiveness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick turnaround by substituting manual effort with automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the effectiveness of the overall testing life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incremental and integration testing for continuous integration and delivery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few test automation tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Test Professional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QTP (UFT)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SoapUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestDrive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FitNesse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telerik Test Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selenium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestComplete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watir
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous integration is a DevOps best practice wherein developers continuously
    integrate their code in small logical units to a common shared repository with
    regularity (for example, once a day). The advantage of such a process is the transparency
    of the code's quality and fitness for its intended purpose. Otherwise, bulk code
    integration after the lapse of a fixed time period could expose many defects or
    integration challenges which could be expensive to resolve.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve continuous integration, there are few prerequisites to be implemented,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a version repository for source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular code check in schedule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate testing for the code changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate the build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy build in preproduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The benefits of continuous integration are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Availability of latest code as we commit early and often
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build cycles are faster as build issues are exposed early with check-ins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparency in the build process means better ownership and lesser defects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating the deployment process leads to quicker turnaround
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some continuous integration tools that are available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TeamCity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go CD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buddy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitbucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Teamcenter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CruiseControl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bamboo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitLab CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Codeship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following  figure represents the roles of continuous integration, delivery,
    and deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ee8cc23-8592-40e7-8d38-bafb4e6fbe9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous delivery is the next step of continuous integration in the software
    development cycle; it enables rapid and reliable development of software and delivery
    of product with the least amount of manual effort or overhead. In continuous integration,
    as we have seen, code is developed incorporating reviews, followed by automated
    building and testing.  In continuous delivery, the product is moved to the preproduction
    (staging) environment in small frequent units to thoroughly test for user acceptance.
    The focus is on understanding the performance of the features and functionality
    related issues of the software. This enables issues related to business logic
    to be found early in the development cycle, ensuring that these issues are addressed
    before moving ahead to other phases such as deployment to the production environment
    or the addition of new features. Continuous delivery provides greater reliability
    and predictability on the usability of the intended features of the product for
    the developers. With continuous delivery, your software is always ready to release
    and the final deployment into production is a manual step as per timings based
    on a business decision.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of the continuous delivery process are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Developed code is continuously delivered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code is constantly and regularly reviewed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-quality software is deployed rapidly, reliably, and repeatedly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maximum automation and minimal manual overhead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tools that perform continuous integration do the job of continuous delivery
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous deployment is the fully matured and complete process cycle of code
    change, passing through every phase of the software life cycle to be deployed
    to production environments.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment requires the entire process to be automated--also termed
    as automated application release--through all stages, such as the packaging of
    the application, ensuring the dependencies are integrated, deployment testing,
    and the production of adequate documentation for compliance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of continuous deployment and automated application release are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Frequent product releases deliver software as fast as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated and accelerated product releases with the code change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code changes qualify for production both from a technical and quality view point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most current version of the product is ready in shippable format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment modeling reduces errors, resulting in better product quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consolidated access to all tools, process and resource data leads to quicker
    troubleshooting and time to market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effective collaboration between dev, QA, and operation teams leads to higher
    output and better customer satisfaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilitates lower audit efforts owing to a centralized view of all phase activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tools that perform continuous integration do the job of continuous delivery
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure as Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Infrastructure as Code** (**IaC**) is a means to perform infrastructure services
    through the defining of configuration files. In DevOps'' scope, IaC is the automation
    of routine tasks through code, typically as configuration definition files, such
    as shell scripts, Ansible playbooks, Chef recipes, or Puppet manifests. It''s
    usually a server and client setup with push or pull-based mechanisms, or agentless
    through **secured shell** (**SSH**). Many regular tasks on systems such as create,
    start, stop, delete, terminate, and restarting virtual or bare-metal machines
    are performed through software. In traditional on-premise systems, many of the
    system administrative tasks were manual and person dependent. However, with the
    explosion of big data with cloud computing, all the regular system activities
    and tasks are managed like any software code. They are maintained in code repositories,
    and the latest build updates are tested for deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of IaC are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The use of definition files and code to update system configuration is quick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of all the code and changes is less error prone and has reproducible
    results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thorough testing of the deployment with IaC and test systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller regular changes are easy to manage, bigger infrastructure updates are
    likely to contain errors that are difficult to detect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit tracking and compliance are easy with definition files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple servers update simultaneously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System availability is high, with less down time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some tools for IaC are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible tower
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CFEngine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SaltStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routine automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every organization aims to automate routine, repetitive tasks; in fact the survival
    of most companies and software products is based on the degree to which they automate.
    ERP systems, data visualization, domain applications, data analytics, and so on;
    almost all segments are potential areas for automation. A few sections to automate
    are infrastructure (deployment, patching scalability), applications (development,
    integration, builds, delivery, deployment), load balancers, feedback, and defects/errors
    management.
  prefs: []
  type: TYPE_NORMAL
- en: There are several tools to automate each segment, as we have seen in the previous
    sections; we will explore their application in coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Key application performance monitoring/indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance metrics are part of every tool, product and service. Accordingly,
    organizations are ever vigilant of the performance metrics monitoring of their
    applications, products and services. To achieve high-quality output for any product,
    achieving a high degree of standard in process and metrics is prerequisite. There
    are many parameters to gauge performance metrics, such as, for example, applications
    or hardware systems availability or uptime versus downtime and responsiveness,
    tickets categorization, acknowledgement, resolution time lines, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is all about measuring the metrics and feedback, with continuous improvement
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: Several tools are available for application monitoring for various needs; we
    will cover the most appropriate and applicable tools in the context of the DevOps
    framework in further sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Under DevOps frameworks we will study the life cycle models, maturity states,
    progression and best practices frameworks, as well as Agile methodology.
  prefs: []
  type: TYPE_NORMAL
- en: Accomplishing DevOps maturity is a gradual progression to being well structured
    and planned, as stated in the following stages.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps maturity life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DevOps project phases are on lines of the software development life cycle as
    described here. We will dwell on each phase in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Discovery and requirements phase:  **The DevOps discovery phase is a highly
    interactive project phase for gathering inputs and feedback on the current state
    of process, frameworks and tools from key stakeholders. Templates and checklists
    are used to capture the inputs.  The timeline for the phase depends on the availability
    of key stakeholders, the existence of requisite documents, and the complexity
    of the processes to explore. Discovery phase deliverables are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates detailing the current state of process, tools, frameworks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Signoff from key stakeholders on the details collated
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing best practices and DevOps methods
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing challenges, constraints as applicable
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reusable tools, process, artifacts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Design print phase:** The design phase is also the architecture phase; it''s
    about producing a blueprint of the target state to accomplish. It''s an iterative
    process of weighing alternatives for tools, and processes arriving at agreement
    by key stakeholders. The timeline and cost will be base lined and revisited and
    revised regularly based on new learnings from the project as we move forward towards
    the target state. The timeline for this phase depends on how acceptable the processes,
    tools, and budgets are to the key stakeholders. Design phase deliverables are
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target state is agreed upon
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Baseline of DevOps process to be adopted
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Baseline of most viable tools to be implemented
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Baseline agreed timelines and cost
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Development phase:  **Artifacts base lined from the blueprint phase will
    be inputs for the development phase; the agreed upon process changes, tools to
    be implemented, frameworks to be adopted, and so on.  A detailed project plan
    covering deliverables, schedules, dependencies, constraints, resource leveling,
    and so on will be quite handy. Agile scrum methodology will be the framework to
    implement the DevOps, which will be discussed in detail. The timeline for the
    development phase will be as per the project plan base lined initially, and revised
    regularly with the progress of milestones that have been accomplished. Development
    phase deliverables are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial project plan base lined and signoff
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating regular feedback till project completion
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allocation of resources for each stage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Including new skills, methods, process, and tools
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Work arounds for project risks, constraints, and so on
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deliverables as agreed in the project plan
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment phase:** The DevOps deployment phase is in accordance with the
    best practices outlined in the DevOps process framework detailed above. It depends
    on whether the deployment is a process, an application tool, or for infrastructure.
    The timeline will be evaluated as per experience gained in the development phase. Deployment
    phase deliverables are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment guide--cutover plan to production
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment checklist
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Signoff from key stakeholders
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rollback plan
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Capacity planning
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring phase:** Monitors the key performance factors for each phase''s
    performance of development, build, integration and deployment over time duration.
    It''s followed by tracking the defects, bug fixes, user tickets and plans for
    continuous improvement. Monitoring phase timelines are as per organization need
    and performance benchmarks. Monitoring phase deliverables are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations manual
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Feedback forms and checklists
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User guide, support manual
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Process flow manual
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance benchmark
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps maturity map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DevOps adoption is a value-added journey for an organisation. It''s not something
    achieved overnight quickly, but matured step by step over a period of time with
    manifested results. Like any **Capability Maturity Model** (**CMMI**) or Process
    Maturity Models, the critical success factors are to be defined for the program''s
    performance objectives. The initial maturity state of key evaluation parameters
    is agreed upon by key stakeholders. Then the target maturity level of the parameter
    variables to be accomplished will be defined in the project charter, along with
    detailed procedure, milestones, budgets and constraints as approved by stakeholders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d632de0c-0df5-4ae0-ae24-716b92497688.png)'
  prefs: []
  type: TYPE_IMG
- en: DevOps process maturity framework.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps progression framework/readiness model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed in the previous model, DevOps adoption is a journey for an organisation
    to higher maturity states. In the following table, different practice areas and
    maturity levels of DevOps at a broad scale are listed. DevOps maturity levels
    may vary across teams as per their standards, similarly even a common department
    or division of the same organization may have significantly more varied and advanced
    practices than others for the same process flow. Enhancing to achieve the best
    possible DevOps process workflow throughout the entire enterprise should be the
    end goal for all teams and departments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41ecf58b-cea3-4852-a4cb-6503db11fb38.png)'
  prefs: []
  type: TYPE_IMG
- en: DevOps maturity checklists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process maturity framework, as seen in the preceding sections, is assessed
    with checklists and discussions. For each of the key focus areas, the detailed
    findings will indicate the maturity levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'The findings provide a general estimate of the maturity level and the impact
    it is causing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/784061ac-ce01-43c9-9639-a45101764a98.png)![](img/64b74c0c-0811-4553-8d74-c5ae8400e2dc.png)![](img/3226a40f-1033-40a1-8bfb-0019497ba188.png)![](img/77d7dd9e-c987-4c58-9207-6425bd05ed0d.png)![](img/5115fed1-92a5-4cea-8906-355c69db59dd.png)![](img/f78e013d-7631-43c0-9bec-b0d4aa1b60a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Agile framework for DevOps process projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps projects are typically Agile-framework based, for the effective and quick
    turnaround of the development and implementation process cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Agile software development-based projects have become widely accepted and adopted
    across the industry.  The traditional waterfall model is outdated and unable to
    keep up with the advantages offered by Agile methodology.
  prefs: []
  type: TYPE_NORMAL
- en: 'Agile methodology owes its success to its core objectives:'
  prefs: []
  type: TYPE_NORMAL
- en: Individuals and interactions are valued over process and tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working software is valued over comprehensive documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer collaboration is valued over contract negotiation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change adoption agility is valued over project plan adherence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agile ways of development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scrum is the Agile development methodology, focused on features development,
    from a team comprising of roles such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The scrum master is responsible for team setup, conducting sprint meetings,
    and removing development obstacles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The product owner creates and prioritizes product backlog, and is responsible
    for the delivery of the functionality at each sprint iteration cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scrum team manages and organizes the work to complete in the sprint cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The product backlog is the list of features and requirements of functionality
    to be developed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Agile method of development is an incremental and iterative approach for
    developing user stories, software features or functionality. Customers can see
    the product features early and make necessary changes, if needed.  The development
    cycle is broken into sprint cycles of two to four weeks, to accomplish units of
    work. The idea is that smaller cycles can be developed and managed quickly with
    a team of developers and testers together. The structure and documentation are
    not important but a working feature of the code is considered valuable. The development
    process is iteratively accomplished in successive sprint cycles. Bugs identified
    are fixed at the earliest sprint with successful testing. Regression testing is
    performed when new functions or logic are developed. User acceptance tests are
    performed after the sprint cycle to flag the product for release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e767ff1-3294-4b04-b104-ccda46ca4b0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The benefits of adopting the best practices of Agile software development are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Working software makes the customer satisfied, as he can view the features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers can add change requests at any phase of development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick and continuous delivery of software in weeks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Projects are built around motivated individuals, who should be trusted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sprint teams are highly skilled and efficient in delivery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since developers and testers codevelop, bugs are solved within sprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The communication mode is effective so quality of product delivered is higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous attention to technical excellence leads to good design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-organizing teams focus on optimal architectures, requirements, and designs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The team is lean and effective, so productivity is maximised
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood the application of DevOps processes, frameworks,
    best practices, and DevOps process maturity frameworks and progression models
    with checklist templates. We also looked into Agile terminology and methodology.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover in detail the big data ecosystem, different
    frameworks, Hadoop clusters, nodes, capacity planning, and so on.
  prefs: []
  type: TYPE_NORMAL
