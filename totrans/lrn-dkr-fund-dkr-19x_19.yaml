- en: Introduction to Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how SwarmKit uses rolling updates to achieve
    zero downtime deployments. We were also introduced to Docker configs, which are
    used to store nonsensitive data in clusters and use this to configure application
    services, as well as Docker secrets, which are used to share confidential data
    with an application service running in a Docker Swarm.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we're going to introduce Kubernetes. Kubernetes is currently
    the clear leader in the container orchestration space. We will start with a high-level
    overview of the architecture of a Kubernetes cluster and then discuss the main
    objects used in Kubernetes to define and run containerized applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes master nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to MiniKube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes support in Docker for Desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to pods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes ReplicaSet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Context-based routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing SwarmKit with Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After finishing this chapter, you will be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Draft the high-level architecture of a Kubernetes cluster on a napkin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain three to four main characteristics of a Kubernetes pod
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the role of Kubernetes ReplicaSets in two to three short sentences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain two or three main responsibilities of a Kubernetes service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a pod in Minikube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Docker for Desktop in order to use Kubernetes as an orchestrator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a deployment in Docker for Desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Kubernetes service to expose an application service internally (or
    externally) to the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Learn-Docker---Fundamentals-of-Docker-19.x-Second-Edition](https://github.com/PacktPublishing/Learn-Docker---Fundamentals-of-Docker-19.x-Second-Edition).
    Alternatively, if you cloned the GitHub repository that accompanies this book
    to your computer, as described in [Chapter 2](99a92fe1-4652-4934-9c33-f3e19483afcd.xhtml),
    *Setting Up a Working Environment*, then you can find the code at `~/fod-solution/ch15`.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Kubernetes cluster consists of a set of servers. These servers can be VMs
    or physical servers. The latter are also called *bare metal*. Each member of the
    cluster can have one of two roles. It is either a Kubernetes master or a (worker)
    node. The former is used to manage the cluster, while the latter will run an application
    workload. I have put the worker in parentheses since, in Kubernetes parlance,
    you only talk about a node when you're talking about a server that runs application
    workloads. But in Docker parlance and in Swarm, the equivalent is a *worker node*.
    I think that the notion of a worker node better describes the role of the server
    than a simple *node*.
  prefs: []
  type: TYPE_NORMAL
- en: In a cluster, you have a small and odd number of masters and as many worker
    nodes as needed. Small clusters might only have a few worker nodes, while more
    realistic clusters might have dozens or even hundreds of worker nodes. Technically,
    there is no limit to how many worker nodes a cluster can have; in reality, though,
    you might experience a significant slowdown in some management operations when
    dealing with thousands of nodes. All members of the cluster need to be connected
    by a physical network, the so-called **underlay network**.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes defines one flat network for the whole cluster. Kubernetes does not
    provide any networking implementation out of the box; instead, it relies on plugins
    from third parties. Kubernetes just defines the **Container Network Interface** (**CNI**)
    and leaves the implementation to others. The CNI is pretty simple. It basically
    states that each pod running in the cluster must be able to reach any other pod
    also running in the cluster without any **Network** **Address** **Translation**
    (**NAT**) happening in-between. The same must be true between cluster nodes and
    pods, that is, applications or daemons running directly on a cluster node must
    be able to reach each pod in the cluster and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the high-level architecture of a Kubernetes
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f31f291-f723-4876-8ff9-349f2c42d114.jpg)'
  prefs: []
  type: TYPE_IMG
- en: High-level architecture diagram of Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding diagram is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On the top, in the middle, we have a cluster of **etcd** nodes. **etcd** is
    a distributed key-value store that, in a Kubernetes cluster, is used to store
    all the state of the cluster. The number of **etcd** nodes has to be odd, as mandated
    by the Raft consensus protocol, which states which nodes are used to coordinate
    among themselves. When we talk about the **Cluster State**, we do not include
    data that is produced or consumed by applications running in the cluster; instead,
    we're talking about all the information on the topology of the cluster, what services
    are running, network settings, secrets used, and more. That said, this **etcd**
    cluster is really mission-critical to the overall cluster and thus, we should
    never run only a single **etcd** server in a production environment or any environment
    that needs to be highly available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we have a cluster of Kubernetes **master** nodes, which also form a **Consensus**
    **Group** among themselves, similar to the **etcd** nodes. The number of master
    nodes also has to be odd. We can run cluster with a single master but we should
    never do that in a production or mission-critical system. There, we should always
    have at least three master nodes. Since the master nodes are used to manage the
    whole cluster, we are also talking about the management plane. Master nodes use
    the **etcd** cluster as their backing store. It is good practice to put a **load**
    **balancer** (**LB**) in front of master nodes with a well-known **Fully Qualified
    Domain Name** (**FQDN**), such as `https://admin.example.com`. All tools that
    are used to manage the Kubernetes cluster should access it through this LB rather
    than using the public IP address of one of the master nodes. This is shown on
    the left upper side of the preceding diagram.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toward the bottom of the diagram, we have a cluster of **worker** nodes. The
    number of nodes can be as low as one and does not have an upper limit. Kubernetes
    master and worker nodes communicate with each other. It is a bidirectional form
    of communication that is different from the one we know from Docker Swarm. In
    Docker Swarm, only manager nodes communicate with worker nodes and never the other
    way around. All ingress traffic accessing applications running in the cluster
    should go through another **load balancer**. This is the application **load**
    **balancer** or reverse proxy. We never want external traffic to directly access
    any of the worker nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have an idea about the high-level architecture of a Kubernetes cluster,
    let's delve a bit more deeply and look at the Kubernetes master and worker nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes master nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kubernetes master nodes are used to manage a Kubernetes cluster. The following
    is a high-level diagram of such a master:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36896fcb-357f-497a-822d-6d08c3a72c1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes master
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the preceding diagram, we have the **Infrastructure**, which
    can be a VM on-premise or in the cloud or a server (often called bare metal) on-premise
    or in the cloud. Currently, Kubernetes masters only run on **Linux**. The most
    popular Linux distributions, such as RHEL, CentOS, and Ubuntu, are supported.
    On this Linux machine, we have at least the following four Kubernetes services
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API server**: This is the gateway to Kubernetes. All requests to list, create,
    modify, or delete any resources in the cluster must go through this service. It
    exposes a REST interface that tools such as `kubectl` use to manage the cluster
    and applications in the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: The controller, or more precisely the controller manager, is a
    control loop that observes the state of the cluster through the API server and
    makes changes, attempting to move the current or effective state toward the desired
    state if they differ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduler**: The scheduler is a service that tries its best to schedule pods
    on worker nodes while considering various boundary conditions, such as resource
    requirements, policies, quality of service requirements, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cluster Store**: This is an instance of etcd that is used to store all information
    about the state of the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To be more precise, etcd, which is used as a cluster store, does not necessarily
    have to be installed on the same node as the other Kubernetes services. Sometimes,
    Kubernetes clusters are configured to use standalone clusters of etcd servers,
    as shown in the architecture diagram in the previous section. But which variant
    to use is an advanced management decision and is outside the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: We need at least one master, but to achieve high availability, we need three
    or more master nodes. This is very similar to what we have learned about the manager
    nodes of a Docker Swarm. In this regard, a Kubernetes master is equivalent to
    a Swarm manager node.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes masters never run application workloads. Their sole purpose is to
    manage the cluster. Kubernetes masters build a Raft consensus group. The Raft
    protocol is a standard protocol used in situations where a group of members needs
    to make decisions. It is used in many well-known software products such as MongoDB,
    Docker SwarmKit, and Kubernetes. For a more thorough discussion of the Raft protocol,
    see the link in the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned in the previous section, the state of the Kubernetes cluster
    is stored in etcd. If the Kubernetes cluster is supposed to be highly available,
    then etcd must also be configured in HA mode, which normally means that we have
    at least three etcd instances running on different nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's state once again that the whole cluster state is stored in etcd. This
    includes all the information about all the cluster nodes, all the replica sets,
    deployments, secrets, network policies, routing information, and so on. It is,
    therefore, crucial that we have a robust backup strategy in place for this key-value
    store.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the nodes that will be running the actual workload of the
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cluster nodes are the nodes with which Kubernetes schedules application workloads.
    They are the workhorses of the cluster. A Kubernetes cluster can have a few, dozens,
    hundreds, or even thousands of cluster nodes. Kubernetes has been built from the
    ground up for high scalability. Don''t forget that Kubernetes was modeled after
    Google Borg, which has been running tens of thousands of containers for years:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/995b10fd-c87a-4b18-b291-104acf1bd1e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes worker node
  prefs: []
  type: TYPE_NORMAL
- en: A worker node can run on a VM, bare metal, on-premise, or in the cloud. Originally,
    worker nodes could only be configured on Linux. But since version 1.10 of Kubernetes,
    worker nodes can also run on Windows Server. It is perfectly fine to have a mixed
    cluster with Linux and Windows worker nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'On each node, we have three services that need to run, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kubelet**: This is the first and foremost service. Kubelet is the primary
    node agent. The kubelet service uses pod specifications to make sure all of the
    containers of the corresponding pods are running and healthy. Pod specifications
    are files written in YAML or JSON format and they declaratively describe a pod.
    We will get to know what pods are in the next section. PodSpecs are provided to
    kubelet primarily through the API server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container runtime**: The second service that needs to be present on each
    worker node is a container runtime. Kubernetes, by default, has used `containerd` since
    version 1.9 as its container runtime. Prior to that, it used the Docker daemon.
    Other container runtimes, such as rkt or CRI-O, can be used. The container runtime
    is responsible for managing and running the individual containers of a pod.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kube-proxy**: Finally, there is the kube-proxy. It runs as a daemon and is
    a simple network proxy and load balancer for all application services running
    on that particular node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have learned about the architecture of Kubernetes and the master
    and worker nodes, it is time to introduce the tooling that we can use to develop
    applications targeted at Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Minikube is a tool that creates a single-node Kubernetes cluster in VirtualBox
    or Hyper-V (other hypervisors are supported too) ready to be used during the development
    of a containerized application. In [Chapter 2](99a92fe1-4652-4934-9c33-f3e19483afcd.xhtml), *Setting
    Up a Working Environment,* we learned how Minikube and `kubectl` can be installed
    on our macOS or Windows laptop. As stated there, Minikube is a single-node Kubernetes
    cluster and thus the node is, at the same time, a Kubernetes master as well as
    a worker node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make sure that Minikube is running with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Minikube is ready, we can access its single node cluster using `kubectl`.
    We should see something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee27b902-c2d7-4d1f-8c7d-8412d06b788b.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing all nodes in Minikube
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned previously, we have a single-node cluster with a node called `minikube`.
    The version of Kubernetes that Minikube is using is `v1.16.2` in my case.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try to deploy a pod to this cluster. Don't worry about what a pod
    is for now; we will delve into all the details about it later in this chapter.
    For the moment, just take it as-is.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `sample-pod.yaml` file in the `ch15` subfolder of our `labs` folder
    to create such a pod. It has the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following steps to run the pod:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to the correct folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use the Kubernetes CLI called `kubectl` to deploy this pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now list all of the pods, we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To be able to access this pod, we need to create a service. Let''s use the `sample-service.yaml` file,
    which has the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, don''t worry about what exactly a service is at this time. We''ll explain
    this later. Let''s just create this service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can use `curl` to access the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We should receive the Nginx welcome page as an answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you continue, please remove the two objects you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Kubernetes support in Docker for Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Starting from version 18.01-ce, Docker for macOS and Docker for Windows have started
    to support Kubernetes out of the box. Developers who want to deploy their containerized
    applications to Kubernetes can use this orchestrator instead of SwarmKit. Kubernetes
    support is turned off by default and has to be enabled in the settings. The first
    time Kubernetes is enabled, Docker for macOS or Windows will need a moment to
    download all the components that are needed to create a single-node Kubernetes
    cluster. Contrary to Minikube, which is also a single-node cluster, the version
    provided by the Docker tools uses containerized versions of all Kubernetes components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf2e24ff-9110-43ac-8e4a-b30f0c5d2df5.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes support in Docker for macOS and Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding diagram gives us a rough overview of how Kubernetes support has
    been added to Docker for macOS and Windows. Docker for macOS uses hyperkit to
    run a LinuxKit-based VM. Docker for Windows uses Hyper-V to achieve the result.
    Inside the VM, the Docker engine is installed. Part of the engine is SwarmKit,
    which enables **Swarm-Mode**. Docker for macOS or Windows uses the **kubeadm** tool
    to set up and configure Kubernetes in that VM. The following three facts are worth
    mentioning: Kubernetes stores its cluster state in **etcd**, thus we have **etcd**
    running on this VM. Then, we have all the services that make up Kubernetes and,
    finally, some services that support the deployment of Docker stacks from the **Docker
    CLI** into Kubernetes. This service is not part of the official Kubernetes distribution,
    but it is Docker-specific.'
  prefs: []
  type: TYPE_NORMAL
- en: All Kubernetes components run in containers in the **LinuxKit VM**. These containers
    can be hidden through a setting in Docker for macOS or Windows. Later in this
    section, we'll provide a complete list of Kubernetes system containers that will
    be running on your laptop, if you have Kubernetes support enabled. To avoid repetition,
    from now on, I will only talk about Docker for Desktop instead of Docker for macOS
    and Docker for Windows. Everything that I will be saying equally applies to both
    editions.
  prefs: []
  type: TYPE_NORMAL
- en: One big advantage of Docker for Desktop with Kubernetes enabled over Minikube
    is that the former allows developers to use a single tool to build, test, and
    run a containerized application targeted at Kubernetes. It is even possible to
    deploy a multi-service application into Kubernetes using a Docker Compose file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s get our hands dirty:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to enable Kubernetes. On macOS, click on the Docker icon in
    the menu bar; or, on Windows, go to the command tray and select Preferences. In
    the dialog box that opens, select Kubernetes, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53d9153e-43f2-4b1c-ab52-bf08d8889001.png)'
  prefs: []
  type: TYPE_IMG
- en: Enabling Kubernetes in Docker for Desktop
  prefs: []
  type: TYPE_NORMAL
- en: Then, tick the Enable Kubernetes checkbox. Also, tick the Deploy Docker Stacks
    to Kubernetes by default and Show system containers (advanced) checkboxes. Then,
    click the Apply & Restart button. Installing and configuring of Kubernetes takes
    a few minutes. Now, it's time to take a break and enjoy a nice cup of tea.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is finished (which Docker notifies us of by showing a
    green status icon in the Settings dialog), we can test it. Since we now have two
    Kubernetes clusters running on our laptop, that is, Minikube and Docker for Desktop,
    we need to configure `kubectl` to access the latter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, let''s list all the contexts that we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca14801c-00eb-46cc-8edc-0b3edaba44f4.png)'
  prefs: []
  type: TYPE_IMG
- en: List of contexts for kubectl
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can see that, on my laptop, I have the two contexts we mentioned previously.
    Currently, the Minikube context is still active, flagged by the asterisk in the
    `CURRENT` column. We can switch to the `docker-for-desktop` context using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/903685b8-ecdb-455e-85a1-03188389f5c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the context for the Kubernetes CLI
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use `kubectl` to access the cluster that Docker for Desktop just
    created. We should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3b65b94-4772-4584-9d06-3fa88a05a0eb.png)'
  prefs: []
  type: TYPE_IMG
- en: The single-node Kubernetes cluster created by Docker for Desktop
  prefs: []
  type: TYPE_NORMAL
- en: OK, this looks very familiar. It is pretty much the same as what we saw when
    working with Minikube. The version of Kubernetes that my Docker for Desktop is
    using is `1.15.5`. We can also see that the node is a master node.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we list all the containers that are currently running on our Docker for
    Desktop, we get the list shown in the following screenshot (note that I use the `--format` argument
    to output the `Container ID` and `Names` of the containers):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6837f756-ac8a-41a7-b8af-6357e140ea1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes system containers
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding list, we can identify all the now-familiar components that
    make up Kubernetes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: API server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: etcd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kube proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kube controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kube scheduler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also containers that have the word `compose` in them. These are Docker-specific
    services and allow us to deploy Docker Compose applications onto Kubernetes. Docker
    translates the Docker Compose syntax and implicitly creates the necessary Kubernetes
    objects, such as deployments, pods, and services.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, we don't want to clutter our list of containers with these system
    containers. Therefore, we can uncheck the Show system containers (advanced) checkbox
    in the settings for Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to deploy a Docker Compose application to Kubernetes. Navigate
    to the `ch15` subfolder of our `~/fod` folder. We deploy the app as a stack using
    the `docker-compose.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c712f4fd-1771-4475-a125-e9286974bdb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying the stack to Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test the application, for example, using `curl`, and we will see that
    it is running as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86a7e757-6c9f-4706-b38d-1d13096cb908.png)'
  prefs: []
  type: TYPE_IMG
- en: Pets application running in Kubernetes on Docker for Desktop
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see exactly what Docker did when we executed the `docker stack
    deploy` command. We can use `kubectl` to find out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4a81014-a75b-40c2-8c45-56412e93455d.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing all Kubernetes objects created by docker stack deploy
  prefs: []
  type: TYPE_NORMAL
- en: Docker created a deployment for the `web` service and a stateful set for the `db` service.
    It also automatically created Kubernetes services for `web` and `db` so that they
    can be accessed inside the cluster. It also created the Kubernetes `svc/web-published` service, which
    is used for external access.
  prefs: []
  type: TYPE_NORMAL
- en: This is pretty cool, to say the least, and tremendously decreases friction in
    the development process for teams targeting Kubernetes as their orchestration
    platform
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you continue, please remove the stack from the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, make sure you reset the context for `kubectl` back to Minikube, as we
    will be using Minikube for all our samples in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have had an introduction to the tools we can use to develop applications
    that will eventually run in a Kubernetes cluster, it is time to learn about all
    the important Kubernetes objects that are used to define and manage such an application.
    We will start with pods.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to pods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Contrary to what is possible in Docker Swarm, you cannot run containers directly
    in a Kubernetes cluster. In a Kubernetes cluster, you can only run pods. Pods
    are the atomic units of deployment in Kubernetes. A pod is an abstraction of one
    or many co-located containers that share the same Kernel namespaces, such as the
    network namespace. No equivalent exists in Docker SwarmKit. The fact that more
    than one container can be co-located and share the same network namespace is a
    very powerful concept. The following diagram illustrates two pods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81cd2bb8-23c9-4034-9ad3-eb03b5d6a1ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes pods
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, we have two pods, **Pod 1** and **Pod 2**. The first
    pod contains two containers, while the second one only contains a single container.
    Each pod gets an IP address assigned by Kubernetes that is unique in the whole
    Kubernetes cluster. In our case, these are the following IP addresses: `10.0.12.3` and `10.0.12.5`.
    Both are part of a private subnet managed by the Kubernetes network driver.
  prefs: []
  type: TYPE_NORMAL
- en: A pod can contain one to many containers. All those containers share the same
    Linux kernel namespaces, and in particular, they share the network namespace.
    This is indicated by the dashed rectangle surrounding the containers. Since all
    containers running in the same pod share the network namespace, each container
    needs to make sure to use their own port since duplicate ports are not allowed
    in a single network namespace. In this case, in **Pod 1**, the **main container**
    is using port `80` while the **supporting container** is using port `3000`.
  prefs: []
  type: TYPE_NORMAL
- en: Requests from other pods or nodes can use the pod's IP address combined with
    the corresponding port number to access the individual containers. For example,
    you could access the application running in the main container of **Pod 1** through `10.0.12.3:80`.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Docker container and Kubernetes pod networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s compare Docker''s container networking and Kubernetes pod networking.
    In the following diagram, we have the former on the left-hand side and the latter
    on the right-hand side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23036596-986c-43b4-83db-2732000cfad9.png)'
  prefs: []
  type: TYPE_IMG
- en: Containers in a pod sharing the same network namespace
  prefs: []
  type: TYPE_NORMAL
- en: When a Docker container is created and no specific network is specified, then
    the Docker engine creates a **virtual ethernet** (**veth**) endpoint. The first
    container gets **veth0**, the next one gets **veth1**, and so on. These virtual
    ethernet endpoints are connected to the Linux bridge, **docker0**, that Docker
    automatically creates upon installation. Traffic is routed from the **docker0** bridge
    to every connected **veth** endpoint. Every container has its own network namespace.
    No two containers use the same namespace. This is on purpose, to isolate applications
    running inside the containers from each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Kubernetes pod, the situation is different. When creating a new pod,
    Kubernetes first creates a so-called **pause **container whose only purpose is
    to create and manage the namespaces that the pod will share with all containers.
    Other than that, it does nothing useful; it is just sleeping. The **pause **container
    is connected to the **docker0 **bridge through **veth0**. Any subsequent container
    that will be part of the pod uses a special feature of the Docker engine that
    allows it to reuse an existing network namespace. The syntax to do so looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The important part is the `--net` argument, which uses `container:<container
    name>`as a value. If we create a new container this way, then Docker does not
    create a new veth endpoint; the container uses the same one as the `pause` container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important consequence of multiple containers sharing the same network
    namespace is the way they communicate with each other. Let''s consider the following
    situation: a pod containing two containers, one listening at port `80` and the
    other at port `3000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55170356-9c32-42bb-bbcd-a9f51f59017e.png)'
  prefs: []
  type: TYPE_IMG
- en: Containers in pods communicating via localhost
  prefs: []
  type: TYPE_NORMAL
- en: When two containers use the same Linux kernel network namespace, they can communicate
    with each other through localhost, similarly to how, when two processes are running
    on the same host, they can communicate with each other through localhost too.
    This is illustrated in the preceding diagram. From the main container, the containerized
    application inside it can reach out to the service running inside the supporting
    container through `http://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing the network namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After all this theory, you might be wondering how a pod is actually created by
    Kubernetes. Kubernetes only uses what Docker provides. So, *how does this network
    namespace share work?* First, Kubernetes creates the so-called `pause` container,
    as mentioned previously. This container has no other function than to reserve
    the kernel namespaces for that pod and keep them alive, even if no other container
    inside the pod is running. Let''s simulate the creation of a pod, then. We start
    by creating the `pause` container and use Nginx for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we add a second container called `main`, attaching it to the same network
    namespace as the `pause` container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `pause` and the sample container are both parts of the same network namespace,
    they can reach each other through `localhost`. To show this, we have to `exec` into
    the main container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can test the connection to Nginx running in the `pause` container and
    listening on port `80`. The following what we get if we use the `wget` utility
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ccfdb453-ac21-47bd-a2af-716d7c2bcb1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Two containers sharing the same network namespace
  prefs: []
  type: TYPE_NORMAL
- en: 'The output shows that we can indeed access Nginx on `localhost`. This is proof
    that the two containers share the same namespace. If that is not enough, we can
    use the `ip` tool to show `eth0` inside both containers and we will get the exact
    same result, specifically, the same IP address, which is one of the characteristics
    of a pod where all its containers share the same IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad510dd1-a0ea-4767-ac14-94eecd16c1a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying the properties of eth0 with the ip tool
  prefs: []
  type: TYPE_NORMAL
- en: 'If we inspect the `bridge` network, we can see that only the `pause` container
    is listed. The other container didn''t get an entry in the `Containers` list since
    it is reusing the `pause` container''s endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e553023b-c1e7-4abf-893c-b8cb75208b13.png)'
  prefs: []
  type: TYPE_IMG
- en: Inspecting the Docker default bridge network
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will be looking at the pod life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Pod life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this book, we learned that containers have a life cycle. A container
    is initialized, run, and ultimately exited. When a container exits, it can do
    this gracefully with an exit code zero or it can terminate with an error, which
    is equivalent to a nonzero exit code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, a pod has a life cycle. Due to the fact that a pod can contain more
    than one container, this life cycle is slightly more complicated than that of
    a single container. The life cycle of a pod can be seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f161a33-21c8-4c48-888d-881ef4fbe6a7.png)'
  prefs: []
  type: TYPE_IMG
- en: The life cycle of Kubernetes pods
  prefs: []
  type: TYPE_NORMAL
- en: When a **Pod** is created on a cluster node, it first enters into the **pending** status.
    Once all the containers of the pod are up and running, the pod enters into the **running** status.
    The pod only enters into this state if all its containers run successfully. If
    the pod is asked to terminate, it will request all its containers to terminate.
    If all containers terminate with exit code zero, then the pod enters into the **succeeded** status.
    This is the happy path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at some scenarios that lead to the pod being in the **failed** state.
    There are three possible scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: If, during the startup of the pod, at least one container is not able to run
    and fails (that is, it exits with a nonzero exit code), the pod goes from the **pending** state
    into the **failed** state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the pod is in the running status and one of the containers suddenly crashes
    or exits with a nonzero exit code, then the pod transitions from the **running** state
    into the **failed** state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the pod is asked to terminate and, during the shutdown at least one of the
    containers, exits with a nonzero exit code, then the pod also enters into the **failed** state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's look at the specifications for a pod.
  prefs: []
  type: TYPE_NORMAL
- en: Pod specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating a pod in a Kubernetes cluster, we can use either an imperative
    or a declarative approach. We discussed the difference between the two approaches
    earlier in this book but, to rephrase the most important aspect, using a declarative
    approach signifies that we write a manifest that describes the end state we want
    to achieve. We'll leave out the details of the orchestrator. The end state that
    we want to achieve is also called the **desired state**. In general, the declarative
    approach is strongly preferred in all established orchestrators, and Kubernetes
    is no exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, in this chapter, we will exclusively concentrate on the declarative approach.
    Manifests or specifications for a pod can be written using either the YAML or
    JSON formats. In this chapter, we will concentrate on YAML since it is easier
    to read for us humans. Let''s look at a sample specification. Here is the content
    of the `pod.yaml` file, which can be found in the `ch12` subfolder of our `labs` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Each specification in Kubernetes starts with the version information. Pods have
    been around for quite some time and thus the API version is `v1`. The second line
    specifies the type of Kubernetes object or resource we want to define. Obviously,
    in this case, we want to specify a `Pod`. Next follows a block containing metadata.
    At a bare minimum, we need to give the pod a name. Here, we call it `web-pod`.
    The next block that follows is the `spec` block, which contains the specification
    of the pod. The most important part (and the only one in this simple sample) is
    a list of all containers that are part of this pod. We only have one container
    here, but multiple containers are possible. The name we choose for our container
    is `web` and the container image is `nginx:alpine`. Finally, we define a list
    of ports the container is exposing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have authored such a specification, we can apply it to the cluster
    using the Kubernetes CLI, `kubectl`. In a Terminal, navigate to the `ch15` subfolder
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will respond with `pod "web-pod" created`. We can then list all the pods
    in the cluster with `kubectl get pods`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, we have one of one pods in the running status. The pod is called `web-pod`,
    as defined. We can get more detailed information about the running pod by using the
    `describe` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99fb4f13-8084-40a5-a7c5-773f47e056e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Describing a pod running in the cluster
  prefs: []
  type: TYPE_NORMAL
- en: Please note the `pod/web-pod` notation in the previous `describe` command. Other
    variants are possible; for example, `pods/web-pod`, `po/web-pod`. `pod` and `po` are
    aliases of `pods`. The `kubectl` tool defines many aliases to make our lives a
    bit easier.
  prefs: []
  type: TYPE_NORMAL
- en: The `describe` command gives us a plethora of valuable information about the
    pod, not the least of which is a list of events that happened and affected this
    pod. The list is shown at the end of the output.
  prefs: []
  type: TYPE_NORMAL
- en: The information in the `Containers` section is very similar to what we find
    in a `docker container inspect` output.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see a `Volumes` section with an entry of the `Secret` type. We will
    discuss Kubernetes secrets in the next chapter. Volumes, on the other hand, will
    be discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: Pods and volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 5](f3a48b12-d541-467b-aeb3-df014e60da6b.xhtml), *Data Volumes and
    Configuration*, we learned about volumes and their purpose: accessing and storing
    persistent data. Since containers can mount volumes, pods can do so as well. In
    reality, it is really the containers inside the pod that mount the volumes, but
    that is just a semantic detail. First, let''s see how we can define a volume in
    Kubernetes. Kubernetes supports a plethora of volume types, so we won''t delve
    into too much detail about this. Let''s just create a local volume implicitly
    by defining a `PersistentVolumeClaim` called `my-data-claim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We have defined a claim that requests 2 GB of data. Let''s create this claim:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can list the claim using `kubectl` (`pvc` is a shortcut for `PersistentVolumeClaim`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8b60fdf-3b0e-456c-bf0e-5a7a5948ab5c.png)'
  prefs: []
  type: TYPE_IMG
- en: List of PersistentStorageClaim objects in the cluster
  prefs: []
  type: TYPE_NORMAL
- en: 'In the output, we can see that the claim has implicitly created a volume called `pvc-<ID>`.
    We are now ready to use the volume created by the claim in a pod. Let''s use a
    modified version of the pod specification that we used previously. We can find
    this updated specification in the `pod-with-vol.yaml` file in the `ch12` folder.
    Let''s look at this specification in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the last four lines, in the `volumes` block, we define a list of volumes
    we want to use for this pod. The volumes that we list here can be used by any
    of the containers of the pod. In our particular case, we only have one volume.
    We specify that we have a volume called `my-data`, which is a persistent volume
    claim whose claim name is the one we just created. Then, in the container specification,
    we have the `volumeMounts` block, which is where we define the volume we want
    to use and the (absolute) path inside the container where the volume will be mounted.
    In our case, we mount the volume to the `/data` folder of the container filesystem.
    Let''s create this pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can `exec` into the container to double-check that the volume has
    mounted by navigating to the `/data` folder, creating a file there, and exiting
    the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If we are right, then the data in this container must persist beyond the life
    cycle of the pod. Thus, let''s delete the pod and then recreate it and exec into
    it to make sure the data is still there. This is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b789efc4-6ea6-4338-a236-22aa885902f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Data stored in volume survives pod recreation
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good understanding of pods, let's look into how those pods
    are managed with the help of ReplicaSets.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes ReplicaSet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A single pod in an environment with high availability requirements is insufficient. *What
    if the pod crashes?* *What if we need to update the application running inside
    the pod but cannot afford any service interruption?* These questions and more
    indicate that pods alone are not enough and we need a higher-level concept that
    can manage multiple instances of the same pod. In Kubernetes, the **ReplicaSet **is
    used to define and manage such a collection of identical pods that are running
    on different cluster nodes. Among other things, a ReplicaSet defines which container
    images are used by the containers running inside a pod and how many instances
    of the pod will run in the cluster. These properties and many others are called
    the desired state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ReplicaSet is responsible for reconciling the desired state at all times,
    if the actual state ever deviates from it. Here is a Kubernetes ReplicaSet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f6cc3c9-2f46-4517-8b87-372a24c0c8bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes ReplicaSet
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, we can see a **ReplicaSet** called **rs-api,** which
    governs a number of pods. The pods are called **pod-api**. The **ReplicaSet**
    is responsible for making sure that, at any given time, there are always the desired
    number of pods running. If one of the pods crashes for whatever reason, the **ReplicaSet**
    schedules a new pod on a node with free resources instead. If there are more pods
    than the desired number, then the **ReplicaSet** kills superfluous pods. With
    this, we can say that the **ReplicaSet** guarantees a self-healing and scalable
    set of pods. There is no limit to how many pods a **ReplicaSet** can hold.
  prefs: []
  type: TYPE_NORMAL
- en: ReplicaSet specification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to what we have learned about pods, Kubernetes also allows us to either
    imperatively or declaratively define and create a `ReplicaSet`. Since the declarative
    approach is by far the most recommended one in most cases, we''re going to concentrate
    on this approach. Here is a sample specification for a Kubernetes `ReplicaSet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This looks an awful lot like the pod specification we introduced earlier. Let's
    concentrate on the differences, then. First, on line 2, we have the `kind`, which
    was `Pod `and is now `ReplicaSet`. Then, on lines 6–8, we have a selector, which
    determines the pods that will be part of the `ReplicaSet`. In this case, it is
    all the pods that have `app` as a label with the value `web`. Then, on line 9,
    we define how many replicas of the pod we want to run; three, in this case. Finally,
    we have the `template` section, which first defines the `metadata` and then the
    `spec`, which defines the containers that run inside the pod. In our case, we
    have a single container using the `nginx:alpine` image and exporting port `80`.
  prefs: []
  type: TYPE_NORMAL
- en: The really important elements are the number of replicas and the selector, which
    specifies the set of pods governed by the `ReplicaSet`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `ch15` folder, we have a file called `replicaset.yaml` that contains
    the preceding specification. Let''s use this file to create the `ReplicaSet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If we list all the ReplicaSets in the cluster, we get the following (`rs` is
    a shortcut for `replicaset`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we can see that we have a single ReplicaSet called `rs-web` whose
    desired state is three (pods). The current state also shows three pods and tell
    us that all three pods are ready. We can also list all the pods in the system.
    This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see our three expected pods. The names of the pods use the name
    of the ReplicaSet with a unique ID appended for each pod. In the `READY` column,
    we can see how many containers have been defined in the pod and how many of them
    are ready. In our case, we only have a single container per pod and, in each case,
    it is ready. Thus, the overall status of the pod is `Running`. We can also see
    how many times each pod had to be restarted. In our case, we don't have any restarts.
  prefs: []
  type: TYPE_NORMAL
- en: Self-healing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s test the magic powers of the self-healing `ReplicaSet` by randomly
    killing one of its pods and observing what happens. Let''s delete the first pod
    from the previous list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s list all the pods again. We expect to see only two pods, *right*?
    Wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71366fbf-4638-484c-b2f6-dab56b41f5f4.png)'
  prefs: []
  type: TYPE_IMG
- en: List of pods after killing a pod of the ReplicaSet
  prefs: []
  type: TYPE_NORMAL
- en: 'OK; evidently, the second pod in the list has been recreated, as we can see
    from the `AGE` column. This is auto-healing in action. Let''s see what we discover
    if we describe the ReplicaSet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f1f58fd-fe0d-46a6-8cdb-df8bf3bfc159.png)'
  prefs: []
  type: TYPE_IMG
- en: Describe the ReplicaSet
  prefs: []
  type: TYPE_NORMAL
- en: And indeed, we find an entry under `Events` that tells us that the `ReplicaSet` created
    the new pod called `rs-web-q6cr7`.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes takes the single-responsibility principle very seriously. All Kubernetes
    objects are designed to do one thing and one thing only, and they are designed
    to do this one thing very well. In this regard, we have to understand Kubernetes
    **ReplicaSets** and **Deployments**. A **ReplicaSet**, as we have learned, is
    responsible for achieving and reconciling the desired state of an application
    service. This means that the **ReplicaSet** manages a set of pods.
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment** augments a **ReplicaSet** by providing rolling updates and rollback
    functionality on top of it. In Docker Swarm, the Swarm service incorporates the
    functionality of both **ReplicaSet** and **Deployment.** In this regard, SwarmKit
    is much more monolithic than Kubernetes. The following diagram shows the relationship
    of a **Deployment** to a **ReplicaSet**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6de18ec-b3ad-45c3-bc88-555afcaea7dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes deployment
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, the **ReplicaSet** is defining and governing a set
    of identical pods. The main characteristics of the **ReplicaSet** are that it
    is **self-healing**, **scalable**, and always does its best to reconcile the **desired**
    **state**. Kubernetes Deployment, in turn, adds rolling updates and rollback functionality
    to this. In this regard, a deployment is really a wrapper object to a ReplicaSet.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn more about rolling updates and rollbacks in the [Chapter 16](cdf765aa-eed9-4d88-a452-4ba817bc81dd.xhtml),
    *Deploying, Updating, and Securing an Application with Kubernetes*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn more about Kubernetes services and how they
    enable service discovery and routing.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The moment we start to work with applications consisting of more than one application
    service, we need service discovery. The following diagram illustrates this problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/559a71f8-789e-4f46-ac6f-5366093fdbea.png)'
  prefs: []
  type: TYPE_IMG
- en: Service discovery
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, we have a **Web API** service that needs access to
    three other services: **payments**, **shipping**, and **ordering**. The **Web
    API** should never have to care about how and where to find those three services.
    In the API code, we just want to use the name of the service we want to reach
    and its port number. A sample would be the following URL `http://payments:3000`,
    which is used to access an instance of the payments service.
  prefs: []
  type: TYPE_NORMAL
- en: In Kubernetes, the payments application service is represented by a ReplicaSet
    of pods. Due to the nature of highly distributed systems, we cannot assume that
    pods have stable endpoints. A pod can come and go on a whim. But that's a problem
    if we need to access the corresponding application service from an internal or
    external client. If we cannot rely on pod endpoints being stable, *what else can
    we do?*
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where Kubernetes services come into play. They are meant to provide
    stable endpoints to ReplicaSets or Deployments, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09cdd19a-e492-480c-9df1-f65ffc600f9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes service providing stable endpoints to clients
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, in the center, we can see such a Kubernetes **Service**.
    It provides a **reliable** cluster-wide **IP** address, also called a **virtual
    IP** (**VIP**), as well as a **reliable** **Port** that's unique in the whole
    cluster. The pods that the Kubernetes service is proxying are determined by the
    **Selector** defined in the service specification. Selectors are always based
    on labels. Every Kubernetes object can have zero to many labels assigned to it.
    In our case, the **Selector** is **app=web**; that is, all pods that have a label
    called app with a value of web are proxied.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn more about context-based routing and how
    Kubernetes alleviates this task.
  prefs: []
  type: TYPE_NORMAL
- en: Context-based routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often, we want to configure context-based routing for our Kubernetes cluster.
    Kubernetes offers us various ways to do this. The preferred and most scalable
    way at this time is to use an **IngressController**. The following diagram tries
    to illustrate how this ingress controller works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc913d65-7d30-4339-b876-5d1c0201e3f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Context-based routing using a Kubernetes ingress controller
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, we can see how context-based (or layer 7) routing
    works when using an **IngressController**, such as Nginx. Here, we have the deployment
    of an application service called **web**. All the pods of this application service
    have the following label: **app=web**. Then, we have a Kubernetes service called
    **web** that provides a stable endpoint to those pods. The service has a (virtual)
    **IP** of `52.14.0.13` and exposes port `30044`. That is, if a request comes to
    any node of the Kubernetes cluster for the name **web** and port `30044`, then
    it is forwarded to this service. The service then load-balances the request to
    one of the pods.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, so good, *but how is an ingress request from a client to the *`http[s]://example.com/web`* URL routed
    to our web service?* First, we have to define routing from a context-based request
    to a corresponding `<service name>/<port> request`. This is done through an **Ingress** object:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Ingress** object, we define the **Host** and **Path** as the source
    and the (service) name, and the port as the target. When this Ingress object is
    created by the Kubernetes API server, then a process that runs as a sidecar in `IngressController`
    picks this change up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The process modifies the configuration the configuration file of the Nginx reverse
    proxy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By adding the new route, Nginx is then asked to reload its configuration and
    thus will be able to correctly route any incoming requests to `http[s]://example.com/web`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we are going to compare Docker SwarmKit with Kubernetes
    by contrasting some of the main resources of each orchestration engine.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing SwarmKit with Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have learned a lot of details about the most important resources
    in Kubernetes, it is helpful to compare the two orchestrators, SwarmKit and Kubernetes,
    by matching important resources. Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **SwarmKit** | **Kubernetes** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Swarm | Cluster | Set of servers/nodes managed by the respective orchestrator.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Node | Cluster member | Single host (physical or virtual) that''s a member
    of the Swarm/cluster. |'
  prefs: []
  type: TYPE_TB
- en: '| Manager node | Master | Node managing the Swarm/cluster. This is the control
    plane. |'
  prefs: []
  type: TYPE_TB
- en: '| Worker node | Node | Member of the Swarm/cluster running application workload.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Container | Container** | An instance of a container image running on a node.
    **Note: In a Kubernetes cluster, we cannot run a container directly. |'
  prefs: []
  type: TYPE_TB
- en: '| Task | Pod | An instance of a service (Swarm) or ReplicaSet (Kubernetes)
    running on a node. A task manages a single container while a Pod contains one
    to many containers that all share the same network namespace. |'
  prefs: []
  type: TYPE_TB
- en: '| Service | ReplicaSet | Defines and reconciles the desired state of an application
    service consisting of multiple instances. |'
  prefs: []
  type: TYPE_TB
- en: '| Service | Deployment | A deployment is a ReplicaSet augmented with rolling
    updates and rollback capabilities. |'
  prefs: []
  type: TYPE_TB
- en: '| Routing Mesh | Service | The Swarm Routing Mesh provides L4 routing and load
    balancing using IPVS. A Kubernetes service is an abstraction that defines a logical
    set of pods and a policy that can be used to access them. It is a stable endpoint
    for a set of pods. |'
  prefs: []
  type: TYPE_TB
- en: '| Stack | Stack ** | The definition of an application consisting of multiple
    (Swarm) services.**Note: While stacks are not native to Kubernetes, Docker''s
    tool, Docker for Desktop, will translate them for deployment onto a Kubernetes
    cluster. |'
  prefs: []
  type: TYPE_TB
- en: '| Network | Network policy | Swarm **software-defined networks** (**SDNs**)
    are used to firewall containers. Kubernetes only defines a single flat network.
    Every pod can reach every other pod and/or node, unless network policies are explicitly
    defined to constrain inter-pod communication. |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the basics of Kubernetes. We took an overview
    of its architecture and introduced the main resources that are used to define
    and run applications in a Kubernetes cluster. We also introduced Minikube and
    Kubernetes support in Docker for Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to deploy an application into a Kubernetes
    cluster. Then, we're going to be updating one of the services of this application
    using a zero downtime strategy. Finally, we're going to instrument application
    services running in Kubernetes with sensitive data using secrets. Stay tuned!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please answer the following questions to assess your learning progress:'
  prefs: []
  type: TYPE_NORMAL
- en: Explain in a few short sentences what the role of a Kubernetes master is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List the elements that need to be present on each Kubernetes (worker) node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We cannot run individual containers in a Kubernetes cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Yes
  prefs: []
  type: TYPE_NORMAL
- en: B. No
  prefs: []
  type: TYPE_NORMAL
- en: Explain the reason why the containers in a pod can use `localhost` to communicate
    with each other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the so-called pause container in a pod?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Bob tells you "Our application consists of three Docker images: `web`, `inventory`,
    and `db`. Since we can run multiple containers in a Kubernetes pod, we are going
    to deploy all the services of our application in a single pod." List three to
    four reasons why this is a bad idea.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain in your own words why we need Kubernetes ReplicaSets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under which circumstances do we need Kubernetes deployments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List at least three types of Kubernetes service and explain their purposes and
    their differences.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a list of articles that contain more detailed information about the
    various topics that we discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Raft Consensus Algorithm: [https://raft.github.io/](https://raft.github.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Compose and Kubernetes with Docker for Desktop: [https://dockr.ly/2G8Iqb9](https://dockr.ly/2G8Iqb9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes Documentation: [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
