["```\nd.vm.box = \"ubuntu/vivid64\"\n\n```", "```\nvagrant up cd swarm-master swarm-node-1 swarm-node-2\n\n```", "```\nvagrant ssh cd\nansible-playbook /vagrant/ansible/swarm.yml \\\n -i /vagrant/ansible/hosts/prod\n\n```", "```\n- hosts: swarm\n remote_user: vagrant\n serial: 1\n sudo: yes\n vars:\n - debian_version: vivid\n - docker_cfg_dest: /lib/systemd/system/docker.service\n - is_systemd: true\n roles:\n - common\n - docker\n - consul\n - swarm\n - registrator\n\n```", "```\n[swarm]\n10.100.192.200 swarm_master=true consul_extra=\"-server -bootstrap-expect 1\" docker_cfg=docker-swarm-master.service\n10.100.192.20[1:2] swarm_master_ip=10.100.192.200 consul_server_ip=10.100.192.200 docker_cfg=docker-swarm-node.service\n\n```", "```\nExecStart=/usr/bin/docker daemon -H fd:// \\\n --insecure-registry 10.100.198.200:5000 \\\n --registry-mirror=http://10.100.198.200:5001 \\\n --cluster-store=consul://{{ ip }}:8500/swarm \\\n --cluster-advertise={{ ip }}:2375 {{ docker_extra }}\n\n```", "```\nExecStart=/usr/bin/docker daemon -H fd:// \\\n -H tcp://0.0.0.0:2375 \\\n -H unix:///var/run/docker.sock \\\n --insecure-registry 10.100.198.200:5000 \\\n --registry-mirror=http://10.100.198.200:5001 \\\n --cluster-store=consul://{{ ip }}:8500/swarm \\\n --cluster-advertise={{ ip }}:2375 {{ docker_extra }}\n\n```", "```\n- name: Swarm node is running\n  docker:\n    name: swarm-node\n    image: swarm\n    command: join --advertise={{ ip }}:2375 consul://{{ ip }}:8500/swarm\n    env:\n      SERVICE_NAME: swarm-node\n  when: not swarm_master is defined\n  tags: [swarm]\n\n- name: Swarm master is running\n  docker:\n    name: swarm-master\n    image: swarm\n    ports: 2375:2375\n    command: manage consul://{{ ip }}:8500/swarm\n    env:\n      SERVICE_NAME: swarm-master\n  when: swarm_master is defined\n  tags: [swarm]\n```", "```\nexport DOCKER_HOST=tcp://10.100.192.200:2375\n\n```", "```\ndocker info\n\n```", "```\nContainers: 4\nImages: 4\nRole: primary\nStrategy: spread\nFilters: health, port, dependency, affinity, constraint\nNodes: 2\n swarm-node-1: 10.100.192.201:2375\n └ Status: Healthy\n └ Containers: 3\n └ Reserved CPUs: 0 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n └ Labels: executiondriver=native-0.2, kernelversion=3.19.0-42-generic, operatingsystem=Ubuntu 15.04, storagedriver=devicemapper\n swarm-node-2: 10.100.192.202:2375\n └ Status: Healthy\n └ Containers: 3\n └ Reserved CPUs: 0 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n └ Labels: executiondriver=native-0.2, kernelversion=3.19.0-42-generic, operatingsystem=Ubuntu 15.04, storagedriver=devicemapper\nCPUs: 2\nTotal Memory: 3.07 GiB\nName: b358fe59b011\n\n```", "```\ndocker images\n\ndocker ps -a\n\n```", "```\nREPOSITORY               TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nswarm                    latest              a9975e2cc0a3        4 weeks ago         17.15 MB\ngliderlabs/registrator   latest              d44d11afc6cc        4 months ago        20.93 MB\n...\nCONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                           NAMES\na2c7d156c99d        gliderlabs/registrator   \"/bin/registrator -ip\"   2 hours ago         Up 2 hours                                          swarm-node-2/registrator\ne9b034aa3fc0        swarm                    \"/swarm join --advert\"   2 hours ago         Up 2 hours          2375/tcp                        swarm-node-2/swarm-node\na685cdb09814        gliderlabs/registrator   \"/bin/registrator -ip\"   2 hours ago         Up 2 hours                                          swarm-node-1/registrator\n5991e9bd2a40        swarm                    \"/swarm join --advert\"   2 hours ago         Up 2 hours          2375/tcp                        swarm-node-1/swarm-node\n\n```", "```\ngit clone https://github.com/vfarcic/books-ms.git\n\ncd ~/books-ms\n\n```", "```\ndocker-compose up -d app\n\n```", "```\ndocker ps --filter name=books --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nswarm-node-2/booksms_app_1\nswarm-node-2/booksms_app_1/booksms_db_1,swarm-node-2/booksms_app_1/db,swarm-node-2/booksms_app_1/db_1,swarm-node-2/booksms_db_1\n\n```", "```\ndocker-compose stop\n\ndocker-compose rm -f\n\n```", "```\napp:\n image: 10.100.198.200:5000/books-ms\n ports:\n - 8080\n\ndb:\n image: mongo\n\n```", "```\ndocker-compose -f docker-compose-no-links.yml up -d db app\n\ndocker ps --filter name=books --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nswarm-node-1/booksms_db_1\nswarm-node-2/booksms_app_1\n\n```", "```\ndocker-compose -f docker-compose-no-links.yml sto\np\n\ndocker-compose -f docker-compose-no-links.yml rm -f\n\n```", "```\ndocker network create my-network\n\ndocker network ls\n\n```", "```\nNETWORK ID          NAME                  DRIVER\n5fc39aac18bf        swarm-node-2/host     host\naa2c17ae2039        swarm-node-2/bridge   bridge\n267230c8d144        my-network            overlay\nbfc2a0b1694b        swarm-node-2/none     null\nb0b1aa45c937        swarm-node-1/none     null\n613fc0ba5811        swarm-node-1/host     host\n74786f8b833f        swarm-node-1/bridge   bridge\n\n```", "```\ndocker run -d --name books-ms-db \\\n --net my-network \\\n mongo\n\ndocker run -d --name books-ms \\\n --net my-network \\\n -e DB_HOST=books-ms-db \\\n -p 8080 \\\n 10.100.198.200:5000/books-ms\n\n```", "```\ndocker exec -it books-ms bash\n\ncat /etc/hosts\n\nexit\n\n```", "```\n10.0.0.2    3166318f0f9c\n127.0.0.1   localhost\n::1 localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n10.0.0.2    books-ms-db\n10.0.0.2    books-ms-db.my-network\n\n```", "```\ndocker exec -it books-ms env\n\n```", "```\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=eb3443a66355\nDB_HOST=books-ms-db\nDB_DBNAME=books\nDB_COLLECTION=books\nHOME=/root\n\n```", "```\ndocker rm -f books-ms books-ms-db\n\ndocker network rm my-network\n\n```", "```\napp:\n image: 10.100.198.200:5000/books-ms\n ports:\n - 8080\n net: books-ms\n environment:\n - SERVICE_NAME=books-ms\n - DB_HOST=books-ms-db\n\ndb:\n container_name: books-ms-db\n image: mongo\n net: books-ms\n environment:\n - SERVICE_NAME=books-ms-db\n\n```", "```\ndocker network create books-ms\n\ndocker-compose -f docker-compose-swarm.yml \\\n up -d db app\n\n```", "```\nCreating booksms_app_1\nCreating books-ms-db\n\n```", "```\ndocker network ls\n\n```", "```\nNETWORK ID          NAME                           DRIVER\n6e5f816d4800        swarm-node-1/host              host\naa1ccdaefd70        swarm-node-2/docker_gwbridge   bridge\ncd8b1c3d9be5        swarm-node-2/none              null\nebcc040e5c0c        swarm-node-1/bridge            bridge\n6768bad8b390        swarm-node-1/docker_gwbridge   bridge\n8ebdbd3de5a6        swarm-node-1/none              null\n58a585d09bbc        books-ms                       overlay\nde4925ea50d1        swarm-node-2/bridge            bridge\n2b003ff6e5da        swarm-node-2/host              host\n\n```", "```\ndocker exec -it booksms_app_1 bash\n\ncat /etc/hosts\n\nexit\n\n```", "```\n10.0.0.2    3166318f0f9c\n127.0.0.1   localhost\n::1 localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n10.0.0.3    books-ms-db\n10.0.0.3    books-ms-db.my-network\n\n```", "```\ndocker ps --filter name=books --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nswarm-node-2/books-ms-db\nswarm-node-1/booksms_app_1\n\n```", "```\nADDRESS=`curl \\\n    10.100.192.200:8500/v1/catalog/service/books-ms \\\n    | jq -r '.[0].ServiceAddress + \":\" + (.[0].ServicePort | tostring)'`\n\ncurl -H 'Content-Type: application/json' -X PUT -d \\\n  '{\"_id\": 2,\n  \"title\": \"My Second Book\",\n  \"author\": \"John Doe\",\n  \"description\": \"A bit better book\"}' \\\n  $ADDRESS/api/v1/books | jq '.'\n\ncurl $ADDRESS/api/v1/books | jq '.'\nThe output of the last command is as follows.\n[\n  {\n    \"author\": \"John Doe\",\n    \"title\": \"My Second Book\",\n    \"_id\": 2\n  }\n]\n```", "```\ndocker-compose -f docker-compose-swarm.yml \\\n scale app=3\n\ndocker ps --filter name=books \\\n --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nswarm-node-2/booksms_app_3\nswarm-node-1/booksms_app_2\nswarm-node-2/books-ms-db\nswarm-node-1/booksms_app_1\n\n```", "```\ncurl -X PUT -d 3 \\\n 10.100.192.200:8500/v1/kv/books-ms/instances\nServices can be as easily descaled. For example, the traffic might drop, later during the day, and we might want to free resources for other services.\ndocker-compose -f docker-compose-swarm.yml \\\n scale app=1\n\ncurl -X PUT -d 1 \\\n 10.100.192.200:8500/v1/kv/books-ms/instances\n\ndocker ps --filter name=books \\\n --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nswarm-node-2/books-ms-db\nswarm-node-1/booksms_app_1\n\n```", "```\ndocker-compose stop\n\ndocker-compose rm -f\n\n```", "```\ndocker info\n\n```", "```\n...\nNodes: 2\n swarm-node-1: 10.100.192.201:2375\n └ Containers: 2\n └ Reserved CPUs: 0 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n...\n swarm-node-2: 10.100.192.202:2375\n └ Containers: 2\n └ Reserved CPUs: 0 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n...\n\n```", "```\ndocker run -d --cpu-shares 1 --name db1 mongo\n\ndocker info\n\n```", "```\n...\nNodes: 2\n swarm-node-1: 10.100.192.201:2375\n └ Status: Healthy\n └ Containers: 3\n └ Reserved CPUs: 1 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n...\n swarm-node-2: 10.100.192.202:2375\n └ Status: Healthy\n └ Containers: 2\n └ Reserved CPUs: 0 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n...\n\n```", "```\ndocker run -d --cpu-shares 1 --name db2 mongo\n\ndocker info\n\n```", "```\n...\nNodes: 2\n swarm-node-1: 10.100.192.201:2375\n └ Status: Healthy\n └ Containers: 3\n └ Reserved CPUs: 1 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n...\n swarm-node-2: 10.100.192.202:2375\n └ Status: Healthy\n └ Containers: 3\n └ Reserved CPUs: 1 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n...\n\n```", "```\ndocker ps --filter name=db --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nswarm-node-2/db2\nswarm-node-1/db1\n\n```", "```\ndocker run -d --cpu-shares 1 --name db3 mongo\n\n```", "```\nError response from daemon: no resources available to schedule container\n\n```", "```\ndocker rm -f db1 db2\n\n```", "```\ndocker run -d --cpu-shares 1 -m 1g --name db1 mongo\n\ndocker info\n\n```", "```\n...\nNodes: 2\n swarm-node-1: 10.100.192.201:2375\n └ Status: Healthy\n └ Containers: 3\n └ Reserved CPUs: 1 / 1\n └ Reserved Memory: 1 GiB / 1.535 GiB\n...\n swarm-node-2: 10.100.192.202:2375\n └ Status: Healthy\n └ Containers: 2\n └ Reserved CPUs: 0 / 1\n └ Reserved Memory: 0 B / 1.535 GiB\n...\n\n```", "```\ndocker run -d -m 100m --name db2 mongo\n\ndocker run -d -m 100m --name db3 mongo\n\ndocker run -d -m 100m --name db4 mongo\n\ndocker info\n\n```", "```\n...\nNodes: 2\n swarm-node-1: 10.100.192.201:2375\n └ Status: Healthy\n └ Containers: 3\n └ Reserved CPUs: 1 / 1\n └ Reserved Memory: 1 GiB / 1.535 GiB\n...\n swarm-node-2: 10.100.192.202:2375\n └ Status: Healthy\n └ Containers: 5\n └ Reserved CPUs: 0 / 1\n └ Reserved Memory: 300 MiB / 1.535 GiB\n...\n\n```", "```\ndocker ps --filter name=db --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nswarm-node-2/db4\nswarm-node-2/db3\nswarm-node-2/db2\nswarm-node-1/db1\n\n```", "```\ndocker rm -f db1 db2 db3 db4\n\n```", "```\nansible-playbook /vagrant/ansible/jenkins-node-swarm.yml \\\n -i /vagrant/ansible/hosts/prod\n\nansible-playbook /vagrant/ansible/jenkins.yml \\\n -c local\n\n```", "```\nnode(\"cd\") {\n def serviceName = \"books-ms\"\n def prodIp = \"10.100.192.200\" // Modified\n def proxyIp = \"10.100.192.200\" // Modified\n def proxyNode = \"swarm-master\"\n def registryIpPort = \"10.100.198.200:5000\"\n def swarmPlaybook = \"swarm.yml\" // Modified\n def proxyPlaybook = \"swarm-proxy.yml\" // Added\n def instances = 1 // Added\n\n def flow = load \"/data/scripts/workflow-util.groovy\"\n\n git url: \"https://github.com/vfarcic/${serviceName}.git\"\n flow.provision(swarmPlaybook) // Modified\n flow.provision(proxyPlaybook) // Added\n flow.buildTests(serviceName, registryIpPort)\n flow.runTests(serviceName, \"tests\", \"\")\n flow.buildService(serviceName, registryIpPort)\n\n def currentColor = flow.getCurrentColor(serviceName, prodIp)\n def nextColor = flow.getNextColor(currentColor)\n\n flow.deploySwarm(serviceName, prodIp, nextColor, instances) // Modified\n flow.runBGPreIntegrationTests(serviceName, prodIp, nextColor)\n flow.updateBGProxy(serviceName, proxyNode, nextColor)\n flow.runBGPostIntegrationTests(serviceName, prodIp, proxyIp, proxyNode, currentColor, nextColor)\n}\n\n```", "```\ndef deploySwarm(serviceName, swarmIp, color, instances) {\n stage \"Deploy\"\n withEnv([\"DOCKER_HOST=tcp://${swarmIp}:2375\"]) {\n sh \"docker-compose pull app-${color}\"\n try {\n sh \"docker network create ${serviceName}\"\n } catch (e) {}\n sh \"docker-compose -f docker-compose-swarm.yml \\\n -p ${serviceName} up -d db\"\n sh \"docker-compose -f docker-compose-swarm.yml \\\n -p ${serviceName} rm -f app-${color}\"\n sh \"docker-compose -f docker-compose-swarm.yml \\\n -p ${serviceName} scale app-${color}=${instances}\"\n }\n putInstances(serviceName, swarmIp, instances)\n}\n\n```", "```\nexport DOCKER_HOST=tcp://10.100.192.200:2375\n\ndocker ps --filter name=books --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nswarm-node-2/booksms_app-blue_1\nswarm-node-1/books-ms-db\n\n```", "```\ncurl swarm-master:8500/v1/catalog/service/books-ms-blue \\\n | jq '.'\n\ncurl swarm-master:8500/v1/kv/books-ms/color?raw\n\ncurl swarm-master:8500/v1/kv/books-ms/instances?raw\n\n```", "```\n[\n  {\n    \"ServicePort\": 32768,\n    \"ServiceAddress\": \"10.100.192.202\",\n    \"ServiceTags\": null,\n    \"ServiceName\": \"books-ms-blue\",\n    \"ServiceID\": \"swarm-node-2:booksms_app-blue_1:8080\",\n    \"Address\": \"10.100.192.202\",\n    \"Node\": \"swarm-node-2\"\n  }\n]\n...\nblue\n...\n1\n```", "```\ncurl -H 'Content-Type: application/json' -X PUT -d \\\n '{\"_id\": 1,\n \"title\": \"My First Book\",\n \"author\": \"John Doe\",\n \"description\": \"Not a very good book\"}' \\\n swarm-master/api/v1/books | jq '.'\n\ncurl swarm-master/api/v1/books | jq '.'\n\n```", "```\ndocker ps -a --filter name=books --format \"table {{.Names}}\\t{{.Status}}\"\n\n```", "```\nNAMES                              STATUS\nswarm-node-2/booksms_app-green_1   Up 7 minutes\nswarm-node-2/booksms_app-blue_1    Exited (137) 15 seconds ago\nswarm-node-1/books-ms-db           Up 10 hours\n\n```", "```\ncurl swarm-master:8500/v1/catalog/service/books-ms-green \\\n | jq '.'\n\n```", "```\n[\n  {\n    \"ModifyIndex\": 3314,\n    \"CreateIndex\": 3314,\n    \"Node\": \"swarm-node-2\",\n    \"Address\": \"10.100.192.202\",\n    \"ServiceID\": \"swarm-node-2:booksms_app-green_1:8080\",\n    \"ServiceName\": \"books-ms-green\",\n    \"ServiceTags\": [],\n    \"ServiceAddress\": \"10.100.192.202\",\n    \"ServicePort\": 32770,\n    \"ServiceEnableTagOverride\": false\n  }\n]\n```", "```\ncurl swarm-master/api/v1/books | jq '.'\n\n```", "```\nexit\n\nvagrant destroy -f\n\n```"]