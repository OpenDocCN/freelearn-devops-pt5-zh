- en: Chapter 2. The Emergence of Software-defined Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will discuss the emergence of open protocols that have helped **Software-defined
    Networking** (**SDN**) solutions. It will focus specifically on the Nuage VSP
    SDN solution, which is an SDN platform from Nokia, formerly known as Alcatel-Lucent,
    which allows users to create a virtual overlay network. We will look at some of
    the scaling benefits and features Nuage VSP provides over and above the out of
    the box experience from AWS and OpenStack. It will articulate why these networking
    solutions have become a necessity for notoriously complex private cloud networks,
    by simplifying networking using software constructs while aiding automation of
    the network by providing a set of programmable APIs and SDKs.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will focus on the following topics in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Why SDN solutions are necessary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the Nuage SDN solution works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The integration of OpenStack with the Nuage VSP Platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nuage VSP Software-defined object model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the Nuage VSP can support Greenfield and Brownfield Projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nuage VSP Multicast Support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why SDN solutions are necessary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SDN solutions are necessary as they allow businesses to simplify their network
    operations, and it also allows them to automate network functions. It fits well
    with the DevOps initiative and the need to make network operations more agile.
  prefs: []
  type: TYPE_NORMAL
- en: A byproduct of SDN is that it allows network functions to become as accurate
    and repeatable as creating a new virtual machine on a hypervisor.
  prefs: []
  type: TYPE_NORMAL
- en: SDN solutions from vendors are made up of a centralized controller that is implemented
    to become the nerve center of the network. SDN controllers rely heavily on **Open
    vSwitch database** (**OVSDB**), which is a programmable, open standard schema
    which utilizes the OpenFlow protocol, which integrates directly with switches
    to route packets in the network as well as applying ACL policies to particular
    virtual machines, physical servers, or containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'As long as a switch can talk OVSDB and OpenFlow, then it can integrate with
    common SDN controllers. There are now a wide variety of SDN controllers currently
    on the market:'
  prefs: []
  type: TYPE_NORMAL
- en: CISCO ACI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.cisco.com/c/en/us/solutions/data-center-virtualization/application-centric-infrastructure/index.html](http://www.cisco.com/c/en/us/solutions/data-center-virtualization/application-centric-infrastructure/index.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Nokia Nuage VSP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.nuagenetworks.net/products/virtualized-services-platform/](http://www.nuagenetworks.net/products/virtualized-services-platform/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Juniper Contrail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.juniper.net/uk/en/products-services/sdn/contrail/](http://www.juniper.net/uk/en/products-services/sdn/contrail/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: VMWare NSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.vmware.com/products/nsx.html](http://www.vmware.com/products/nsx.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open Daylight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.opendaylight.org/](https://www.opendaylight.org/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: MidoNet Midokura
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.midokura.com/midonet/](http://www.midokura.com/midonet/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'SDN controllers do the following for enterprises:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide an easy-to-use solution for network functions, with the SDN controllers
    abstracting the network functions from hardware devices and instead expose GUIs
    and API endpoints that can be programmatically altered to control network operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SDN controllers lend themselves to DevOps models such as self-service network
    operations for developers, which allow Continuous Delivery of network functions
    and increased collaboration between teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide increased visibility of network configuration as it is described in
    easy-to-understand software constructs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide better integration with infrastructure through the use of open networking
    standards, so this gives companies choice over which switch vendors they integrate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow the same set of policies in a private datacenter to be applied across
    private and public clouds. This makes the aim of distributing different workloads
    into different cloud providers a reality and makes security governance of hybrid
    clouds much easier for security teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The emergence of AWS undoubtedly influenced network vendors to adapt their solutions
    to be less hardware centric and focus more on a software approach to networking,
    which, in turn, has simplified network operations and made networking easier to
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: Vendors have now adopted and implemented open protocols to allow centralized
    management of network functions and allowed network operators to manage the whole
    network using an SDN controller.
  prefs: []
  type: TYPE_NORMAL
- en: Software-defined networking is being used by businesses to maximize the performance
    of their network and create repeatable workflows for network operations in the
    same way hypervisor virtualization helped infrastructure teams automate server
    provisioning and management.
  prefs: []
  type: TYPE_NORMAL
- en: However, based on my personal experience, software-defined networking in the
    private cloud is being used to run OpenStack at massive scale. The continued uptake
    on OpenStack projects by many major companies, such as Walmart, Ebay, PayPal,
    Go Daddy, and my company Paddy Power Betfair, means that companies are turning
    to SDN solutions to allow them to meet necessary scaling targets and simplifying
    network operations.
  prefs: []
  type: TYPE_NORMAL
- en: How the Nuage SDN solution works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the market-leading SDN solutions is the Nuage SDN (VSP) platform, which
    is Nokia's SDN solution (formerly Alcatel Lucent), so we will explore how this
    market-leading SDN solution works.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSP platform comprises three main components—the VSD, VSC, and VRS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtualized Service Directory** (**VSD**): This is the policy engine for
    the overall platform, and it provides a graphical user interface and exposes a
    restful API for network engineers to use and interact with network functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtualized Service Controller** (**VSC**): This is the SDN controller for
    Nuage, and it uses OpenFlow and OVSDB management protocol to distribute switching
    and routing information to hypervisors, bare metal servers, or containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Routing and Switching** (**VRS**): This is Nuage''s customized version
    of Open vSwitch, which is installed on compute nodes (hypervisors).![How the Nuage
    SDN solution works](img/B05559_02_01.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nuage VSP can integrate with OpenStack, CloudStack, and VMWare private cloud
    platforms or public cloud solutions such as AWS. Nuage creates an overlay network
    that has the ability to secure virtual machines, bare metal servers, and containers
    in an isolated tenant network, so it is highly flexible depending on what kind
    of workload needs to be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual machines, of course, are deployed as a virtual abstraction on top of
    physical hypervisors, where containers can run on top of virtual machines or physical
    servers. Containers are used to isolate particular processes or resources using
    Linux namespaces and control groups, which divide resources at operating system
    level, so the networking requirements for virtual machines and containers are
    very different. Containers are used because they are portable and can run on either
    virtual machines or bare metal (physical) servers. Another advantage is they are
    encapsulated by the Linux operating system and multiple containers can run on
    a virtual machine or physical server.
  prefs: []
  type: TYPE_NORMAL
- en: Nuage also supports multicast between tenant networks by routing multicast traffic
    via hypervisors on the underlay network via hypervisors or physical machines and
    flooding it to specific virtual or physical machines within a tenant network,
    which has been somewhat of an issue with cloud solutions, but Nuage has a solution
    to that particular problem.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSPs SDN Controller (VSC) integrates with switches using OVSDB via
    hardware VTEPs exposed by switches at the access or leaf layer of the network.
    VSCs are deployed redundantly and communicate with each other with **Multipath
    Border Gate Protocol** (**MP-BGP**) and program VXLAN encapsulation to the switches
    as they are hardware VTEP aware.
  prefs: []
  type: TYPE_NORMAL
- en: The VSD component is set up in an active cluster containing three VSD servers,
    which are load balanced using a viable load balancer solution. The load balancer
    provides a **Virtual IP** (**VIP**), which load balances three VSDs servers in
    round-robin mode.
  prefs: []
  type: TYPE_NORMAL
- en: The VSDs VIP exposes the graphical user interface for the Nuage VSP platform
    and API entry point to programmatically control the overlay network using REST
    calls. Any operation carried out on the Nuage VSD GUI initiates a REST API call
    to the VSD, so both the GUI and the REST API are carrying out identical programmatic
    calls and all operations are exposed via the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSD governs layer 2 and 3 domains, zones, subnets, and ACL policies.
    The VSD communicates policy information to the VSC using **Extensible Messaging
    and Presence Protocol** (**XMPP**), and the VSC uses OpenFlow to push down flow
    information to a customized version of Open vSwitch (VRS) on the compute hosts
    (hypervisor) to create firewall policy for applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSP allows bare metal servers to be connected to overlay networks
    too by pushing down OpenFlow Data to the **Virtualized Services Gateway** (**VSG**)
    and leaking routing information into the overlay network.
  prefs: []
  type: TYPE_NORMAL
- en: 'An overview of the VSP platform protocol integration can be found in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage SDN solution works](img/B05559_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Integrating OpenStack with the Nuage VSP platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Private data center networks can be very complex, so using vanilla OpenStack
    neutron to meet all use cases may not provide all the features that are required.
    It is important to note that the features in neutron are maturing very quickly
    with every new OpenStack release, so neutron is likely as feature rich as dedicated
    SDN controllers in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Neutron lends itself to integration with SDN controllers by providing a REST
    API extension, so SDN controllers can easily be used to extend the base networking
    functions provided by neutron if required to provide a very rich set of networking
    features.
  prefs: []
  type: TYPE_NORMAL
- en: The use of SDN solutions have helped OpenStack to scale massively, as it moves
    the networking aspect of OpenStack away from the centralized layer 3 agent and
    instead requests are moved to the dedicated SDN controllers with distributed firewalling.
  prefs: []
  type: TYPE_NORMAL
- en: This means that one OpenStack cloud can potentially scale the amount of compute
    instances that are supported horizontally, without having to worry about bottlenecks
    or scaling issues associated with the current neutron network architecture.
  prefs: []
  type: TYPE_NORMAL
- en: OpenStack is one of the most popular private cloud solutions, and the Nuage
    VSP platform integrates with OpenStack using the Nuage plug-in. The Nuage plugin
    is installed on each of the **Highly Available** (**HA**) OpenStack controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Neutron ML2 and L3 agents are both switched off on the controllers in favor
    of the Nuage plugin. The following image shows the architecture for OpenStack
    neutrons SDN controller framework with SDN controllers communicating with OpenStack
    neutron via REST API calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating OpenStack with the Nuage VSP platform](img/B05559_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The VSD, which is the Nuage policy engine, integrates with OpenStack by setting
    up a net partition that can be used to map one Nuage VSP to an OpenStack cloud
    and communicates with neutron using REST API calls.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple instances of OpenStack can be mapped to a single Nuage VSP via the
    use of net partitions. Net partitions are a way of telling the Nuage VSP platform,
    which OpenStack instance to map its subnets to and wait for VPort commands to
    be issued, which signify that the OpenStack nova compute service, has provisioned
    a virtual machine instance that needs to be governed by Nuage ACL policies.
  prefs: []
  type: TYPE_NORMAL
- en: When Nuage VSP is integrated with OpenStack, OpenStack vendor installers need
    to either support Nuage natively or the installer will need to be customized slightly
    to install the Nuage plugin on OpenStack controllers. The Nuage version of OpenvSwitch
    (VRS) also needs to be installed on each compute node (hypervisor) that is deployed
    within an OpenStack cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Nuage plugin integrates with the OpenStack Controllers and KVM compute
    using the following workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating OpenStack with the Nuage VSP platform](img/B05559_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a neutron command is issued to OpenStack, the Nuage plugin uses **REST
    API** calls to communicate with the **Nuage** **VSD** to say that a new network
    has been created or a new VPort on that network has been created, this is possible
    due to neutrons SDN controller pluggable **REST API** architecture.
  prefs: []
  type: TYPE_NORMAL
- en: The **Nuage** **VSD** policy engine then communicates with the **VSC** to push
    flow data using XMPP. The **VSC** (SDN Controller) then administers flow data
    (OpenFlow) to the **Nuage VRS** (Open vSwitch), and the **Nuage VRS** secures
    OpenStack virtual machines or physical servers with the predefined firewall policies.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall policies can either be OpenStack Security Groups or Nuage ACL rules
    depending if OpenStack managed mode or Nuage VSD managed mode are selected.
  prefs: []
  type: TYPE_NORMAL
- en: Nuage or OpenStack managed networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Nuage OpenStack plugin can be used in two modes of operation to manage
    networks that are provisioned in OpenStack:'
  prefs: []
  type: TYPE_NORMAL
- en: Nuage VSD-managed mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack-managed mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuage VSD-managed mode allows Nuage to become the master of network provisioning;
    this allows Nuage VSP platform to provide a rich feature set to manage networks
    within an OpenStack environment. Network functions are provisioned directly via
    the VSD using the Nuage REST API by the GUI or direct API calls and mapped one-to-one
    with OpenStack subnets.
  prefs: []
  type: TYPE_NORMAL
- en: The alternative mode of operation is the OpenStack-managed mode, which requires
    no direct provisioning on VSD. All commands are issued via neutron; however, functionality
    is limited to the commands that OpenStack neutron supports.
  prefs: []
  type: TYPE_NORMAL
- en: All networks that are created in Nuage are replicated in OpenStack in a one-to-one
    mapping with the Nuage VSD being the master in VSD-managed mode, whereas OpenStack
    neutron is the master of configuration in OpenStack-managed mode.
  prefs: []
  type: TYPE_NORMAL
- en: In OpenStack-managed mode, all ACL rules are governed by OpenStack Security
    Groups, whereas in VSD-managed mode, ACL rules are held instead of the Nuage VSD
    with security groups disabled.
  prefs: []
  type: TYPE_NORMAL
- en: Nuage integrates with OpenStack by setting up a net partition. Using net partitions,
    one Nuage VSP Platform can be mapped to multiple instances of OpenStack. Net partitions
    are a way of mapping an OpenStack cloud to a Nuage organization entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Nuage VSP platform with an organization named `Company`, whenever
    a subnet is created under the organization, it is subsequently assigned a unique
    `nuage_subnet_uuid` on creation. In order to map the organization and Nuage subnet
    to OpenStack neutron, the following command is issued:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a net partition has been established by the Nuage VSP Platform and OpenStack,
    the firewall policies are secured at the compute host (hypervisor) using the Nuage
    VRS. The following workflow is triggered when a new instance is created on a Nuage-managed
    subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nuage or OpenStack managed networks](img/B05559_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An instance is added to an OpenStack network and subnet owned by the Nuage VSP
    Platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A placeholder VPort is created (VM id, MAC) on **VSD** by the **Nuage Plugin**,
    within the requested layer 3 domain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nova service creates the **VM** on the **Hypervisor**. This is detected by **VRS**
    (VM id, MAC).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **VRS** queries **VSC**, the **VSC** then queries the **VSD** in order to
    retrieve the associated networking information from the placeholder VPort.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **VSD** matches the VM id, MAC against the VPort it created and associates
    **VM** with the correct network services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The policy is downloaded from the **VSD** through the **VSC** to the **VRS**
    using OpenFlow, and the required flows are dynamically created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Nuage VSP software-defined object model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Nuage creates the overlay network in software, it needs to have a simple
    object model to allow network operators to manage it. The Nuage VSP software-defined
    object model provides a graphical hierarchy of the network meaning that the structure
    of the overlay can be easily viewed and audited.
  prefs: []
  type: TYPE_NORMAL
- en: Object model overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Organization**: This governs all Layer 3 domains.![Object model overview](img/B05559_02_06.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 domain Template**: A layer 3 domain template is required before child
    layer 3 domains are created. The layer 3 domain template is used to govern overarching
    default policies that will be propagated to all child layer 3 domains. If a layer
    3 domain template is updated at template level, then the update will be implemented
    on all layer 3 domains that have been created underneath it immediately.![Object
    model overview](img/B05559_02_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 domain**: This can be used to segment different environments, so
    users cannot hop from subnets deployed under a layer 3 Test domain to an adjacent
    layer 3 Production domain.![Object model overview](img/B05559_02_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zones**: A zone segments firewall policies at application level, so each
    microservice application can have its own zone and associated Ingress and Egress
    policy per layer 3 domain.![Object model overview](img/B05559_02_09.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Layer 3 Subnet: This is where VMs or bare metal servers that are deployed to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, we see **Subnet Application1** and **Subnet Application2,**
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The hierarchy in Nuage VSD is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: One organization has been created named **Company**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two layer 3 domains named **Test** and **Production** have been created underneath
    the Company.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Test** layer 3 domain has a zone for **Application1** and **Application2**
    with 1 child subnet underneath the **Application1** and **Application2** zones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Production** layer 3 domain has a zone for **Application1** and **Application2**
    with 1 child subnet underneath the **Application1** only. **Application2** zone
    does not have a child subnet yet.![Object model overview](img/B05559_02_11.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For security and compliance purposes, demonstrating to security auditors segmentation
    between **Development** and **Production** environments is very important. Frequently,
    **Development** environments do not have the same stringent production controls
    applied to them. Production applications can be secured using the convention of
    least privilege possible, to minimize access and reduce the probability of a security
    breach.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSP Platform can set up segregation between environments using its
    layer 3 domain template construct. A domain template can be set up with a default
    **Deny All** policy at Ingress and Egress level. This is given the highest priority
    of all the policies and will explicitly drop all packets no matter the protocol
    for inbound and outbound connections, unless explicitly allowed by the policy
    for that specific application. The default **Deny All** is the bottom policy on
    the list of ACL rules applied to an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The explicit drop on **Egress Security Policy** domain template is shown as
    the **Bottom policy** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The contents of the **Egress Security Policy** are shown with the highest possible
    priority as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Likewise, the explicit drop on Ingress is applied to the domain template as
    the **Bottom policy**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While the explicit drop on the **Ingress Security Policy** on the domain template
    is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The default Ingress and Egress policies applied to the domain template **Company
    L3 Domain Template** are illustrated below, which shows the policy applied to
    all the child layer 3 domains, in this instance, **Production** and **Test**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The domain template **Company L3 Domain Template** is shown to be linked to
    the child layer 3 domains **Production** and **Test** showing the inherited Egress
    policy from the domain template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Likewise, the domain template **Company L3 Domain Template** is linked to the
    child layer 3 domains **Production** and **Test** showing the inherited Ingress
    policy from the domain template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is important to note that, as policies are pushed down to VRS using OpenFlow
    that ACL rules for Ingress and Egress in Nuage work on the principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Egress**: This is a packet flowing from VRS to the subnet or zone'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ingress**: This is a packet flowing from the subnet or zone to the VRS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example, an Egress ACL rule will specify that any Egress traffic coming
    from VRS from port `80` will be forwarded to **Subnet Application1**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, an Ingress ACL rule will specify that any Ingress traffic
    can leave **Subnet Application1** on port `80` and will be forwarded to VRS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If application owners work on the principle that their layer 3 subnet, where
    their application is deployed on, is always specified in an ACL rule as either
    the source or destination in their individual application policy, then ACL rules
    for an application will only exist in that self-contained policy. If this concept
    is adhered to, it allows ACL rules for each application to be encapsulated in
    separate policies, within a layer 3 domain, which, in turn, means that auditing
    them is much simpler for security teams. It also means that applications support
    least privilege, meaning only necessary ports are opened so applications can communicate,
    with an explicit drop applied to anything outside those rules.
  prefs: []
  type: TYPE_NORMAL
- en: Two policies are shown for two applications, **Application1** and **Application2**,
    which have separate policies for Ingress and Egress, with the **Default Ingress
    Policy** specifying the explicit drop all for any flows not explicitly allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Ingress Security Policies** are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Egress Security Policies** are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Nuage VSP Platform layer 3 domain templates allow a second level of segmentation
    using zones, so traditionally networks were split into three zones, where applications
    would be deployed in the following tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: Frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business Logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As microservice architectures have grown to prominence, each applications profile
    doesn't always fit into these three broad profiles. Sometimes, applications can
    be both a Frontend application and Business Logic too, so where would the microservice
    application be placed in the traditional three-tiered structure?
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the Frontend, Business Logic and Backend segregation policies that
    can be applied at zone level, meaningful microsegmentation of applications is
    possible between each subnet. So how does this translate to Nuage?
  prefs: []
  type: TYPE_NORMAL
- en: If an application wishes to talk to another application it will have an ACL
    rule that specifies Subnet to Zone communication for east to west communication
    between applications sitting on adjacent subnets in a layer 3 domain. Nuage allows
    this by allowing applications to talk Subnet to Zone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To allow this communication, **Application1** could have an ACL policy to allow
    **Application2** zone to allow traffic to flow into the subnet on port `22` allowing
    east to west communication, so no matter how many different subnets are used then
    **Application1** will always be allowed to communicate with any applications sitting
    under the **Application2** zone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In terms of security policies, this allows development and security teams to
    understand which applications are communicating with each other and the ports
    they are using by reviewing the application policy.
  prefs: []
  type: TYPE_NORMAL
- en: '![Object model overview](img/B05559_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How the Nuage VSP platform can support greenfield and brownfield projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overlay networks are typically set up as new network (greenfield) sites, but
    a completely new network in isolation is not useful, unless there is a planned
    big bang migration of all applications, which means migrating every application
    from the legacy network to the new network in a single migration.
  prefs: []
  type: TYPE_NORMAL
- en: If instead a staged application migration is chosen, where only a percentage
    of applications are migrated to the network, then the new overlay network will
    need to communicate with the legacy network and be required to operate in a brownfield
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: A brownfield setup normally means applications are migrated in stages to the
    new platform, as opposed to all in one go, which builds confidence in the new
    network and new technology associated with that network. When moving applications
    to the new platform, it will typically involve performance testing the migrated
    applications in the new network, prior to throttling live traffic away from the
    incumbent legacy network to the migrated application in the new overlay network.
  prefs: []
  type: TYPE_NORMAL
- en: A major requirement for a staged migration is connectivity back to the legacy
    network for application dependencies that are hosted there. This connectivity
    is necessary so migrated applications can operate effectively.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSP Platform uses its **Virtualized Service Gateway** (**VSG**) to
    provide the connectivity between the new overlay and legacy network. A pair of
    Nuage VSGs are connected redundantly in virtual chassis mode which connect to
    interfaces on routers sitting in the legacy network. VSG performs a route table
    lookup based on the destination IP of a packet coming in on its VLAN from the
    attached router interface; it then updates the destination MAC with the next hop
    address and forwards the packet on the corresponding VXLAN segment. All packets
    are routed from the legacy network to the VSG via an underlay network.
  prefs: []
  type: TYPE_NORMAL
- en: This bridges the new overlay network, and the legacy network with VXLAN terminated
    on VSG.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pair of active VSGs is shown below in Nuage VSD:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Nuage VSG allows communication with the legacy network by leaking routes
    to the overlay network. Each VSG will receive and advertise IPv4 routes using
    a BGP session, this BGP session will be established between VSG, VSC and leaf
    switch when using a leaf spine topology using iBGP.
  prefs: []
  type: TYPE_NORMAL
- en: The VSG must advertise its local system IP to legacy routers in the legacy network
    and all routes received from the native network will then be subsequently leaked
    from the native network via the underlay network into selected layer 3 domains
    in the overlay.
  prefs: []
  type: TYPE_NORMAL
- en: 'The setup required to leak routes in the Nuage VSP Platform is the creation
    of a **GRThubDomain** layer 3 domain. In this example, host interfaces are connected
    into the Frontend, Business Logic, and Backend routers in the legacy network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Nuage VSP platform then allows the newly created **GRThubDomain** to be
    associated with the **Production** or **Test** layer 3 domains by associating
    a leaking domain against them.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, **GRThubDomain** is associated with the **Production**
    layer 3 domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The leaking domain in the Nuage GUI is displayed using the following icon showing
    a leaking domain named **GRThubDomain**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Production domain with an associated leaking domain is shown in the Nuage
    GUI as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The association of a leaking domain allows the Nuage VSP Platform to leak routes
    into and from the legacy network through to the new overlay network, meaning applications
    in the overlay network can communicate with applications in the legacy network,
    so long as they have appropriate Ingress and Egress ACL policies specified.
  prefs: []
  type: TYPE_NORMAL
- en: The **Test** and **Production** layer 3 domains, as explained before, have a
    **Deny All** for Ingress and Egress as part of the **Company L3 Domain Template**.
    So although all routes are leaked into the overlay, they are dropped by the VRS
    unless explicitly stated otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSP platform has the ability to apply ACL rules to the routes leaked
    from the external legacy network by using a concept named **Network Macros**.
    In the Nuage VSP Platform, a network macro is simply a fancy name for an external
    network range.
  prefs: []
  type: TYPE_NORMAL
- en: If an application, **Application3** in this instance, resides in the legacy
    network, and its routing has already been exposed by the **GRThubDomain** leaking
    domain and leaked into the **Test** layer 3 domain, then a network macro can be
    set up to describe the range required and isolate connectivity to it using a Nuage
    ACL rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this instance, the network range `10.58.11.0/24` is where **Application3**
    resides is part of the Frontend range on the **GRThubdomain** that is leaked into
    the overlay network. The **Network Macros** for **Application3** as it would appear
    in Nuage is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An Egress ACL policy can then be configured to allow **Application1** to communicate
    with **Application3** by creating a Network Macros to a subnet ACL rule, which
    allows **Application3** **Network Macros** to connect to **Subnet Application1**
    on port `8080.`
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Egress Security Policy** to allow communication between **Application3**
    **Network Macros** and **Subnet Application1** on port `8080` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After creation, the ACL list is updated to show the new **Network Macro** ACL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This allows the Nuage VSP to lock down policy and the overlay network to only
    allow specific flow data from the legacy network in the same way it would control
    ACL policies between subnet or zones that resided within the same layer 3 domain.
    Network macros can also be used to route between multiple cloud technologies as
    well as different data centers, so they are a very powerful way of connecting
    networks and controlling policy between them.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple network macros can be grouped together into a network macro group,
    which allows multiple ranges to be controlled by one ACL rule. These are then
    exploded out at the OpenFlow level on VRS at the hypervisor. Nuage currently has
    a limit of 100 ACL rules per VPort in the 3.x release, so only 100 ACL rules can
    currently be applied to a single instance (virtual machine), so it is important
    to be careful when grouping **Network Macros**. This has been increased to 500
    ACL rules in the 4.x release of the Nuage platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a network macro group can be shown below and then the **Front
    End Services** **Network Macro Group** can be used in the Egress ACL rule as opposed
    to specifying individual policies for **Application3** and **Application4**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Egress Security Policy** to allow port `8080` connection between the
    **Front End Services** **Network Macro Group** and **Subnet Application1**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The applied ACL implementing the **Front End Services** network macro can be
    found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How the Nuage VSP platform can support greenfield and brownfield projects](img/B05559_02_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Nuage VSP multicast support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Nuage VSP Platform has the ability to route multicast between the following
    Nuage VSD entities:'
  prefs: []
  type: TYPE_NORMAL
- en: Layer 2 and 3 domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPorts attached to VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multicast can be routed into the overlay network, which is a unique feature
    of the Nuage VSP platform. Multicast traffic is routed into the overlay network
    in Nuage by configuring dedicated VLANs on the underlay layer 2 network, which
    are attached to compute nodes. This allows the compute (hypervisors) on the underlay
    network to use the dedicated VLANs, which are ip'd on a per rack basis, to transmit
    and receive multicast traffic.
  prefs: []
  type: TYPE_NORMAL
- en: To route multicast traffic across the underlay, the Nuage VRS will duplicate
    the multicast packets and leak it into the overlay network in a controlled fashion.
    This is so the overlay network is not flooded with unnecessary multicast traffic,
    which can cause performance implications to the overlay network if it was not
    controlled. This makes the Nuage multicast setup highly scalable as it only directs
    multicast traffic to where it needs to in the overlay network.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSP uses a dedicated VLAN for multicast send and VLAN for multicast
    receive on the compute nodes (hypervisor). Each of these VLANs can be configured
    on each hypervisor in the event applications that have a multicast requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the hypervisors is allocated a VLAN and unique IP address for multicast
    send and receive, depending on the rack the hypervisors are provisioned on, so
    they use the associated switches.
  prefs: []
  type: TYPE_NORMAL
- en: Port Channel Maps are the entity used in Nuage VSD to leak multicast from the
    underlay network to the overlay network. Port Channel Maps are only required if
    multicast needs to be routed subnet to subnet in the overlay network. If multicast
    is required in the same subnet, then a **Port Channel Maps** is not required and
    multicast will work within an isolated layer 3 subnet without having to route
    the traffic via the VLANs on the hypervisors.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, a **Multicast Channel Map** is used to create **Multicast
    Ranges** for **Application2**, which broadcasts multicast. This will route multicast
    from **Subnet Application2**, via the underlay VLAN on the hypervisor, to the
    Nuage VRS and then flood it into **Subnet Application1**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Multicast Channel Maps** icon is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Nuage VSP multicast support](img/B05559_02_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following scenario describes the workflow an application will go through
    to route multicast traffic from one layer 3 subnet to another in the overlay.
  prefs: []
  type: TYPE_NORMAL
- en: '**Application1** will be deployed under a layer 3 domain, under its own zone,
    in a /26 microsubnet and on that subnet two virtual machines will be attached
    to two VPorts. Against a VPort in Nuage, a virtual machine can be set up as a
    sender or receiver of multicast or both:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Nuage VSP multicast support](img/B05559_02_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Application1** in this instance is the sender of multicast and wants to send
    a multicast stream to **Application2**, which is deployed under a layer 3 domain,
    under its own zone, in a /26 microsubnet, and on that subnet, one virtual machines
    will be attached to one VPort.'
  prefs: []
  type: TYPE_NORMAL
- en: So a Port Channel Map will need to be set up on **Application1** by associating
    it with each of the **Application1** VPorts, which lets Nuage know that **Application1**
    is the multicast sender.
  prefs: []
  type: TYPE_NORMAL
- en: '**Application2** will have its VPort configured with a Port Channel Map setup,
    so it can receive multicast.'
  prefs: []
  type: TYPE_NORMAL
- en: When Application1s two virtual machines broadcast multicast traffic, Nuage now
    knows to route the multicast traffic on the matching multicast range specified
    on the Port Channel Map to the hypervisor that **Application1** is deployed on.
  prefs: []
  type: TYPE_NORMAL
- en: Nuage will transmit multicast across the hypervisor layer 2 domain using the
    sender VLAN.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the receiver VLANs on each hypervisor's receiver IPs will then pick
    up the transmission of multicast.
  prefs: []
  type: TYPE_NORMAL
- en: If a Port Channel Map is specified on any of the virtual machines on the hypervisor,
    matching the **Multicast Ranges** configured, which **Application2** does, then
    the Nuage VRS will duplicate the multicast packets, leaking them into the overlay
    network to **Application2**.
  prefs: []
  type: TYPE_NORMAL
- en: This is how Nuage leaks multicast traffic to the overlay network, using the
    underlay network and sender and receiver VLANs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered some of the advanced networking features provided
    by the Nuage VSP SDN solution and also touched upon some of the other SDN solutions
    that are available on the market. Having read this chapter, you should now be
    familiar with the Nuage SDN controller and understand the rich set of features
    an SDN controller can bring to OpenStack and the private cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Given the programmability SDN controllers, AWS, and OpenStack solutions bring,
    we will now shift focus and look at the cultural changes that are necessary in
    organizations to make the most of these fantastic technologies. Implementing new
    technologies without changing operational models is not enough, people and process
    are key to a successful DevOps model.
  prefs: []
  type: TYPE_NORMAL
- en: The role of the network engineer is undergoing its biggest evolution in years,
    so businesses cannot simply implement new technology and expect faster delivery
    without dealing with people and cultural issues. CTOs have a responsibility to
    set their networking teams up for success by implementing DevOps transformations
    that include network functions, and network teams also need to learn new skills
    such as coding to push forward automation using grass root initiatives.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Useful links on Nuage Networks practical use cases are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=_ZfFbhmiNYo](https://www.youtube.com/watch?v=_ZfFbhmiNYo)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=aKa2idHhk94](https://www.youtube.com/watch?v=aKa2idHhk94)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=OjXII11hYwc](https://www.youtube.com/watch?v=OjXII11hYwc)'
  prefs: []
  type: TYPE_NORMAL
