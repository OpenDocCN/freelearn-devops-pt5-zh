- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira Service Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira was originally designed to be a tool to help developers track software
    bugs, and, over time, it evolved into a general-purpose, task-tracking tool that
    can be used by all organizations, thanks to its flexibility and extensibility.
    For this reason, many organizations started to use Jira as a service desk tool
    by leveraging its powerful workflow feature, and this has gained tremendous popularity.
    Recognizing this unique use case and its potential, a new product called Jira
    Service Management, from Atlassian, was born. Jira Service Management is a purpose-built
    solution that sits on top of the Jira platform, transforming it into a fully-fledged
    service desk solution with unique capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Jira Service Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Jira Service Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Jira Service Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service desk user types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issue types and request types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service-level agreements** (**SLAs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing requests with queues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating knowledge base articles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Jira Service Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we explored Jira’s core features, including workflows,
    custom fields, and screens. It is not hard to see how you can implement Jira Software
    as a service desk by creating new custom fields, screens, and workflow schemes.
    While Jira is certainly capable of handling the requirements of a service desk,
    there are still several things to be desired.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the user interface is often too complicated and confusing for business
    users to simply create a support ticket. Despite our best efforts, there are still
    way too many options on the screen, most of which are not useful in a service
    desk environment. Another example is the lack of ability to set up any sort of
    SLA to ensure a consistent quality of service.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where Jira Service Management comes in. It addresses all the out-of-the-box
    shortcomings of Jira by providing a clean, intuitive, and user-friendly interface
    for both the end customers and the support team. It also provides many features
    that you can expect from a service desk solution. As shown in the following screenshot,
    Jira Service Management lets you serve your customers in four easy steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Jira Service Management'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.1_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Jira Service Management
  prefs: []
  type: TYPE_NORMAL
- en: As shown here, Jira Service Management simplifies the process of raising a service
    request to fulfill that request by providing a unique experience for users of
    different personas.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jira Service Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways you can get Jira Service Management. The first option is
    to install it in an existing Jira Core or Jira Software instance that you possess.
    This is the easiest approach as it does not require you to provision additional
    hardware and lets you leverage what you already have. It also makes it easy for
    your agents to collaborate with other teams to help resolve customer requests.
    These are the steps you should follow to install Jira Service Management:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as a Jira administrator user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Applications** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Try it for free** button under **Jira Service Management** from
    the right-hand panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Trying and installing Jira Service Management'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.2_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – Trying and installing Jira Service Management
  prefs: []
  type: TYPE_NORMAL
- en: Accept the user agreement and follow the onscreen instructions to complete the
    installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second option is to install Jira Service Management as a standalone application.
    Use this option if you do not have a Jira Software instance already running, or
    if you would like to keep your software issue tracking system and support system
    separate. Users from both instances can still collaborate to resolve customer
    requests as in option one, with a few extra steps to set up. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an application link between the two Jira instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate both Jira instances with the same user repository, such as LDAP, to
    ensure that you have the same set of user details in both systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To install Jira Service Management as a standalone application, you can refer
    to [*Chapter 1*](B18644_01.xhtml#_idTextAnchor014), *Getting Started with Jira
    Data Center*, as the installation steps are mostly identical.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to deciding which option to pick, there are several factors you
    should consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost**: If you want to deploy a standalone instance of Jira Service Management,
    there will be the initial cost of hardware and software, as well as maintenance
    after the system goes live.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complexity**: This can go either way. On the one hand, a standalone deployment
    adds complexity as you have more servers to look after, but on the other hand,
    having a combined deployment, you are adding complexity to the configurations
    of your system. So, you will need to balance this by looking at what in-house
    expertise is available. Do you have a team that is handling all the infrastructure
    and can take on more servers? Do you have an experienced Jira administrator that
    can look after a combined Jira instance?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: When Jira Service Management is deployed standalone, it is separate
    from your other Jira instances. This makes accidental data leaks due to misconfigurations
    and other mistakes less likely. This is especially important if your service management
    projects are publicly accessible and your software projects are internal only;
    you will need to be extra careful to ensure data security if both public and private
    projects are in the same instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: This is another factor that can easily be overlooked. If you
    deploy Jira Service Management into the same instance as Jira Software, you need
    to make sure the added load from your service management projects can be handled
    by your current hardware, especially if you allow public access to your projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance**: As you start using Jira Service Management, you will likely
    make customizations and add third-party apps, which can add complexity at upgrade
    times. If Jira Service Management is a standalone deployment, then any customizations
    will be localized to that deployment only. But if you have a combined deployment,
    you will need to ensure all customizations and apps are compatible with the version
    you want to upgrade to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, there are many factors to consider here when deciding on your
    deployment model. The good news is that you can always merge or split your deployment
    later so that you are not stuck with your decision forever. However, this can
    be a very involved process, especially for large deployments, so it is recommended
    to plan out your vision for how you will use Jira in the long term.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Jira Service Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start using Jira Service Management, it is important to understand
    and familiarize ourselves with the key terminology, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Agents**: These are members of your service support team that will be working
    on customer requests. They are users that can perform actions such as editing,
    assigning, and closing requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customers**: These are the end users that will be raising support requests
    at your service desk. These can be customers of your product or colleagues from
    other departments needing IT support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer portal**: This is the main landing page for your customers. It is
    a simple, clean, and easy-to-use front interface for your service desk, without
    all the extra noise from the standard Jira interface, as shown in the following
    screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Customer portal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.3_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Customer portal
  prefs: []
  type: TYPE_NORMAL
- en: '**Queues**: These are like Jira filters that show you a subset of issues that
    meet a certain criterion. Service desk agents use queues to prioritize and pick
    out requests to work on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Requests**: These are what your end users (not agents), such as customers,
    submit to Jira Service Management. Under the hood, they are just normal Jira issues.
    However, using the term **request** is less confusing in the context of a service
    desk environment. In short, requests are what your customers see, and issues are
    what agents see.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service desks**: These are where customers will raise their requests. Under
    the hood, a service desk is a Jira project of the Service Desk project type. Please
    refer to [*Chapter 2*](B18644_02.xhtml#_idTextAnchor037), *Using Jira for Business
    Projects*, for more information on project types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, when customers interact with requests,
    the user interface is very different from what agents will see. It is a much simpler
    UI that only displays key information about the request, such as its description
    and status. Customers cannot make changes to the request details after the request
    is submitted, and can only add new comments or attachments to the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Request view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.4_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – Request view
  prefs: []
  type: TYPE_NORMAL
- en: 'The key information regarding service desks is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Request type**: This represents the different types of requests customers
    can make. These can be anything, including a problem report, help request, or
    general inquiry. When you create a new request type, Jira creates a new issue
    type behind the scenes. One major feature of the request type is that it allows
    you to specify a user-friendly name for it. While the actual issue type is called
    a **Problem Report**, you can rename it and display it as **Submit a problem report**
    instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service desk**: This is what agents will be working from. Each service desk
    has a front, customer-facing portal. Behind the scenes, a service desk is a Jira
    project controlled by Jira permissions, workflows, and other schemes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SLA**: An SLA defines the quality of service that is being guaranteed to
    your customers. In Jira Service Management, SLAs are measured in time, such as
    response time and the overall time taken to resolve issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new service desk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step to start working with Jira Service Management is to create a
    new service desk project. Since, under the hood, a service desk is a Jira project
    with a new user interface, the easiest option is to create a new project using
    one of the Service project templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new service desk, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Create project** option from the **Projects** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a project template, such as **IT Service Desk**, from the **Service project
    type** box, and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the name and key for the new service desk project and click **Submit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Creating a service desk project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.5_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.5 – Creating a service desk project
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can use an existing Jira project and convert it into a service
    desk. All you have to do is update the project’s type by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page for the project you want to turn into a
    service desk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Details** option from the left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Project type** option to **Service** and click on **Save details**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Changing the project type'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.6_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – Changing the project type
  prefs: []
  type: TYPE_NORMAL
- en: 'Features that are exclusive to a project type will be lost when you switch
    a project’s type. Once your service desk has been created, you will be taken to
    your service desk user interface, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Jira Service Management UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.7_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – Jira Service Management UI
  prefs: []
  type: TYPE_NORMAL
- en: Every service desk has two interfaces. One will be used by you, as the admin,
    and members of your support team, known as agents. The second interface is called
    the customer portal, which is what customers will see and use to create requests
    and interact with agents. As you make configuration changes for your service desk,
    you can always preview the change by clicking on **Customer channels** and then
    the **Visit the portal** link from the left navigation panel, which will show
    you what the customer portal will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The URL shown under the customer portal is what your customers should use to
    access your service desk.
  prefs: []
  type: TYPE_NORMAL
- en: Branding your customer portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can brand your customer portal for your service desk with the following
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Help center name**: This is the overall name for your help center. Think
    of this as the name for your Jira instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer portal name**: This is the name of a specific service desk portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer portal introduction text**: This is the welcome text that will be
    displayed for a specific service desk portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer portal logo**: This is the logo for a specific service desk portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates each of these items on a sample customer
    portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Customized portal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.8_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.8 – Customized portal
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure a specific customer portal’s branding, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page of the service desk you want to brand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Portal settings** from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and welcome text in the **Name** and **Introduction** text fields,
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Use a custom logo for this Customer Portal** option and upload a
    logo for your customer portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The configuration settings look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Portal configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.9_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.9 – Portal configuration
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to create a service desk and brand its customer portal,
    let’s take a look at the different user types Jira Service Management has.
  prefs: []
  type: TYPE_NORMAL
- en: Service desk user types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira Service Management introduces several new user types. Under the hood,
    these user types are mapped to new project roles created by Jira Service Management
    when it is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Agent**: These are members of the service desk team that work on requests.
    Agents are added to the **Service Desk Team** project role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaborator**: These are the members from other business functions; they
    are not members of your service desk team. However, they can help solve customer
    problems. A good example would be product domain experts or engineers. Collaborators
    are added to the **Service Desk Team** project role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer**: These are end users that will be submitting requests through
    your help desk portal. Customers are added to the **Service Desk Customers** project
    role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization**: These are groups of customers. For example, an organization
    can represent a company, and all employees of that company will be part of the
    organization. Requests can be limited to being only sharable among customers of
    the same organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an agent to a service desk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Agents are Jira users who will be working on customer requests in Jira Service
    Management. These are usually members of your support team. Agents consume the
    Jira Service Management licenses. To add an agent to a service desk, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the service desk you want to add an agent to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Invite team** option in the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search and add users you want to invite as an agent (member) of your service
    desk team. You can select and add more than one agent. Click on the **Invite x
    people** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Adding an agent'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.10_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.10 – Adding an agent
  prefs: []
  type: TYPE_NORMAL
- en: When you’re adding an agent to a service desk, you can select an existing user
    in Jira, which will grant the user access to the service desk. If the user you
    want to add as an agent does not exist, you can also create a new Jira account
    and add them as an agent in a single step by typing in the user’s email address.
    An email will be sent out with a link to set their password. New user accounts
    created in this way will be automatically added to the **jira-servicedesk-users**
    group and **Service Desk Team** project role. Refer to [*Chapter 9*](B18644_09.xhtml#_idTextAnchor256),
    *Securing Jira*, for more information on groups and roles.
  prefs: []
  type: TYPE_NORMAL
- en: Managing service desk customers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Customers are end users who will be creating requests through your customer
    portal. You can manually invite customers or allow them to sign up themselves.
    Jira Service Management requires customers to have an account to submit requests.
    The good news is that customers do not consume the Jira Service Management licenses,
    so you can have as many customers as you want.
  prefs: []
  type: TYPE_NORMAL
- en: When a customer raises a request with your service desk, the request may contain
    sensitive information that is specific to the customer. Your service desk may
    also serve customers from different organizations. Therefore, you need to manage
    how requests and their associated data are shared and accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to decide who can be customers of your service desk, and
    also how requests from one customer can be shared with another:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project administrator page for the service desk where you want
    to manage customer permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Customer permissions** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose who can raise requests in your service desk as customers under the **Who
    can raise requests?** section. By default, anyone with an account can raise requests,
    but you can narrow it down to specific users that are added to your service desk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose how requests can be shared under the **Who can customers share requests
    with?** section. Usually, you only want customers to be able to share request
    information within their own organizations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have narrowed your customer’s permissions to only allow specific customers
    to raise requests at your service desk, you will need to add/invite them. To invite
    a customer to a service desk, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the service desk where you want to add a customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Customers** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add customers** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the email addresses of customers to invite and click on the **Add** button,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Adding customers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.11_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.11 – Adding customers
  prefs: []
  type: TYPE_NORMAL
- en: Emails will be sent out to customers with details on how to access the customer
    portal and steps to create an account if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: If your service desk serves customers from multiple organizations, you can create
    these organizations and add customers to them. By having customers grouped in
    their own organizations, you can control how requests can be shared among different
    customers.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a collaborator to a service desk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Collaborators are Jira users who are not part of your support team (not agents)
    but have expert knowledge and understanding in the domain area that can assist
    agents in diagnosing and solving customer requests. In Jira Service Management,
    collaborators are users in the **Service Desk Team** project role, but not in
    the **jira-servicedesk-users** group, and adding a user as a collaborator is an
    easy way to grant that user access to your service desk project. Collaborators
    do not consume Jira Service Management licenses.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a collaborator to your service desk, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project administrator page for the service desk you want to add
    a collaborator to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Users and roles** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add users to a role** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for and select the users to add, choose the **Service Desk Team** role,
    and click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When making a user a collaborator, you are simply giving the user permission
    to access your service desk so that they can view, comment, and add attachments
    to the request.
  prefs: []
  type: TYPE_NORMAL
- en: Issue types and request types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira uses issue types to define the purpose of issues, while Jira Service Management
    uses request types for the same purpose. Behind the scenes, each request type
    is mapped to an issue type. The one key difference between the two is that a request
    type is what is shown to the customers, and often has a more descriptive name.
    For example, an issue type is called an **Incident**, and the corresponding request
    type will be called a **Report System Outage**. You can think of request types
    as issue types with a more informative display name. As we will see later in this
    section, another key feature of request types is that you can organize them into
    groups to help your users find what they need.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up request types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new request type for your service desk, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page for the service desk where you want to create
    a new request type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Request Types** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the group this request type should belong to from the left. We will talk
    about groups later in this section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the request type. You can be as descriptive as possible here
    so that your customers can easily understand its purpose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the image under **Icon** to select a new icon for the request type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the issue type that the request type is mapped to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an optional description. This description will be displayed underneath
    the request name to help your customer decide what type of request to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Create request type** button to create the new request type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Create request type'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.12_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.12 – Create request type
  prefs: []
  type: TYPE_NORMAL
- en: You can reorder the request types by dragging them up and down the list. The
    order you set in the list will be reflected on the customer portal. Make sure
    you put some thought into this so that the list flows logically. For example,
    you can order them alphabetically or by placing the most common request types
    at the top.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing request types into groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the number of request types grows, you can group similar request types into
    groups. Therefore, when customers visit the portal, all the request types will
    be organized logically, making navigation much easier. For example, as shown in
    the following screenshot of a customer portal, we have six request type groups,
    where five come with Jira Service Management’s project templates; the sixth, **Sample
    Request Group**, is custom. When clicking on **Sample Request Group**, we also
    have the three custom request types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Custom request type and group'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.13_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.13 – Custom request type and group
  prefs: []
  type: TYPE_NORMAL
- en: As we saw earlier in this section, a request type can be added to one or more
    groups. You can select one of the existing groups, or create a new group, by simply
    typing in the new group’s name. When a request type belongs to two or more groups,
    it will be displayed when each of the groups is selected in the portal.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up fields for request type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira Service Management lets you set up different field layouts for each request
    type. The important thing to note here is that, when you are setting up fields
    for Jira Service Management, you are not creating new custom fields (as you would
    in Jira Software). You are simply adding and removing existing fields in the request
    form when customers create a new request. You can think of this as adding fields
    to screens. If you want to add a field that does not exist yet, you will have
    to create a new custom field first, as described in [*Chapter 5*](B18644_05.xhtml#_idTextAnchor119),
    *Field Management*, and then make it available in the request form.
  prefs: []
  type: TYPE_NORMAL
- en: Just as with request types, Jira Service Management allows you to provide a
    custom display name to the field, independent of the actual field’s name. This
    means that the field can be more informative when displayed to customers. For
    example, for the Jira **Summary** field, you can give it a display name of **What
    is the problem you are having?**. As the display name is independent of the field’s
    name, your existing filters and search queries will continue to work as-is.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up field layouts for a request type, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page for the service desk you want to set up
    field layouts for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Request Types** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Edit fields** link for the request type you want to set up fields
    for. This will list all the fields that are currently displayed when customers
    create a new request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Adding a field to the request form'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.14_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.14 – Adding a field to the request form
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add a field** button and select an existing field (both system
    and custom) to add to the request type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the field’s **Display name** to change what customers will see when
    the field is displayed. This does not change the field’s actual name in Jira –
    it only makes the display more user-friendly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the field’s mandatory requirement by clicking on the **Required** column.
    Note that you cannot change this value if it is grayed out. An example of this
    is the **Summary** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have set up your field layout for the request type, you can click
    on the **View this request form** link at the top to see a preview of the result.
    As shown in the following screenshot, we added the **Due Date** field to the form,
    but it is now displayed as **When do you need this by?**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.15 – The field displayed in the request form'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.15_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.15 – The field displayed in the request form
  prefs: []
  type: TYPE_NORMAL
- en: One thing to keep in mind is that this field layout is specific to each request
    type, so if you have multiple request types that share the same field layout,
    you will need to configure each individually.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a workflow for a request type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as with fields, you can also control how workflow statuses are displayed
    in Jira Service Management. Note that you cannot change the actual workflow, but
    you can make the workflow less confusing to your customers so that they know exactly
    how their requests are progressing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the workflow for a request type, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page for the service desk you want to set up
    a workflow for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Request types** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit fields** link for the request type you want to set up a
    workflow for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Workflow Statuses** tab. This will list all the workflow statuses
    that are available in the workflow, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Customizing the workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.16_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.16 – Customizing the workflow
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the actual Jira workflow status names
    are listed in the left-hand column. For each of the statuses, you can choose to
    give it a different display name that will be shown to customers.
  prefs: []
  type: TYPE_NORMAL
- en: For example, **In Progress** is a normal Jira workflow status, and represents
    that the request is currently with a support agent. We can change it to **Under
    investigation**, and this is what will be displayed when a customer is viewing
    the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You are not changing the workflow itself. You are simply making it more user-friendly
    for your customers.
  prefs: []
  type: TYPE_NORMAL
- en: Service-level agreement (SLA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An SLA defines the agreement between the service provider (your organization)
    and the end user (your customer) in terms of the aspects of the service provided,
    such as its scope, quality, or turnaround time.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of a support service, an SLA will define different response times
    for different types of support requests. For example, severity 1 requests will
    have a response time of 1 hour, while severity 2 requests will have a response
    time of 4 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Jira Service Management lets you define SLA requirements based on response time.
    You can set up the rules on how response time will be measured, and the goals
    for each rule.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an SLA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jira Service Management‘s SLA is divided into two components: the time measurement
    and goals to achieve. Time can be measured for a variety of purposes. Common examples
    include overall time taken for request resolution and response time to customer
    requests. To set up an SLA metric, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page for the service desk you want to set up
    the SLA on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **SLAs** option from the left-hand panel and then click on the **Create
    SLA** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For any SLA, you will need to define when the clock will start counting and
    when it will stop counting, with an option to pause during the process. Jira provides
    many options for choosing when to start and stop the clock. Most common options
    include when a request enters or leaves a workflow status; other options include
    when a value is set on a field, such as assignee or resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example would be for Jira Service Management to start counting as
    soon as the request is created. Every time an agent requests further information
    from the customer, the count will be paused until the customer responds. Once
    the request is finally closed off, the count will be stopped. The following steps
    show how to set up an SLA time measurement for a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: For the **Start** column, we will select the **Issue Created** option, indicating
    that it can start counting as soon as the request is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the **Pause on** column, we will select the **Status: Waiting for customer**
    option, indicating that the counting can be paused when the request enters the
    **Waiting for customer** workflow status.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the **Stop** column, we will select the **Entered Status: Canceled**, **Entered
    Status: Closed**, and **Resolution: Set** options, indicating that the counting
    will be stopped once the request is canceled, closed, or a resolution is set.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, for each of the three columns, you can
    select more than one condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.17 – SLA example 1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.17_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.17 – SLA example 1
  prefs: []
  type: TYPE_NORMAL
- en: 'This allows you to set up multiple entry points to start and stop time. An
    example of this usage would be to measure response time. For example, perhaps
    you need to guarantee that an agent will respond to a new request within an hour.
    If the request is sent back to the customer for further information, a response
    time of 1 hour is also required as soon as the customer updates the request with
    the requested information. The following points show how to set up the time measurement
    for this SLA:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the **Start** column, we will select both the **Issue Create** and **Entered
    Status: In Progress** options. Therefore, we will start counting when the issue
    is first created, and also when it is put back for our agents to work on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the **Stop** column, we will select both the **Entered Status: Waiting
    for Info** and **Entered Status: Closed** options. Counting will stop when an
    agent sends the request back to the customer for more information or when it is
    closed for completion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The difference between the two examples here is that, in the second example,
    we do not pause time counting when the request enters the **Waiting for customer**
    status. Instead, we stop counting completely. This means that when the request
    enters the **Waiting for customer** status, the current counting cycle ends, and
    when the request enters the **In Progress** status, a new counting cycle will
    begin, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.18 – SLA example 2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.18_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.18 – SLA example 2
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have defined how time should be measured, the next step is to set up
    the SLA goals. The SLA goals define the amount of time allowed for each of the
    scenarios we have just set up. If we take the aforementioned response time example,
    we may set up our goals like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.19 – SLA goals'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.19_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.19 – SLA goals
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we have defined that for requests whose priority has been set
    to **Highest**, the response time will be 1 hour (**1h**); **High** and **Medium**
    requests will have a response time of 4 and 8 hours, respectively. Everything
    else will be responded to within 12 hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are several components when it comes to defining an SLA
    goal, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Issues**: These are the issues/requests that will have the goal applied to
    them. Use JQL to narrow down the selection of issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Goal**: This is the time value for the goal. You can use the standard Jira
    time notation here, where 3h means 3 hours, 45m means 45 minutes, and 2h30m means
    2 hours and 30 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calendar**: These define the working days and hours the SLA will be applied
    to. For example, **24/7 Calendar** means that time will be counted every hour
    of every day. As we will see later, you can create your own custom calendars to
    define your working days, hours, and even holidays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When defining SLA criteria, we will need to use JQL. Just like doing an advanced
    search, Jira Service Management provides syntax autocomplete to help us validate
    our queries, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.20 – SLA goal criteria'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.20_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.20 – SLA goal criteria
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how to create and configure calendars for an SLA.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up custom calendars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen, when setting up an SLA, you can select a calendar that defines
    the working days and hours, which can be counted toward the goal. Jira Service
    Management comes with **Default 24/7 calendar** and **Sample 9-5 calendar**, which
    will only count the time between 9 A.M. and 5 P.M. from Monday to Friday.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create custom calendars so that they include different working hours,
    time zones, and holidays. To create a custom calendar for your service desk, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page for the service desk you want to add a calendar
    for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **SLAs** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Calendar** option, and then click on the **Add calendar** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and description for the new calendar and configure the options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Jira Service Management lets you configure your calendar with the following
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time zone**: This sets the time zone that will be used for the calendar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Working days**: This sets the days that can be counted toward the SLA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Working hours**: These are the hours of each working day that can be included
    in the SLA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Holidays**: This adds holidays, such as Christmas, so that they’re excluded
    from the SLA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, we have set up our calendar so that we
    have a working time between 9 A.M. and 5 P.M., Tuesday to Friday. This means that
    Monday, Saturday, and Sunday are excluded when calculating SLA metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.21 – SLA calendar working days'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.21_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.21 – SLA calendar working days
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also added Christmas Day and New Year’s Day as holidays so that the
    SLA will not be applied on those days:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.22 – SLA calendar holidays'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.22_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.22 – SLA calendar holidays
  prefs: []
  type: TYPE_NORMAL
- en: When adding holidays, you can check the **Repeat yearly** option if the holiday
    will always fall on the same day every year, such as Christmas Day, so that you
    do not need to manually add them each year.
  prefs: []
  type: TYPE_NORMAL
- en: Managing requests with queues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Queues are lists of requests with predefined criteria for agents to work through.
    You can think of them as Jira filters. They help you and your teams organize incoming
    requests into more manageable groups so that you can prioritize them. Jira Service
    Management uses Jira’s search mechanism to configure queues. Refer to [*Chapter
    10*](B18644_10.xhtml#_idTextAnchor292), *Searching, Reporting, and Analysis*,
    for more details on Jira search options.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new queue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you first create a service desk, several default queues are created automatically
    for you. This includes an **Assigned to me** queue that lists all unresolved requests
    that are assigned to the currently logged-in user and a queue for each request
    type. You, as the service desk administrator, can create new queues for your team.
    To create a new queue, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the service desk you want to add a queue for. Note that queues are
    not managed in the project settings console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Queues** option from the left-hand panel and click on the **New
    queue** option from the **Switch Queues** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the queue. It should reflect its purpose and the types of requests
    that will be in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the UI controls to create the search criteria. If you are familiar with
    JQL or need to use exclusion logic in your query, you can click on the **Advanced**
    link and use JQL directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the fields that will be displayed when the queue is showing the issue
    list. Click on the **More** option to find more fields to add. You can also drag
    the fields left and right to rearrange them. You can select the fields that will
    display the most useful information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Create** button to create the queue, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.23 – Creating a new queue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.23_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.23 – Creating a new queue
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, when you make changes to your search criteria
    and field selection, there is a preview area at the bottom that will show you
    the result of your search and the field layout.
  prefs: []
  type: TYPE_NORMAL
- en: Creating knowledge base articles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your team works diligently to solve problems for your customers, nuggets
    of knowledge will start to accumulate over time. These include things such as
    common questions customers face, and the steps taken to troubleshoot them. Jira
    Service Management allows you to extract this information and create a knowledge
    base, which helps customers find solutions themselves. Out of the box, Jira Service
    Management only supports Atlassian Confluence for knowledge base creation, but
    it is possible to use other tools via third-party add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: 'To integrate Jira Service Management with Confluence, you will have to create
    an application link between Jira and Confluence. If you have already done this,
    feel free to skip to the next section. To create an application link for Confluence,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Applications** tab and the **Application links** option from the
    left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create link** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Atlassian product** option, enter the fully qualified URL to your
    Confluence instance, and click on the **Continue** button, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.24 – Creating an application link with Confluence'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.24_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.24 – Creating an application link with Confluence
  prefs: []
  type: TYPE_NORMAL
- en: Follow the onscreen wizard to complete the linking process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the application link has been created with Confluence, we can use it for
    Jira Service Management. Each service desk will need to be individually integrated
    with a Confluence space. To set up a Confluence knowledge base for a service desk,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page of the service desk you want to set up a
    Confluence knowledge base for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Knowledge base** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Link to a Confluence space** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the linked Confluence space (it may be named something other than Confluence)
    from the **Application** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Confluence space where the knowledge base article will be created.
    If you do not have a space already, click on the **Create a knowledge base space**
    link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Link** button to complete the integration setup, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.25 – Adding a knowledge base'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.25_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.25 – Adding a knowledge base
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can link one service desk to one Confluence space.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the integration is in place, when an agent views a request, the **create
    an article** option will become available. Clicking on that will allow the agent
    to create a new knowledge base article in the preconfigured Confluence space,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.26 – Creating a knowledge base article'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.26_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.26 – Creating a knowledge base article
  prefs: []
  type: TYPE_NORMAL
- en: 'From the customer’s perspective, a new search box will be available on the
    customer portal (for a service desk, with the knowledge base feature enabled).
    Customers will be able to search to see whether any information is already available
    concerning their problems. As shown in the following screenshot, when searching
    for **File**, the service desk returns a knowledge article from past requests.
    If this is what the customer is looking for, it will save valuable time for both
    the customer and the agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.27 – Searching for a knowledge base article'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.27_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.27 – Searching for a knowledge base article
  prefs: []
  type: TYPE_NORMAL
- en: You can further fine-tune this by selectively enabling the request types that
    should have a knowledge base enabled – for example, you may only want to enable
    Support or Inquiry request types but not Incidents. In the next section, we will
    look at how you can automate certain tasks for your service desk.
  prefs: []
  type: TYPE_NORMAL
- en: Process automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running a service desk, many mundane and repetitive tasks can end up wasting
    a lot of your team’s time. For example, after a request has been closed, if the
    customer subsequently adds a comment, the request needs to be reopened, so it
    will be placed back into the queue for agents to work on again. Normally, this
    would require either an agent to manually reopen the request, or you, as the Jira
    administrator, to configure the workflow used by your service desk project to
    automatically reopen the request. This can be tedious for the agents, and overwhelming
    for you, if there are many service desk projects that require this kind of automation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The good news is that Jira Service Management has a process automation feature
    that greatly reduces some of this repetitive tasks and allows each service desk
    owner (users with the Administer Projects permission) to set up the automation
    rules, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.28 – Process automation rules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.28_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.28 – Process automation rules
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to set up automation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project settings page of the service desk you want to set up automation
    rules for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Automation** option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add rule** button to create a new automation rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select one of the pre-made automation rule templates from the dialog box, or
    select the **Custom rule** option from the list to create one from scratch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the new automation rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the automation rule and click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are several things to consider when configuring your automation rule.
    Firstly, each rule is made up of three parts called **WHEN** (trigger), **IF**
    (condition), and **THEN** (action), as shown in the following screenshot. The
    way to think about this is that your rule should read something like this – **when**
    something happens on a request, **if** the criterion is met, **then** execute
    the following actions. So, if we take the example of a customer adding comments
    to a closed request, the rule may be something like this – when a comment is added,
    if the request is in the Closed status, then transition the request to Re-opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.29 – Creating a new process automation rule'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.29_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.29 – Creating a new process automation rule
  prefs: []
  type: TYPE_NORMAL
- en: 'You can configure these components of the automation rule by clicking on the
    UI elements representing each component. There are a few points to keep in mind
    when designing your rule:'
  prefs: []
  type: TYPE_NORMAL
- en: You can only have one WHEN, which acts as the entry point for the rule. However,
    it can have multiple triggers, so each rule can be triggered by more than one
    action.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can have more than one IF (that is, an ELSE IF), so you can set up multiple
    criteria to evaluate when the rule is triggered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can only have one THEN, which can have multiple actions to execute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the rule should be run as the user who triggered it or a dedicated user
    set for the service desk project. Since not all actions can be run by the user
    who triggers them, especially if the user is a customer, it is safer to use the
    project’s default option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the rule can be triggered by another automation rule. This is very useful
    as it allows you to chain multiple rules together to automate your process. However,
    you need to be careful and make sure you do not have rules that will trigger off
    each other and get stuck in a loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use Jira Service Management to transform
    Jira into a powerful service desk solution. Jira Service Management is based on
    many of Jira’s out-of-the-box features, such as a workflow engine and search query
    (JQL), and provides a brand new user interface to remove the friction caused by
    the old Jira interface. This makes the overall experience a lot more pleasant
    for customers.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at how you can customize the branding for your customer portal, as
    well as how to group request types, which can help your customers to better navigate
    around. We also explored using SLAs to help measure metrics for your support team.
    Lastly, we looked at ways you can set up automation rules to help your support
    process run more efficiently. In the next chapter, we will take a deeper look
    into how you can extend Jira’s features and capabilities using third-party apps.
  prefs: []
  type: TYPE_NORMAL
