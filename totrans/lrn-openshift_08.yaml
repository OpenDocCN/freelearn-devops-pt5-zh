- en: Core OpenShift Concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we covered Docker and Kubernetes basics and went through
    the OpenShift architecture. We know how to build the OpenShift lab environment,
    so now it is time to get our hands dirty and see how we can work with OpenShift's
    main resources.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter goes over OpenShift core concepts, such as creating new applications
    with OpenShift pods, services, routes, projects, and users. This will give you
    foundational skills, which will be enough for you to run and manage your application
    container infrastructure in OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: 'After reading this chapter, you will have learned about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing projects and namespaces in OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing regular users in OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new applications in OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing pods in OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing services in OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing routes in OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing projects in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, make sure that your OpenShift is up and running. We are going
    to use MiniShift for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once its VM is up, log in as a system admin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As we covered earlier, Openshift CLI has a lot of similarities with Kubernetes
    CLI. `oc` is short for OpenShift client, which works similarly to Kubernetes's
    `kubectl`. You will find a lot of similarities between these two commands as we
    go.
  prefs: []
  type: TYPE_NORMAL
- en: Before we deep dive into creating our first OpenShift applications and use basic
    OpenShift resources such as pods, services, and routes, we need to work a little
    bit with OpenShift's management and other essential features such as OpenShift
    projects and user accounts. First, let's focus on OpenShift projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenShift project is a Kubernetes namespace with additional features called annotations
    that provide user multi-tenancy and role-based access control in OpenShift. Each
    project has its own set of policies, constraints, and service accounts. You can
    see that the number of namespaces and projects in OpenShift is the same. The commands
    we are going to need are `oc get namespaces` and `oc get projects`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As we mentioned previously, each namespace, or rather project, is separated
    from another by a set of rules. This allows different teams to work independently
    from each other. In order to identify what project we are currently working in,
    you can use the `oc projects` command. This command gives you a list of OpenShift projects
    available for you, and it also tells you what projects you are currently working
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The asterisk `*` also specifies the current project.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that there are a lot of different projects available, though we have
    not created any because the system admin user has access to everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a new OpenShift project, you must use the `oc new-project`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This command creates a new project and automatically switches to it. In our
    case, it switches to `new-project1`. We can manually switch to another available
    project by running the `oc project` command. Let''s switch to the `default` project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the output of `oc project default` tells you not only that the project
    is switched to `default`, but it also specifies the OpenShift cluster URL: `https://127.0.0.1:8443`.
    It is useful when we are dealing with several independently working OpenShift
    clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to delete an OpenShift project, you can use the `oc delete` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We are going to work with projects closely in the subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Managing users in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we use the `oc` command, it makes an API call to the OpenShift cluster
    using user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main user types in OpenShift. Let''s quickly talk about each
    of these three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Regular users**: A regular OpenShift user. Regular users are usually developers
    with access to OpenShift projects. Regular OpenShift user examples include user1
    and user2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System users**: System OpenShift users are special and most of these users
    are created when OpenShift is being installed. System user examples are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system:admin`: OpenShift cluster administrator user'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system:node:node1.example.com`: `node1.example.com` node user'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system:openshift-registry`: OpenShift registry user'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service accounts**: Special system users associated with projects. Some of
    these users are created when a new OpenShift project is being created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to work with system users and service accounts in the next chapter.
    In this chapter, we are going to work with regular users.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get information about the OpenShift user we are currently logged in
    as by using the `oc whoami` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to create a regular user, you can use the `oc create user` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We do not need to set a user password in this lab because our lab environment
    is set up to accept any password from any user.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the user is going to be created for a project we are currently
    working on. To get the list of users, use the `oc get users` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We should be able to see two users: `developer` and `user1`.
  prefs: []
  type: TYPE_NORMAL
- en: Developer users are created as a part of the `oc cluster up` command, as well
    as the project `myproject`.
  prefs: []
  type: TYPE_NORMAL
- en: The `IDENTITIES` field defines the authentication method. In our lab environment
    setup, the developer user takes anything as a password. This is what `anypassword:developer`
    means.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last essential things we need to learn is how to switch between different
    users. We can use the `oc login` command to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`user1` does not have any authentication method defined. This is why you won''t
    be able to log in as `user1` if you try to.'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to put all of these pieces together and assign a particular user
    to one or several projects, as well as give users different permissions, in the
    following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new applications in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first and most essential command to run in OpenShift is `oc new-app`. This
    command is similar to Kubernetes's `kubectl run`, but `oc new-app` is way more
    powerful and works a little bit differently. We are going to show you how `oc
    new-app` works in detail later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to test out the `oc new-app` command is to create a new project
    and then run it over there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The command output tells us to run the `oc new-app centos/ruby-22-centos7~https://github.com/openshift/ruby-ex.git`
    command. Run the command to see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We have seen that running `oc new-app` sometimes takes a lot of time or is just
    stuck for hours.
  prefs: []
  type: TYPE_NORMAL
- en: If this happens to you, try to reinstall the cluster again.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure that you have the firewall off on your host.
  prefs: []
  type: TYPE_NORMAL
- en: If all of these options fail for you, you can always run a separate VM and install
    OpenShift from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is going to be a lot of output compared to what we have seen before,
    but if you read through, you should be able to find out that:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift pulls Docker image `centos/ruby-22-centos7`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift goes to GitHub and downloads the source code from it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift applies GitHub source code to the image and stores it on the internal
    registry with the name `ruby-ex`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ruby-ex` is used to create build and deployment configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ruby-ex` service is created to load balance the traffic for pods with `ruby-ex`
    in their names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram represents this flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: oc new-app workflow
  prefs: []
  type: TYPE_NORMAL
- en: We are going to take a closer look at all of these resources in the following
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Managing pods in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift pods are Kubernetes pods that represent a collection of containers,
    and each pod serves as a basic management unit. All containers in a pod share
    the same storage volumes and network. In order to get a list of pods in OpenShift,
    we can use the `oc get pods` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It is no different from the Kubernetes pod, which means behind the scenes it
    is a Docker container running. The only difference is that there are two containers
    now. One of them is a container (`ruby-ex-1-build`) that is used to build the
    final image with the source code applied. We can easily verify this by running
    the `docker ps` command inside the Minishift VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can easily find the right running container by seeing the `myproject/ruby-ex`
    part of the image's ID. We can do similar actions in Kubernetes, like getting
    logs, editing or describing, and deleting pods.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start with the next section, try to run `oc delete`.
  prefs: []
  type: TYPE_NORMAL
- en: Managing services in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similarly to Kubernetes, OpenShift services represent an interface between clients
    and the actual application running in the pods. A service is an IP:port pair which
    forwards traffic to backend pods in a round-robin fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'By running the `oc new-app` command, OpenShift creates a service automatically.
    We can verify this by running the `oc get services` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is similar to what we got with the `kubectl get services` command
    in Kubernetes. We can delete and recreate this service again by running the `oc
    delete` and `oc expose` commands. Before we do that, run the `curl` command inside
    the Minishift VM to verify that the service is up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The status code is `200`, which means that the web page is available and the
    service is running properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Check that the service is deleted and that the service is no longer available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a new service with the `oc expose` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In your case, the container name is going to be different. Rerun `oc get pods`
    to get the running pod name. There are other methods on how to create a service
    and we are going to cover them later in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, check that the service is available again by running the `curl` command
    on the Minishift VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Managing routes in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift has an elegant way of exposing a service so that it can be accessed
    from the outside of an OpenShift cluster. This resource is called a `router` in
    OpenShift. OpenShift provides an external hostname mapping to a load balancer
    that distributes traffic among OpenShift services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: OpenShift router workflow
  prefs: []
  type: TYPE_NORMAL
- en: In order for the OpenShift router to load balance external traffic, it has to
    use HTTP or HTTPS protocol, and be resolvable by DNS using DNS wildcards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s expose our service outside of the OpenShift cluster by running the `oc
    expose` command with additional parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the list of routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try to run the `curl openshiftdemo.local` command, it won''t work because
    there is no DNS record for `openshiftdemo.local`. One of the easiest ways is to
    add a static DNS record to the hosts file. Since we are using the Minishift VM,
    we need to create a static DNS record pointing to the Minishift VM. The first
    step is to check the Minishift VM with the `oc status` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we need to make a static record in the hosts file by using minishift
    VM IP address and our project hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything is ready so that we can do the final test. Open a web browser and
    open [http://openshiftdemo.local/webpage](http://openshiftdemo.local/webpage):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Ruby demo application web page
  prefs: []
  type: TYPE_NORMAL
- en: If you somehow do not see a welcome web page, check whether you can ping `openshiftdemo.local`
    and also try to run the `curl openshiftdemo.local` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to open a web page using the IP address of the Minishift VM instead
    of `openshiftdemo.local`, you will get `Application is not available`. This happens
    because the OpenShift router is a HAProxy-based container that does load balancing
    based on a URL. We can easily verify this by running the `oc describe` command
    with the OpenShift router pod. First, log in as `system:admin` and then check
    the router pod name in the `default` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, run the `oc describe` command, specifying the `router-1-s9b7f pod`
    and look for the `Image` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You can replace the HAproxy-based router with other ones, like Nginx or something
    else, but that is out of the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered OpenShift core concepts such as pods, services,
    routes, projects, and users. We are going to work with these topics in detail
    in the following chapters and work closely with these resources to show you how
    they are integrated with other OpenShift resources.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going take a look at advanced OpenShift resources,
    including source to image and image streams, builds and build configs, deployments,
    and deployment configs, as well as config maps and templates. We are also going
    to create some of these resources using manual methods with YAML and JSON files.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What are the two Node types used by OpenShift? choose two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Node
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MiniShift
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Vagrant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Master
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following is not an Openshift user type? choose two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regular users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Admin users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: System users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Service accounts
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Service users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In OpenShift, a pod is a minimal unit of deployment which represents a group
    of containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In OpenShift, what resource is responsible for exposing the OpenShift application
    to the outside? choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Pod
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Load balancer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What are the two commands that list available pods and routes? choose two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: oc get po
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc list pods
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc get rt
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc get routes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In OpenShift, the system admin user account has access to system-related resources
    only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we briefly covered the core concepts of the OpenShift container
    platform. Here''s a list of links that may be helpful to look through so that
    you can learn more about OpenShift basics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Openshift core concepts**: [https://docs.openshift.org/latest/architecture/core_concepts/index.html](https://docs.openshift.org/latest/architecture/core_concepts/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenShift official blog**: [https://blog.openshift.com/](https://blog.openshift.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
