- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Your Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to create an account on GitHub, and how
    to create and clone your first repository so that you have a link between the
    repository on your computer and that on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git pull
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push me, pull you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting at the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commits – best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start by creating your GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of different ways to create your repository. We'll cover
    creating a repository on GitHub and cloning it to your disk, as this is the most
    common way.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your repository on GitHub first
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your first step is to register with GitHub. Go to [http://github.com](http://github.com)
    and click **Sign Up**. Fill in your username (it will tell you if the name is
    taken) and your email and it may ask you to verify that you are a human. Assuming
    you are, click **Create Account**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill out their micro-survey and click **Create Account**. You will be asked
    to verify your email, and once you do, you''ll see the (one-time) opening page
    asking what you want to do first. Choose **Create a repository**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Getting started with GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: If you already have an account, sign in and press **New Repository**. You may
    not find this at first glance, in which case click the big plus sign in the corner.
  prefs: []
  type: TYPE_NORMAL
- en: Either way, you will be brought to the **Create A New Repository** page. The
    first job is to give your new repository a name. I'll use `ProGitForProgrammers`.
    Feel free to use any name you want as long as GitHub doesn't complain that the
    name is taken.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it is time to fill in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Creating the repository'
  prefs: []
  type: TYPE_NORMAL
- en: Start by entering a short description of your project. Next, and very importantly,
    choose whether you want this repository to be public (anyone can see it) or private
    (only people you invite can see it).
  prefs: []
  type: TYPE_NORMAL
- en: I strongly recommend checking **Add a README file**. This will be what is shown
    to users when they come to your repository. You can fix the file up later using
    Markdown.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to add a `.gitignore` file. This tells Git which files to ignore when
    checking your files into the repository. This can be very important so that you
    don't overwrite another programmer's metadata files. Click the dropdown and admire
    how many languages are supported; for C# I recommend you search for and choose
    Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: If your repository is public, be certain to choose a license for the code. I
    chose the MIT License. You can learn more about this license at [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT).
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it! You are ready to click **Create repository**. When you do, you''ll
    be brought to the home page for your new GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Initial view of your repository'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that you have the three files you asked for, and that you can see a preview
    of the README as well as the description you entered.
  prefs: []
  type: TYPE_NORMAL
- en: Right now, this repository exists only on the server. You want to put a copy
    on your disk so that you can add code and use commands to keep them in sync. Therefore
    you will "clone" the repository; that is, you'll make an exact copy of the remote
    repository in your local repository.
  prefs: []
  type: TYPE_NORMAL
- en: How you will do this will depend on whether you are using the command line,
    Visual Studio, or a GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning to your computer – command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloning to your local repository is easy. Open your terminal (or PowerShell)
    and change the directory to where you want the repository to go (in my case GitHub/the
    command line).
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch back to your GitHub repo on [GitHub.com](http://GitHub.com), and see
    the green button in the upper right-hand corner marked **Code**. Click that button
    and a small dialog box will open. Choose **HTTPS** unless you know you have **SSH**
    (as I do). In either case, click on the clipboard icon to copy the address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Copying the address of the repo'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the command line, enter `git clone`, and then paste in the address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Cloning at the command line'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the directory to `ProGitForProgrammers` and you''ll see that the three
    files that were on the server are now here as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Files in the directory'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at how to do this in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning to your computer – visual studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to your directory (in my case `GitHub`) and make a directory called `VisualStudio`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio with no project. Select **File | Clone Repository**. Fill
    in the fields and click **Clone**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Cloning to your local repository using Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'A few seconds later you will see the three files, now shown in the **Solution
    Explorer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Cloned files in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways to clone from a GitHub repository to your own. One
    way is to use a dedicated GUI tool such as GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning to your computer – GitHub for Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once again, return to your root directory (`GitHub`) and make a new directory.
    This time call it `GitHubDesktop`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, return to GitHub and click **Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Cloning directly through GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that one of the choices is **Open with GitHub Desktop**. Click on that.
    A dialog will open. The only field you need to fill in is the local path. Click
    **Clone**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Cloning to GitHub Desktop using HTTP'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that GitHub Desktop wants the `https` URL for your repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'You now have three copies of your original repository, each in its own directory:
    `CommandLine`, `VisualStudio`, and `GitHubDesktop`. These might represent three
    programmers working on the same solution, or various ways for one programmer to
    choose to clone their project.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a project. Using Visual Studio (or your favorite editor) create a project
    called `ProGitForProgrammers` in the `CommandLine` directory. When you are done,
    you should have the three original files and a folder for your program. In that
    folder will be the `.sln` file as well as a folder for the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command line and navigate to the same directory. When you get there
    your command line should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: The command-line prompt'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the yellow, where you see `+1 ~0 -0`. The `+1` means you''ve added
    a file or a directory; the `~0` indicates that no files have been modified; the
    `-0` indicates that no files have been deleted. Let''s see what was added. Enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: Untracked files'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git is telling you that you are on the branch `main` (the only branch for now)
    and that you have "untracked files" – that is, files that are in the directory
    but that are not being tracked by Git. If they are untracked, Git can''t store
    them; in fact, Git knows nothing about them. Let''s fix that. Enter these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`add` tells Git that this is a file it should pay attention to and `commit`
    brings it into the local repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Every `commit` must have a message, and if you don't provide one, you'll be
    prompted by Git to add one. Here I've added it by using the `-m` flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, all this is happening locally and so GitHub doesn''t know about
    it. We can fix that by pushing our commit up to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you go to GitHub and refresh the page your project will be there. You
    can click your way down through the folders, and even into `Program.cs`, to see
    the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_02_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: Viewing your code on GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: Notice in the upper left that it tells you that you are on the **main** branch.
    Next to that is the path to get to `Program.cs`. Below that is the message you
    added, and then the file itself.
  prefs: []
  type: TYPE_NORMAL
- en: Git pull
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having pushed your commits to the server, other developers may want to pull
    them to their own directory, to keep in sync.
  prefs: []
  type: TYPE_NORMAL
- en: Pulling down using GitHub Desktop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having put the project up on the server, we can simply pull it down into the
    other locations. For example, open GitHub Desktop. It will tell you that there
    have been changes in the repository and helpfully offer a button for you to update
    your local repo.
  prefs: []
  type: TYPE_NORMAL
- en: If you open a file explorer and navigate to the `GitHubDesktop` directory, you'll
    see that there is now a replica of the files you pushed from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Pulling down to Visual Studio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Click on the Git menu and choose **Pull**. Visual Studio is updated with the
    code from the server. Now all three repositories are up to date. This is the heart
    of Git:'
  prefs: []
  type: TYPE_NORMAL
- en: Save your files to a local repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push your files to the remote repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull down any files that are on the remote repository but not on your local
    repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push me, pull you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, you want to push your changes and pull down changes from other developers.
    Also, generally, you will not be working on the same files, and certainly not
    in main. We'll discuss how to avoid this in *Chapter 4*, *Merging Branches*. For
    now, we'll just be very careful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio in the directory `GitHub/VisualStudio/ProGitForProgrammers`.
    Add a line to `Program.cs` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
