- en: Running Kubernetes Cluster Locally
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地运行 Kubernetes 集群
- en: One of my goals in this book is to limit the learning expense to a minimum.
    True to that spirit, we'll run local Kubernetes clusters for as long as possible.
    At one point we'll have to switch to a hosted, multi-node Kubernetes cluster.
    I'll do my best to postpone that for as long as possible without limiting your
    learning experience. For now, we'll create a local Kubernetes cluster on your
    laptop.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的一个目标是将学习成本控制到最低。秉承这一精神，我们将尽可能长时间地运行本地 Kubernetes 集群。最终，我们将不得不切换到托管的多节点 Kubernetes
    集群。我会尽力将这个过程推迟到尽可能晚，而不限制你的学习体验。目前，我们将在你的笔记本上创建一个本地 Kubernetes 集群。
- en: There are quite a few ways to set up a local Kubernetes cluster. We could, for
    example, create a few nodes with Vagrant ([https://www.vagrantup.com/](https://www.vagrantup.com/))
    and execute quite a few shell commands that would convert them into a Kubernetes
    cluster. We could go even further and create a VirtualBox image that would have
    all the required software pre-installed and use it to create Vagrant VMs. We could
    also use Ansible to run provisioning of those images as well as to execute all
    the commands required to join VMs into a cluster. There are many other things
    that we could do, but we won't.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多种方法可以设置本地 Kubernetes 集群。例如，我们可以使用 Vagrant ([https://www.vagrantup.com/](https://www.vagrantup.com/))
    创建一些节点，并执行一系列 shell 命令，将它们转换为 Kubernetes 集群。我们甚至可以进一步创建一个已经预装所有必需软件的 VirtualBox
    镜像，并用它来创建 Vagrant 虚拟机。我们还可以使用 Ansible 来进行镜像的配置，并执行所有将虚拟机加入集群所需的命令。我们可以做很多其他事情，但我们不打算这样做。
- en: At this point, the idea is not to teach you all the intricacies of setting up
    a Kubernetes cluster. Instead, I want to get you up to speed as fast as possible
    and let you experience Kubernetes without sidelining that experience with installation
    details.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，重点不是教授你如何设置 Kubernetes 集群的所有复杂细节。相反，我希望尽可能快地让你跟上进度，让你能够体验 Kubernetes，而不被安装细节所干扰。
- en: 'If the subject of this book would be Docker Swarm (as it was in *The DevOps
    2.1 Toolkit: Docker Swarm*), we''d have Docker for Mac or Windows (or run it natively
    on Linux) and execute a single `docker swarm init` command. That''s all that''s
    needed to create a local Docker Swarm cluster. Can we accomplish the same simplicity
    with Kubernetes?'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '如果本书的主题是 Docker Swarm（就像在*The DevOps 2.1 Toolkit: Docker Swarm* 中那样），我们只需要在
    Mac 或 Windows 上使用 Docker（或在 Linux 上原生运行），并执行一个 `docker swarm init` 命令。这就是创建本地
    Docker Swarm 集群所需的一切。我们能否用 Kubernetes 实现同样的简单性呢？'
- en: In October of 2017, Docker announced initial support for Kubernetes in Docker
    for Mac and Windows. At the time of this writing, it is available only for Mac
    in the edge channel.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2017 年 10 月，Docker 宣布在 Docker for Mac 和 Windows 中初步支持 Kubernetes。在撰写本文时，这项功能仅在
    Mac 的边缘通道中可用。
- en: Minikube creates a single-node cluster inside a VM on your laptop. While that
    is not ideal since we won't be able to demonstrate some of the features Kubernetes
    provides in a multi-node setup, it should be more than enough to explain most
    of the concepts behind Kubernetes. Later on, we'll move into a more production-like
    environment and explore the features that cannot be demonstrated in Minikube.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 在你的笔记本电脑上的虚拟机内创建了一个单节点集群。虽然这并不理想，因为我们无法展示 Kubernetes 在多节点环境下提供的一些功能，但它足够用来解释
    Kubernetes 背后的大部分概念。稍后我们将转向更接近生产环境的设置，探索那些在 Minikube 中无法展示的功能。
- en: A note to Windows users
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 给 Windows 用户的提示
- en: Please run all the examples from *GitBash* (installed through *Git*). That way
    the commands you'll see throughout the book will be same as those that should
    be executed on *MacOS* or any *Linux* distribution. If you're using Hyper-V instead
    of VirtualBox, you may need to run the *GitBash* window as an Administrator.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过 *Git* 安装的 *GitBash* 运行所有示例。这样，你在书中看到的命令将与在 *MacOS* 或任何 *Linux* 发行版上执行的命令相同。如果你使用的是
    Hyper-V 而不是 VirtualBox，你可能需要以管理员身份运行 *GitBash* 窗口。
- en: Before we dive into Minikube installation, there are a few prerequisites we
    should set up. The first in line is `kubectl`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论 Minikube 安装之前，有一些先决条件需要我们进行设置。首先要设置的是`kubectl`。
- en: Installing kubectl
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 kubectl
- en: Kubernetes' command-line tool, `kubectl`, is used to manage a cluster and applications
    running inside it. We'll use `kubectl` a lot throughout the book, so we won't
    go into details just yet. Instead, we'll discuss its commands through examples
    that will follow shortly. For now, think of it as your interlocutor with a Kubernetes
    cluster.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的命令行工具 `kubectl` 用于管理集群和运行在其中的应用程序。在本书中我们将频繁使用 `kubectl`，因此目前不会深入讲解其细节。相反，我们会通过接下来的示例来讨论它的命令。目前，把它看作是你与
    Kubernetes 集群的交流工具。
- en: Let's install `kubectl`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装 `kubectl`。
- en: All the commands from this chapter are available in the `02-minikube.sh` ([https://gist.github.com/vfarcic/77ca05f4d16125b5a5a5dc30a1ade7fc](https://gist.github.com/vfarcic/77ca05f4d16125b5a5a5dc30a1ade7fc))
    Gist.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有命令都可以在 `02-minikube.sh` ([https://gist.github.com/vfarcic/77ca05f4d16125b5a5a5dc30a1ade7fc](https://gist.github.com/vfarcic/77ca05f4d16125b5a5a5dc30a1ade7fc))
    Gist 中找到。
- en: Feel free to skip the installation steps if you already have `kubectl`. Just
    make sure that it is version 1.8 or above.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了 `kubectl`，可以跳过安装步骤。只需确保版本是 1.8 或以上。
- en: 'If you are a **MacOS user**, please execute the commands that follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 **MacOS 用户**，请执行以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you already have Homebrew ([https://brew.sh/](https://brew.sh/)) package
    manager installed, you can "brew" it with the command that follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了 Homebrew（[https://brew.sh/](https://brew.sh/)）包管理器，可以通过以下命令使用 "brew"
    安装：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If, on the other hand, you''re a **Linux user**, the commands that will install
    `kubectl` are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 **Linux 用户**，安装 `kubectl` 的命令如下：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, **Windows users** should download the binary through the command that
    follows.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**Windows 用户**应通过以下命令下载二进制文件。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Feel free to copy the binary to any directory. The important thing is to add
    it to your `PATH`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 随时将二进制文件复制到任何目录。重要的是将其添加到 `PATH` 中。
- en: 'Let''s check `kubectl` version and, at the same time, validate that it is working
    correctly. No matter which OS you''re using, the command is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查 `kubectl` 版本，并同时验证它是否正常工作。不管您使用的是哪个操作系统，命令如下：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The connection to the server `localhost:8080` was refused-did you specify the
    right host or port?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 无法连接到服务器 `localhost:8080` - 您是否指定了正确的主机或端口？
- en: That is a very ugly and unreadable output. Fortunately, `kubectl` can use a
    few different formats for its output. For example, we can tell it to output the
    command in `yaml` format
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常丑陋且难以阅读的输出。幸运的是，`kubectl` 可以使用几种不同的格式来输出结果。例如，我们可以告诉它输出为 `yaml` 格式
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That was a much better (more readable) output.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更好的（更易读的）输出。
- en: We can see that the client version is 1.9\. At the bottom is the error message
    stating that `kubectl` could not connect to the server. That is expected since
    we did not yet create a cluster. That's our next step.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到客户端版本为 1.9。在底部显示错误信息，表明 `kubectl` 无法连接到服务器。这是预期中的情况，因为我们还没有创建集群。接下来我们就要进行这一步。
- en: At the time of writing this book kubectl version was 1.9.0\. Your version might
    be different when you install.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，kubectl 的版本为 1.9.0。您安装时的版本可能不同。
- en: Installing Minikube
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Minikube
- en: Minikube supports several virtualization technologies. We'll use VirtualBox
    throughout the book since it is the only virtualization supported in all operating
    systems. If you do not have it already, please head to the Download VirtualBox
    ([https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads))
    page and get the version that matches your OS. Please keep in mind that for VirtualBox
    or HyperV to work, virtualization must be enabled in the BIOS. Most laptops should
    have it enabled by default.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 支持多种虚拟化技术。我们在本书中将使用 VirtualBox，因为它是唯一支持所有操作系统的虚拟化工具。如果你还没有安装，请前往下载
    VirtualBox 页面 ([https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads))，下载与您的操作系统匹配的版本。请记住，要使
    VirtualBox 或 HyperV 正常工作，必须在 BIOS 中启用虚拟化。大多数笔记本电脑默认应已启用此功能。
- en: Finally, we can install Minikube.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以安装 Minikube。
- en: 'If you''re using **MacOS**, please execute the command that follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 **MacOS**，请执行以下命令：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If, on the other hand, you prefer **Linux**, the command is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用 **Linux**，可以执行以下命令：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finally, you will not get a command if you are a Windows user. Instead, download
    the latest release from of the `minikube-windows-amd64.exe` ([https://storage.googleapis.com/minikube/releases/latest/minikube-windows-amd64.exe](https://storage.googleapis.com/minikube/releases/latest/minikube-windows-amd64.exe))
    file, rename it to `minikube.exe`, and add it to your path.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你是 Windows 用户，你将不会收到命令。相反，你需要从 `minikube-windows-amd64.exe`（[https://storage.googleapis.com/minikube/releases/latest/minikube-windows-amd64.exe](https://storage.googleapis.com/minikube/releases/latest/minikube-windows-amd64.exe)）下载最新版本，重命名为
    `minikube.exe`，并将其添加到你的路径中。
- en: We'll test whether Minikube works by checking its version.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过检查 Minikube 的版本来测试它是否正常工作。
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we're ready to give the cluster a spin.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好开始使用这个集群了。
- en: Creating a local Kubernetes cluster with Minikube
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Minikube 创建本地 Kubernetes 集群
- en: The folks behind Minikube made creating a cluster as easy as it can get. All
    we need to do is to execute a single command. Minikube will start a virtual machine
    locally and deploy the necessary Kubernetes components into it. The VM will get
    configured with Docker and Kubernetes via a single binary called localkube.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 背后的开发者将创建集群的过程做得尽可能简单。我们只需执行一个命令，Minikube 就会在本地启动一个虚拟机，并将必要的 Kubernetes
    组件部署到其中。虚拟机会通过一个名为 localkube 的单一二进制文件配置 Docker 和 Kubernetes。
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A note to Windows users
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户须知
- en: 'You might experience problems with `virtualbox`. If that''s the case, you might
    want to use `hyperv` instead. Open a Powershell Admin Window and execute the `Get-NetAdapter`
    command, noting the name of your network connection. Create a `hyperv` virtual
    switch `New-VMSwitch -name NonDockerSwitch -NetAdapterName Ethernet -AllowManagementOS
    $true` replacing `Ethernet` with your network connection name. Then create the
    Minikube vm: `minikube start --vm-driver=hyperv --hyperv-virtual-switch "NonDockerSwitch"
    --memory=4096`. Other minikube commands such as `minikube start`, `minikube stop`,
    and `minikube delete` all work the same whether you''re using VirutalBox or Hyper-V.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到 `virtualbox` 的问题。如果是这样，你可以考虑改用 `hyperv`。打开 Powershell 管理员窗口，执行 `Get-NetAdapter`
    命令，并记录下你的网络连接名称。创建一个 `hyperv` 虚拟交换机：`New-VMSwitch -name NonDockerSwitch -NetAdapterName
    Ethernet -AllowManagementOS $true`，将 `Ethernet` 替换为你的网络连接名称。然后创建 Minikube 虚拟机：`minikube
    start --vm-driver=hyperv --hyperv-virtual-switch "NonDockerSwitch" --memory=4096`。其他
    Minikube 命令，如 `minikube start`、`minikube stop` 和 `minikube delete`，无论你是使用 VirtualBox
    还是 Hyper-V，都可以正常工作。
- en: A few moments later, a new Minikube VM will be created and set up, and a cluster
    will be ready for use.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等片刻，一个新的 Minikube 虚拟机将被创建并设置好，集群将准备就绪可以使用。
- en: When we executed the `minikube start` command, it created a new VM based on
    the Minikube image. That image contains a few binaries. It has both `Docker` ([https://www.docker.com/](https://www.docker.com/))
    and `rkt` ([https://coreos.com/rkt/](https://coreos.com/rkt/)) container engines
    as well as `localkube` library. The library includes all the components necessary
    for running Kubernetes. We'll go into details of all those components later. For
    now, the important thing is that localkube provides everything we need to run
    a Kubernetes cluster locally.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行 `minikube start` 命令时，它基于 Minikube 镜像创建了一个新的虚拟机。该镜像包含了一些二进制文件，既有 `Docker`（[https://www.docker.com/](https://www.docker.com/)）也有
    `rkt`（[https://coreos.com/rkt/](https://coreos.com/rkt/)）容器引擎，以及 `localkube` 库。这个库包含了运行
    Kubernetes 所需的所有组件。稍后我们将详细介绍这些组件。目前，最重要的是，localkube 提供了运行本地 Kubernetes 集群所需的一切。
- en: '![](img/7bc69942-e243-4ced-bcaf-5df7d15beec7.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bc69942-e243-4ced-bcaf-5df7d15beec7.png)'
- en: 'Figure 2-1: Minikube simplified architecture'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：Minikube 简化架构
- en: Remember that this is a single-node cluster. While that is unfortunate, it is
    still the easiest way (as far as I know) to "play" with Kubernetes locally. It
    should do, for now. Later on, we'll explore ways to create a multi-node cluster
    that will be much closer to a production setup.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这是一个单节点集群。虽然这有点遗憾，但它仍然是目前最简单的方法（据我所知）来“玩转”本地的 Kubernetes。暂时应该够用了。稍后，我们将探索如何创建一个多节点集群，它将更加接近生产环境的设置。
- en: 'Let''s take a look at the status of the cluster:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来查看集群的状态：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Minikube is running, and it initialized a Kubernetes cluster. It even configured
    `kubectl` so that it points to the newly created VM.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 正在运行，它初始化了一个 Kubernetes 集群。它还配置了 `kubectl`，使其指向新创建的虚拟机。
- en: You won't see much UI in this book. I believe that a terminal is the best way
    to operate a cluster. More importantly, I am convinced that one should master
    a tool through its commands first. Later on, once we feel comfortable and understand
    how the tool works, we can choose to use a UI on top of it. We'll explore the
    Kubernetes UI in one of the later chapters. For now, I'll let you have a quick
    glimpse of it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中不会看到太多的 UI。我认为终端是操作集群的最佳方式。更重要的是，我坚信应该先通过命令掌握一款工具。等我们感觉熟练并理解了工具的工作原理后，可以选择在其基础上使用
    UI。在后面的章节中，我们会探索 Kubernetes UI。现在，我让你快速瞥一眼它。
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Feel free to explore the UI but don't take too long. You'll only get confused
    with concepts that we did not yet study. Once we learn about pods, replica-sets,
    services, and a myriad of other Kubernetes components, the UI will start making
    much more sense.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以自由探索 UI，但不要花太多时间。你会被一些我们尚未学习的概念弄混。等我们学习了 pods、replica-sets、services 和其他 Kubernetes
    组件后，UI 会变得更加有意义。
- en: '![](img/312187e1-b120-4562-a13d-8c8d76f4b4a3.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/312187e1-b120-4562-a13d-8c8d76f4b4a3.png)'
- en: 'Figure 2-2: Kubernetes dashboard'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2：Kubernetes 仪表盘
- en: Another useful Minikube command is `docker-env`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的 Minikube 命令是 `docker-env`。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you worked with Docker Machine, you'll notice that the output is the same.
    Both `docker-machine env` and `minikube docker-env` serve the same purpose. They
    output the environment variables required for a local Docker client to communicate
    with a remote Docker server. In this case, that Docker server is the one inside
    a VM created by Minikube. I assume that you already have Docker installed on your
    laptop. If that's not the case, please go to the install Docker ([https://docs.docker.com/install/](https://docs.docker.com/install/))
    page and follow the instructions for your operating system. Once Docker is installed,
    we can connect the client running on your laptop with the server in the Minikube
    VM.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾使用 Docker Machine，你会注意到输出是相同的。`docker-machine env` 和 `minikube docker-env`
    都有相同的作用。它们输出本地 Docker 客户端与远程 Docker 服务器通信所需的环境变量。在这种情况下，那个 Docker 服务器就是 Minikube
    创建的虚拟机中的 Docker 服务器。我假设你已经在笔记本上安装了 Docker。如果没有，请访问 Docker 安装页面（[https://docs.docker.com/install/](https://docs.docker.com/install/)），并按照你操作系统的说明进行安装。Docker
    安装完成后，我们可以将你笔记本上的客户端与 Minikube 虚拟机中的服务器连接起来。
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We evaluated (created) the environment variables provided through the `minikube
    docker-env` command. As a result, every command we send to our local Docker client
    will be executed on the Minikube VM. We can test that easily by, for example,
    listing all the running containers on that VM.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 `minikube docker-env` 命令评估（创建）了所提供的环境变量。因此，我们发送到本地 Docker 客户端的每个命令都会在 Minikube
    虚拟机上执行。我们可以通过例如列出该虚拟机上所有正在运行的容器来轻松验证这一点。
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The containers listed in the output are those required by Kubernetes. We can,
    in a way, consider them system containers. We won't discuss each of them. As a
    matter of fact, we won't discuss any of them. At least, not right away. All you
    need to know, at this point, is that they make Kubernetes work.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中列出的容器是 Kubernetes 所需的容器。我们可以将它们视为系统容器。我们不会逐一讨论它们。事实上，我们不会讨论它们中的任何一个。至少，暂时不会。你现在需要知道的是，它们使得
    Kubernetes 能够正常工作。
- en: Since almost everything in that VM is a container, pointing the local Docker
    client to the service inside it should be all you need (besides `kubectl`). Still,
    in some cases, you might want to SSH into the VM.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于几乎虚拟机中的所有内容都是容器，将本地 Docker 客户端指向其中的服务应该就足够了（除了 `kubectl`）。不过，在某些情况下，你可能需要通过
    SSH 进入虚拟机。
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We entered into the Minikube VM, listed containers, and got out. There's no
    reason to do anything else beyond showing that SSH is possible, even though you
    probably won't use it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进入了 Minikube 虚拟机，列出了容器，然后退出了。没有必要做其他操作，除了展示 SSH 是可用的，尽管你可能不会使用它。
- en: What else is there to verify? We can, for example, confirm that `kubectl` is
    also pointing to the Minikube VM.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 还有什么需要验证的吗？例如，我们可以确认 `kubectl` 也指向了 Minikube 虚拟机。
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The output should be a single word, `minikube`, indicating that `kubectl` is
    configured to talk to Kubernetes inside the newly created cluster.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该是一个单词，`minikube`，表示 `kubectl` 已配置为与新创建的集群中的 Kubernetes 通信。
- en: As an additional verification, we can list all the nodes of the cluster.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的验证，我们可以列出集群的所有节点。
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It should come as no surprise that there is only one node, conveniently called
    `minikube`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 不足为奇的是，只有一个节点，方便地被命名为 `minikube`。
- en: If you are experienced with Docker Machine or Vagrant, you probably noticed
    the similar pattern. Minikube commands are almost exactly the same as those from
    Docker Machine which, on the other hand, are similar to those from Vagrant.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 Docker Machine 或 Vagrant，你可能会注意到它们之间有相似的模式。Minikube 的命令几乎与 Docker Machine
    的命令完全相同，而 Docker Machine 的命令又类似于 Vagrant 的命令。
- en: Let's make a sneak peek into the components currently running in our tiny cluster.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下当前在我们小型集群中运行的组件。
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Behold, the cluster in all its glory. It's made out of many building blocks
    we are yet to explore. Moreover, those are only the beginning. We'll be adding
    more as our needs and knowledge increase. For now, remember that there are many
    moving pieces. We won't go into details just yet. That would be too much to start
    with.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 看哪，集群的全部荣耀。它由许多我们尚未探索的构建模块组成。而且，这些只是开始。随着我们的需求和知识增加，我们将添加更多的内容。目前，记住有许多活动的组件。我们暂时不深入探讨，这样会有些过于复杂。
- en: Going back to minikube, we can do all the common things we would expect from
    a virtual machine. For example, we can stop it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 Minikube，我们可以做所有我们期望从虚拟机中看到的常见操作。例如，我们可以停止它。
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We can start it again.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重新启动它。
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We can delete it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以删除它。
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: One interesting feature is the ability to specify which Kubernetes version we'd
    like to use.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的功能是能够指定我们希望使用的 Kubernetes 版本。
- en: Since Kubernetes is still a young project, we can expect quite a lot of changes
    at a rapid pace. That will often mean that our production cluster might not be
    running the latest version. On the other hand, we should strive to have our local
    environment as close to production as possible (within reason).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kubernetes 仍然是一个年轻的项目，我们可以预期它会快速发生很多变化。这意味着我们的生产集群可能无法运行最新版本。另一方面，我们应该尽力使我们的本地环境尽可能接近生产环境（在合理范围内）。
- en: 'We can list all the available versions with the command that follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下命令列出所有可用版本：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output, limited to the first few lines, is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 输出内容，限于前几行，如下所示：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now that we know which versions are available, we can create a new cluster based
    on, let's say, Kubernetes v1.7.0.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了哪些版本是可用的，我们可以基于 Kubernetes v1.7.0 创建一个新的集群。
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We created a new cluster and output versions of the client and the server.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的集群，并输出了客户端和服务器的版本信息。
- en: 'The output of the latter command is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 后一个命令的输出如下：
- en: '[PRE31]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If you focus on the `serverVersion` section, you'll notice that the `major`
    version is `1` and the `minor` is `7`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你关注`serverVersion`部分，你会注意到`major`版本是`1`，而`minor`版本是`7`。
- en: What now?
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在怎么办？
- en: We are finished with a short introduction to Minikube. Actually, this might
    be called a long introduction as well. We use it to create a single-node Kubernetes
    cluster, launch the UI, do common VM operations like `stop`, `restart`, and `delete`,
    and so on. There's not much more to it. If you are familiar with Vagrant or Docker
    Machine, the principle is the same, and the commands are very similar.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经简要介绍了 Minikube。实际上，这也可以算作一个较长的介绍。我们用它来创建一个单节点的 Kubernetes 集群，启动 UI，执行常见的虚拟机操作，如`stop`、`restart`和`delete`等。除此之外没什么了。如果你熟悉
    Vagrant 或 Docker Machine，原理是一样的，命令也非常相似。
- en: Before we leave, we'll destroy the cluster. The next chapter will start fresh.
    That way, you can execute commands from any chapter at any time.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 离开之前，我们会销毁这个集群。下一章将从头开始。这样，你可以随时在任何章节执行命令。
- en: '[PRE32]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: That's it. The cluster is no more.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，集群不复存在。
