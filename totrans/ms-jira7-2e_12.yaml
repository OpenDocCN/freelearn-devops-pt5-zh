- en: Chapter 12. JIRA Administration with ScriptRunner and the CLI Add-on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When JIRA is used to implement a complex use case with lots of conditions, validations,
    and workflows, there are certain configurations that are not doable using the
    existing set of features. For instance, you may want to auto-calculate a custom
    field value after a workflow transition. Using the **ScriptRunner** plugin, many
    such advanced configurations can be achieved. It comes with various built-in administration
    scripts, which give the administrators tremendous power to manage their instance.
    In this chapter, we will discuss the ScriptRunner add-on, along with the JIRA
    **Command Line Interface** (**CLI**) add-on, to perform various JIRA functions
    from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing ScriptRunner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing ScriptRunner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like any other add-on, ScriptRunner can be installed from the JIRA administration
    interface. Perform these steps to install ScriptRunner on your JIRA instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **Add-ons** | **Find new add-ons** (under **ATLASSIAN
    MARKETPLACE**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search box, enter `ScriptRunner` and press the *Enter* key. The ScriptRunner
    add-on will appear in the search result list:![Installing ScriptRunner](img/image_12_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Free trial** button. Then, press the **Accept** button in the
    **Accept terms and agreements** pop-up and the ScriptRunner add-on will begin
    downloading:![Installing ScriptRunner](img/image_12_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ScriptRunner will then be downloaded and installed in your instance. Finally,
    you will be asked to enter your Atlassian account to generate a trial license
    for ScriptRunner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up window that appears confirming the add-on installation, click
    on the **Close** link in the bottom right corner:![Installing ScriptRunner](img/image_12_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ScriptRunner will now be installed in your JIRA instance.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in scripts for administration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ScriptRunner add-on allows users to write and run their own scripts. It
    comes with plenty of nice scripts, which allow JIRA administrators to perform
    various activities that are otherwise difficult to perform using existing JIRA
    features, or not possible at all from the UI. Let's take a look at some of these
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing built-in scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To access scripts that come with the ScriptRunner add-on, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **Add-ons** | **Built-in Scripts** (under **SCRIPTRUNNER**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, the list of all the **Built-in Scripts** can be found:![Accessing
    built-in scripts](img/image_12_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on any of these links to run that particular built-in script. This will
    further ask you to enter parameters relevant for that script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's take a look at some of these built-in scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Copy project
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Only JIRA administrators have the permission to create a project in JIRA (and
    change the configurations, too). Whenever there is a need to have an additional
    project in JIRA, the administrator needs to manually create projects and then
    change their schemes. It's not a difficult task, and usually takes only 10 minutes,
    but sometimes there is a need to create ten projects, and creating them manually
    could take hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a built-in script in ScriptRunner to copy the project along with its
    configurations, with or without its issues. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Copy project** link:![Copy project](img/image_12_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, select **cursor** as **Source project**, enter **Target
    project key** and **Target project name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Copy versions** and **Copy components** checkbox if you want to
    copy the project versions and project components as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button to initiate the **Copy project** script:![Copy project](img/image_12_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, the message is displayed at the bottom of the screen stating that
    the project has been copied, with a link to the new project. If you check the
    new copied project, you will notice that it has all the configurations of the
    source project. This tool takes less than a minute to run and JIRA administrators
    can save a lot of time using it.
  prefs: []
  type: TYPE_NORMAL
- en: Escalation service
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is an excellent built-in script that helps JIRA administrators perform
    periodic actions on a certain set of issues. Let''s take the example of a support
    ticket configuration, in which we have a workflow state called **Waiting for Client**
    in our project. This is used to signify that further information is required from
    a client to act further on a ticket. These issues need to be resolved automatically
    if the ticket has not been updated in the past two weeks:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Escalation service**:![Escalation service](img/image_12_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New Service** to create a new service:![Escalation service](img/image_12_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `No updates in 2 weeks` as **Description**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **JQL Query**, enter `status="Waiting for Client" AND updated >= -14d`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your **User Key** and specify **Interval/CRON Expression** as `1440`,
    which is 24 hours. In the **Action** dropdown, all the workflow states for all
    the projects in your instances will be displayed. Select the workflow transition
    that you want to perform as per your project. For instance, you can select **Close
    Issue (2)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As we want to close the issues that qualify under the criteria in JQL Query,
    in the **Additional issue actions** field, enter the code `issueInputParameters.setResolutionId('1')`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also do this by clicking on **Expand examples** and selecting the **Set
    resolution to Fixed** link.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the **Add Service** button to save this service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Escalation service](img/image_12_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have a service added that will run after every 24-hour period and will
    resolve the issues that were not updated in the past 14 days, that is, two weeks.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to a different user
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Imagine a situation when a user reports some problem in JIRA. As a JIRA administrator,
    you need to log in with their ID to understand the problem this user might be
    facing. You can either ask this user for their password or create a similar user
    with the same set of permissions. Instead, wouldn''t it be better to be able to
    log in to JIRA using that user''s username without asking for the password? There
    is a built-in script to perform just that:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Switch to a different user**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **User ID** of the user and click on the **Run** button:![Switching
    to a different user](img/image_12_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **here** link that appears at the bottom of the screen. You will
    then be logged in as a different user:![Switching to a different user](img/image_12_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This script is one of my favorites because I can log in with any username I
    want without asking for the user's password. It also saves a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the JIRA workflow with conditions, validators, and post functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best part of the ScriptRunner add-on is the additional features it brings
    in the JIRA workflow. Out of the box, there are various conditions, validators,
    and post functions that can be configured in the workflow, but it offers limited
    functionalities. ScriptRunner simply gives you more options, which you can control
    in the workflow. Let's take a look at them.
  prefs: []
  type: TYPE_NORMAL
- en: Conditions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ScriptRunner brings a set of additional conditions that you can add in the
    workflow; it gives you amazing control over a lot of things, which was not previously
    possible. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the workflow of your choice. For any transition, navigate to the **Conditions**
    tab and then click on the **Add condition** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find a new condition called **Script Condition**; just select it and
    click on the **Add** button:![Conditions](img/image_12_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, you will get a list of scripts that you can add as a workflow
    condition:![Conditions](img/image_12_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's discuss some of these scripts.
  prefs: []
  type: TYPE_NORMAL
- en: All sub-tasks must be resolved
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you want all the sub-tasks of a particular issue to be resolved with a specific
    resolution, the following condition can be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![All sub-tasks must be resolved](img/image_12_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simply select the **Resolution** that you want your sub-tasks to have after
    moving them to the **Resolved** state and click on the **Add** button.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing the transition if this query matches a JQL query
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'While performing a workflow transition, you can use a custom JQL in the workflow
    condition and allow the transition only when that JQL returns the issue that you
    will transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Allowing the transition if this query matches a JQL query](img/image_12_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For instance, if you want the transition to happen only when the assignee of
    the issue is the currently logged-in user and the due date of the issue is today,
    in the **JQL Query** field add the `assignee = currentUser() and due = now()` query and
    click on the **Add** button. Optionally, you can also enter the specific issue
    ID to preview this condition.
  prefs: []
  type: TYPE_NORMAL
- en: Checks the issue has been in a status previously
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The workflow can have numerous states and transitions between them. A workflow
    state can have more than one transition. If for some reason you want the transition
    to be made from a particular state only, the following condition can be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checks the issue has been in a status previously](img/image_12_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just select **In Progress** from the drop-down list for **Previous Status**
    and check whether this status has to be **Immediately previous only**, or uncheck
    this option if it could be any other previous status, and click on the **Add**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Simple scripted condition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'ScriptRunner has some ready-made simple scripts that can be added quickly as
    a condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple scripted condition](img/image_12_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just click on any of the example links and it can be added as a condition. For
    instance, I added a condition that will check whether one of the issue attachments
    is a PDF file or not. Click on the **Add** button to continue.
  prefs: []
  type: TYPE_NORMAL
- en: Validators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just like additional conditions, ScriptRunner brings a set of additional validators
    that you can add to the workflow; it gives you amazing control over lots of things
    that were not previously possible. Perform these following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the workflow of your choice and for any transition, navigate to the **Validators**
    tab and then click on the **Add validator** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find a new validator called **Script Validator**. Just select it and
    click on the **Add** button:![Validators](img/image_12_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, you will get a list of scripts that you can add as a workflow
    validator:![Validators](img/image_12_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's discuss some of these scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Field(s) changed validator
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s possible that you will use a transition view in the workflow transition
    that pops up a window to the user to capture additional input. These transition
    views are nothing but a screen containing one or more fields. Use this validator
    to validate whether those fields present in the transition view have changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Field(s) changed validator](img/image_12_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select all the **Fields** that you want to check for changes and click on the
    **Add** button. The fields visible here are only the ones that are part of the
    transition view for the transition you are working on in the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Require a comment on transition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the transition view, there is usually a comment field as well. Use this
    validator to validate whether a comment has been added or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Require a comment on transition](img/image_12_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This validator doesn't require any parameters to configure. Just click on the
    **Add** button.
  prefs: []
  type: TYPE_NORMAL
- en: Simple scripted validator
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'ScriptRunner has some ready-made simple scripts that can be added quickly as
    validators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple scripted validator](img/image_12_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just click on any of the example links and it can be added as a validator. For
    instance, if you want to enforce that the issue should have at least four subtasks,
    then click on **Has greater than two subtasks** and modify **Condition** from
    `2` to `4` so that it becomes `issue.subTasks.size() > 4`. Click on the **Add**
    button to continue.
  prefs: []
  type: TYPE_NORMAL
- en: Post functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just like additional conditions and validators, ScriptRunner brings a set of
    additional post functions that you can add in the workflow; this gives you amazing
    control over a lot of things that were not previously possible. Perform these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the workflow of your choice and for any transition, navigate to the **Post
    Functions** tab and then click on the **Add post function** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find a new post function called **Script Post-Function**; just select
    it and click on the **Add** button:![Post functions](img/image_12_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, you will get a list of scripts that you can add as a workflow
    post function:![Post functions](img/image_12_024.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's discuss some of these scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Adds the current user as a watcher
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider a scenario when the priority of the issue is **Major** and the user
    who is currently logged in and making the workflow transition should be added
    as a watcher of the issue; in this case, use the following post function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adds the current user as a watcher](img/image_12_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the list of examples, click on the **Priority is Major** link and a condition
    will be added. Now, whenever this condition is true during the workflow transition,
    the post function will be executed. Click on the **Add** button to add the post
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Transition parent when all subtasks are resolved
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If your issue has a lot of subtasks, it''s possible to move the parent to a
    new state in the workflow when all its subtasks are resolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transition parent when all subtasks are resolved](img/image_12_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select **Parent action** as **Done (41)** and **Resolution** as **Done**. Click
    on the **Add** button to add the post function. This is particularly useful in
    Scrum boards, when you are to change the state of the story when all of its subtasks
    are resolved.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous other post functions that can be used in the workflow. Using
    the ScriptRunner add-on, a lot of flexibility and control can be added in the
    workflow to perform actions that were not possible earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing powerful JQL functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already discussed searching issues in JIRA with the **Basic** and **Advanced**
    search options using JQL. However, JQL has some limitations. JIRA administrators
    often try to fetch the information directly from the database, which is difficult
    to do because it requires a good knowledge of the JIRA database schema.
  prefs: []
  type: TYPE_NORMAL
- en: ScriptRunner introduces new JQL functions. You can use these functions in your
    instance. After installing this add-on, just perform the re-indexing to enable
    the new JQL functions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss some of these JQL functions.
  prefs: []
  type: TYPE_NORMAL
- en: Returning issues with number of comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the following JQL queries to return issues with the exact number of comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following query will return an issue with more than four comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Returning issues based on comment attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the following query to return issues commented on by project role administrators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This query returns issues with comments from a specific user in the past seven
    days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Returning issues based on attachments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the following query to fetch issues with a PDF as an attachment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This query finds issues in the file that were attached by a specific user in
    the past seven days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Comparing dates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Issues can also be fetched by comparing their date fields, such as **Resolution
    Date** and **Due Date**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this query to return issues that were resolved later than their due date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following query finds issues that were resolved within one week of their
    creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These are just some of the examples of additional JQL functions that you can
    use. For the full list, I recommend you refer to [https://jamieechlin.atlassian.net/wiki/display/GRV/Scripted+JQL+Functions](https://jamieechlin.atlassian.net/wiki/display/GRV/Scripted+JQL+Functions).
  prefs: []
  type: TYPE_NORMAL
- en: ScriptRunner is, personally, my favorite add-on, which I use with all of the
    JIRA instances that I manage. It just gives so much power and control to effectively
    manage various administrative tasks in JIRA. Apart from various built-in scripts,
    which give administrators access to ready-to-use features, one can also write
    one's own script and use it to perform more advanced and complex tasks. This ability
    to write scripts opens up a lot of possibilities to enhance the workflow and to
    add more features in JIRA without developing an add-on.
  prefs: []
  type: TYPE_NORMAL
- en: Installing JIRA CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like any other add-on, Atlassian CLI can be installed from the JIRA **Administration**
    interface. Perform these steps to install it on your JIRA instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **Add-ons** | **Find new add-ons** (under **ATLASSIAN
    MARKETPLACE**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search box, enter `Atlassian Command Line Interface` and press the *Enter*
    key. The **JIRA Command Line Interface (CLI)** add-on will appear in the search
    result list:![Installing JIRA CLI](img/image_12_027.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Free trial** button, then press the **Accept** button in the
    **Accept terms and agreements** pop-up and the CLI add-on will begin downloading:![Installing
    JIRA CLI](img/image_12_028.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JIRA CLI will then be downloaded and installed on your instance. Finally, you
    will be asked to enter your Atlassian account to generate a trial license for
    JIRA CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up window that appears confirming the add-on installation, click
    on the **Close** link in the bottom right corner:![Installing JIRA CLI](img/image_12_029.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JIRA CLI will now be installed in your JIRA instance. This add-on doesn't really
    have any UI in a JIRA instance; instead, the add-on is used for remotely accessing
    JIRA by another utility, called **Atlassian Command Line Interface (CLI)**, which
    is a collection of scripts and has to be run from your computer. Download it from [https://marketplace.atlassian.com/plugins/org.swift.atlassian.cli/server/overview](https://marketplace.atlassian.com/plugins/org.swift.atlassian.cli/server/overview).
  prefs: []
  type: TYPE_NORMAL
- en: You will get a file like `atlassian-cli-5.4.0-distribution.zip`. Save it to
    your favorite location on your computer. Unzip this package, and using the Windows
    command line, navigate to the uncompressed folder and run the following commands.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch the list of boards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following command will get the list of all the boards in your JIRA instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fetch the list of boards](img/image_12_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fetch the list of comments of a particular issue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following command will get the list of all the comments of a particular
    issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fetch the list of comments of a particular issue](img/image_12_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create an issue from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following command to create an issue from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create an issue from the command line](img/image_12_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These are some of the examples of JIRA CLI. It is very powerful as these commands
    can be invoked by any script. It also opens up a wide range of possibilities,
    not only to JIRA administrators, but also to developers who want to integrate
    with JIRA. To get a list of all the functionality and examples, visit [https://bobswift.atlassian.net/wiki/display/JCLI/Examples](https://bobswift.atlassian.net/wiki/display/JCLI/Examples).
  prefs: []
  type: TYPE_NORMAL
- en: The command-line package can be run from Windows, Linux, and OS X. It just needs
    Java 7 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed ScriptRunner, which is an amazing add-on for performing
    complex customizations in the workflow, accessing powerful JQL functions, and
    running various scripts, which can be used by JIRA administrators to maintain
    the instance efficiently. ScriptRunner is by far the most popular admin tool used
    by JIRA administrators.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will discuss how to access the JIRA database directly
    to fetch data. JIRA offers lots of good reports, but sometimes they are not good
    enough and more insight is required. If you know the JIRA database schema and
    how to access the database, any data can be retrieved for further reporting purposes.
  prefs: []
  type: TYPE_NORMAL
