- en: '*Best Practices*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for reading this book. I hope you are ready to introduce the continuous
    delivery approach to your IT projects. By way of a final section for this book,
    I propose a list of the top 10 Continuous Delivery practices. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: Practice 1 – Own the process within the team!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Own the entire process within the team, from receiving requirements to monitoring
    production. As was once remarked, "*A program running on the developer''s machine
    makes no money*." This is why it''s important to have a small DevOps team that
    takes complete ownership of a product. Actually, that is the true meaning of **DevOps**:
    **Development and Operations**, from the beginning to the end:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Own every stage of the Continuous Delivery pipeline: how to build the software,
    what the requirements are in acceptance tests, and how to release the product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid having a pipeline expert! Every member of the team should be involved
    in creating the pipeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find a good way to share the current pipeline state (and the production monitoring)
    among team members. The most effective solution is big screens in the team space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a developer, QA, and IT operations engineer are separate experts, then make
    sure they work together in one agile team. Separate teams based on expertise result
    in no one taking responsibility for the product.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that autonomy given to the team results in high job satisfaction and
    exceptional engagement. This leads to great products!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 2 – Automate everything!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Automate everything, from business requirements (in the form of acceptance
    tests) to the deployment process. Manual descriptions, wiki pages with instruction
    steps, they all quickly become out of date and lead to tribal knowledge that makes
    the process slow, tedious, and unreliable. This, in turn, leads to a need for
    release rehearsals, and makes every deployment unique. Don''t go down this path!
    As a rule, if you do anything for the second time, automate it:'
  prefs: []
  type: TYPE_NORMAL
- en: Eliminate all manual steps; they are a source of errors! The whole process must
    be repeatable and reliable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't ever make any changes directly in production! Use configuration management
    tools instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use precisely the same mechanism to deploy to every environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always include an automated smoke test to check whether the release was completed
    successfully.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use database schema migrations to automate database changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use automatic maintenance scripts for backup and cleanup. Don't forget to remove
    unused Docker images!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 3 – Version everything!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Version everything: software source code, build scripts, automated tests, configuration
    management files, Continuous Delivery pipelines, monitoring scripts, binaries,
    and documentation; simply everything. Make your work task-based, where each task
    results in a commit to the repository, no matter whether it''s related to requirement
    gathering, architecture design, configuration, or software development. A task
    starts on the agile board and ends up in the repository. This way, you maintain
    a single point of truth with the history and reasons for the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Be strict about version control. Version everything means everything!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep the source code and configuration in the code repository, the binaries
    in the artifact repository, and the tasks in the agile issue tracking tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop the Continuous Delivery pipeline as a code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use database migrations and store them in a repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store documentation in the form of markdown files that can be version-controlled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 4 – Use business language for acceptance tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use business-facing language for acceptance tests to improve mutual communication
    and a common understanding of the requirements. Work closely with the product
    owner to create what Eric Evan called the *ubiquitous language*, a common dialect
    between the business and technology. Misunderstandings are the root cause of most project
    failures:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a common language and use it inside the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an acceptance testing framework, such as Cucumber or FitNesse, to help the
    business team understand and get them involved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Express business values inside acceptance tests, and don't forget about them
    during development. It's easy to spend too much time on unrelated topics!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve and maintain acceptance tests so that they always act as regression
    tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure everyone is aware that a passing acceptance test suite means a green
    light from the business to release the software.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 5 – Be ready to roll back
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Be ready to roll back; sooner or later, you will need to do it. Remember, you
    don''t need more QAs; you need a faster rollback. If anything goes wrong in production,
    the first thing you want to do is to play safe and come back to the last working
    version:'
  prefs: []
  type: TYPE_NORMAL
- en: Develop a rollback strategy and the process of what to do when the system is
    down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split non-backward-compatible database changes into compatible ones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use the same process of delivery for rollbacks and standard releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider introducing blue-green deployments or canary releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't be afraid of bugs; the user won't leave you if you react quickly!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 6 – Don't underestimate the impact of people
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Don''t underestimate the impact of people. They are usually way more important
    than tools. You won''t automate delivery if the IT operations team won''t help
    you. After all, they know the current process. The same applies to QAs, businesses,
    and everyone involved. Make them important and involved:'
  prefs: []
  type: TYPE_NORMAL
- en: Let QAs and IT operations be a part of the DevOps team. You need their knowledge
    and skills!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide training to members who are currently doing manual activities so that
    they can move to automation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Favor informal communication and a flat structure of organization over hierarchy
    and orders. You won't do anything without goodwill!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 7 – Incorporate traceability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Incorporate traceability for the delivery process and working system. There
    is nothing worse than a failure without any log messages. Monitor the number of
    requests, the latency, the load of production servers, the state of the Continuous Delivery
    pipeline, and everything you can think of that could help you to analyze your
    current software. Be proactive! At some point, you will need to check the stats
    and logs:'
  prefs: []
  type: TYPE_NORMAL
- en: Log pipeline activities! In the case of failure, notify the team with an informative
    message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement proper logging and monitoring of the running system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use specialized tools for system monitoring, such as Kibana, Grafana, or Logmatic.io.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate production monitoring into your development ecosystem. Consider having
    big screens with the current production stats in the common team space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 8 – Integrate often
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrate often; actually, all the time! As someone once said, "*Continuous
    is more often than you think*." There is nothing more frustrating than resolving
    merge conflicts. Continuous integration is less about the tool and more about
    the team practice. Integrate the code into one code base at least a few times
    a day. Forget about long-lasting feature branches and a huge number of local changes.
    Trunk-based development and feature toggles for the win!
  prefs: []
  type: TYPE_NORMAL
- en: Use trunk-based development and feature toggles instead of feature branches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need a branch or local changes, make sure that you integrate with the
    rest of the team at least once a day.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always keep the trunk healthy; make sure you run tests before you merge into
    the baseline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the pipeline after every commit to the repository for a faster feedback
    cycle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 9 – Only build binaries once
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build binaries only once, and run the same one on each of the environments,
    irrespective of whether they are in a form of Docker images or JAR packages; building
    only once eliminates the risk of differences introduced by various environments.
    It also saves time and resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Build once, and pass the same binary between environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an artifact repository to store and version binaries. Don't ever use the
    source code repository for that purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Externalize configurations and use a configuration management tool to introduce
    differences between environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice 10 – Release often
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Release often, preferably following each commit to the repository. As the saying
    goes, "*If it hurts, do it more often."* Releasing as a daily routine makes the
    process predictable and calm. Stay away from being trapped in the rare release
    habit. That will only get worse and you will end up releasing once a year, having
    a three month preparation period!
  prefs: []
  type: TYPE_NORMAL
- en: Rephrase your definition of done to *done means released*. Take ownership of
    the whole process!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use feature toggles to hide features that are still in progress from users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use canary releases and quick rollback to reduce the risk of bugs in production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopt a zero-downtime deployment strategy to enable frequent releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the final part of this book, we've covered the most important ideas and
    tooling around the Continuous Delivery process. I hope you found it valuable,
    and I wish you all the best in your Continuous Delivery journey!
  prefs: []
  type: TYPE_NORMAL
