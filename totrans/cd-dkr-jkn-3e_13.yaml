- en: '*Best Practices*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*最佳实践*'
- en: Thank you for reading this book. I hope you are ready to introduce the continuous
    delivery approach to your IT projects. By way of a final section for this book,
    I propose a list of the top 10 Continuous Delivery practices. Enjoy!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读这本书。我希望你已经准备好将持续交付方法引入你的IT项目。作为本书的最后一部分，我提出了持续交付的十大最佳实践列表。祝你阅读愉快！
- en: Practice 1 – Own the process within the team!
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践 1 – 在团队内掌控过程！
- en: 'Own the entire process within the team, from receiving requirements to monitoring
    production. As was once remarked, "*A program running on the developer''s machine
    makes no money*." This is why it''s important to have a small DevOps team that
    takes complete ownership of a product. Actually, that is the true meaning of **DevOps**:
    **Development and Operations**, from the beginning to the end:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队内拥有整个过程的掌控，从接收需求到监控生产。如曾经所说，"*开发者机器上的程序不能赚钱*。"这就是为什么拥有一个小型的DevOps团队并完全负责产品是很重要的。实际上，这正是**DevOps**的真正含义：**开发与运维**，从头到尾：
- en: 'Own every stage of the Continuous Delivery pipeline: how to build the software,
    what the requirements are in acceptance tests, and how to release the product.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌控持续交付管道的每个阶段：如何构建软件，验收测试中的要求是什么，以及如何发布产品。
- en: Avoid having a pipeline expert! Every member of the team should be involved
    in creating the pipeline.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免拥有专门的管道专家！团队中的每个成员都应该参与创建管道。
- en: Find a good way to share the current pipeline state (and the production monitoring)
    among team members. The most effective solution is big screens in the team space.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到一种良好的方式与团队成员共享当前的管道状态（以及生产监控）。最有效的解决方案是在团队空间内放置大屏幕。
- en: If a developer, QA, and IT operations engineer are separate experts, then make
    sure they work together in one agile team. Separate teams based on expertise result
    in no one taking responsibility for the product.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果开发者、QA 和 IT 运维工程师是不同的专家，那么确保他们在一个敏捷团队中共同工作。基于专长划分的团队会导致没有人对产品负责。
- en: Remember that autonomy given to the team results in high job satisfaction and
    exceptional engagement. This leads to great products!
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住，赋予团队自主权会带来高水平的工作满意度和卓越的参与感。这将带来伟大的产品！
- en: Practice 2 – Automate everything!
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践 2 – 自动化一切！
- en: 'Automate everything, from business requirements (in the form of acceptance
    tests) to the deployment process. Manual descriptions, wiki pages with instruction
    steps, they all quickly become out of date and lead to tribal knowledge that makes
    the process slow, tedious, and unreliable. This, in turn, leads to a need for
    release rehearsals, and makes every deployment unique. Don''t go down this path!
    As a rule, if you do anything for the second time, automate it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化一切，从业务需求（以验收测试的形式）到部署过程。手动描述、包含步骤说明的Wiki页面都会迅速过时，导致部落知识的积累，使得过程变得缓慢、繁琐且不可靠。这反过来又导致需要进行发布演练，使得每次部署都变得独一无二。不要走这条路！作为规则，如果你做任何事情已经是第二次，自动化它：
- en: Eliminate all manual steps; they are a source of errors! The whole process must
    be repeatable and reliable.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除所有手动步骤；它们是错误的源头！整个过程必须是可重复和可靠的。
- en: Don't ever make any changes directly in production! Use configuration management
    tools instead.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要直接在生产环境中进行任何更改！请改用配置管理工具。
- en: Use precisely the same mechanism to deploy to every environment.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用完全相同的机制来部署到每个环境中。
- en: Always include an automated smoke test to check whether the release was completed
    successfully.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终包含自动化冒烟测试，以检查发布是否成功完成。
- en: Use database schema migrations to automate database changes.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库模式迁移来自动化数据库变更。
- en: Use automatic maintenance scripts for backup and cleanup. Don't forget to remove
    unused Docker images!
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动化维护脚本进行备份和清理。别忘了删除未使用的Docker镜像！
- en: Practice 3 – Version everything!
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践 3 – 版本化所有内容！
- en: 'Version everything: software source code, build scripts, automated tests, configuration
    management files, Continuous Delivery pipelines, monitoring scripts, binaries,
    and documentation; simply everything. Make your work task-based, where each task
    results in a commit to the repository, no matter whether it''s related to requirement
    gathering, architecture design, configuration, or software development. A task
    starts on the agile board and ends up in the repository. This way, you maintain
    a single point of truth with the history and reasons for the changes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 版本化所有内容：软件源代码、构建脚本、自动化测试、配置管理文件、持续交付管道、监控脚本、二进制文件以及文档；简而言之，一切都要版本化。将工作任务化，每个任务都会导致一个提交到仓库，无论该任务是与需求收集、架构设计、配置还是软件开发相关。任务从敏捷看板开始，最终结束在仓库中。这样，你就能维护一个单一的真实来源，记录变更的历史和原因：
- en: Be strict about version control. Version everything means everything!
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格遵循版本控制。版本化所有内容意味着一切！
- en: Keep the source code and configuration in the code repository, the binaries
    in the artifact repository, and the tasks in the agile issue tracking tool.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将源代码和配置存储在代码仓库中，将二进制文件存储在工件仓库中，并将任务存储在敏捷问题追踪工具中。
- en: Develop the Continuous Delivery pipeline as a code.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将持续交付管道开发为代码。
- en: Use database migrations and store them in a repository.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库迁移并将其存储在仓库中。
- en: Store documentation in the form of markdown files that can be version-controlled.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文档存储为可以版本控制的markdown文件形式。
- en: Practice 4 – Use business language for acceptance tests
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践 4 – 使用业务语言进行接受测试
- en: 'Use business-facing language for acceptance tests to improve mutual communication
    and a common understanding of the requirements. Work closely with the product
    owner to create what Eric Evan called the *ubiquitous language*, a common dialect
    between the business and technology. Misunderstandings are the root cause of most project
    failures:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在接受测试中使用面向业务的语言，以促进相互沟通，并帮助更好地理解需求。与产品负责人紧密合作，创建埃里克·埃文（Eric Evans）所称的*普遍语言*，即业务和技术之间的共同语言。误解是大多数项目失败的根本原因：
- en: Create a common language and use it inside the project.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个通用语言，并在项目中使用它。
- en: Use an acceptance testing framework, such as Cucumber or FitNesse, to help the
    business team understand and get them involved.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用接受测试框架，如Cucumber或FitNesse，帮助业务团队理解并使他们参与进来。
- en: Express business values inside acceptance tests, and don't forget about them
    during development. It's easy to spend too much time on unrelated topics!
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在接受测试中表达业务价值，并且在开发过程中不要忽视它们。很容易在无关的议题上花费过多时间！
- en: Improve and maintain acceptance tests so that they always act as regression
    tests.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进并维护接受测试，使其始终充当回归测试。
- en: Make sure everyone is aware that a passing acceptance test suite means a green
    light from the business to release the software.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每个人都意识到，接受测试套件通过意味着业务部门同意发布软件。
- en: Practice 5 – Be ready to roll back
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践 5 – 为回滚做好准备
- en: 'Be ready to roll back; sooner or later, you will need to do it. Remember, you
    don''t need more QAs; you need a faster rollback. If anything goes wrong in production,
    the first thing you want to do is to play safe and come back to the last working
    version:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为回滚做好准备；迟早你会需要它。记住，你不需要更多的QA；你需要一个更快的回滚。如果生产环境出现问题，你首先要做的就是保持安全并回到最后一个正常版本：
- en: Develop a rollback strategy and the process of what to do when the system is
    down.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制定回滚策略，并规划当系统故障时该做的事。
- en: Split non-backward-compatible database changes into compatible ones.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将不兼容的数据库变更拆分为兼容的变更。
- en: Always use the same process of delivery for rollbacks and standard releases.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终使用相同的交付流程进行回滚和标准发布。
- en: Consider introducing blue-green deployments or canary releases.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑引入蓝绿部署或金丝雀发布。
- en: Don't be afraid of bugs; the user won't leave you if you react quickly!
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要害怕bug；如果你快速反应，用户是不会离开的！
- en: Practice 6 – Don't underestimate the impact of people
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践 6 – 不低估人的影响
- en: 'Don''t underestimate the impact of people. They are usually way more important
    than tools. You won''t automate delivery if the IT operations team won''t help
    you. After all, they know the current process. The same applies to QAs, businesses,
    and everyone involved. Make them important and involved:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不要低估人的影响。人们通常比工具更重要。如果IT运维团队不愿意帮助你，你将无法实现自动化交付。毕竟，他们了解当前的流程。相同的道理适用于质量保证（QA）人员、业务部门以及所有相关人员。让他们成为重要角色并积极参与：
- en: Let QAs and IT operations be a part of the DevOps team. You need their knowledge
    and skills!
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让QA和IT运维成为DevOps团队的一部分。你需要他们的知识和技能！
- en: Provide training to members who are currently doing manual activities so that
    they can move to automation.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为当前执行手动操作的成员提供培训，使他们能够转向自动化。
- en: Favor informal communication and a flat structure of organization over hierarchy
    and orders. You won't do anything without goodwill!
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更倾向于非正式沟通和扁平化的组织结构，而非等级制度和命令。没有善意，你什么都做不成！
- en: Practice 7 – Incorporate traceability
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践7 - 纳入可追溯性
- en: 'Incorporate traceability for the delivery process and working system. There
    is nothing worse than a failure without any log messages. Monitor the number of
    requests, the latency, the load of production servers, the state of the Continuous Delivery
    pipeline, and everything you can think of that could help you to analyze your
    current software. Be proactive! At some point, you will need to check the stats
    and logs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将可追溯性纳入交付过程和工作系统中。没有任何日志信息的失败是最糟糕的。监控请求数量、延迟、生产服务器的负载、持续交付流水线的状态，以及任何你认为能帮助你分析当前软件的内容。要主动！在某些时候，你需要检查统计数据和日志：
- en: Log pipeline activities! In the case of failure, notify the team with an informative
    message.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录流水线活动！在发生失败时，使用信息丰富的消息通知团队。
- en: Implement proper logging and monitoring of the running system.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现运行系统的适当日志记录和监控。
- en: Use specialized tools for system monitoring, such as Kibana, Grafana, or Logmatic.io.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用专门的系统监控工具，如Kibana、Grafana或Logmatic.io。
- en: Integrate production monitoring into your development ecosystem. Consider having
    big screens with the current production stats in the common team space.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将生产监控集成到你的开发生态系统中。考虑在公共团队空间中放置大屏幕显示当前的生产统计数据。
- en: Practice 8 – Integrate often
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践8 - 经常集成
- en: Integrate often; actually, all the time! As someone once said, "*Continuous
    is more often than you think*." There is nothing more frustrating than resolving
    merge conflicts. Continuous integration is less about the tool and more about
    the team practice. Integrate the code into one code base at least a few times
    a day. Forget about long-lasting feature branches and a huge number of local changes.
    Trunk-based development and feature toggles for the win!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 经常集成；事实上，应该始终集成！正如某人曾说过，"*持续集成比你想象的更频繁*。"没有什么比解决合并冲突更让人沮丧的了。持续集成更关乎团队实践，而非工具。每天至少将代码集成到一个代码库几次。忘掉长时间存在的功能分支和大量的本地更改。基于主干的开发和特性开关才是胜利之道！
- en: Use trunk-based development and feature toggles instead of feature branches.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于主干的开发和特性开关，而不是功能分支。
- en: If you need a branch or local changes, make sure that you integrate with the
    rest of the team at least once a day.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要一个分支或本地更改，请确保每天至少与团队其他成员进行一次集成。
- en: Always keep the trunk healthy; make sure you run tests before you merge into
    the baseline.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终保持主干的健康；在合并到基线之前确保先运行测试。
- en: Run the pipeline after every commit to the repository for a faster feedback
    cycle.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次提交到代码库后都运行流水线，以获得更快速的反馈周期。
- en: Practice 9 – Only build binaries once
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践9 - 只构建一次二进制文件
- en: 'Build binaries only once, and run the same one on each of the environments,
    irrespective of whether they are in a form of Docker images or JAR packages; building
    only once eliminates the risk of differences introduced by various environments.
    It also saves time and resources:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 只构建一次二进制文件，并在每个环境中运行相同的文件，无论它们是以Docker镜像还是JAR包的形式存在；只构建一次可以消除由于不同环境引入的差异风险，同时节省时间和资源：
- en: Build once, and pass the same binary between environments.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次构建，跨环境传递相同的二进制文件。
- en: Use an artifact repository to store and version binaries. Don't ever use the
    source code repository for that purpose.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工件库来存储和版本控制二进制文件。绝不要将源代码库用于此目的。
- en: Externalize configurations and use a configuration management tool to introduce
    differences between environments.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部化配置并使用配置管理工具来引入环境之间的差异。
- en: Practice 10 – Release often
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践10 - 经常发布
- en: Release often, preferably following each commit to the repository. As the saying
    goes, "*If it hurts, do it more often."* Releasing as a daily routine makes the
    process predictable and calm. Stay away from being trapped in the rare release
    habit. That will only get worse and you will end up releasing once a year, having
    a three month preparation period!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 经常发布，最好在每次提交到代码仓库后进行发布。正如俗话所说，"*如果痛苦，就多做几次*"。将发布作为日常例行公事，使得过程变得可预测且平稳。避免陷入稀有发布的习惯。那样只会越来越糟，最终你将只在一年发布一次，并且准备期长达三个月！
- en: Rephrase your definition of done to *done means released*. Take ownership of
    the whole process!
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新定义完成的标准为*完成意味着已发布*。对整个过程负责！
- en: Use feature toggles to hide features that are still in progress from users.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用功能开关将仍在进行中的功能对用户隐藏。
- en: Use canary releases and quick rollback to reduce the risk of bugs in production.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用金丝雀发布和快速回滚来降低生产环境中出现错误的风险。
- en: Adopt a zero-downtime deployment strategy to enable frequent releases.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用零停机时间的部署策略，以支持频繁发布。
- en: With the final part of this book, we've covered the most important ideas and
    tooling around the Continuous Delivery process. I hope you found it valuable,
    and I wish you all the best in your Continuous Delivery journey!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后部分，我们已经覆盖了关于持续交付过程的最重要的理念和工具。我希望你觉得这些内容有价值，并祝你在持续交付的旅程中一切顺利！
