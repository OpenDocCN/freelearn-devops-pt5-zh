- en: '*Chapter 1*'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第一章*'
- en: Docker Overview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 概述
- en: Welcome to *Mastering Docker, Fourth Edition*! This first chapter will cover
    the **Docker** basics that you should already have a pretty good handle on. But
    if you don't already have the required knowledge at this point, this chapter will
    help you get up to speed, so that subsequent chapters don't feel as heavy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 *《精通 Docker，第四版》*！本章将涵盖你应该已经掌握的 **Docker** 基础知识。如果你现在还没有掌握必要的知识，本章将帮助你尽快跟上，以免后续章节显得太难。
- en: By the end of the book, you will be a Docker master able to implement Docker
    in your environments, building and supporting applications on top of them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到书籍结束时，你将成为一个 Docker 大师，能够在你的环境中实现 Docker，构建和支持基于 Docker 的应用程序。
- en: 'In this chapter, we''re going to review the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将回顾以下内容：
- en: Understanding Docker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Docker
- en: The differences between dedicated hosts, virtual machines, and Docker installers/installation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用主机、虚拟机和 Docker 安装器/安装之间的区别
- en: The Docker command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 命令
- en: The Docker and container ecosystem
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 和容器生态系统
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we are going to discuss how to install Docker locally. To
    do this, you will need a host running one of the three following operating systems:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论如何在本地安装 Docker。为此，你需要一台运行以下三种操作系统之一的主机：
- en: macOS High Sierra and above
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS High Sierra 及以上版本
- en: Windows 10 Professional
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10 专业版
- en: Ubuntu 18.04 and above
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 18.04 及以上版本
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/35fytE3](https://bit.ly/35fytE3)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码实际效果：[https://bit.ly/35fytE3](https://bit.ly/35fytE3)
- en: Understanding Docker
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Docker
- en: Before we look at installing Docker, let's begin by getting an understanding
    of the problems that the Docker technology aims to solve.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装 Docker 之前，让我们先了解一下 Docker 技术旨在解决的问题。
- en: Developers
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者
- en: The company behind Docker, also called Docker, has always described the program
    as fixing the '*it works on my machine*' problem. This problem is best summed
    up by an image, based on the Disaster Girl meme, which simply had the tagline
    '*Worked fine in dev, ops problem now*', that started popping up in presentations,
    forums, and Slack channels a few years ago. While it is funny, it is, unfortunately,
    an all-too-real problem and one I have personally been on the receiving end of,
    let's take a look at an example of what is meant by this.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 背后的公司，也叫做 Docker，一直将该程序描述为解决“*它在我的机器上能运行*”问题。这个问题可以通过一张基于“灾难女孩”模因的图片来总结，图片上简单写着“*在开发中运行正常，现在是运维的问题*”的标语，几年前开始在各种演示、论坛和
    Slack 渠道中出现。虽然它很有趣，但不幸的是，它是一个过于真实的问题，我个人也曾深受其害，下面我们来看一个例子，理解这个问题是什么意思。
- en: The problem
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: Even in a world where **DevOps** best practices are followed, it is still all
    too easy for a developer's working environment to not match the final production
    environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在遵循**DevOps**最佳实践的世界中，开发者的工作环境与最终的生产环境不匹配的情况仍然屡见不鲜。
- en: For example, a developer using the **macOS** version of, say, **PHP** will probably
    not be running the same version as the **Linux server** that hosts the production
    code. Even if the versions match, you then have to deal with differences in the
    configuration and overall environment on which the version of PHP is running,
    such as differences in the way file permissions are handled between different
    operating system versions, to name just one potential problem.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 **macOS** 版本的开发者，假设他们使用的是 **PHP**，可能不会运行与托管生产代码的 **Linux 服务器** 相同的版本。即使版本相同，你还必须应对配置和运行该版本的整体环境的差异，比如不同操作系统版本之间处理文件权限的方式差异，仅举一个潜在问题。
- en: All of this comes to a head when it is time for a developer to deploy their
    code to the host, and it doesn't work. So, should the production environment be
    configured to match the developer's machine, or should developers only do their
    work in environments that match those used in production?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者将代码部署到主机时，一切问题往往爆发出来，这时候该怎么办？是让生产环境配置与开发者的机器一致，还是开发者只在与生产环境匹配的环境中进行工作？
- en: In an ideal world, everything should be consistent, from the developer's laptop
    all the way through to your production servers; however, this utopia has traditionally
    been challenging to achieve. Everyone has their way of working and their own personal
    preferences—enforcing consistency across multiple platforms is difficult enough
    when a single engineer is working on the systems, let alone a team of engineers
    working with a team of potentially hundreds of developers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界里，一切应该保持一致，从开发者的笔记本电脑到生产服务器；然而，这种乌托邦理想传统上一直很难实现。每个人都有自己的工作方式和个人偏好——在一个工程师负责系统的情况下，强制在多个平台之间保持一致就已经足够困难，更别提一个由数百个开发人员组成的团队在一起合作了。
- en: The Docker solution
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 解决方案
- en: Using Docker for Mac or Docker for Windows, a developer can quickly wrap their
    code in a container that they have either defined themselves or created as a **Dockerfile**
    while working alongside a sysadmin or operations team. We will be covering this
    in [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068), *Building Container
    Images*, as well as **Docker Compose** files, which we will go into more detail
    about in [*Chapter 5*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157), *Docker
    Compose*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker for Mac 或 Docker for Windows，开发者可以快速将他们的代码封装在一个容器中，该容器是他们自己定义的或在与系统管理员或运维团队合作时创建的**Dockerfile**。我们将在[*第2章*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068)《构建容器镜像》中介绍这一点，同时也会详细讲解**Docker
    Compose**文件，相关内容将在[*第5章*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157)《Docker
    Compose》中进一步探讨。
- en: Programmers can continue to use their chosen **integrated development environment**
    (**IDE**) and maintain their workflows when working with the code. As we will
    see in the upcoming sections of this chapter, installing and using Docker is not
    difficult; considering how much of a chore it was to maintain consistent environments
    in the past, even with automation, Docker feels a little too easy – almost like
    cheating.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员可以继续使用他们选择的**集成开发环境**（**IDE**），并在处理代码时保持他们的工作流。正如我们将在本章的后续部分看到的那样，安装和使用 Docker
    并不难；考虑到过去即使在有自动化的情况下维持一致的环境也是一项繁琐的工作，Docker 现在感觉有点太简单——几乎像是在作弊。
- en: Operators
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作符
- en: I have been working in operations for more years than I would like to admit,
    and the following problem has cropped regularly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我在运维工作中已经多年，尽管不愿意承认，但以下问题经常出现。
- en: The problem
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: 'Let''s say you are looking after five servers: three load-balanced web servers
    and two database servers that are in a master or slave configuration dedicated
    to running Application 1\. You are using a tool, such as **Puppet** or **Chef**,
    to automatically manage the software stack and configuration across your five
    servers.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你负责管理五台服务器：三台负载均衡的 Web 服务器和两台数据库服务器，它们以主从配置专门运行应用程序1。你使用一个工具，例如**Puppet**或**Chef**，来自动管理这五台服务器上的软件栈和配置。
- en: Everything is going great until you are told that we need to deploy Application
    2 on the same servers that are running Application 1\. On the face of it, this
    is not a problem – you can tweak your Puppet or Chef configuration to add new
    users, add virtual hosts, pull the latest code down, and so on. However, you notice
    that Application 2 requires a newer version of the software than the one you are
    running for Application 1.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一切进展顺利，直到你被告知需要在与应用程序1运行的同一台服务器上部署应用程序2。乍一看，这似乎不是问题——你可以调整Puppet或Chef配置来添加新用户、添加虚拟主机、拉取最新的代码等等。然而，你注意到应用程序2需要比应用程序1运行的版本更新的软件。
- en: To make matters worse, you already know that Application 1 flat out refuses
    to work with the new software stack and that Application 2 is not backward compatible.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，你已经知道应用程序1完全拒绝与新软件栈兼容，而应用程序2又不支持向后兼容。
- en: 'Traditionally, this leaves you with a few choices, all of which just add to
    the problem in one way or another:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，这让你面临几个选择，每个选择都以不同的方式加剧问题：
- en: Ask for more servers? While this tradition is probably the safest technical
    solution, it does not automatically mean that there will be the budget for additional
    resources.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求更多的服务器？虽然这个传统方案可能是最安全的技术解决方案，但它并不自动意味着会有足够的预算来增加资源。
- en: 'Re-architect the solution? Taking one of the web and database servers out of
    the load balancer or replication and redeploying them with the software stack
    for Application 2 may seem like the next easiest option from a technical point
    of view. However, you are introducing single points of failure for Application
    2 and reducing the redundancy for Application 1 as well: there was probably a
    reason why you were running three web and two database servers in the first place.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新架构解决方案？从负载均衡器或复制中移除一个 Web 服务器和数据库服务器，并使用应用程序 2 的软件栈重新部署它们，从技术角度来看，似乎是下一个最简单的选择。然而，你正在为应用程序
    2 引入单点故障，并减少了应用程序 1 的冗余：你最初之所以运行三台 Web 服务器和两台数据库服务器，可能是有原因的。
- en: Attempt to install the new software stack side-by-side on your servers? Well,
    this certainly is possible and may seem like a good short-term plan to get the
    project out of the door, but it could leave you with a house of cards that could
    come tumbling down when the first critical security patch is needed for either
    software stack.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试在你的服务器上并行安装新的软件栈？这当然是可行的，可能看起来是一个不错的短期计划，可以让项目迅速推出，但这可能会让你陷入如同纸牌屋般的困境，当需要为任一软件栈打上第一个关键的安全补丁时，一切都可能崩塌。
- en: The Docker solution
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 解决方案
- en: This is where Docker starts to come into its own. If you have Application 1
    running across your three web servers in containers, you may be running more than
    three containers; in fact, you could already be running six, doubling up on the
    containers, allowing you to run rolling deployments of your application without
    reducing the availability of Application 1.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Docker 展现其优势的地方。如果你的应用程序 1 正在三个 Web 服务器上的容器中运行，你可能已经不止在运行三个容器；实际上，你可能已经在运行六个容器，容器的数量翻倍，允许你进行应用程序的滚动部署，而不会减少应用程序
    1 的可用性。
- en: Deploying Application 2 in this environment is as easy as merely launching more
    containers across your three hosts and then routing to the newly deployed application
    using your load balancer. As you are just deploying containers, you do not need
    to worry about the logistics of deploying, configuring, and managing two versions
    of the same software stack on the same server.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个环境中部署应用程序 2 就像只是简单地在你的三个主机上启动更多容器，然后通过负载均衡器将流量路由到新部署的应用程序一样。因为你只是部署容器，所以不需要担心在同一服务器上部署、配置和管理两个版本的相同软件栈的物流问题。
- en: We will work through an example of this exact scenario in [*Chapter 5*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157),
    *Docker Compose*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第 5 章*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157)中通过一个具体示例讲解这一场景，*Docker
    Compose*。
- en: Enterprise
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 企业
- en: Enterprises suffer from the same problems faced by developers and operators,
    as they employ both types of profession; however, they have both of these entities
    on a much larger scale, and there is also a lot more risk involved.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 企业面临与开发者和运维人员相同的问题，因为它们同时拥有这两种职业；然而，它们在更大规模上拥有这两个实体，并且涉及的风险也更大。
- en: The problem
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: 'Because of the risk as well as the fact that any downtime could cost sales
    or impact reputation, enterprises need to test every deployment before it is released.
    This means that new features and fixes are stuck in a holding pattern while the
    following takes place:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于风险以及任何停机可能导致销售损失或影响声誉，企业在发布之前需要测试每个部署。这意味着新功能和修复将被搁置，直到以下事项发生：
- en: Test environments are spun up and configured.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试环境被启动并配置好。
- en: Applications are deployed across the newly launched environments.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序已部署到新启动的环境中。
- en: Test plans are executed, and the application and configuration are tweaked until
    the tests pass.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行测试计划，并调整应用程序和配置，直到测试通过。
- en: Requests for change are written, submitted, and discussed to get the updated
    application deployed to production.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提出变更请求，提交并讨论，最终将更新后的应用程序部署到生产环境中。
- en: This process can take anywhere from a few days to a few weeks, or even months,
    depending on the complexity of the application and the risk the change introduces.
    While the process is required to ensure continuity and availability for the enterprise
    at a technological level, it does potentially add risk at the business level.
    What if you have a new feature stuck in this holding pattern and a competitor
    releases a similar—or worse still—the same functionality, ahead of you?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能需要几天、几周，甚至几个月的时间，具体取决于应用程序的复杂性和更改所引入的风险。尽管这个过程对于确保企业在技术层面上的连续性和可用性是必需的，但它可能会在业务层面上增加风险。如果你的新功能被卡在这一持有状态，而竞争对手提前发布了类似的功能，甚至是完全相同的功能，怎么办？
- en: This scenario could be just as damaging to sales and reputation as the downtime
    that the process was put in place to protect you against in the first place.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况可能对销售和声誉造成的损害，与该过程最初被引入以保护你免受的停机损失一样严重。
- en: The Docker solution
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 解决方案
- en: Docker does not remove the need for a process, such as the one just described,
    to exist or be followed. However, as we have already touched upon, it does make
    things a lot easier as you are already working consistently. It means that your
    developers have been working with the same container configuration that is running
    in production. This means that it is not much of a step for the methodology to
    be applied to your testing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 并没有消除像刚才描述的那样的流程存在或被遵循的必要性。然而，正如我们已经提到的，它确实使事情变得更加轻松，因为你已经在持续工作。这意味着开发人员一直在使用与生产环境中运行的相同容器配置进行工作。这意味着将该方法应用于你的测试就不会是太大的步骤。
- en: For example, when a developer checks their code that they know works on their
    local development environment (as that is where they have been doing all of their
    work), your testing tool can launch the same containers to run your automated
    tests against. Once the containers have been used, they can be removed to free
    up resources for the next lot of tests. This means that suddenly, your testing
    process and procedures are a lot more flexible, and you can continue to reuse
    the same environment, rather than redeploying or re-imaging servers for the next
    set of testing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当开发人员检查他们在本地开发环境中知道可以正常运行的代码时（因为他们一直在该环境中进行工作），你的测试工具可以启动相同的容器来运行自动化测试。使用过的容器可以被删除，以便为下一轮测试释放资源。这意味着，突然之间，你的测试过程和流程变得更加灵活，你可以继续重用相同的环境，而不是为下一轮测试重新部署或重新映像服务器。
- en: This streamlining of the process can be taken as far as having your new application
    containers push through to production.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个流程的简化可以延伸到让你的新应用容器推送到生产环境中。
- en: The quicker this process can be completed, the faster you can confidently launch
    new features or fixes and keep ahead of the curve.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程完成得越快，你就越能自信地推出新功能或修复，保持在竞争前沿。
- en: So, we know what problems Docker was developed to solve. We now need to discuss
    what exactly Docker is and what it does.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们知道 Docker 是为了解决什么问题而开发的。接下来我们需要讨论的是 Docker 到底是什么，它做了什么。
- en: The differences between dedicated hosts, virtual machines, and Docker
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 专用主机、虚拟机和 Docker 之间的差异
- en: Docker is a container management system that helps us efficiently manage **Linux
    Containers** (**LXC**) more easily and universally. This lets you create images
    in virtual environments on your laptop and run commands against them. The actions
    you perform to the containers, running in these environments locally on your machine,
    will be the same commands or operations that you run against them when they are
    running in your production environment.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一种容器管理系统，帮助我们更轻松、普遍地高效管理**Linux 容器**（**LXC**）。这让你可以在笔记本上的虚拟环境中创建镜像，并对其运行命令。你在这些本地运行的环境中对容器执行的操作，将与它们在生产环境中运行时所执行的命令或操作相同。
- en: 'This helps us in that you don''t have to do things differently when you go
    from a development environment, such as the one on your local machine, to a production
    environment on your server. Now, let''s take a look at the differences between
    Docker containers and typical virtual machine environments:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于你在从开发环境（例如本地机器上的环境）转到生产环境（服务器上的环境）时，不必做出不同的操作。现在，让我们来看看 Docker 容器和典型虚拟机环境之间的区别：
- en: '![Figure 1.1 – Applications running on virtual machine environments'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 在虚拟机环境中运行的应用程序'
- en: '](img/image001.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image001.jpg)'
- en: Figure 1.1 – Applications running on virtual machine environments
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 在虚拟机环境中运行的应用程序
- en: 'As you can see, for a dedicated machine, we have three applications, all sharing
    the same orange software stack. Running virtual machines allows us to run three
    applications, running two completely different software stacks. The following
    diagram shows the same three applications running in containers using Docker:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在一台专用机器上，我们有三个应用程序，它们共享相同的橙色软件栈。运行虚拟机使我们能够运行三个应用程序，运行两种完全不同的软件栈。以下图表展示了在
    Docker 容器中运行的同三个应用程序：
- en: '![Figure 1.2 – Applications running on top of Docker'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 运行在 Docker 上的应用程序'
- en: '](img/image002.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image002.jpg)'
- en: Figure 1.2 – Applications running on top of Docker
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 运行在 Docker 上的应用程序
- en: This diagram gives us a lot of insight into the most significant key benefit
    of Docker, that is, there is no need for a complete operating system every time
    we need to bring up a new container, which cuts down on the overall size of containers.
    Since almost all the versions of Linux use the standard kernel models, Docker
    relies on using the host operating system's Linux kernel for the operating system
    it was built upon, such as Red Hat, CentOS, and Ubuntu.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表为我们提供了 Docker 最重要的关键好处的深刻见解，即每次我们需要启动一个新容器时，不需要一个完整的操作系统，这大大减少了容器的整体大小。由于几乎所有版本的
    Linux 都使用标准内核模型，Docker 依赖于使用主机操作系统的 Linux 内核作为其构建的操作系统，例如 Red Hat、CentOS 和 Ubuntu。
- en: For this reason, you can have almost any Linux operating system as your host
    operating system and be able to layer other Linux-based operating systems on top
    of the host. Well, that is, your applications are led to believe that a full operating
    system is actually installed—but in reality, we only install the binaries, such
    as a package manager and, for example, Apache/PHP and the libraries required to
    get just enough of an operating system for your applications to run.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这个原因，你几乎可以将任何 Linux 操作系统作为主机操作系统，并能够在主机上叠加其他基于 Linux 的操作系统。也就是说，你的应用程序会误以为一个完整的操作系统已经安装——但实际上，我们只安装了二进制文件，例如一个包管理器，以及比如
    Apache/PHP 和运行应用程序所需的库，这样就足够让你的应用程序运行。
- en: 'For example, in the earlier diagram, we could have Red Hat running for the
    orange application, and Debian running for the green application, but there would
    never be a need actually to install Red Hat or Debian on the host. Thus, another
    benefit of Docker is the size of images when they are created. They are built
    without the most significant piece: the kernel or the operating system. This makes
    them incredibly small, compact, and easy to ship.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在之前的图示中，我们可以让 Red Hat 为橙色应用程序提供支持，而 Debian 为绿色应用程序提供支持，但实际上并不需要在主机上安装 Red
    Hat 或 Debian。因此，Docker 的另一个好处是它创建镜像时的大小。它们的构建没有包含最重要的部分：内核或操作系统。这使得它们非常小、紧凑，且易于传输。
- en: Docker installation
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 安装
- en: 'Installers are one of the first pieces of software you need to get up and running
    with Docker on both your local machine and your server environments. Let''s first
    take a look at which environments you can install Docker in:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序是你在本地机器和服务器环境中开始使用 Docker 时需要的第一批软件之一。首先，我们来看看你可以在哪些环境中安装 Docker：
- en: Linux (various Linux flavors)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux（各种 Linux 发行版）
- en: macOS
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS
- en: Windows 10 Professional
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10 专业版
- en: Besides, you can run them on public clouds, such as Amazon Web Services, Microsoft
    Azure, and DigitalOcean, to name a few. With each of these installers listed previously,
    Docker actually operates in different ways on the operating system. For example,
    Docker runs natively on Linux. However, if you are using macOS or Windows 10,
    then it operates a little differently since it relies on using Linux.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以在公共云上运行它们，比如 Amazon Web Services、Microsoft Azure 和 DigitalOcean 等。通过之前列出的每个安装程序，Docker
    在操作系统上的工作方式有所不同。例如，Docker 在 Linux 上本地运行。然而，如果你使用的是 macOS 或 Windows 10，它的运行方式会有所不同，因为它依赖于
    Linux。
- en: Let's look at quickly installing Docker on a Linux desktop running Ubuntu 18.04,
    and then on macOS and Windows 10.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看看如何在运行 Ubuntu 18.04 的 Linux 桌面上安装 Docker，然后在 macOS 和 Windows 10 上进行安装。
- en: Installing Docker on Linux
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Docker
- en: 'As already mentioned, this is the most straightforward installation out of
    the three systems we will be looking at. We''ll be installing Docker on Ubuntu
    18.04; however, there are various flavors of Linux with their own package managers,
    which will handle this slightly differently. See the *Further reading* section
    for details on install on other Linux distributions. To install Docker, simply
    run the following command from a Terminal session:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这是我们将要讨论的三个系统中最简单的安装方法。我们将在 Ubuntu 18.04 上安装 Docker；然而，不同的 Linux 发行版有各自的包管理器，它们的安装方式会稍有不同。有关其他
    Linux 发行版安装的详细信息，请参阅 *进一步阅读* 部分。要安装 Docker，只需在终端会话中运行以下命令：
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will also be asked to add your current user to the Docker group. To do
    this, run the following command, making sure you replace the username with your
    own:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会要求你将当前用户添加到 Docker 组中。为此，请运行以下命令，确保将用户名替换为你自己的用户名：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These commands will download, install, and configure the latest version of Docker
    from Docker themselves. At the time of writing, the Linux operating system version
    installed by the official install script is 19.03.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将从 Docker 官方下载、安装并配置最新版本的 Docker。编写本文时，官方安装脚本安装的 Linux 操作系统版本是 19.03。
- en: 'Running the following command should confirm that Docker is installed and running:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令应确认 Docker 已安装并正在运行：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see something similar to the following output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似如下的输出：
- en: '![Figure 1.3 – Output of the docker version command showing the version of
    Docker installed on the system](img/image003.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 显示系统上安装的 Docker 版本的 `docker version` 命令输出](img/image003.jpg)'
- en: Figure 1.3 – Output of the docker version command showing the version of Docker
    installed on the system
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 显示系统上安装的 Docker 版本的 `docker version` 命令输出
- en: There is a supporting tool that we are going to use in future chapters, which
    are installed as part of the Docker for macOS or Windows 10 installers.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节中使用一个支持工具，它作为 Docker for macOS 或 Windows 10 安装程序的一部分进行安装。
- en: 'To ensure that we are ready to use the tool in later chapters, we should install
    it now. The tool is called `1.25.4` – update the version number in the commands
    in the following code block with whatever the latest version is when you install
    it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们在后续章节中能顺利使用该工具，我们应该现在就安装它。这个工具叫做`1.25.4`——在以下代码块中的命令中将版本号替换为你安装时的最新版本：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once it''s installed, you should be able to run the following two commands
    to confirm the version of the software is correct:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你应该能够运行以下两个命令来确认软件版本是否正确：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that we know how to install it on Linux, let's look at how we can install
    it on macOS.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何在 Linux 上安装它，接下来让我们看看如何在 macOS 上安装它。
- en: Installing Docker on macOS
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Docker
- en: Unlike the command-line Linux installation, Docker for Mac has a graphical installer.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与命令行的 Linux 安装不同，Docker for Mac 提供了一个图形化安装程序。
- en: Tip
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Before downloading, you should make sure that you are running at least Apple
    macOS X Yosemite 10.10.3 as this is minimum OS requirement to run the version
    of Docker we will be discussing in this title. If you are running an older version,
    all is not lost; you can still run Docker. Refer to the *Older operating systems*
    section of this chapter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载之前，你应该确保你正在运行至少是 Apple macOS X Yosemite 10.10.3，因为这是运行我们将在本书中讨论的 Docker 版本的最低操作系统要求。如果你正在使用更旧的版本，情况也并非全无希望；你仍然可以运行
    Docker。请参阅本章的 *较旧操作系统* 部分。
- en: 'Let''s install Docker on macOS:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 macOS 上安装 Docker：
- en: Go to the Docker store at [https://hub.docker.com/editions/community/docker-ce-desktop-mac](https://hub.docker.com/editions/community/docker-ce-desktop-mac).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Docker 商店：[https://hub.docker.com/editions/community/docker-ce-desktop-mac](https://hub.docker.com/editions/community/docker-ce-desktop-mac)。
- en: Click on the **Get Docker** link.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **获取 Docker** 链接。
- en: Once it's downloaded, you should have a `DMG` file. Double-clicking on it will
    mount the image, and opening the image mounted on your desktop should present
    you with something like this:![Figure 1.4 – The drag and drop screen for the Docker
    installer for macOS
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，你应该会得到一个 `DMG` 文件。双击它会挂载映像，打开桌面上挂载的映像后，你应该会看到类似如下的界面：![图 1.4 – macOS 上
    Docker 安装程序的拖拽界面](img/image004.jpg)
- en: '](img/image004.jpg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image004.jpg)'
- en: Figure 1.4 – The drag and drop screen for the Docker installer for macOS
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.4 – macOS 上 Docker 安装程序的拖拽界面
- en: Once you have dragged the **Docker** icon to your **Applications** folder, double-click
    on it and you will be asked whether you want to open the application you have
    downloaded.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Docker** 图标拖动到 **应用程序** 文件夹后，双击图标，系统会询问您是否要打开已下载的应用程序。
- en: Clicking **Yes** will open the Docker installer, showing the following prompt:![Figure
    1.5 – Prompt for the Docker installer
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **是** 将打开 Docker 安装程序，并显示以下提示：![图 1.5 – Docker 安装程序提示
- en: '](img/image005.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image005.jpg)'
- en: Figure 1.5 – Prompt for the Docker installer
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.5 – Docker 安装程序提示
- en: Clicking on **OK** will bring up a dialogue that asks for your password. Once
    the password is entered, you should see a Docker icon in the top-left icon bar
    on your screen.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **确定** 后，将弹出一个对话框，询问您的密码。输入密码后，您应该会在屏幕左上角的图标栏中看到 Docker 图标。
- en: Clicking on the icon and selecting **About Docker** should show you something
    similar to the following:![Figure 1.6 – The About Docker screen
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击图标并选择 **关于 Docker**，您应该会看到类似以下内容：![图 1.6 – 关于 Docker 界面
- en: '](img/image006.jpg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image006.jpg)'
- en: Figure 1.6 – The About Docker screen
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.6 – 关于 Docker 界面
- en: 'You can also run the following commands to check the version of Docker Compose
    that were installed alongside Docker Engine on the command line:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令，检查与 Docker 引擎一起安装的 Docker Compose 版本：
- en: '[PRE5]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that we know how to install Docker on macOS, let's move on to our final
    operating system, Windows 10 Professional.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何在 macOS 上安装 Docker，让我们继续进行在最后一个操作系统上的安装：Windows 10 专业版。
- en: Installing Docker on Windows 10 Professional
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 10 专业版上安装 Docker
- en: Like Docker for Mac, Docker for Windows uses a graphical installer.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 和 Docker for Mac 一样，Docker for Windows 使用图形化安装程序。
- en: Important Note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Before downloading, you should make sure that you are running Microsoft Windows
    10 Professional or Enterprise 64-bit. If you are running an older version or an
    unsupported edition of Windows 10, you can still run Docker; refer to the *Older
    operating systems* section of this chapter for more information. Docker for Windows
    has this requirement due to its reliance on Hyper-V. Hyper-V is Windows' native
    hypervisor and allows you to run x86-64 guests on your Windows machine, be it
    Windows 10 Professional or Windows Server. It even forms part of the Xbox One
    operating system.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载之前，您应该确保自己运行的是 Microsoft Windows 10 专业版或企业版 64 位版本。如果您运行的是较旧版本或不受支持的 Windows
    10 版本，仍然可以运行 Docker；有关更多信息，请参阅本章中的 *旧版操作系统* 部分。Docker for Windows 之所以有此要求，是因为它依赖于
    Hyper-V。Hyper-V 是 Windows 的本地虚拟机管理程序，允许您在 Windows 机器上运行 x86-64 虚拟机，无论是 Windows
    10 专业版还是 Windows Server。它甚至是 Xbox One 操作系统的一部分。
- en: 'Let''s install Docker for Windows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 Windows 安装 Docker：
- en: Download the Docker for Windows installer from the Docker store at [https://hub.docker.com/editions/community/docker-ce-desktop-windows](https://hub.docker.com/editions/community/docker-ce-desktop-windows).
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Docker 商店下载适用于 Windows 的 Docker 安装程序：[https://hub.docker.com/editions/community/docker-ce-desktop-windows](https://hub.docker.com/editions/community/docker-ce-desktop-windows)。
- en: Click on the **Get Docker** button to download the installer.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **获取 Docker** 按钮下载安装程序。
- en: Once it's downloaded, run the installer package, and you will be greeted with
    the following:![Figure 1.7 – Configuration screen of the Docker for Windows installer
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装包，您将看到以下界面：![图 1.7 – Docker for Windows 安装程序配置界面
- en: '](img/image007.jpg)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image007.jpg)'
- en: Figure 1.7 – Configuration screen of the Docker for Windows installer
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.7 – Docker for Windows 安装程序配置界面
- en: Leave the configuration at the default values and then click on **OK**. This
    will trigger an installation of all of the components needed to run Docker on
    Windows:![Figure 1.8 – Docker installation in progress
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认配置，然后点击 **确定**。这将触发安装所有运行 Docker 所需的组件：![图 1.8 – Docker 安装进度
- en: '](img/image008.jpg)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image008.jpg)'
- en: Figure 1.8 – Docker installation in progress
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.8 – Docker 安装进度
- en: Once it's installed, you will be prompted to restart. To do this, simply click
    on the **Close and restart** button:![Figure 1.9 – Docker installation complete
    confirmation screen
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您将被提示重启。为此，只需点击 **关闭并重启** 按钮：![图 1.9 – Docker 安装完成确认界面
- en: '](img/image009.jpg)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image009.jpg)'
- en: Figure 1.9 – Docker installation complete confirmation screen
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.9 – Docker 安装完成确认界面
- en: Once your machine has restarted, you should see a Docker icon in the icon tray
    in the bottom right of your screen. Clicking on it and selecting **About Docker**
    from the menu will show the following:![Figure 1.10 – Docker About Me page
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你的机器重启，你应该会在屏幕右下角的图标托盘中看到 Docker 图标。点击它并从菜单中选择**关于 Docker**，将显示以下内容：![图 1.10
    – Docker 关于我页面
- en: '](img/image010.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image010.jpg)'
- en: Figure 1.10 – Docker About Me page
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.10 – Docker 关于我页面
- en: 'Open a PowerShell window and type the following command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 PowerShell 窗口，输入以下命令：
- en: '[PRE6]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This should also show you similar output to the Mac and Linux versions:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这也应该会显示与 Mac 和 Linux 版本相似的输出：
- en: '![Figure 1.11 – Output of the docker version command'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.11 – docker version 命令的输出](img/image011.jpg)'
- en: '](img/image011.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image010.jpg)'
- en: Figure 1.11 – Output of the docker version command
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – docker version 命令的输出
- en: 'Again, you can also run the following commands to check the versions of Docker
    Compose and Docker Machine that were installed alongside Docker Engine:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你也可以运行以下命令来检查与 Docker Engine 一起安装的 Docker Compose 和 Docker Machine 的版本：
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You should see a similar output to the macOS and Linux versions. As you may
    have started to gather, once the packages are installed, their usage is going
    to be pretty similar. You will be able to see this when we get to the *Using Docker
    commands* section of this chapter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到与 macOS 和 Linux 版本类似的输出。正如你可能已经开始发现的那样，一旦安装了这些包，它们的使用方法会非常相似。当我们进入本章的*使用
    Docker 命令*部分时，你会看到这一点。
- en: Older operating systems
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 较旧的操作系统
- en: 'If you are not running a sufficiently new operating system on Mac or Windows,
    then you will need to use Docker Toolbox. Consider the output printed from running
    the following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Mac 或 Windows 上运行的操作系统版本不够新，那么你需要使用 Docker Toolbox。可以参考运行以下命令时输出的内容：
- en: '[PRE8]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: On all three of the installations we have performed so far, it shows two different
    versions, a client and a server. Predictably, the Linux version shows that the
    architecture for the client and server are both Linux; however, you may notice
    that the Mac version shows the client is running on Darwin, which is Apple's Unix-like
    kernel, and the Windows version shows Windows. Yet both of the servers show the
    architecture as being Linux, so what gives?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们至今所做的所有三个安装中，它显示了两个不同的版本，一个是客户端版本，另一个是服务器版本。可以预见，Linux 版本显示客户端和服务器的架构都是 Linux；然而，你可能会注意到
    Mac 版本显示客户端运行在 Darwin 上，这是 Apple 的类 Unix 内核，而 Windows 版本显示的是 Windows。不过，两个服务器版本显示的架构都是
    Linux，那这又是怎么回事呢？
- en: That is because both the Mac and Windows versions of Docker download and run
    a virtual machine in the background, and this virtual machine runs a small, lightweight
    operating system based on Alpine Linux. The virtual machine runs using Docker's
    libraries, which connect to the built-in hypervisor for your chosen environment.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为无论是 Mac 版本还是 Windows 版本的 Docker，都会下载并在后台运行一个虚拟机，而这个虚拟机运行的是基于 Alpine Linux
    的一个小型轻量级操作系统。这个虚拟机使用 Docker 的库，连接到你选择的环境的内置虚拟化管理程序。
- en: For macOS, this is the built-in **Hypervisor.framework**, and for Windows, as
    we have already mentioned, it is **Hyper-V**.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS，这是内置的**Hypervisor.framework**，而对于 Windows，如我们之前提到的，它是**Hyper-V**。
- en: To ensure that no one misses out on the Docker experience, a version of Docker
    that does not use these built-in hypervisors is available for older versions of
    macOS and unsupported Windows versions. These versions utilize **VirtualBox**
    as the hypervisor to run the Linux server for your local client to connect to.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保没有人错过 Docker 体验，对于较旧版本的 macOS 和不受支持的 Windows 版本，有一种不使用这些内置虚拟化管理程序的 Docker
    版本。这些版本使用**VirtualBox**作为虚拟化管理程序，来运行 Linux 服务器，供本地客户端连接。
- en: Important note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: VirtualBox is an open source x86 and AMD64/Intel64 virtualization product developed
    by Oracle. It runs on Windows, Linux, Macintosh, and Solaris hosts, with support
    for many Linux, Unix, and Windows guest operating systems.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox 是由 Oracle 开发的开源 x86 和 AMD64/Intel64 虚拟化产品。它支持在 Windows、Linux、Macintosh
    和 Solaris 主机上运行，并支持多种 Linux、Unix 和 Windows 客户操作系统。
- en: For more information on Docker Toolbox, see the project's website at [https://github.com/docker/toolbox/](https://github.com/docker/toolbox/),
    where you can also download the macOS and Windows installers from the releases
    page.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解有关 Docker Toolbox 的更多信息，请访问项目官网：[https://github.com/docker/toolbox/](https://github.com/docker/toolbox/)，你还可以从发布页面下载适用于
    macOS 和 Windows 的安装程序。
- en: Important note
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This book assumes that you have installed the latest Docker version on Linux
    or have used Docker for Mac or Docker for Windows. While Docker installations
    using Docker Toolbox should be able to support the commands in this book, you
    may run into issues around file permissions and ownership when mounting data from
    your local machine to your containers.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设你已经在 Linux 上安装了最新版本的 Docker，或者使用了 Docker for Mac 或 Docker for Windows。虽然使用
    Docker Toolbox 安装的 Docker 应该也能支持本书中的命令，但在将本地机器的数据挂载到容器时，可能会遇到文件权限和所有权方面的问题。
- en: Now that you have Docker up and running on the system of your choice, let's
    start exploring the commands that we need in order to use it effectively.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在选择的系统上启动并运行 Docker，让我们开始探索一些必要的命令，以便高效使用 Docker。
- en: Using Docker commands
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 命令
- en: You should already be familiar with these Docker commands. However, it's worth
    going through them to ensure you know all. We will start with some common commands
    and then take a peek at the commands that are used for the Docker images. We will
    then take a dive into the commands that are used for the containers.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经熟悉这些 Docker 命令。然而，值得一遍遍地过一遍，确保你了解所有的命令。我们将从一些常用命令开始，然后看一下用于 Docker 镜像的命令。接着，我们将深入了解用于容器的命令。
- en: Tip
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: A while ago, Docker restructured their command-line client into more logical
    groupings of commands, as the number of features provided by the client multiplies
    and commands start to cross over each other. Throughout this book, we will be
    using this structure rather than some of the shorthand that still exists within
    the client.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，Docker 对其命令行客户端进行了重构，将命令分为更合逻辑的组别，因为客户端提供的功能数量激增，导致一些命令开始交叉重叠。本书中我们将使用这种结构，而不是客户端中仍然存在的一些简写命令。
- en: 'The first command we will be taking a look at is one of the most useful commands,
    not only in Docker but in any command-line utility you use – the `help` command.
    It is run simply like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的第一个命令是最有用的命令之一，既适用于 Docker，也适用于你使用的任何命令行工具——`help`命令。它只需这样运行：
- en: '[PRE9]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This command will give you a full list of all of the Docker commands at your
    disposal, along with a brief description of what each command does. We will be
    looking at this in more detail in [*Chapter 4*](B15659_04_Final_JM_ePub.xhtml#_idTextAnchor133)*,
    Managing Containers*. For further help with a particular command, you can run
    the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会给你列出所有 Docker 命令的完整列表，并简要描述每个命令的功能。我们将在[*第4章*](B15659_04_Final_JM_ePub.xhtml#_idTextAnchor133)《管理容器》中更详细地探讨这一点。对于某个特定命令的进一步帮助，你可以运行以下命令：
- en: '[PRE10]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, let''s run the `hello-world` container. To do this, simply run the following
    command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们运行`hello-world`容器。只需运行以下命令即可：
- en: '[PRE11]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It doesn't matter what host you are running Docker on, the same thing will happen
    on Linux, macOS, and Windows. Docker will download the `hello-world` container
    image and then execute it, and once it's executed, the container will be stopped.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你在哪个主机上运行 Docker，Linux、macOS 还是 Windows 上都会发生相同的事情。Docker 会下载`hello-world`容器镜像并执行它，执行完毕后，容器会停止。
- en: 'Your Terminal session should look like the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你的终端会话应该如下所示：
- en: '![Figure 1.12 – Output for docker container run hello-world'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.12 – docker container run hello-world 的输出'
- en: '](img/image012.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image012.jpg)'
- en: Figure 1.12 – Output for docker container run hello-world
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – docker container run hello-world 的输出
- en: 'Let''s try something a little more adventurous – let''s download and run an
    NGINX container by running the following two commands:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些更具冒险性的操作——通过运行以下两个命令来下载并运行一个 NGINX 容器：
- en: '[PRE12]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Important note
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: NGINX is an open source web server that can be used as a load balancer, mail
    proxy, reverse proxy, and even an HTTP cache.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX 是一个开源的 Web 服务器，可以用作负载均衡器、邮件代理、反向代理，甚至是 HTTP 缓存。
- en: The first of the two commands downloads the NGINX container image, and the second
    command launches a container in the background called `nginx-test`, using the
    `nginx` image we pulled. It also maps port `8080` on our host machine to port
    `80` on the container, making it accessible to our local browser at [http://localhost:8080/](http://localhost:8080/).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令下载了NGINX容器镜像，第二个命令在后台启动了一个名为`nginx-test`的容器，使用我们拉取的`nginx`镜像。它还将主机上的`8080`端口映射到容器中的`80`端口，使得我们可以通过本地浏览器访问[http://localhost:8080/](http://localhost:8080/)。
- en: 'As you can see from the following screenshots, the command and results are
    exactly the same on all three OS types. Here we have Linux:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从以下截图中看到的，命令和结果在所有三种操作系统中完全相同。这里我们有 Linux：
- en: '![Figure 1.13 – Output of docker image pull nginx on Linux'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.13 – 在 Linux 上运行 docker image pull nginx 的输出'
- en: '](img/image013.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image013.jpg)'
- en: Figure 1.13 – Output of docker image pull nginx on Linux
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – 在 Linux 上运行 docker image pull nginx 的输出
- en: Important note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You may notice that the Linux and macOS screens at first glance look similar.
    That is because I am using a remote Linux server, and we will look more at how
    to do this in a later chapter.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，Linux 和 macOS 的屏幕乍一看似乎很相似。那是因为我正在使用一台远程的 Linux 服务器，稍后我们会更详细地探讨如何实现这一点。
- en: 'This is the result on macOS:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 macOS 上的结果：
- en: '![Figure 1.14 – Output of docker image pull nginx on macOS'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.14 – 在 macOS 上运行 docker image pull nginx 的输出'
- en: '](img/image014.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image014.jpg)'
- en: Figure 1.14 – Output of docker image pull nginx on macOS
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – 在 macOS 上运行 docker image pull nginx 的输出
- en: 'And this is how it looks on Windows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 而这就是它在 Windows 上的样子：
- en: '![Figure 1.15 – Output of docker image pull nginx on Windows'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.15 – 在 Windows 上运行 docker image pull nginx 的输出'
- en: '](img/image015.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image015.jpg)'
- en: Figure 1.15 – Output of docker image pull nginx on Windows
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – 在 Windows 上运行 docker image pull nginx 的输出
- en: 'In the following three chapters, we will look at using the Docker command-line
    client in more detail. For now, let''s stop and remove our `nginx-test` container
    by running the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的三章中，我们将更详细地了解如何使用 Docker 命令行客户端。目前，让我们暂停并通过运行以下命令停止并移除我们的 `nginx-test`
    容器：
- en: '[PRE13]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, the experience of running a simple NGINX container on all three
    of the hosts on which we have installed Docker is exactly the same. As am I sure
    you can imagine, trying to achieve this without something like Docker across all
    three platforms is a challenge, and a very different experience on each platform
    too. Traditionally, this has been one of the reasons for the difference in local
    development environments as people would need to download a platform-specific
    installer and configure the service for the platform they are running. Also, in
    some cases there could be feature differences between the platforms.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在我们安装了 Docker 的三个主机上运行一个简单的 NGINX 容器的体验是完全相同的。正如我相信你可以想象的那样，如果没有像 Docker
    这样的工具，在这三种平台上实现这一点将是一个挑战，并且在每个平台上的体验也会大不相同。传统上，这一直是导致本地开发环境差异的原因之一，因为人们需要下载特定平台的安装程序并为其配置服务。而且，在某些情况下，不同平台之间可能存在功能差异。
- en: Now that we have a foundation in Docker commands, let's cast a wider net and
    look at its container ecosystem.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了 Docker 命令的基础，让我们拓宽视野，看看它的容器生态系统。
- en: Docker and the container ecosystem
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 和容器生态系统
- en: If you have been following the rise of Docker and containers, you will have
    noticed that, throughout the last few years, the messaging on the Docker website
    has been slowly changing from headlines about what containers are to more of a
    focus on the services provided by Docker as a company.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在关注 Docker 和容器的发展，你会注意到，过去几年里，Docker 网站上的信息逐渐从关于容器是什么的头条，转向了更多关注 Docker
    作为一家公司所提供的服务。
- en: One of the core drivers for this is that everything has traditionally been lumped
    into being known just as 'Docker,' which can get confusing. Now that people did
    not need educating as much on what a container is or the problems they can solve
    with Docker, the company needed to try and start to differentiate themselves from
    competitors that sprung up to support all sorts of container technologies.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化的核心驱动力之一是，传统上，所有东西都被统称为“Docker”，这会让人感到困惑。现在，由于人们不再需要太多地了解容器是什么或 Docker 可以解决什么问题，公司需要开始尝试与涌现出来的各种支持容器技术的竞争者区分开来。
- en: 'So, let''s try and unpack everything that is Docker, which involves the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们尝试解开 Docker 的所有内容，这包括以下几点：
- en: '**Open source projects**: There are several open source projects started by
    Docker, which are now maintained by a large community of developers.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源项目**：Docker 启动了几个开源项目，现在由一个庞大的开发者社区维护。'
- en: '**Docker, Inc**.: This is the company founded to support and develop the core
    Docker tools.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker, Inc**：这是支持和开发核心 Docker 工具的公司。'
- en: '**Docker CE and Docker EE**: This is the core collection of Docker tools built
    on top of the open source components.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker CE 和 Docker EE**：这是建立在开源组件之上的核心 Docker 工具集。'
- en: We will also be looking at some third-party services in later chapters. In the
    meantime, let's go into more detail on each of these, starting with the open source
    projects.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中进一步讨论一些第三方服务。同时，让我们更详细地了解每一个，首先从开源项目开始。
- en: Open source projects
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源项目
- en: 'Docker, Inc. has spent the last few years open sourcing and donating a lot
    of its core projects to various open source foundations and communities. These
    projects include the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Docker公司在过去几年中将其核心项目开源并捐赠给了各种开源基金会和社区。这些项目包括以下内容：
- en: '**Moby Project** is the upstream project upon which the Docker Engine is based.
    It provides all of the components needed to assemble a fully functional container
    system.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Moby项目**是Docker引擎的上游项目，它提供了组建一个功能齐全的容器系统所需的所有组件。'
- en: '**Runc** is a command-line interface for creating and configuring containers
    and has been built to the OCI specification.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Runc**是一个命令行接口，用于创建和配置容器，并已构建为OCI规范。'
- en: '**Containerd** is an easily embeddable container runtime. It is also a core
    component of the Moby Project.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Containerd**是一个易于嵌入的容器运行时。它也是Moby项目的核心组件。'
- en: '**LibNetwork** is a Go library that provides networking for containers. Notary
    is a client and server that aims to provide a trust system for signed container
    images.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LibNetwork**是一个Go库，为容器提供网络功能。Notary是一个客户端和服务器，旨在为签名的容器镜像提供信任系统。'
- en: '**HyperKit** is a toolkit that allows you to embed hypervisor capabilities
    into your own applications; presently, it only supports the macOS and the Hypervisor
    framework.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HyperKit**是一个工具包，允许你将虚拟机管理程序功能嵌入到自己的应用程序中；目前，它仅支持macOS和Hypervisor框架。'
- en: '**VPNKit** provides VPN functionality to HyperKit.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VPNKit**为HyperKit提供VPN功能。'
- en: '**DataKit** allows you to orchestrate application data using a Git-like workflow.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataKit**允许你使用类似Git的工作流程来编排应用程序数据。'
- en: '**SwarmKit** is a toolkit that enables you to build distributed systems using
    the same raft consensus algorithm as Docker Swarm.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SwarmKit**是一个工具包，使你能够使用与Docker Swarm相同的Raft共识算法构建分布式系统。'
- en: '**LinuxKit** is a framework that allows you to develop and compile a small
    portable Linux operating system for running containers.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LinuxKit**是一个框架，允许你开发和编译一个小型的可移植Linux操作系统，用于运行容器。'
- en: '**InfraKit** is a collection of tools that you can use to define the infrastructure
    to run your **LinuxKit** generated distributions on.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InfraKit**是一组工具，你可以使用它来定义运行**LinuxKit**生成的发行版的基础设施。'
- en: On their own, you will probably never use the individual components; however,
    each of the projects mentioned is a component of the tools that are maintained
    by Docker, Inc. We will go a little more into these projects in our final chapter.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 单独使用这些组件，你可能永远不会使用它们；然而，上述每个项目都是由Docker公司维护的工具的一部分。我们将在最后一章中详细介绍这些项目。
- en: Docker, Inc.
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker公司。
- en: Docker, Inc. is the company formed to initially develop **Docker Community Edition**
    (**Docker CE**) and **Docker Enterprise Edition** (**Docker EE**). It also used
    to provide an SLA-based support service for Docker EE as well as offering consulting
    services to companies who wish to take their existing applications and containerize
    them as part of Docker's **Modernise Traditional Apps** (**MTA**) program.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Docker公司成立之初开发了**Docker社区版**（**Docker CE**）和**Docker企业版**（**Docker EE**）。它还曾为Docker
    EE提供基于SLA的支持服务，并向希望将现有应用程序容器化并将其作为Docker的**现代化传统应用程序**（**MTA**）计划的一部分的公司提供咨询服务。
- en: 'You will notice that I referred to a lot of the things in the previous sentence
    in the past tense. This is because in November 2019 Docker, Inc. restructured
    and sold its platform business to a company called Mirantis Inc. They acquired
    the following assets from Docker, Inc.:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，我在前一句话中使用了很多过去时态。这是因为在2019年11月，Docker公司进行了重组，并将其平台业务出售给了一家名为Mirantis Inc.的公司。它们从Docker公司收购了以下资产：
- en: '**Docker Enterprise**, including Docker EE'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker企业版**，包括Docker EE'
- en: '**Docker Trusted Registry**'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker受信注册表**'
- en: '**Docker Unified Control Plane**'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker统一控制平面**'
- en: '**Docker CLI**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker CLI**'
- en: Mirantis Inc. is a California-based company that focuses on the development
    and support of **OpenStack-** and **Kubernetes-based** solutions. It was one of
    the founders of the non-profit corporate entity OpenStack Foundation and had a
    vast amount of experience of providing enterprise-level support.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Mirantis Inc.是一家总部位于加利福尼亚的公司，专注于开发和支持**OpenStack**和**Kubernetes**基础的解决方案。它是非营利性企业实体OpenStack基金会的创始人之一，并且在为企业级客户提供支持方面拥有丰富的经验。
- en: 'Former Docker, Inc. CEO Rob Bearden, who stepped down shortly after the announcement,
    was quoted as saying:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 前Docker公司首席执行官Rob Bearden，在宣布辞职后不久被引用说：
- en: '''After conducting thorough analysis with the management team and the Board
    of Directors, we determined that Docker had two very distinct and different businesses:
    one an active developer business, and the other a growing enterprise business.
    We also found that the product and the financial models were vastly different.
    This led to the decision to restructure the company and separate the two businesses,
    which is the best thing for customers and to enable Docker''s industry-leading
    technology to thrive.'''
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: “在与管理团队和董事会进行了彻底分析后，我们确定 Docker 拥有两个非常不同的业务：一个是活跃的开发者业务，另一个是不断发展的企业业务。我们还发现，产品和财务模式大不相同。这导致了我们决定重组公司，将两者分开，这是对客户最有利的做法，也有助于
    Docker 行业内领先的技术蓬勃发展。”
- en: With the Enterprise business now with Mirantis Inc., Docker, Inc. is focusing
    on providing better developer workflows with Docker Desktop and Docker Hub, which
    allows users to avoid the threat of vendor lock-in.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，企业业务由 Mirantis Inc. 负责，Docker, Inc. 专注于通过 Docker Desktop 和 Docker Hub 提供更好的开发者工作流程，这使得用户能够避免供应商锁定的威胁。
- en: Docker CE and Docker EE
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker CE 和 Docker EE
- en: There are a lot of tools supplied and supported by Docker, Inc. Some we have
    already mentioned, and others we will cover in later chapters. Before we finish
    this, our first chapter, we should get an idea of the tools we are going to be
    using. The most of important of them is the core Docker Engine.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Docker, Inc. 提供并支持了许多工具。我们已经提到了一些，其他的我们将在后续章节中讲解。在结束本章之前，我们应该对将要使用的工具有一个大致了解。其中最重要的工具是核心
    Docker 引擎。
- en: This is the core of Docker, and all of the other tools that we will be covering
    use it. We have already been using it as we installed it in the Docker installation
    and Docker commands sections of this chapter. There are currently two versions
    of Docker Engine; there is Docker EE, which is now maintained by Mirantis Inc.,
    and Docker CE. We will be using Docker CE throughout this book.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Docker 的核心，所有我们将要介绍的其他工具都依赖于它。我们在本章的 Docker 安装和 Docker 命令部分中已经使用了它。目前有两个版本的
    Docker 引擎；其中 Docker EE 由 Mirantis Inc. 维护，Docker CE 由我们使用。在本书中，我们将使用 Docker CE。
- en: As well as the stable version of Docker CE, Docker will be providing nightly
    builds of the Docker Engine via a nightly repository (formally Docker CE Edge),
    and monthly builds of Docker for Mac and Docker for Windows via the Edge channel.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 除了稳定版的 Docker CE，Docker 还将通过夜间仓库（正式为 Docker CE Edge）提供 Docker 引擎的夜间构建版本，并通过
    Edge 渠道提供 Docker for Mac 和 Docker for Windows 的每月构建版本。
- en: 'There are also the following tools:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 还有以下工具：
- en: '**Docker Compose**: A tool that allows you to define and share multi-container
    definitions; it is detailed in [*Chapter 5*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157),
    *Docker Compose*.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Compose**：一个允许您定义和共享多容器定义的工具；在 [*第5章*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157)
    中详细介绍了 *Docker Compose*。'
- en: '**Docker Machine**: A tool to launch Docker hosts on multiple platforms; we
    will cover this in [*Chapter 6*](B15659_06_Final_JM_ePub.xhtml#_idTextAnchor187),
    *Managing Containers*.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Machine**：一个在多个平台上启动 Docker 主机的工具；我们将在 [*第6章*](B15659_06_Final_JM_ePub.xhtml#_idTextAnchor187)
    中介绍 *管理容器*。'
- en: '**Docker Hub**: A repository for your Docker images, covered in the next three
    chapters.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Hub**：一个用于存储您的 Docker 镜像的仓库，接下来的三章将详细介绍。'
- en: '**Docker Desktop (Mac)**: We have covered Docker for Mac in this chapter.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Desktop（Mac）**：我们在本章中已经涵盖了 Docker for Mac。'
- en: '**Docker Desk/top (Windows)**: We have covered Docker for Windows in this chapter.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 桌面版（Windows）**：我们在本章中已经涵盖了 Docker for Windows。'
- en: '**Docker Swarm**: A multi-host-aware orchestration tool, covered in detail
    in [*Chapter 8*](B15659_08_Final_JM_ePub.xhtml#_idTextAnchor230), *Docker Swarm*.
    Mirantis Inc now maintains this.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Swarm**：一个多主机感知的编排工具，在 [*第8章*](B15659_08_Final_JM_ePub.xhtml#_idTextAnchor230)
    中详细介绍 *Docker Swarm*。现在由 Mirantis Inc. 负责维护。'
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered some basic information that you should already know
    (or now know) for the chapters ahead. We went over the basics of what Docker is,
    and how it fares compared to other host types. We went over the installers, how
    they operate on different operating systems, and how to control them through the
    command line. Be sure to remember to look at the requirements for the installers
    to ensure you use the correct one for your operating system.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些您应该已经知道（或现在已经知道）的基本信息，为接下来的章节做准备。我们讲解了 Docker 的基础知识，以及与其他主机类型的对比。我们讲解了安装程序、它们在不同操作系统中的运行方式以及如何通过命令行控制它们。请务必查看安装程序的要求，确保您使用适合您操作系统的版本。
- en: Then, we took a small dive into using Docker and issued a few basic commands
    to get you started. We will be looking at all of the management commands in future
    chapters to get a more in-depth understanding of what they are, as well as how
    and when to use them. Finally, we discussed the Docker ecosystem and the responsibilities
    of each of the different tools.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们简单介绍了如何使用Docker，并执行了一些基本命令来帮助你入门。我们将在未来的章节中详细讨论所有管理命令，深入了解它们是什么，以及如何和何时使用它们。最后，我们讨论了Docker生态系统以及不同工具的职责。
- en: In the next chapter, we will be taking a look at how to build base containers,
    and we will also look in depth at Dockerfiles and places to store your images,
    as well as using environmental variables and Docker volumes.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨如何构建基础容器，并深入研究Dockerfile以及存储镜像的位置，还会介绍如何使用环境变量和Docker卷。
- en: Questions
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Where can you download Docker Desktop (Mac) and Docker Desktop (Windows) from?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以从哪里下载Docker Desktop（Mac）和Docker Desktop（Windows）？
- en: What command did we use to download the NGINX image?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了什么命令来下载NGINX镜像？
- en: Which open source project is upstream for the core Docker Engine?
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个开源项目是核心Docker引擎的上游项目？
- en: Which company now maintains Docker Enterprise?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在哪个公司在维护Docker Enterprise？
- en: Which command would you run to find out more information on the Docker container
    subset of commands?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会运行哪个命令来获取更多关于Docker容器子集命令的信息？
- en: Further reading
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These are the companies involved in maintaining Docker:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是参与维护Docker的公司：
- en: 'Docker, Inc.: [http://docker.com](http://docker.com)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker, Inc.：[http://docker.com](http://docker.com)
- en: 'Mirantis Inc.: [https://www.mirantis.com](https://www.mirantis.com)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mirantis Inc.：[https://www.mirantis.com](https://www.mirantis.com)
- en: 'Docker restructure: [https://www.computerweekly.com/news/252473956/Docker-restructure-sees-enterprise-platform-business-sold-to-open-source-cloud-firm-Mirantis](https://www.computerweekly.com/news/252473956/Docker-restructure-sees-enterprise-platform-business-sold-to-open-source-cloud-firm-Mirantis)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker重组：[https://www.computerweekly.com/news/252473956/Docker-restructure-sees-enterprise-platform-business-sold-to-open-source-cloud-firm-Mirantis](https://www.computerweekly.com/news/252473956/Docker-restructure-sees-enterprise-platform-business-sold-to-open-source-cloud-firm-Mirantis)
- en: 'In this chapter, we have mentioned the following hypervisors:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提到了以下虚拟化管理程序：
- en: 'macOS Hypervisor framework: [https://developer.apple.com/documentation/hypervisor](https://developer.apple.com/documentation/hypervisor)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS虚拟化框架：[https://developer.apple.com/documentation/hypervisor](https://developer.apple.com/documentation/hypervisor)
- en: 'Hyper-V: [https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hyper-V：[https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v)
- en: 'For details on how to install on other Linux distributions, take a look at
    the Install Docker Engine page of the Docker docs: [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/).'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在其他Linux发行版上安装的详细信息，请查看Docker文档中的安装Docker引擎页面：[https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/)。
- en: 'We referenced the following blog posts from Docker:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引用了以下Docker的博客文章：
- en: 'Docker CLI restructure blog post: [https://www.docker.com/blog/whats-new-in-docker-1-13/](https://www.docker.com/blog/whats-new-in-docker-1-13/)'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker CLI重组博客文章：[https://www.docker.com/blog/whats-new-in-docker-1-13/](https://www.docker.com/blog/whats-new-in-docker-1-13/)
- en: 'Docker Extended Support Announcement: [https://www.docker.com/blog/extending-support-cycle-docker-community-edition/](https://www.docker.com/blog/extending-support-cycle-docker-community-edition/)'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker扩展支持公告：[https://www.docker.com/blog/extending-support-cycle-docker-community-edition/](https://www.docker.com/blog/extending-support-cycle-docker-community-edition/)
- en: 'Next up, we discussed the following open source projects:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了以下开源项目：
- en: 'Moby Project: [https://mobyproject.org](https://mobyproject.org)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Moby项目：[https://mobyproject.org](https://mobyproject.org)
- en: 'Runc: [https://github.com/opencontainers/runc](https://github.com/opencontainers/runc)'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Runc：[https://github.com/opencontainers/runc](https://github.com/opencontainers/runc)
- en: 'Containerd: [https://containerd.io](https://containerd.io)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Containerd：[https://containerd.io](https://containerd.io)
- en: 'LibNetwork: [https://github.com/moby/libnetwork](https://github.com/moby/libnetwork)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LibNetwork：[https://github.com/moby/libnetwork](https://github.com/moby/libnetwork)
- en: 'Notary: [https://github.com/theupdateframework/notary](https://github.com/theupdateframework/notary)'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Notary：[https://github.com/theupdateframework/notary](https://github.com/theupdateframework/notary)
- en: 'HyperKit: [https://github.com/moby/hyperkit](https://github.com/moby/hyperkit)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HyperKit：[https://github.com/moby/hyperkit](https://github.com/moby/hyperkit)
- en: 'VPNKit: [https://github.com/moby/vpnkit](https://github.com/moby/vpnkit)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VPNKit: [https://github.com/moby/vpnkit](https://github.com/moby/vpnkit)'
- en: 'DataKit: [https://github.com/moby/datakit](https://github.com/moby/datakit)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'DataKit: [https://github.com/moby/datakit](https://github.com/moby/datakit)'
