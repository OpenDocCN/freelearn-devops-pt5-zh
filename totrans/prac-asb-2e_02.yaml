- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the Fundamentals of Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At its heart, Ansible is a simple framework that pushes a small program called
    an **Ansible module** to target nodes. Modules are at the heart of Ansible and
    are responsible for performing all of the automation’s hard work. The Ansible
    framework goes beyond this, however, and also includes plugins and dynamic inventory
    management, as well as tying all of this together with playbooks to automate infrastructure
    provisioning, configuration management, application deployment, network automation,
    and much more, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The typical flow and usage of Ansible’s automation engine](img/B20846_02_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The typical flow and usage of Ansible’s automation engine
  prefs: []
  type: TYPE_NORMAL
- en: Even with the addition of Ansible collections since the previous release of
    this book, this architecture remains unchanged – now, the modules, plugins, and
    dynamic inventory scripts are simply distributed through collections whereas before
    everything was distributed as part of the Ansible release itself.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible only needs to be installed on the management node. From there, it distributes
    the required modules over the network’s transport layer (usually SSH or WinRM)
    to perform tasks and deletes them once the tasks are complete. In this way, Ansible
    retains its agentless architecture and does not clutter up your target nodes with
    code that might be required for a one-off automation task.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn more about the composition of the Ansible framework
    and its various components, as well as how to use them together in playbooks written
    in YAML syntax. You will learn how to create automation code for your IT operation
    tasks and learn how to apply this using both ad hoc tasks and more complex playbooks.
    Finally, you will learn how Jinja2 templating allows you to repeatably build dynamic
    configuration files using variables and dynamic expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with the Ansible framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Jinja2 filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you have successfully installed the latest version
    of Ansible (8.0 with `ansible-core` 2.15, at the time of writing) on a Linux node,
    as discussed in [*Chapter 1*](B20846_01.xhtml#_idTextAnchor015), *Getting Started
    with Ansible*. It also assumes that you have at least one other Linux host to
    test the automation code on. The more hosts you have available, the more you will
    be able to develop the examples in this chapter and learn about Ansible. SSH communication
    between the Linux hosts is assumed, as is a working knowledge of them.
  prefs: []
  type: TYPE_NORMAL
- en: The code bundle for this chapter is available at [https://github.com/PacktPublishing/Practical-Ansible-Second-Edition/tree/main/Chapter%202](https://github.com/PacktPublishing/Practical-Ansible-Second-Edition/tree/main/Chapter%202).
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with the Ansible framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how the Ansible framework fits into IT operations.
    We will explain how to run Ansible for the first time. Once you understand this
    framework, you will be ready to start learning about more advanced concepts, such
    as creating and running playbooks with your own inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to run Ansible’s ad hoc commands via an SSH connection from your Ansible
    control machine to multiple remote hosts, you need to ensure you have the latest
    Ansible version installed on the control host. Use the following command to confirm
    the latest Ansible version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You also need to ensure SSH connectivity with each remote host that you will
    define in the inventory. You can use a simple, manual SSH connection on each of
    your remote hosts to test the connectivity, as Ansible will make use of SSH during
    all remote Linux-based automation tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this section, we will walk you through how Ansible works, starting with
    some simple connectivity testing. You can learn how the Ansible framework accesses
    multiple host machines to execute your tasks by following this simple procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create or edit your default inventory file, `/etc/ansible/hosts` (you can also
    specify the path with your own inventory file by passing options such as `–-inventory=/path/inventory_file`).
    Add some example hosts to your inventory—these must be the IP addresses or hostnames
    of real machines for Ansible to test against. The following are examples from
    my network, but you need to substitute these for your own devices. Add one hostname
    (or IP address) per line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All hosts should be specified with a resolvable address—that is, a `/etc/hosts`
    on your Ansible control node). Alternatively, this can be IP addresses if you
    do not have DNS or host entries set up. Whatever format you choose for your inventory
    addresses, you should be able to successfully connect to each host. Unless you
    have set up stringent firewall rules, a simple ping to each host will suffice
    as a test. See the following output as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the automation process seamless, we’ll generate an SSH authentication
    key pair so that we don’t have to type in a password every time we want to run
    a playbook. If you do not already have an SSH key pair, you can generate one using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you run the `ssh-keygen` tool, you will see an output similar to the following.
    Note that you should leave the `passphrase` variable blank when prompted; otherwise,
    you will need to enter a passphrase every time you want to run an Ansible task,
    which removes the convenience of authenticating with SSH keys (though it does
    make them more secure if they ever get into the wrong hands, so please take this
    into consideration when working with SSH key pairs):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Although there are conditions under which your SSH keys will be automatically
    picked up, it is recommended that you make use of `ssh-agent` as this allows you
    to load multiple keys to authenticate against a variety of targets, without worrying
    about whether your keys have the right name and path to be picked up. This will
    be very useful to you in the future, even if it isn’t right now. Start `ssh-agent`
    as follows, and then add your new authentication key (note that you will need
    to do this for every shell that you open):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before you can perform key-based authentication with your target hosts, you
    need to apply the public key from the key pair you just generated to each host.
    You can copy the key to each host, in turn, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible -i hosts -m ansible.builtin.ping all
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: web01.example.org | SUCCESS => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: app02.example.org | SUCCESS => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: web02.example.org | SUCCESS => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: app01.example.org | SUCCESS => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This example output is generated with Ansible’s default level of verbosity.
    If you run into problems during this process, you can increase Ansible’s level
    of verbosity by passing one or more `-v` switches to the `ansible` command when
    you run it. For most issues, it is recommended that you use `-vvvv`, which gives
    you ample debugging information, including the raw SSH commands and the output
    from them. For example, assume that a certain host (such as `web02.example.org`)
    can’t be connected to and you receive an error similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: My first Ansible playbook'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'hosts: all'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'become: yes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'tasks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: Install/Update to the latest of Apache Web Server'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ansible.builtin.apt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: apache2'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'state: latest'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'notify:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Restart the Apache Web Server'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'handlers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: Restart the Apache Web Server'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ansible.builtin.service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: apache2'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'state: restarted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-playbook -i hosts --limit web* playbook.yml
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [My first Ansible playbook] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Gathering Facts] ***************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [web02.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [web01.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Install/Update to the latest of Apache Web Server] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'changed: [web01.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: 'changed: [web02.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: RUNNING HANDLER [Restart the Apache Web Server] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'changed: [web02.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: 'changed: [web01.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'web01.example.org          : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'web02.example.org          : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: PLAY [My first Ansible playbook] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Gathering Facts] ************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [web02.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [web01.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Install/Update to the latest of Apache Web Server] ***********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [web01.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [web02.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'web01.example.org          : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'web02.example.org          : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '- name: Install/Update to the latest of Apache Web Server'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ansible.builtin.apt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: apache2'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'state: latest'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '- name: Install/Update to the latest of Apache Web Server'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.apt:'
  prefs: []
  type: TYPE_NORMAL
- en: 'name:'
  prefs: []
  type: TYPE_NORMAL
- en: '- apache2'
  prefs: []
  type: TYPE_NORMAL
- en: '- apache2-utils'
  prefs: []
  type: TYPE_NORMAL
- en: 'state: latest'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'ansible.builtin.service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: apache2'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'state: restarted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'employees:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: daniel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'fullname: Daniel Oh'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'role: DevOps Evangelist'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'level: Expert'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'skills:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Kubernetes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Microservices'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Ansible'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Linux Container'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: michael'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'fullname: Michael Smith'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'role: Enterprise Architect'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'level: Advanced'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'skills:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Cloud'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Middleware'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Windows'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Storage'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specialty: |'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Agile methodology
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cloud-native app development practices
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Advanced enterprise DevOps practices
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Agile methodology
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native app development practices
  prefs: []
  type: TYPE_NORMAL
- en: Advanced enterprise DevOps practices
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Specialty: >'
  prefs: []
  type: TYPE_NORMAL
- en: Agile methodology
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native app development practices
  prefs: []
  type: TYPE_NORMAL
- en: Advanced enterprise DevOps practices
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Agile methodologyCloud-native app development practicesAdvanced enterprise DevOps
    practices
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: 'servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '- frontend'
  prefs: []
  type: TYPE_NORMAL
- en: '- backend'
  prefs: []
  type: TYPE_NORMAL
- en: '- database'
  prefs: []
  type: TYPE_NORMAL
- en: '- cache'
  prefs: []
  type: TYPE_NORMAL
- en: 'employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: daniel'
  prefs: []
  type: TYPE_NORMAL
- en: 'fullname: Daniel Oh'
  prefs: []
  type: TYPE_NORMAL
- en: 'role: DevOps Evangelist'
  prefs: []
  type: TYPE_NORMAL
- en: 'level: Expert'
  prefs: []
  type: TYPE_NORMAL
- en: 'skills:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Kubernetes'
  prefs: []
  type: TYPE_NORMAL
- en: '- Microservices'
  prefs: []
  type: TYPE_NORMAL
- en: '- Ansible'
  prefs: []
  type: TYPE_NORMAL
- en: '- Linux Container'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: michael'
  prefs: []
  type: TYPE_NORMAL
- en: 'fullname: Michael Smiths'
  prefs: []
  type: TYPE_NORMAL
- en: 'role: Enterprise Architect'
  prefs: []
  type: TYPE_NORMAL
- en: 'level: Advanced'
  prefs: []
  type: TYPE_NORMAL
- en: 'skills:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Cloud'
  prefs: []
  type: TYPE_NORMAL
- en: '- Middleware'
  prefs: []
  type: TYPE_NORMAL
- en: '- Windows'
  prefs: []
  type: TYPE_NORMAL
- en: '- Storage'
  prefs: []
  type: TYPE_NORMAL
- en: 'Speciality: |'
  prefs: []
  type: TYPE_NORMAL
- en: Agile methodology
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native app development practices
  prefs: []
  type: TYPE_NORMAL
- en: Advanced enterprise DevOps practices
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: 'employees: [{"fullname": "Daniel Oh","level": "Expert","name": "daniel","role":
    "DevOps Evangelist","skills": ["Kubernetes","Microservices","Ansible","Linux Container"]},{"fullname":
    "Michael Smiths","level": "Advanced","name": "michael","role": "Enterprise Architect","skills":["Cloud","Middleware","Windows","Storage"]}]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'version: "2.0"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[frontends_na_zone]'
  prefs: []
  type: TYPE_NORMAL
- en: frontend1-na.example.com
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-na.example.com
  prefs: []
  type: TYPE_NORMAL
- en: '[frontends_emea_zone]'
  prefs: []
  type: TYPE_NORMAL
- en: frontend1-emea.example.com
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-emea.example.com
  prefs: []
  type: TYPE_NORMAL
- en: '[appservers_na_zone]'
  prefs: []
  type: TYPE_NORMAL
- en: appserver1-na.example.com
  prefs: []
  type: TYPE_NORMAL
- en: appserver2-na.example.com
  prefs: []
  type: TYPE_NORMAL
- en: '[appservers_emea_zone]'
  prefs: []
  type: TYPE_NORMAL
- en: appserver1-emea.example.com
  prefs: []
  type: TYPE_NORMAL
- en: appserver2-emea.example.com
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- hosts: frontends_na_zone'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'remote_user: james'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'gather_facts: no'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: simple connection test'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ansible.builtin.ping:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-playbook -i production-inventory frontends-na.yml
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PLAY [frontends_na_zone]  ******************************************************
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: TASK [simple connection test] *****************************************************
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ok: [frontend2-na.example.com]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ok: [frontend1-na.example.com]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PLAY RECAP **********************************************
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'frontend1-na.example.com   : ok=1    changed=0    unreachable=0    failed=0
        skipped=0    rescued=0    ignored=0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ansible.builtin.ping module to perform a connection test, but in a real-world
    situation, you would perform more complex tasks, such as installing packages or
    modifying files. Specify that this playbook is run against this host group from
    the appservers_emea_zone inventory. Add the following contents to the playbook:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-playbook -i production-inventory appservers-emea.yml
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [appservers_emea_zone] ******************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [simple connection test] *************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [appserver1-emea.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [appserver2-emea.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP *****************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'appserver1-emea.example.com : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'appserver2-emea.example.com : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- ansible.builtin.import_playbook: frontends-na.yml'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- ansible.builtin.import_playbook: appservers-emea.yml'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-playbook -i production-inventory site.yml
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [frontends_na_zone] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [simple connection test] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [frontend2-na.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [frontend1-na.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [appservers_emea_zone] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [simple connection test] *************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [appserver2-emea.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [appserver1-emea.example.com]'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP *********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'appserver1-emea.example.com : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'appserver2-emea.example.com : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'frontend1-na.example.com   : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'frontend2-na.example.com   : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-config init --disabled > ansible.cfg
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-config list
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-config list
  prefs: []
  type: TYPE_NORMAL
- en: 'ACTION_WARNINGS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'default: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'description:'
  prefs: []
  type: TYPE_NORMAL
- en: '- By default Ansible will issue a warning when received from a task action
    (module'
  prefs: []
  type: TYPE_NORMAL
- en: or action plugin)
  prefs: []
  type: TYPE_NORMAL
- en: '- These warnings can be silenced by adjusting this setting to False.'
  prefs: []
  type: TYPE_NORMAL
- en: 'env:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: ANSIBLE_ACTION_WARNINGS'
  prefs: []
  type: TYPE_NORMAL
- en: 'ini:'
  prefs: []
  type: TYPE_NORMAL
- en: '- key: action_warnings'
  prefs: []
  type: TYPE_NORMAL
- en: 'section: defaults'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: Toggle action warnings'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: boolean'
  prefs: []
  type: TYPE_NORMAL
- en: 'version_added: ''2.5'''
  prefs: []
  type: TYPE_NORMAL
- en: 'AGNOSTIC_BECOME_PROMPT:'
  prefs: []
  type: TYPE_NORMAL
- en: 'default: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: Display an agnostic become prompt instead of displaying a prompt
    containing'
  prefs: []
  type: TYPE_NORMAL
- en: the command line supplied become method
  prefs: []
  type: TYPE_NORMAL
- en: 'env:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: ANSIBLE_AGNOSTIC_BECOME_PROMPT'
  prefs: []
  type: TYPE_NORMAL
- en: 'ini:'
  prefs: []
  type: TYPE_NORMAL
- en: '- key: agnostic_become_prompt'
  prefs: []
  type: TYPE_NORMAL
- en: 'section: privilege_escalation'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: Display an agnostic become prompt'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: boolean'
  prefs: []
  type: TYPE_NORMAL
- en: 'version_added: ''2.5'''
  prefs: []
  type: TYPE_NORMAL
- en: 'yaml:'
  prefs: []
  type: TYPE_NORMAL
- en: 'key: privilege_escalation.agnostic_become_prompt'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-config dump
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-config dump
  prefs: []
  type: TYPE_NORMAL
- en: ACTION_WARNINGS(default) = True
  prefs: []
  type: TYPE_NORMAL
- en: AGNOSTIC_BECOME_PROMPT(default) = True
  prefs: []
  type: TYPE_NORMAL
- en: ANSIBLE_CONNECTION_PATH(default) = None
  prefs: []
  type: TYPE_NORMAL
- en: ANSIBLE_COW_ACCEPTLIST(default) = ['bud-frogs', 'bunny', 'cheese', 'daemon',
    'default', 'dragon', 'elephant-in-snake', 'elephant', 'eyes', 'hellok>
  prefs: []
  type: TYPE_NORMAL
- en: ANSIBLE_COW_PATH(default) = None
  prefs: []
  type: TYPE_NORMAL
- en: ANSIBLE_COW_SELECTION(default) = default
  prefs: []
  type: TYPE_NORMAL
- en: ANSIBLE_FORCE_COLOR(default) = False
  prefs: []
  type: TYPE_NORMAL
- en: ANSIBLE_HOME(default) = /home/james/.ansible
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: CONFIG_FILE() = None
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: $ export ANSIBLE_FORCE_COLOR=True
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-config dump --only-change
  prefs: []
  type: TYPE_NORMAL
- en: 'ANSIBLE_FORCE_COLOR(env: ANSIBLE_FORCE_COLOR) = True'
  prefs: []
  type: TYPE_NORMAL
- en: ansible-config tells us that we have only changed ANSIBLE_FORCE_COLOR from the
    default value, which it is set to True, and that we set it through an env variable.
    Note that CONFIG_FILE has also been changed but no source for the change is found
    – this is because I installed Ansible via PIP, and so /etc/ansible/ansible.cfg
    (and other valid configuration files) do not exist – thus, this is expected behavior.
    This is an incredibly valuable tool, especially if you have to debug configuration
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with the Ansible configuration file itself, you will note that
    it is in INI format, meaning it has sections such as `[defaults]`, parameters
    in the format `key = value`, and comments beginning with either `#` or `;`. You
    only need to place the parameters you wish to change from their defaults in your
    configuration file, so if you wanted to create a simple configuration to change
    the location of your default inventory file, it might look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: As discussed earlier, one of the possible valid locations for the `ansible.cfg`
    configuration file is in your current working directory. It is likely that this
    is within your home directory, so on a multi-user system, we strongly recommend
    you restrict access to the Ansible configuration file to your user account alone.
    You should take all the usual precautions when it comes to securing important
    configuration files on a multi-user system, especially as Ansible is normally
    used to configure multiple remote systems, and so, a lot of damage could be done
    if a configuration file was inadvertently compromised!
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also important to note that the behavior of environment variables and
    configuration files is additive—thus with the configuration file I just mentioned
    in place, running the dump of the changed configuration again will yield the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Of course, Ansible’s behavior is not just controlled by the configuration files
    and switches—the command-line arguments that you pass to the various Ansible executables
    are also of vital importance. In fact, we have already worked with several already.
    We have shown you how to change where Ansible looks for its inventory file using
    the `inventory` parameter in `ansible.cfg`. However, in many of the examples that
    we previously covered in this book, we overrode this with the `-i` switch when
    running Ansible. So, let’s proceed to the next section to look at the use of command-line
    arguments when running Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line arguments
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn about the use of command-line arguments for
    playbook execution and how to employ some of the more commonly used ones to your
    advantage. We are already very familiar with one of these arguments, the `--version`
    switch, which we use to confirm that Ansible is installed (and which version is
    installed).
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as we were able to learn about the various configuration parameters directly
    through Ansible, we can also learn about the command-line arguments. Almost all
    of the Ansible executables have a `--help` option that you can run to display
    the valid command-line parameters. Let’s try this out now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view all the options and arguments when you execute the `ansible` command
    line. Use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see a great deal of helpful output when you run the preceding command;
    a snippet of this is shown in the following code block (you might want to pipe
    this into a pager, such as `less`, so that you can read it all easily):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – An example of the output of Ansible’s built-in help](img/B20846_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – An example of the output of Ansible’s built-in help
  prefs: []
  type: TYPE_NORMAL
- en: 'We could take one example from the preceding code to build on our previous
    use of the `ansible` command; so far, we have almost exclusively used it to run
    ad hoc tasks with the `-m` and `-a` parameters. However, `ansible` can also perform
    useful tasks such as telling us about the hosts in a group within our inventory.
    We could explore this using the `production-inventory` file we used earlier in
    this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you run this, you should see the members of the `appservers_emea_zone`
    inventory group listed. Although perhaps a little contrived, this example is incredibly
    valuable when you start working with dynamic inventory files and you can no longer
    just `cat` your inventory file to the terminal to view the contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-playbook -i production-inventory site.yml --private-key ~/keys/id_rsa
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-playbook -i production-inventory site.yml --user james
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[frontends_na_zone]'
  prefs: []
  type: TYPE_NORMAL
- en: frontend1-na.example.com
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-na.example.com
  prefs: []
  type: TYPE_NORMAL
- en: '[frontends_emea_zone]'
  prefs: []
  type: TYPE_NORMAL
- en: frontend1-emea.example.com
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-emea.example.com
  prefs: []
  type: TYPE_NORMAL
- en: '[appservers_na_zone]'
  prefs: []
  type: TYPE_NORMAL
- en: appserver1-na.example.com
  prefs: []
  type: TYPE_NORMAL
- en: appserver2-na.example.com
  prefs: []
  type: TYPE_NORMAL
- en: '[appservers_emea_zone]'
  prefs: []
  type: TYPE_NORMAL
- en: appserver1-emea.example.com
  prefs: []
  type: TYPE_NORMAL
- en: appserver2-emea.example.com
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i production-inventory frontends_emea_zone -a /usr/bin/date
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible -i production-inventory frontends_emea_zone -a /usr/bin/date
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-emea.example.com | CHANGED | rc=0 >>
  prefs: []
  type: TYPE_NORMAL
- en: Tue Apr 25 14:26:30 UTC 2023
  prefs: []
  type: TYPE_NORMAL
- en: frontend1-emea.example.com | CHANGED | rc=0 >>
  prefs: []
  type: TYPE_NORMAL
- en: Tue Apr 25 14:26:30 UTC 2023
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i production-inventory frontends_emea_zone -a /usr/sbin/pvs -u james
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: frontend2-emea.example.com | FAILED | rc=5 >>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'WARNING: Running as a non-root user. Functionality may be unavailable.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '/run/lock/lvm/P_global:aux: open failed: Permission deniednon-zero return code'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: frontend1-emea.example.com | FAILED | rc=5 >>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'WARNING: Running as a non-root user. Functionality may be unavailable.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'james user account does not have the privileges required to successfully run
    the pvs command. However, we can fix this by adding the --become command-line
    argument, which tells Ansible to become root on the remote systems:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible -i production-inventory frontends_emea_zone -a /usr/sbin/pvs -u james
    --become --ask-become-pass
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'BECOME password:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: frontend2-emea.example.com | CHANGED | rc=0 >>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PV         VG      Fmt  Attr PSize  PFree
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /dev/vdb1  vg_data lvm2 a--  <8.00g <8.00g
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: frontend1-emea.example.com | CHANGED | rc=0 >>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PV         VG      Fmt  Attr PSize  PFree
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '-m command-line argument, Ansible assumes you want to use the ansible.builtin.command
    module (see https://docs.ansible.com/ansible/latest/modules/command_module.xhtml).
    If you wish to use a specific module, you can add the -m switch to the command-line
    arguments and then specify the module arguments under the -a switch, as in the
    following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible -i production-inventory frontends_emea_zone -B 7200 -P 0 -a "sleep
    2h"
  prefs: []
  type: TYPE_NORMAL
- en: frontend1-emea.example.com | CHANGED => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_job_id": "809218129417.1291",'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"finished": 0,'
  prefs: []
  type: TYPE_NORMAL
- en: '"results_file": "/home/james/.ansible_async/809218129417.1291",'
  prefs: []
  type: TYPE_NORMAL
- en: '"started": 1'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-emea.example.com | CHANGED => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_job_id": "772164843356.1273",'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"finished": 0,'
  prefs: []
  type: TYPE_NORMAL
- en: '"results_file": "/home/james/.ansible_async/772164843356.1273",'
  prefs: []
  type: TYPE_NORMAL
- en: '"started": 1'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i production-inventory frontend2-emea.example.com -m ansible.builtin.async_status
    -a "jid=772164843356.1273"
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-emea.example.com | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_job_id": "772164843356.1273",'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"finished": 0,'
  prefs: []
  type: TYPE_NORMAL
- en: '"results_file": "/home/james/.ansible_async/772164843356.1273",'
  prefs: []
  type: TYPE_NORMAL
- en: '"started": 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"stderr": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"stderr_lines": [],'
  prefs: []
  type: TYPE_NORMAL
- en: '"stdout": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"stdout_lines": []'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i production-inventory frontend2-emea.example.com -a "pkill sleep"
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-emea.example.com | CHANGED | rc=0 >>
  prefs: []
  type: TYPE_NORMAL
- en: james@controlnode:~/code/chapter02$ ansible -i production-inventory frontend2-emea.example.com
    -m ansible.builtin.async_status -a "jid=772164843356.1273"
  prefs: []
  type: TYPE_NORMAL
- en: frontend2-emea.example.com | FAILED! => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_job_id": "772164843356.1273",'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"cmd": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"sleep",'
  prefs: []
  type: TYPE_NORMAL
- en: '"2h"'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"delta": "0:02:06.526826",'
  prefs: []
  type: TYPE_NORMAL
- en: '"end": "2023-04-25 14:45:13.024199",'
  prefs: []
  type: TYPE_NORMAL
- en: '"finished": 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"msg": "non-zero return code",'
  prefs: []
  type: TYPE_NORMAL
- en: '"rc": -15,'
  prefs: []
  type: TYPE_NORMAL
- en: '"results_file": "/home/james/.ansible_async/772164843356.1273",'
  prefs: []
  type: TYPE_NORMAL
- en: '"start": "2023-04-25 14:43:06.497373",'
  prefs: []
  type: TYPE_NORMAL
- en: '"started": 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"stderr": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"stderr_lines": [],'
  prefs: []
  type: TYPE_NORMAL
- en: '"stdout": "",'
  prefs: []
  type: TYPE_NORMAL
- en: '"stdout_lines": []'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'region:'
  prefs: []
  type: TYPE_NORMAL
- en: 'east: app'
  prefs: []
  type: TYPE_NORMAL
- en: 'west: frontend'
  prefs: []
  type: TYPE_NORMAL
- en: 'central: cache'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: bracket notation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: region['east']
  prefs: []
  type: TYPE_NORMAL
- en: dot notation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: region.east
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: 'redis:'
  prefs: []
  type: TYPE_NORMAL
- en: '- server: cacheserver01.example.com'
  prefs: []
  type: TYPE_NORMAL
- en: 'port: 6379'
  prefs: []
  type: TYPE_NORMAL
- en: 'slaveof: cacheserver02.example.com'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '- role: dbms_admin'
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'username: James'
  prefs: []
  type: TYPE_NORMAL
- en: '- role: system_admin'
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'username: John'
  prefs: []
  type: TYPE_NORMAL
- en: '- role: security_amdin'
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'username: Rock'
  prefs: []
  type: TYPE_NORMAL
- en: '- role: app_admin'
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'username: Daniel'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Display redis variables'
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: all'
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'redis:'
  prefs: []
  type: TYPE_NORMAL
- en: 'server: cacheserver01.example.com'
  prefs: []
  type: TYPE_NORMAL
- en: 'port: 6379'
  prefs: []
  type: TYPE_NORMAL
- en: 'slaveof: cacheserver02.example.com'
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Display the redis port'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.debug:'
  prefs: []
  type: TYPE_NORMAL
- en: 'msg: "The redis port for {{ redis.server }} is {{ redis.port }}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-playbook -i localhost, -c local redis-playbook.yml
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [Display redis variables] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Gathering Facts] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Display the redis port] **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost] => {'
  prefs: []
  type: TYPE_NORMAL
- en: '"msg": "The redis port for cacheserver01.example.com is 6379"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '- key: job'
  prefs: []
  type: TYPE_NORMAL
- en: 'value: developer'
  prefs: []
  type: TYPE_NORMAL
- en: '- key: language'
  prefs: []
  type: TYPE_NORMAL
- en: 'value: java'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Jinja2 filtering demo 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: localhost'
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Copy sample data to /tmp'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.copy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'src: multiple-document-strings.yaml'
  prefs: []
  type: TYPE_NORMAL
- en: 'dest: /tmp/multiple-document-strings.yaml'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Read sample data to a variable'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.shell: cat /tmp/multiple-document-strings.yaml'
  prefs: []
  type: TYPE_NORMAL
- en: 'register: result'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Print the filtered output in a debug message'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.debug:'
  prefs: []
  type: TYPE_NORMAL
- en: 'msg: ''{{ item }}'''
  prefs: []
  type: TYPE_NORMAL
- en: 'loop: ''{{ result.stdout | from_yaml_all | list }}'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: PLAY [Jinja2 filtering demo 1] ************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Gathering Facts] ************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Copy sample data to /tmp] ***********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'changed: [localhost]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Read sample data to a variable] ***********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'changed: [localhost]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Print the filtered output in a debug message] ***********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost] => (item={''tags'': [{''key'': ''job'', ''value'': ''developer''},
    {''key'': ''language'', ''value'': ''java''}]}) => {'
  prefs: []
  type: TYPE_NORMAL
- en: '"msg": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"tags": ['
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"key": "job",'
  prefs: []
  type: TYPE_NORMAL
- en: '"value": "developer"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"key": "language",'
  prefs: []
  type: TYPE_NORMAL
- en: '"value": "java"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP ***************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'localhost                  : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Jinja2 filtering demo 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: localhost'
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '- key: job'
  prefs: []
  type: TYPE_NORMAL
- en: 'value: developer'
  prefs: []
  type: TYPE_NORMAL
- en: '- key: language'
  prefs: []
  type: TYPE_NORMAL
- en: 'value: java'
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Filter the tags variable through items2dict'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.debug:'
  prefs: []
  type: TYPE_NORMAL
- en: 'msg: ''{{ tags | items2dict }}'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-playbook -i localhost, -c local jinja-filtering2.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[WARNING]: Found variable using reserved name: tags'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [Jinja2 filtering demo 2] ***********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Gathering Facts] ***************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Filter the tags variable through items2dict] ***********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost] => {'
  prefs: []
  type: TYPE_NORMAL
- en: '"msg": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"job": "developer",'
  prefs: []
  type: TYPE_NORMAL
- en: '"language": "java"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP ***************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Jinja2 filtering demo 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: localhost'
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ping_value: "{{ lookup(''file'', ''/etc/hosts'') }}"'
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Display the values obtained from the file lookup'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.debug:'
  prefs: []
  type: TYPE_NORMAL
- en: 'msg: "ping value is {{ ping_value }}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-playbook -i localhost, -c local jinja-filtering3.yml
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [Jinja2 filtering demo 3] ************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Gathering Facts] ***************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost]'
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Display the values obtained from the file lookup] ***********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [localhost] => {'
  prefs: []
  type: TYPE_NORMAL
- en: '"msg": "ping value is 127.0.0.1 localhost\n\n# The following lines are desirable
    for IPv6 capable hosts\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0
    ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts\n\n10.0.50.30
    frontend1-na.example.com frontend1-emea.example.com\n10.0.50.31 frontend2-na.example.com
    frontend2-emea.example.com\n\n10.0.50.40 appserver1-emea.example.com\n10.0.50.41
    appserver2-emea.example.com"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP **********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Add some quotation in the shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '- shell: echo {{ string_value | quote }}'
  prefs: []
  type: TYPE_NORMAL
- en: Concatenate a list into a specific string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '{{ list | join("$") }}'
  prefs: []
  type: TYPE_NORMAL
- en: Obtain the file name of a specific file path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '{{ path | basename }}'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the directory from a full path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '{{ path | dirname }}'
  prefs: []
  type: TYPE_NORMAL
- en: Get the directory from a specific windows path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '{{ path | win_dirname }}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
