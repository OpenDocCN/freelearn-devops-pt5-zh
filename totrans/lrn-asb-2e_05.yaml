- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we built a playbook that installs and configures a
    basic **LAMP stack**. In this chapter, we will be building on top of the techniques
    we used there to create a playbook that installs a **LEMP stack**, which, as you
    might recall, replaces Apache with NGINX and then installs WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we finish this chapter, you should be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare our initial playbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install the WordPress CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and configure WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log in to your WordPress installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preinstallation tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `stack_install` role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `stack_config` role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `wordpress` role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the WordPress playbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we start, we should quickly cover what WordPress is; you have likely
    visited a website powered by WordPress at some point in the last 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: It is an open-source **content management system** (**CMS**) powered by PHP
    and MySQL and used by around 810 million websites, which is around 43% of all
    the websites on the internet today, according to the statistics published by Colorlib
    in August of 2023.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like in [*Chapter 4*](B21620_04.xhtml#_idTextAnchor202), *Deploying a LAMP Stack*,
    we will use the local **Multipass virtual machine** we have been using throughout
    the title. Again, additional packages will be downloaded when launching the virtual
    machine and deploying WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a complete copy of the playbook in the repository accompanying
    this title at [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: Preinstallation tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in [*Chapter 4*](B21620_04.xhtml#_idTextAnchor202), *Deploying
    a LAMP Stack*, a LEMP stack is composed of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**: In our case, this will be the Ubuntu Multipass virtual machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NGINX**: If you remember, it is pronounced as *engine-x*, which means there
    is an *E* in *LEMP* and not an *N* (which would also make it impossible to pronounce
    as an abbreviation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MariaDB**: As we have already seen, this will be the database component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PHP**: We will be using PHP 8 again for this'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we install WordPress, we need to install and configure these components.
    Also, as this playbook will eventually be executed against publicly available
    cloud servers, we must consider some best practices around our NGINX configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, before we start looking at the playbook, let’s start things off by
    getting the initial structure of the playbook set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This gives us our basic layout. Next, we must copy the `cloud-init.yaml`, `example_key`,
    `example_key.pub`, and `hosts.example` files from the previous chapters, so when
    it is time to run the playbook, we have everything we need to launch the virtual
    machine using Multipass.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the basics configured, we can make a start by writing the playbook
    to deploy and configure our initial software stack.
  prefs: []
  type: TYPE_NORMAL
- en: The stack_install role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start by creating a role called `stack_install` using `ansible-galaxy`
    `role init`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will install our initial software stack. Once installed, we hand it over
    to a second role, which will then configure the software stack before a third
    role starts the WordPress installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what packages do we need? WordPress has the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP 7.4 or greater
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 5.7 or greater OR MariaDB 10.4 or greater
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nginx or Apache with the `mod_rewrite` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPS support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We know from the previous chapter that the versions of PHP and MariaDB we are
    installing meet this requirement, leaving just NGINX, which we can download and
    install from the principal NGINX repository to get the latest and greatest version.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the NGINX repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we look at the tasks and variables that we will need to enable the mainline
    NGINX repository, let’s start off the `roles/stack_install/tasks/main.yml` file
    with a task that updates the operating system and the cache of available packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The remainder of the tasks we will be defining enable the repository before
    we finally install the packages.
  prefs: []
  type: TYPE_NORMAL
- en: Moving onto the `roles/stack_install/default/main.yml` file, we need to set
    some variables containing information on the repository, which we will add alongside
    the default Ubuntu ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'These variables start with one that contains the URL of the signing key for
    the repository that will be enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then add the following repository URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You may have noticed that we are using the `ansible_distribution_release` fact
    to dynamically run into the URL to put the correct version number of the Ubuntu
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, back to the `roles/stack_install/tasks/main.yml` file and the two tasks
    that call these variables – these will look like the following, starting with
    the addition of the signing key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using `with_items`, so, if you need to, you could define
    more than one URL and add additional signing keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach is carried forward to the next task, where we are adding more
    than one repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The final task in the `roles/stack_install/tasks/main.yml` file is the one
    that installs all of the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that rather than defining the packages in a single variable,
    I have split them into three, and we are combining them by using `+` when calling
    the variables.
  prefs: []
  type: TYPE_NORMAL
- en: So, what do these three variables contain, and why don’t we define them as a
    single variable?
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the `roles/stack_install/default/main.yml` file, you can see that `system_packages`
    is defined as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Following that, the `extra_packages` variable contains the following package
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have the list of packages that make up the bulk of our software
    stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we are defining three variables for the packages, it means that we can, if
    required, overwrite them elsewhere in our playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Let us, for example, assume that we need to install the Amazon Web Services
    command-line tool on the virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: This would allow us to push data, such as images, to an Amazon S3 bucket or
    clear a cache on a CloudFront content delivery network endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than overriding a long list of packages from a single variable, we could
    take the `extra_packages` variable, add it to `group_vars/common.yml`, and append
    it to the end of the list of packages so that it will now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is a lot more efficient than repeating all the packages
    we want to install.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of using `+` to combine everything is that we only need to
    call a single `ansible.builtin.apt` task to install everything we need for the
    following role, which we will dive into now.
  prefs: []
  type: TYPE_NORMAL
- en: The stack_config role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our base software stack installed we need to configure it,
    let’s start by creating the role by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the basic file structure needed for the `stack_config` role.
    With that in place, we can now look at configuring the role itself – in this role,
    we will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a system user for our WordPress installation to run under
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure NGINX as per the best practices on the WordPress documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure PHP-FPM to run as the WordPress user we created earlier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we need a user for WordPress to run under, we should make a start there.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress system user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The defaults for the WordPress system user, which should be placed in `roles/stackconfig/defaults/main.yml`,
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We refer to this as the system user, as we will create a user in WordPress itself
    later in the chapter. This user’s details will also be defined in Ansible, so
    we do not want to get the two different users confused.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two tasks that use these variables, found in `roles/stack_config/tasks/main.yml`,
    should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding task ensures that the group is present, and the next task adds
    an operating system-level user, which is added to the group that has just been
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are not adding a key to the user this time as we don’t want
    to log in to the user account to start manipulating files and other actions. This
    should all be done within WordPress itself or by using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: NGINX configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to be using several template files for our NGINX configuration.
    The first template is called `roles/stack_config/templates/nginx-nginx.conf.j2`,
    and it will replace the main NGINX configuration deployed by the package installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The file’s content is the same as the file that will be replaced, except that
    we are updating `worker_processes` to use the number of processors detected by
    Ansible when the setup module runs rather than a hardcoded value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task to deploy the configuration file is as you would expect, and it should
    be placed in `roles/stack_config/tasks/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are notifying the restart `nginx` handler, which is stored
    in the `roles/stack_config/handlers/main.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have the default site template, `roles/stack_config/templates/nginx-confd-default.conf.j2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To help identify where the template files will be placed on the target host,
    I am naming them so that the full path is in the filename. In this case, the filename
    is `nginx-confd-default.conf.j2`, and it will be deployed to `/etc/nginx/conf.d/default.conf`;
    the task to do this follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following two files we are deploying are going into a folder that doesn’t
    exist. So, we first need to create the destination folder. To do this, we need
    to add the following to `roles/stack_config/tasks/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are not making any replacements in the `nginx-global-restrictions.conf`
    file, we are using the `ansible.builtin.copy` module rather than `ansible.builtin.template`
    here; the file is stored `in roles/stack_config/files/` and the task that copies
    it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This file has some sensible defaults in it, such as denying access to files
    that are included as part of the WordPress installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Another import inclusion is adding a configuration to deny access to `.php`
    files within `/wp-content/` and its sub-folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: There are several other configurations in the `nginx-global-restrictions.conf`
    file; see the repository, which accompanies the book, for the complete configuration,
    as there are too many snippets for us to go into here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same can be said for the next and final block of the NGINX configuration;
    review the repository for more information on the configuration deployed by the
    following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When we reviewed the default site template, `roles/stack_config/templates/nginx-confd-default.conf.j2`,
    you may have noticed the use of a few variables we haven’t yet defined; they were
    `php.ip` and `php.port`.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have already guessed from the variable labeling, these have to do
    with the configuration of PHP, so, let us look at configuring the PHP and PHP-FPM
    part of our deployment.
  prefs: []
  type: TYPE_NORMAL
- en: PHP and PHP-FPM configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we saw in the previous section, there are a few variables defined for PHP
    in `roles/stack_config/defaults/main.yml`, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We then have some variables that define some information on the paths for the
    various files and service names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The first configuration of the two tasks we will be running deploys the PHP-FPM
    configuration; this is, what the template, which can be found at `roles/stack_config/templates/php-fpmd-www.conf.j2`,
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have a few replacements in this file. Starting at the top
    between the square brackets, we are defining the PHP-FPM pool name and using the
    content of the `wordpress_system.user` variable for this.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have the user and group we want our pool to run under; here, we use
    `wordpress_system.user` and `wordpress_system.group`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we are setting the IP address and port we want our PHP-FPM pool to
    listen on by using the `php.ip` and `php.port` variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task in `roles/stack_config/tasks/main.yml` to deploy the template looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The handler to restart PHP-FPM in `roles/stack_config/handlers/main.yml` is
    very similar to the ones we have already been defining throughout the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The next task in `roles/stack_config/tasks/main.yml` uses the `ansible.builtin.lineinfile`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We are taking the `php.ini` file and looping through it by looking for the values
    defined by the `regexp` key. Once we find the value, we replace it with the content
    of the replace key. If there are changes to the file, we are making a backup first,
    just in case.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we are using `backrefs` to ensure that if there is no matching `regex`
    in the file, then it will be left unchanged; if we didn’t use them, the `restart
    php-fpm` handler would be called every time the playbook runs, and we do not want
    PHP-FPM to be restarted if there is no reason for it be.
  prefs: []
  type: TYPE_NORMAL
- en: Starting NGINX and PHP-FPM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have NGINX and PHP-FPM installed and configured, we need to start
    the two services rather than wait until the end of the playbook run.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we don’t do this now, our upcoming role to install WordPress will fail.
    The first of the two tasks in `roles/stackconfig/tasks/main.yml` looks like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The second task looks pretty much the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the two tasks, they are the same as the two handlers we have
    already defined.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you look closer, you will notice that while we are using the `ansible.builtin.service`
    module, we are only setting the `state` setting to `started` rather than `restarted`,
    and we are missing the configuration for `enabled`, which sets the service to
    start on boot.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing you may have noticed is the use of the `php_service_name` variable;
    to explain why we are using this, you will need to wait until [*Chapter 6*](B21620_06.xhtml#_idTextAnchor291),
    *Targeting* *Multiple Distributions*.
  prefs: []
  type: TYPE_NORMAL
- en: The final component of our software stack that we need to configure is MariaDB,
    so let us review that before we move on to the WordPress installation and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MariaDB configuration will closely match its configuration in [*Chapter
    4*](B21620_04.xhtml#_idTextAnchor202), *Deploying a LAMP Stack*, minus a few steps,
    so I will not go into too much detail here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default variables for this part of the role in `roles/stack_config/defaults/main.yml`
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are now using a nested variable and have removed the host
    wildcard, which we had previously defined as `%` in [*Chapter 4*](B21620_04.xhtml#_idTextAnchor202),
    *Deploying a* *LAMP Stack*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first task is to start MariaDB so that we can interact with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Check for the presence of the `~/.``my.cnf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Set a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `~/``my.cnf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, remove the anonymous user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have come to our final task, which is to remove the test database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, with everything we need to install and run WordPress configured, we can
    start on WordPress itself.
  prefs: []
  type: TYPE_NORMAL
- en: The wordpress role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have completed the roles that prepare our target virtual machine,
    we can proceed with the actual WordPress installation; this will be split into
    a few different parts, starting with downloading `wp-cli` and setting up the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we progress, we should create the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the empty role files, we can start populating the tasks and
    variables in the files.
  prefs: []
  type: TYPE_NORMAL
- en: Some facts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before installing WordPress, we must set some facts using the `ansible.builtin.set_fact`
    module. The following task, the first in the `roles/wordpress/tasks/main.yml`
    file, sets two variables using the information gathered when Ansible first connects
    to the hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We will use these two variables when we install WordPress using the WordPress
    CLI, which we will be downloading and installing next.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress CLI installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WordPress CLI (`wp-cli`) is a command-line tool used to administer your WordPress
    installation; we will be using it throughout the role, so, the first thing our
    role should do is download it. To do this, we need to download the following variables
    in `roles/wordpress/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Moving back to the `roles/wordpress/tasks/main.yml` file, we use these two
    variables in the following task, which downloads `wp-cli` and places it on our
    host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have `wp-cli` on our host with the correct execute permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start to use `wp-cli`, we have one more bit of preparation work to
    do: create the database and user, which we will use with our WordPress installation.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the WordPress database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next part of the role creates the database our WordPress installation will
    use; as per the other tasks in this chapter, it uses a nested variable, which
    can be found in `roles/wordpress/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The tasks in `roles/wordpress/tasks/main.yml` to create the database are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the database has been created, we can add the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we are using the `mariadb.hosts` variable from the previous role.
    Now that we have the database created, we can start downloading and installing
    WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading, configuring, and installing WordPress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have everything in place to install WordPress, we can make a start,
    first by setting some default variables in `roles/wordpress/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our variables, we can start our download if we need to. To
    find out whether we need to download WordPress, we should check for the presence
    of an existing WordPress installation. The task to do this in `roles/wordpress/tasks/main.yml`
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the first task uses the `ansible.builtin.stat` module to check
    for an `index.php` file in our system user’s home directory, which in our case
    is also the webroot.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is the first time that the playbook is being run against the host,
    then we will need to download WordPress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This task uses the `ansible.builtin.shell` module to issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few arguments we should work through before moving on to the next
    task, which are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`args` and `chdir`: You can pass additional arguments to the `ansible.builtin.shell`
    module using `args`. Here, we are passing `chdir`, which instructs Ansible to
    change to the directory we specify before running the shell command we provide.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`become_user`: This is the user we want to run the command as. The command
    will run as the root user if we do not use this flag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`become`: This instructs Ansible to execute the task as the defined user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next task in the playbook sets the correct permissions on the user’s home
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that WordPress is downloaded, we can start the installation. First, we
    need to check whether this has already been done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no `wp-config.php` file, then the following task will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This is like you logging in and running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using Ansible to execute commands as if we had a local
    terminal open.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our `wp-config.php` file created, with the database credentials
    in place, we can install WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to check whether WordPress has already been installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the presence of the `ignore_errors` option, if WordPress
    is not installed, this command will give us an error. We are then using this to
    our advantage when registering the results, as you can see from the following
    task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This task is only executed if the previous task returns an error, which is what
    happens if WordPress is not installed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our primary WordPress site is installed, we can continue installing
    the plugins.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress plugins installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final part of our WordPress installation is to download and install the
    plugins we defined in the `wordpress.plugins` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'As per previous tasks, we will build a little logic into the tasks. First,
    we run the following task to see whether all the plugins are already installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: If the plugins are not installed, this task should fail, so we have `ignore_errors`
    in there.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we are registering the results of the entire task, because,
    if you remember, we are installing several plugins, such as `wp_plugin_installed`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next two tasks take the results of `wp_plugin_installed` and use the `ansible.builtin.set_fact`
    module to set a fact depending on the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding task is set if we don’t need to install any of the plugins, and
    the following one is used if we need to install at least one of the plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are setting `wp_plugin_installed_skip` to be `true` or `false`:
    if the fact is set to `false`, then the next task will loop through installing
    the plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the plugins’ tasks defined, we can have a go at running our
    playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Running the WordPress playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the playbook and install WordPress, we need to finish walking through
    the files; `site.yml` should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: With that out of the way, we can run the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `Chapter05` folder in the GitHub repository accompanying this title contains
    the example `hosts` file and keys for launching a local virtual machine using
    Multipass. If you are following along, please refer to the instructions in [*Chapter
    1*](B21620_01.xhtml#_idTextAnchor017), *Installing and Running Ansible*; these
    detail how to launch the virtual machine and prepare your `hosts` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we know, to run the playbook, we need to issue the following command once
    our Multipass virtual machine is up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s cover some of the highlights rather than go through the whole output
    here, starting with adding the NGINX repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the name of the Ubuntu release is added – in the example, this
    is `jammy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When making changes to the `php.ini` file, only two of the three changes we
    defined need to be applied, as `expose_php` is already set to `Off`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that we set the `ignore_errors` flag for some of the checks when it
    came to installing and configuring WordPress; this is why:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, an error was ignored, and the task to install WordPress was
    triggered. The same thing happened for the plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'On first execution, the recap looked something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Rerunning the playbook immediately after shows how the logic we have added
    throughout the task execution kicks in, which results in a lot of the later tasks
    being skipped entirely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that, this time, the check for the plugins doesn’t result in an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Now that WordPress is installed, we should be able to access it in a browser
    by going to the host you have defined in your `hosts` file, in my case, `http://192.168.64.26.nip.io/`;
    yours will be different.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the default WordPress site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Our freshly installed WordPress website](img/B21620_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Our freshly installed WordPress website
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the site’s description in the top left reads **WordPress installed
    by Ansible on Ubuntu 22.04**, which is what we set when installing WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if you go to the WordPress admin area by appending `/wp-admin/` to the
    end of your URL, for example, `http://192.168.64.26.nip.io/wp-admin/`, you should
    be able to log in to WordPress using the username and password we defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The WordPress admin login page](img/B21620_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The WordPress admin login page
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in, you should see a few messages about the plugins we installed
    during the playbook run needing to be configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Prompts when first logging into WordPress](img/B21620_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Prompts when first logging into WordPress
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to play with the WordPress installation and even, if you are so inclined,
    try and break it – if you needed to, you could delete and relaunch the Multipass
    virtual machine and quickly rerun the playbook to reinstall WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reused many of the same principles we covered in the
    previous chapter and moved on to deploying a complete application. What is good
    about this is that the process is both repeatable and just a single command.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have been targeting an Ubuntu virtual machine. If we ran our playbook
    against a Red-Hat-based virtual machine, the playbook would give an error as commands
    and paths are different.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will target multiple operating systems using the same playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find out more information on the technologies we have covered in this
    chapter at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Colorlib WordPress** **statistics**: [https://colorlib.com/wp/wordpress-statistics](https://colorlib.com/wp/wordpress-statistics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NGINX**: [http://nginx.org/](http://nginx.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WordPress**: [https://wordpress.org/](https://wordpress.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WP-CLI**: [http://wp-cli.org/](http://wp-cli.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WordPress on** **NGINX**: [https://wordpress.org/documentation/article/nginx/](https://wordpress.org/documentation/article/nginx/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The project pages for the plugins we installed can be found at the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jetpack**: [https://en-gb.wordpress.org/plugins/jetpack/](https://en-gb.wordpress.org/plugins/jetpack/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WP Super** **Cache**: [https://en-gb.wordpress.org/plugins/wp-super-cache/](https://en-gb.wordpress.org/plugins/wp-super-cache/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yoast** **SEO**: [https://en-gb.wordpress.org/plugins/wordpress-seo/](https://en-gb.wordpress.org/plugins/wordpress-seo/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wordfence**: [https://en-gb.wordpress.org/plugins/wordfence/](https://en-gb.wordpress.org/plugins/wordfence/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NGINX** **Helper**: [https://wordpress.org/plugins/nginx-helper/](https://wordpress.org/plugins/nginx-helper/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
