["```\n$ yum -y install unzip\n$ echo $PATH\n$ unzip terraform_0.11.8_linux_amd64.zip -d /usr/bin/\n```", "```\n$ terraform -v\nTerraform v0.11.8\n```", "```\n$ ssh -i ~/.ssh/EffectiveDevOpsAWS.pem ec2-user@34.201.116.2 (replace this IP with your AWS public IP)\n$ sudo yum install --enablerepo=epel -y nodejs\n$ sudo wget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js -O /home/ec2-user/helloworld.js\n$ sudo wget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf -O /etc/init/helloworld.conf\n$ sudo start helloworld\n $ curl http://34.201.116.2:3000/\nHello World\n```", "```\n$ aws ec2 run-instances \\\n --instance-type t2.micro \\\n --key-name EffectiveDevOpsAWS \\\n --security-group-ids sg-01864b4c \\\n --image-id ami-cfe4b2b0\n\n$ aws ec2 describe-instances \\\n --instance-ids i-0eb05adae2bb760c6 \\\n --query \"Reservations[*].Instances[*].PublicDnsName\"\n```", "```\n$ ssh -i ~/.ssh/EffectiveDevOpsAWS.pem ec2-user@ec2-18-234-227-160.compute-1.amazonaws.com\n$ sudo yum install --enablerepo=epel -y nodejs\n$ sudo wget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js -O /home/ec2-user/helloworld.js\n$ sudo wget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf -O /etc/init/helloworld.conf\n$ sudo start helloworld\n $ curl http://ec2-18-234-227-160.compute-1.amazonaws.com:3000/\n Hello World\n```", "```\n$ git clone https://github.com/<your_github_username>/EffectiveDevOpsTerraform\n```", "```\n$ cd EffectiveDevOpsTerraform\n$ mkdir firstproject\n$ cd firstproject\n```", "```\nprovider \"aws\" {\naccess_key = \"<YOUR AWS ACCESS KEY>\"\nsecret_key = \"<YOUR AWS SECRET KEY>\"\nregion = \"us-east-1\"\n}\n```", "```\n$ terraform init\n```", "```\nresource \"provider-name_resource-type\" \"resource-name\" {\nparameter_name = “parameter_value”\nparameter_name = “parameter_value”\n.\n.\n}\n```", "```\n# Provider Configuration for AWS\nprovider \"aws\" {\naccess_key = “<YOUR AWS ACCESS KEY>\"\nsecret_key = \"<YOUR AWS SECRET KEY>\"\nregion = \"us-east-1\"\n}\n\n# Resource Configuration for AWS\nresource \"aws_instance\" \"myserver\" {\nami = \"ami-cfe4b2b0\"\ninstance_type = \"t2.micro\"\nkey_name = \"EffectiveDevOpsAWS\"\nvpc_security_group_ids = [\"sg-01864b4c\"]\ntags {\n```", "```\nName = \"helloworld\"\n}\n}\n```", "```\n$ terraform validate\n```", "```\n[root@yogeshraheja firstproject]# terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n + create\n\nTerraform will perform the following actions:\n\n + aws_instance.myserver\n id: <computed>\n ami: \"ami-cfe4b2b0\"\n arn: <computed>\n associate_public_ip_address: <computed>\n availability_zone: <computed>\n cpu_core_count: <computed>\n cpu_threads_per_core: <computed>\n ebs_block_device.#: <computed>\n ephemeral_block_device.#: <computed>\n get_password_data: \"false\"\n instance_state: <computed>\n instance_type: \"t2.micro\"\n ipv6_address_count: <computed>\n ipv6_addresses.#: <computed>\n key_name: \"EffectiveDevOpsAWS\"\n network_interface.#: <computed>\n network_interface_id: <computed>\n password_data: <computed>\n placement_group: <computed>\n primary_network_interface_id: <computed>\n private_dns: <computed>\n private_ip: <computed>\n public_dns: <computed>\n public_ip: <computed>\n root_block_device.#: <computed>\n security_groups.#: <computed>\n source_dest_check: \"true\"\n subnet_id: <computed>\n tags.%: \"1\"\n tags.Name: \"helloworld\"\n tenancy: <computed>\n volume_tags.%: <computed>\n vpc_security_group_ids.#: \"1\"\n vpc_security_group_ids.1524136243: \"sg-01864b4c\"\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n------------------------------------------------------------------------\n```", "```\n[root@yogeshraheja firstproject]#\n```", "```\n[root@yogeshraheja firstproject]# terraform apply\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  + aws_instance.myserver\n      id: <computed>\n      ami: \"ami-cfe4b2b0\"\n      arn: <computed>\n      associate_public_ip_address: <computed>\n      availability_zone: <computed>\n      cpu_core_count: <computed>\n      cpu_threads_per_core: <computed>\n      ebs_block_device.#: <computed>\n      ephemeral_block_device.#: <computed>\n      get_password_data: \"false\"\n      instance_state: <computed>\n      instance_type: \"t2.micro\"\n      ipv6_address_count: <computed>\n      ipv6_addresses.#: <computed>\n      key_name: \"EffectiveDevOpsAWS\"\n      network_interface.#: <computed>\n      network_interface_id: <computed>\n      password_data: <computed>\n      placement_group: <computed>\n      primary_network_interface_id: <computed>\n      private_dns: <computed>\n      private_ip: <computed>\n      public_dns: <computed>\n      public_ip: <computed>\n      root_block_device.#: <computed>\n      security_groups.#: <computed>\n      source_dest_check: \"true\"\n      subnet_id: <computed>\n      tags.%: \"1\"\n      tags.Name: \"helloworld\"\n      tenancy: <computed>\n      volume_tags.%: <computed>\n      vpc_security_group_ids.#: \"1\"\n      vpc_security_group_ids.1524136243: \"sg-01864b4c\"\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\naws_instance.myserver: Creating...\n  ami: \"\" => \"ami-cfe4b2b0\"\n  arn: \"\" => \"<computed>\"\n  associate_public_ip_address: \"\" => \"<computed>\"\n  availability_zone: \"\" => \"<computed>\"\n  cpu_core_count: \"\" => \"<computed>\"\n  cpu_threads_per_core: \"\" => \"<computed>\"\n  ebs_block_device.#: \"\" => \"<computed>\"\n  ephemeral_block_device.#: \"\" => \"<computed>\"\n  get_password_data: \"\" => \"false\"\n  instance_state: \"\" => \"<computed>\"\n  instance_type: \"\" => \"t2.micro\"\n  ipv6_address_count: \"\" => \"<computed>\"\n  ipv6_addresses.#: \"\" => \"<computed>\"\n  key_name: \"\" => \"EffectiveDevOpsAWS\"\n  network_interface.#: \"\" => \"<computed>\"\n  network_interface_id: \"\" => \"<computed>\"\n  password_data: \"\" => \"<computed>\"\n  placement_group: \"\" => \"<computed>\"\n  primary_network_interface_id: \"\" => \"<computed>\"\n  private_dns: \"\" => \"<computed>\"\n  private_ip: \"\" => \"<computed>\"\n  public_dns: \"\" => \"<computed>\"\n  public_ip: \"\" => \"<computed>\"\n  root_block_device.#: \"\" => \"<computed>\"\n  security_groups.#: \"\" => \"<computed>\"\n  source_dest_check: \"\" => \"true\"\n  subnet_id: \"\" => \"<computed>\"\n  tags.%: \"\" => \"1\"\n  tags.Name: \"\" => \"helloworld\"\n  tenancy: \"\" => \"<computed>\"\n  volume_tags.%: \"\" => \"<computed>\"\n  vpc_security_group_ids.#: \"\" => \"1\"\n  vpc_security_group_ids.1524136243: \"\" => \"sg-01864b4c\"\naws_instance.myserver: Still creating... (10s elapsed)\naws_instance.myserver: Still creating... (20s elapsed)\naws_instance.myserver: Creation complete after 22s (ID: i-dd8834ca)\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n[root@yogeshraheja firstproject]# \n```", "```\n[root@yogeshraheja firstproject]# cat terraform.tfstate\n{\n \"version\": 3,\n \"terraform_version\": \"0.11.8\",\n \"serial\": 1,\n \"lineage\": \"9158b0ed-754a-e01e-094e-6b0827347950\",\n \"modules\": [\n {\n \"path\": [\n \"root\"\n ],\n \"outputs\": {},\n \"resources\": {\n \"aws_instance.myserver\": {\n \"type\": \"aws_instance\",\n \"depends_on\": [],\n \"primary\": {\n \"id\": \"i-dd8834ca\",\n \"attributes\": {\n \"ami\": \"ami-cfe4b2b0\",\n \"arn\": \"arn:aws:ec2:us-east-1:094507990803:instance/i-dd8834ca\",\n \"associate_public_ip_address\": \"true\",\n \"availability_zone\": \"us-east-1b\",\n \"cpu_core_count\": \"1\",\n \"cpu_threads_per_core\": \"1\",\n \"credit_specification.#\": \"1\",\n \"credit_specification.0.cpu_credits\": \"standard\",\n \"disable_api_termination\": \"false\",\n \"ebs_block_device.#\": \"0\",\n \"ebs_optimized\": \"false\",\n \"ephemeral_block_device.#\": \"0\",\n \"get_password_data\": \"false\",\n \"iam_instance_profile\": \"\",\n \"id\": \"i-dd8834ca\",\n \"instance_state\": \"running\",\n \"instance_type\": \"t2.micro\",\n \"ipv6_addresses.#\": \"0\",\n \"key_name\": \"EffectiveDevOpsAWS\",\n \"monitoring\": \"false\",\n \"network_interface.#\": \"0\",\n \"network_interface_id\": \"eni-b0683ee7\",\n \"password_data\": \"\",\n \"placement_group\": \"\",\n \"primary_network_interface_id\": \"eni-b0683ee7\",\n \"private_dns\": \"ip-172-31-74-203.ec2.internal\",\n \"private_ip\": \"172.31.74.203\",\n \"public_dns\": \"ec2-52-70-251-228.compute-1.amazonaws.com\",\n \"public_ip\": \"52.70.251.228\",\n \"root_block_device.#\": \"1\",\n \"root_block_device.0.delete_on_termination\": \"true\",\n \"root_block_device.0.iops\": \"100\",\n \"root_block_device.0.volume_id\": \"vol-024f64aa1bb805237\",\n \"root_block_device.0.volume_size\": \"8\",\n \"root_block_device.0.volume_type\": \"gp2\",\n \"security_groups.#\": \"1\",\n \"security_groups.2004290681\": \"HelloWorld\",\n \"source_dest_check\": \"true\",\n \"subnet_id\": \"subnet-658b6149\",\n \"tags.%\": \"1\",\n \"tags.Name\": \"helloworld\",\n \"tenancy\": \"default\",\n \"volume_tags.%\": \"0\",\n \"vpc_security_group_ids.#\": \"1\",\n \"vpc_security_group_ids.1524136243\": \"sg-01864b4c\"\n },\n \"meta\": {\n \"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\": {\n \"create\": 600000000000,\n \"delete\": 1200000000000,\n \"update\": 600000000000\n },\n \"schema_version\": \"1\"\n },\n \"tainted\": false\n },\n \"deposed\": [],\n \"provider\": \"provider.aws\"\n }\n },\n \"depends_on\": []\n }\n ]\n}\n[root@yogeshraheja firstproject]#\n```", "```\n[root@yogeshraheja firstproject]# terraform show\naws_instance.myserver:\n id = i-dd8834ca\n ami = ami-cfe4b2b0\n arn = arn:aws:ec2:us-east-1:094507990803:instance/i-dd8834ca\n associate_public_ip_address = true\n availability_zone = us-east-1b\n cpu_core_count = 1\n cpu_threads_per_core = 1\n credit_specification.# = 1\n credit_specification.0.cpu_credits = standard\n disable_api_termination = false\n ebs_block_device.# = 0\n ebs_optimized = false\n ephemeral_block_device.# = 0\n get_password_data = false\n iam_instance_profile =\n instance_state = running\n instance_type = t2.micro\n ipv6_addresses.# = 0\n key_name = EffectiveDevOpsAWS\n monitoring = false\n network_interface.# = 0\n network_interface_id = eni-b0683ee7\n password_data =\n placement_group =\n primary_network_interface_id = eni-b0683ee7\n private_dns = ip-172-31-74-203.ec2.internal\n private_ip = 172.31.74.203\n public_dns = ec2-52-70-251-228.compute-1.amazonaws.com\n public_ip = 52.70.251.228\n root_block_device.# = 1\n root_block_device.0.delete_on_termination = true\n root_block_device.0.iops = 100\n root_block_device.0.volume_id = vol-024f64aa1bb805237\n root_block_device.0.volume_size = 8\n root_block_device.0.volume_type = gp2\n security_groups.# = 1\n security_groups.2004290681 = HelloWorld\n source_dest_check = true\n subnet_id = subnet-658b6149\n tags.% = 1\n tags.Name = helloworld\n tenancy = default\n volume_tags.% = 0\n vpc_security_group_ids.# = 1\n vpc_security_group_ids.1524136243 = sg-01864b4c\n\n[root@yogeshraheja firstproject]#\n```", "```\n[root@yogeshraheja firstproject]# terraform destroy\naws_instance.myserver: Refreshing state... (ID: i-dd8834ca)\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n - destroy\n\nTerraform will perform the following actions:\n\n - aws_instance.myserver\n\nPlan: 0 to add, 0 to change, 1 to destroy.\n\nDo you really want to destroy all resources?\n Terraform will destroy all your managed infrastructure, as shown above.\n There is no undo. Only 'yes' will be accepted to confirm.\n\n Enter a value: yes\n\naws_instance.myserver: Destroying... (ID: i-dd8834ca)\naws_instance.myserver: Still destroying... (ID: i-dd8834ca, 10s elapsed)\naws_instance.myserver: Still destroying... (ID: i-dd8834ca, 20s elapsed)\naws_instance.myserver: Still destroying... (ID: i-dd8834ca, 30s elapsed)\naws_instance.myserver: Still destroying... (ID: i-dd8834ca, 40s elapsed)\naws_instance.myserver: Still destroying... (ID: i-dd8834ca, 50s elapsed)\naws_instance.myserver: Destruction complete after 1m0s\n\nDestroy complete! Resources: 1 destroyed.\n[root@yogeshraheja firstproject]#\n```", "```\n$ mkdir secondproject\n$ cd secondproject\n```", "```\nyum install --enablerepo=epel -y nodejs\nwget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js -O /home/ec2-user/helloworld.js\nwget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf -O /etc/init/helloworld.conf\nstart helloworld\n```", "```\n# Provider Configuration for AWS\nprovider \"aws\" {\n  access_key = \"<YOUR AWS ACCESS KEY>\"\n  secret_key = \"<YOUR AWS SECRET KEY>\"\n  region = \"us-east-1\"\n}\n\n# Resource Configuration for AWS\nresource \"aws_instance\" \"myserver\" {\n  ami = \"ami-cfe4b2b0\"\n  instance_type = \"t2.micro\"\n  key_name = \"EffectiveDevOpsAWS\"\n  vpc_security_group_ids = [\"sg-01864b4c\"]\n\n  tags {\n    Name = \"helloworld\"\n  }\n\n# Helloworld Appication code\n  provisioner \"remote-exec\" {\n    connection {\n      user = \"ec2-user\"\n      private_key = \"${file(\"/root/.ssh/EffectiveDevOpsAWS.pem\")}\"\n    }\n    inline = [\n      \"sudo yum install --enablerepo=epel -y nodejs\",\n      \"sudo wget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js -O /home/ec2-user/helloworld.js\",\n      \"sudo wget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf -O /etc/init/helloworld.conf\",\n      \"sudo start helloworld\",\n    ]\n  }\n}\n```", "```\n$ terraform init\n```", "```\n$ terraform validate\n$ terraform plan\n$ terraform apply\n```", "```\n$ terraform show | grep -i public_ip\n$ curl <PUBLIC_IP>:3000\n```", "```\n$ terraform destroy\n```", "```\n$ mkdir thirdproject\n$ cd thirdproject\n```", "```\n[root@yogeshraheja thirdproject]# cat /root/.aws/credentials\n[default]\naws_access_key_id = <YOUR AWS SECRET KEY>\naws_secret_access_key = <YOUR AWS SECRET KEY>\n[root@yogeshraheja thirdproject]#\n```", "```\n# Provider Configuration for AWS\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# Resource Configuration for AWS\nresource \"aws_instance\" \"myserver\" {\n  ami = \"ami-cfe4b2b0\"\n  instance_type = \"t2.micro\"\n  key_name = \"EffectiveDevOpsAWS\"\n  vpc_security_group_ids = [\"sg-01864b4c\"]\n\n  tags {\n    Name = \"helloworld\"\n  }\n\n# Provisioner for applying Ansible playbook\n  provisioner \"remote-exec\" {\n    connection {\n      user = \"ec2-user\"\n      private_key = \"${file(\"/root/.ssh/EffectiveDevOpsAWS.pem\")}\"\n    }\n  }\n\n  provisioner \"local-exec\" {\n    command = \"sudo echo '${self.public_ip}' > ./myinventory\",\n  }\n\n  provisioner \"local-exec\" {\n    command = \"sudo ansible-playbook -i myinventory --private-key=/root/.ssh/EffectiveDevOpsAWS.pem helloworld.yml\",\n  } \n}\n\n# IP address of newly created EC2 instance\noutput \"myserver\" {\n value = \"${aws_instance.myserver.public_ip}\"\n}\n```", "```\n---\n- hosts: all\n  become: yes\n  roles:\n    - helloworld\n```", "```\n[defaults]\ninventory = $PWD/myinventory\nroles_path = ./roles\nremote_user = ec2-user\nbecome = True\nbecome_method = sudo\nbecome_user = root\nnocows = 1\nhost_key_checking = False\n```", "```\n$ terraform init\n```", "```\n$ terraform validate\n$ terraform plan\n$ terraform apply\n```", "```\n$ curl 54.85.107.87:3000\n```", "```\n$ terraform destroy\n```", "```\n$ mkdir fourthproject\n$ cd fourthproject\n```", "```\n# Provider Configuration for AWS\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# Resource Configuration for AWS\nresource \"aws_instance\" \"myserver\" {\n  ami = \"ami-cfe4b2b0\"\n  instance_type = \"t2.micro\"\n  key_name = \"EffectiveDevOpsAWS\"\n  vpc_security_group_ids = [\"sg-01864b4c\"]\n\n  tags {\n    Name = \"helloworld\"\n  }\n\n# Provisioner for applying Ansible playbook in Pull mode\n  provisioner \"remote-exec\" {\n    connection {\n      user = \"ec2-user\"\n      private_key = \"${file(\"/root/.ssh/EffectiveDevOpsAWS.pem\")}\"\n    }\n    inline = [\n      \"sudo yum install --enablerepo=epel -y ansible git\",\n      \"sudo ansible-pull -U https://github.com/yogeshraheja/ansible helloworld.yml -i localhost\",\n    ]\n  }\n\n}\n\n# IP address of newly created EC2 instance\noutput \"myserver\" {\n value = \"${aws_instance.myserver.public_ip}\"\n}\n```", "```\n$ terraform init\n```", "```\n$ terraform validate\n$ terraform plan\n$ terraform apply\n```", "```\n$ curl 18.212.64.84:3000/\n```", "```\n$ terraform destroy\n```"]