["```\n$ mkdir -p ~/fod/ch06 && cd ~/fod/ch06\n```", "```\n$ npm init\n```", "```\n{\n  \"name\": \"ch06\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```", "```\n$ npm install express --save\n```", "```\n\"dependencies\": {\n  \"express\": \"^4.17.1\"\n}\n```", "```\n$ code .\n```", "```\nconst express = require('express');\nconst app = express();\n\napp.listen(3000, '0.0.0.0', ()=>{\n    console.log('Application listening at 0.0.0.0:3000');\n})\n\napp.get('/', (req,res)=>{\n    res.send('Sample Application: Hello World!');\n})\n```", "```\n$ node index.js\n```", "```\nApplication listening at 0.0.0.0:3000\n```", "```\nFROM node:latest\nWORKDIR /app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nCMD node index.js\n```", "```\n$ docker image build -t sample-app .\n```", "```\n$ docker container run --rm -it \\\n    --name my-sample-app \\\n    -p 3000:3000 \\\n    sample-app\n```", "```\nApplication listening at 0.0.0.0:3000\n```", "```\nconst hobbies = [\n  'Swimming', 'Diving', 'Jogging', 'Cooking', 'Singing'\n];\n\napp.get('/hobbies', (req,res)=>{\n  res.send(hobbies);\n})\n```", "```\n$ docker image build -t sample-app .\n```", "```\n$ docker container run --rm -it \\\n    --name my-sample-app \\\n    -p 3000:3000 \\\n    sample-app \n```", "```\n$ docker container run --rm -it \\\n --volume /projects/sample-app:/app \\\n alpine /bin/sh\n```", "```\n$ docker container run --rm -it \\\n --volume $(pwd):/app \\\n    -p 3000:3000 \\\n```", "```\napp.get('/status', (req,res)=>{\n  res.send('OK');\n})\n```", "```\n$ docker container run --rm -it \\\n    --name my-sample-app \\\n --volume $(pwd):/app \\\n -p 3000:3000 \\\n sample-app\n```", "```\n$ curl localhost:3000/status\nOK\n```", "```\n$ docker container exec my-sample-app cat index.js\n```", "```\n...\napp.get('/hobbies', (req,res)=>{\n res.send(hobbies);\n})\n\napp.get('/status', (req,res)=>{\n res.send('OK, all good');\n})\n...\n```", "```\n$ curl localhost:3000/status\n OK, all good\n```", "```\n$ npm install -g nodemon\n```", "```\napp.get('/colors', (req,res)=>{\n res.send(['red','green','blue']);\n})\n```", "```\n[nodemon] restarting due to changes...\n[nodemon] starting `node index.js`\nApplication listening at 0.0.0.0:3000\n```", "```\nCMD node index.js\n```", "```\nFROM node:latest          \nRUN npm install -g nodemon\nWORKDIR /app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nCMD nodemon\n```", "```\n$ docker image build -t sample-app-dev .\n```", "```\n$ docker container run --rm -it \\\n   -v $(pwd):/app \\\n   -p 3000:3000 \\\n   sample-app-dev\n```", "```\n$ mkdir -p ~/fod/ch06/python && cd ~/fod/ch06/python\n```", "```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n  return \"Hello World!\"\n\nif __name__ == \"__main__\":\n  app.run()\n```", "```\n$ pip install -r requirements.txt\n```", "```\n$ nodemon main.py\n```", "```\n$ curl localhost:5000/\nHello World!\n```", "```\nfrom flask import jsonify\n\n@app.route(\"/colors\")\ndef colors():\n   return jsonify([\"red\", \"green\", \"blue\"])\n```", "```\n$ curl localhost:5000/colors\n[\"red\", \"green\", \"blue\"]\n```", "```\n$ mkdir -p ~/fod/ch06/csharp && cd ~/fod/ch06/csharp\n```", "```\n$ cd ~/fod/ch06\n```", "```\n$ dotnet new webapi -o dotnet\n```", "```\n$ cd dotnet\n```", "```\n$ curl --insecure https://localhost:5001/api/values [\"value1\",\"value2\"]\n```", "```\n[HttpGet]\npublic ActionResult<IEnumerable<string>> Get()\n{\n    return new string[] { \"value1\", \"value2\", \"value3\" };\n}\n```", "```\n$ curl --insecure https://localhost:5001/api/values [\"value1\",\"value2\",\"value3\",\"value4\"]\n```", "```\nFROM mcr.microsoft.com/dotnet/core/sdk:2.2\nWORKDIR /app\nCOPY dotnet.csproj ./\nRUN dotnet restore\nCOPY . .\nCMD dotnet watch run\n```", "```\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n    WebHost.CreateDefaultBuilder(args)\n    .UseUrls(\"http://0.0.0.0:3000\")\n    .UseStartup<Startup>();\n```", "```\n$ docker image build -f Dockerfile-dev -t sample-app-dotnet .\n```", "```\n$ docker container run --rm -it \\\n   -p 3000:3000 \\\n   -v $(pwd):/app \\\n   sample-app-dotnet\n```", "```\n$ curl localhost:3000/api/values\n[\"value1\",\"value2\",\"value3\",\"value4\"]\n$\n$ curl localhost:3000/api/values/1\nvalue\n```", "```\n$ cd ~/fod/ch06/node\n$ code .\n```", "```\n$ docker container run --rm -it \\\n   --name my-sample-app \\\n   -p 3000:3000 \\\n   -p 9229:9229 \\\n   -v $(pwd):/app \\\n   sample-app node --inspect=0.0.0.0 index.js\n```", "```\n{\n  \"type\": \"node\",\n  \"request\": \"attach\",\n  \"name\": \"Docker: Attach to Node\",\n  \"remoteRoot\": \"/usr/src/app\"\n},\n```", "```\n$ docker container rm -f my-sample-app\n```", "```\n$ docker container run --rm -it \\\n   --name my-sample-app \\\n   -p 3000:3000 \\\n   -p 9229:9229 \\\n   -v $(pwd):/app \\\n   sample-app-dev nodemon --inspect=0.0.0.0 index.js\n```", "```\n{\n  \"type\": \"node\",\n  \"request\": \"attach\",\n  \"name\": \"Docker: Attach to Node\",\n  \"remoteRoot\": \"/app\",\n  \"restart\": true\n},\n```", "```\n$ cd ~/fod/ch06/dotnet\n$ code .\n```", "```\nFROM mcr.microsoft.com/dotnet/core/sdk:2.2\nRUN apt-get update && apt-get install -y unzip && \\\n    curl -sSL https://aka.ms/getvsdbgsh | \\\n        /bin/sh /dev/stdin -v latest -l ~/vsdbg\nWORKDIR /app\nCOPY dotnet.csproj ./\nRUN dotnet restore\nCOPY . .\nCMD dotnet watch run\n```", "```\n$ docker image build -t sample-app-dotnet-debug .\n```", "```\n$ docker run --rm -it \\\n   -v $(pwd):/app \\\n   -w /app \\\n   -p 3000:3000 \\\n   --name my-sample-app \\\n   --hostname sample-app \\\n   sample-app-dotnet-debug\n```", "```\n{\n   \"name\": \".NET Core Docker Attach\",\n   \"type\": \"coreclr\",\n   \"request\": \"attach\",\n   \"processId\": \"${command:pickRemoteProcess}\",\n   \"pipeTransport\": {\n      \"pipeProgram\": \"docker\",\n      \"pipeArgs\": [ \"exec\", \"-i\", \"my-sample-app\" ],\n      \"debuggerPath\": \"/root/vsdbg/vsdbg\",\n      \"pipeCwd\": \"${workspaceRoot}\",\n      \"quoteArgs\": false\n   },\n   \"sourceFileMap\": {\n      \"/app\": \"${workspaceRoot}\"\n   },\n   \"logging\": {\n      \"engineLogging\": true\n   }\n},\n```", "```\n$ curl localhost:3000/api/values\n```", "```\n$ cd ~/fob/ch06/python\n$ code .\n```", "```\n$ python main.py\n```", "```\n$ cd ~/fod/ch06/dotnet\n$ code .\n```", "```\n$ dotnet add package Microsoft.Extensions.Logging\n```", "```\n<PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.2.0\" />\n```", "```\nusing Microsoft.Extensions.Logging;\n```", "```\n$ dotnet run\n```", "```\npublic void SayHello(string helloTo) {\n  using(var scope = _tracer.BuildSpan(\"say-hello\").StartActive(true)) {\n    // here is the actual logic of the method\n    ...\n    var helloString = FormatString(helloTo);\n    ...\n  }\n}\n```", "```\npublic void string Format(string helloTo) {\n   using(var scope = _tracer.BuildSpan(\"format-string\").StartActive(true)) {\n       // here is the actual logic of the method\n       ...\n       _logger.LogInformation(helloTo);\n       return \n       ...\n   }\n}\n```", "```\n$ cd ~/fod/ch06/jaeger-sample\n```", "```\n$ docker run -d --name jaeger \\\n   -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\\n   -p 5775:5775/udp \\\n   -p 6831:6831/udp \\\n   -p 6832:6832/udp \\\n   -p 5778:5778 \\\n   -p 16686:16686 \\\n   -p 14268:14268 \\\n   -p 9411:9411 \\\n   jaegertracing/all-in-one:1.13\n```", "```\n$ cd ~/fod/ch06/jaeger-sample/client\n $ dotnet run Gabriel Bonjour\n```", "```\n$ docker container rm -f jaeger\n```"]