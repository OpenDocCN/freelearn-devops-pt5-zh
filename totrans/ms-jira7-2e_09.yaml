- en: Chapter 9. JIRA Add-On Development and Leveraging the REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA comes with tons of useful features that help you not only get started on
    your project, but also let you customize the workflows that match your software
    model and processes. However, there are times when certain functionalities or
    customizations are required, but these are not supported by JIRA. Then again,
    many new features can be added in JIRA by installing add-ons from the Atlassian
    marketplace. JIRA has a marketplace where one can search for these add-ons. Some
    add-ons are free and some are paid add-ons. If you are looking for additional
    features, you can search on the marketplace for existing add-ons, but it's also
    possible to create your own add-ons, which requires a decent knowledge of Java.
    This chapter will give you enough information to get you started with JIRA's add-on
    development, along with some simple examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Atlassian plugin **software development kit** (**SDK**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Atlassian SDK on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the **helloworld** plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Eclipse IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging the JIRA **representational state transfer** (**REST**) API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Atlassian plugin SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Atlassian provides an SDK to develop add-ons. The SDK needs to be installed
    on your machine before starting the development. It can be installed on Windows,
    Linux, and Mac. Any of these operating systems can be used to develop add-ons,
    however, in this chapter, the instructions will focus only on the Windows platform.
    There are no specific recommended hardware requirements to install the Atlassian
    SDK; however, to get a decent performance, install it on a machine that has a
    core i5 processor and 8 GB of RAM.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download the Atlassian SDK for Windows at [https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows](https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the SDK prerequisites on a Windows system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The SDK requires the Java environment to be configured on your machine. In [Chapter
    1](ch01.html "Chapter 1. Planning Your JIRA Installation"), *Planning Your JIRA
    Installation*, we discussed how to install the JDK. The JDK could have been installed
    at `C:\java` or `C:\java\jdk1.8.0_92`.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the JDK installation and the JAVA_HOME system variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Atlassian JDK needs Oracle''s Java SE Development Kit installed on the
    system. Follow the steps mentioned in [Chapter 1](ch01.html "Chapter 1. Planning
    Your JIRA Installation"), *Planning your JIRA Installation* to install it and
    verify that the `JAVA_HOME` system variable is set up by following the steps mentioned
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Command Prompt** (**cmd**) and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It should return the path where the JDK is installed. In our case, it''s given
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verifying that JAVA_HOME\bin is present in the environment variable PATH
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JDK `bin` directory has executable files, such as `javac`, and it should
    be available to the Atlassian SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'All you need to do is append the following line to your existing `Path` system
    variable `%JAVA_HOME%\bin` and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open cmd and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It should return the version of the JDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing the Atlassian SDK on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Atlassian SDK can be downloaded from [https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows](https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows).
    This link will always give you the latest stable version of the SDK. Here, you
    will get an executable file called `sdk-installer-6.2.6.exe`. Perform the following
    steps to install the SDK on your Windows system:'
  prefs: []
  type: TYPE_NORMAL
- en: After downloading the SDK installer, double-click on it and complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is complete, the installer will prompt you to restart
    the computer. If the installer doesn't ask you to restart, just check whether
    you are able to use `atlas-`commands; if not, then restarting the system is the
    safest way to make sure that the SDK is installed properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open cmd and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It should return the following information:![Installing the Atlassian SDK on
    Windows](img/image_09_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see that it will tell you which version of the Atlassian SDK is installed
    on the system and give you the details of the JDK that is installed as well.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, everything is set up and you are now ready to start developing
    add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with the Atlassian SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you ran the `atlas-version` command, it showed various details of the
    installed SDK. You might have noticed that `ATLAS Home` is the location where
    the Atlassian SDK is installed. Let''s open this directory and check its content:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apache-maven-3.2.1`: This Atlassian SDK uses **Maven**, which is a popular
    tool used to build automation for Java projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin`: This directory contains all the command-line tools that are used to
    develop add-ons. All the commands here are prefixed with `atlas-`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repository`: This directory contains the actual code that the SDK relies on
    to develop add-ons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The atlas command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just discussed that all the commands are prefixed with `atlas-`. Before you
    start creating add-ons, a working JIRA instance is required. This will be used
    to test your add-ons. The `atlas-run-standalone` command is used to set up and
    start the JIRA instance for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `atlastutorial` in your `C:\` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In cmd, change directory using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start JIRA using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Depending on your internet connection, this command will take a few minutes
    to complete. It downloads the JIRA files and starts the instance on port `2990`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter `http://localhost:2990/jira` in your browser; the exact URL will also
    be displayed by the command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `admin` as the username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is your JIRA instance, created after you set up the Atlassian SDK with
    the test license for plugin developers; we will use this to develop the JIRA add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the helloworld plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are ready to create our first add-on in JIRA, which will introduce new
    features to our instance. Any JIRA add-on contains a lot of files, and it has
    to follow a directory structure; the Atlassian SDK provides a command-line tool
    called `atlas-create-jira-plugin` to create a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your existing JIRA is already running in cmd, then stop it by pressing on
    *Ctrl + C* and perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In cmd, make sure that you are in the `C:\atlastutorial` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will respond and ask you to provide certain inputs. Use the values
    mentioned in the following table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Define value for** `groupId` | `com.atlassian.tutorial` | **Used to identify
    project uniquely** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Define value for `artifactId` | `helloworld` | An artifact is a file, usually
    a JAR, that gets deployed |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Define value for `version` | `1.0-Version` | Used for distributing the plugin
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Define value for `package` | `com.atlassian.tutorial.helloworld` | Used to
    organize the related classes |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The `atlas-create-jira-plugin` command will prompt you to confirm the values
    you just entered. Press  ***Y*** to continue. A new `helloworld` folder will be
    created at `c:\atlastutorial\helloworld`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you take a look in the `c:\atlastutorial\helloworld` directory, you will
    find a skeleton of the plugin project with the following files and folders created
    by the `atlas-create-jira-plugin` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src`: This folder contains the source code of the plugin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE`: This file stores the plugin license information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pom`: This is the Maven configuration file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README`: This file contains brief instructions on how to run the plugin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding organization details in pom.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `pom.xml` file, search the `<organization>` tag, and update the company
    name and the company URL. This information will be visible to the user who will
    install the plugin from the **Universal Plugin Manager** (**UPM**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Enter the company name within an enclosed `<name>` tag and the company URL within
    an enclosed `<url>` tag and save the file.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the plugin in JIRA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now have a plugin created with just a single command, and you can actually
    load this plugin in JIRA. Although it has no functionality right now, we will
    still make the attempt to understand how to load this plugin in JIRA. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In cmd, navigate to the `c:\atlastutorial\helloworld` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a shell script that installs and runs the plugin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This command will create a folder called the `target` subdirectory in the `helloworld`
    directory. After some time, a JIRA instance will start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `http://localhost:2990/jira` in your browser; the exact URL will also
    be displayed by the command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `admin` for both username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to JIRA **Administration** | **Add-ons** | **Manage add-ons** (under **ATLASSIAN
    MARKETPLACE**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **User-installed add-ons**, you will find the new add-on called **helloworld**:![Loading
    the plugin in JIRA](img/image_09_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, the **helloworld** add-on is now
    loaded in your JIRA instance. Also, the version information that we filled in
    while creating the plugin is visible here. The hyperlinked company name is also
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Eclipse IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have set up the development environment and installed the Atlassian SDK.
    You also learned how to create a skeleton plugin; apart from just showing up in
    the UPM, this plugin did not perform any other function. We will add a few functionalities
    to our plugin, but before that, let's configure the popular Eclipse IDE, which
    really assists in developing JIRA add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Eclipse IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Eclipse IDE is used for development purposes in various programming languages,
    however, we will install the Eclipse IDE for Java EE Developers (Indigo). Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Eclipse IDE for Java EE developers from [http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/indigosr2](http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/indigosr2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the content of the downloaded file in the `C:\eclipse` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring Eclipse to start under the JDK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to tell our Eclipse IDE to start and use the JDK that we have already
    installed on our machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `C:\eclipse\eclipse.ini` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `-vm` entry before the `-vmargs` entry. We should define the JDK path
    here; the final `eclipse.ini` file should look similar to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating the installed JREs in Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Eclipse JREs need to be updated with the ones that are currently installed
    in our JDK version. Perform the following steps if you are not sure whether you
    have the updated JREs or not:'
  prefs: []
  type: TYPE_NORMAL
- en: In the menu bar, click on **Windows** | **Preferences**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `C:\eclipse\eclipse.exe` application and it will start the
    Eclipse IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side, enter `Installed JREs`; this will filter down the list;
    after that, double-click on **Installed JREs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right-hand side, click on the **Add** button and select **Standard VM**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **JRE home**, enter `c:\java` as the location of the directory and click
    on the **Finish** button:![Updating the installed JREs in Eclipse](img/image_09_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the JREs will be updated, and it should look similar to the following
    screenshot:![Updating the installed JREs in Eclipse](img/image_09_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the Maven plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The development of the JIRA add-ons is based on Maven, and there is an Eclipse
    plugin for Maven that needs to be installed. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the menu bar, click on **Help** | **Install New Software…**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Available Software** window, click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **Name** as `Sonatype M2Eclipse`. Enter `http://download.eclipse.org/technology/m2e/releases`
    as the **Location** and click on the **OK** button.![Installing the Maven plugin](img/image_09_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Maven Integration for Eclipse** and click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, restart Eclipse for these changes to take effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Maven plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, we need to tell the Maven Eclipse plugin the location of Maven on
    our machine. The Maven directory is placed in the `ATLAS Home` directory. You
    can run the `atlas-version` command on your machine to find out the exact location
    of `ATLAS Maven Home`. Just copy this location and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the menu bar, click on **Windows** | **Preferences**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side, enter `Maven`; it will filter down the options available
    for **Maven**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Installations** and then click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Installation type** should be **External**. Copy the `ATLAS Maven Home`
    directory and click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are all set to start developing our JIRA add-ons using Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Adding functionality to the skeleton plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The helloworld plugin (which we created earlier) lacks any functionality; we
    loaded the plugin in JIRA, but it didn't do anything apart from just showing up
    in the UPM. Now that we have also configured the Eclipse IDE, let's add a few
    functionalities to our helloworld plugin.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we will add a custom link in the JIRA main navigation bar using
    this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the helloworld plugin in Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can use the Eclipse IDE and import our plugin, but before we do that, there
    are Eclipse configuration files that need to be generated in the `helloworld`
    plugin project. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In cmd, navigate to the `C:\atlastutorial\helloworld` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will return the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we are ready to import the plugin in Eclipse. In the menu bar, click on
    **File** | **Import…**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Existing Projects into Workspace** under **General** and click on the
    **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `C:\atlastutorial\helloworld` in the **Select root** directory and click
    on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you should see the `helloworld` plugin project loaded on the left-hand side
    under **Project Explorer**, as shown in the following screenshot. If you notice
    the welcome screen in your SDK, then close it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing the helloworld plugin in Eclipse](img/image_09_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a menu in JIRA's top navigation bar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will use a very simple example to help us understand how to add new functionalities
    in JIRA. You are already familiar with JIRA's top navigation bar. From the JIRA
    frontend, it's not possible to add a new menu item to it; however, we will modify
    our `helloworld` plugin to add this menu item.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JIRA functionality and the behavior of its various sections are controlled
    by various modules. If we want to make any modifications to JIRA''s top navigation
    bar, then we need to add two modules called `Web Section` and `Web Item`. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the cmd, navigate to the `c:\atlastutorial\helloworld` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To learn more about plugin modules, refer to theURL: [https://developer.atlassian.com/docs/getting-started/plugin-modules](https://developer.atlassian.com/docs/getting-started/plugin-modules).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The command will respond and prompt you to enter a specific number for various
    modules. Type `30` for `Web Section`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The command will again respond and ask you to provide certain inputs. Use the
    values as mentioned in the following table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| `Enter Plugin Module Name` | `mySection` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Enter Location` | `contact-us-links` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Show Advanced Setup?` | *N* |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The command will ask you, **Add Another Plugin Module?** Press  ***Y*** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The command will respond and prompt you to enter a specific number for various
    modules. Type `25` for `Web Item`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The command will again respond and ask you to provide certain inputs. Use the
    values as mentioned in the following table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| `Enter Plugin Module Name` | `Contact Us` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Enter Section` | `system.top.navigation.bar` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Enter Link URL` | `http://www.sparxsys.com/contact` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `Show Advanced Setup?` | *N* |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The command will ask you to **Add Another Plugin Module?** Press  ***N*** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `atlas-run` command from within your plugin project directory. Once
    JIRA starts running, open it in the browser:![Creating a menu in JIRA's top navigation
    bar](img/image_09_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see a new menu item called **Contact Us**, which we have added
    from our `helloworld` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: We have just started to add the functionality in the skeleton plugin project.
    Although all we did was add a link to the JIRA navigation bar, there is a lot
    more that can be done.
  prefs: []
  type: TYPE_NORMAL
- en: If you are starting JIRA add-on development, then start by going through the
    tutorials mentioned on the Atlassian website at [https://developer.atlassian.com/docs/getting-started/tutorials](https://developer.atlassian.com/docs/getting-started/tutorials).
  prefs: []
  type: TYPE_NORMAL
- en: So far in this chapter, we have discussed creating add-ons that extend JIRA's
    functionalities, but it's also possible to interact with JIRA from other applications
    as well. JIRA comes with the **REST API**, which allows you to manipulate JIRA's
    data and configurations from external applications. The JIRA API that adheres
    to the principles of REST does not require the client to know anything about the
    structure of the API. Rather, the server needs to provide whatever information
    the client needs to interact with the service.
  prefs: []
  type: TYPE_NORMAL
- en: Various programming languages are capable of making REST calls. In the following
    section, we will discuss how to interact with JIRA REST APIs, along with some
    examples in detail.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA Cloud add-ons with an Atlassian Connect framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just seen how to develop an add-on for a JIRA Server instance that you
    host on your own server. However, a lot of organizations also use an Atlassian
    Cloud instance, which is a hosted environment; it doesn't require any installation.
    You just sign up online and pay for the usage. The Atlassian Cloud instance comes
    with most of the features that JIRA Server offers. Many organizations prefer to
    use a cloud instance as there is no hassle to manage the server yourself. The
    procedure to develop an add-on for cloud is different. If you want to learn that,
    please follow the documentation at [https://developer.atlassian.com/static/connect/docs/latest/guides/introduction.html](https://developer.atlassian.com/static/connect/docs/latest/guides/introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: If you plan to sell your add-on on the Atlassian marketplace then it is a good
    idea to develop the add-on for both JIRA Server and JIRA Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging the JIRA REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed how to start building add-ons that extend JIRA's functionalities.
    The add-ons are integrated very closely with JIRA's existing features; however,
    there are times when you need to add a few functionalities on top of JIRA so that
    other tools can interact with JIRA. JIRA provides access to various operations
    via REST.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of a few operations that can be performed via REST
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Issue operations such as create/modify/delete issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group management operations like adding/removing users from a group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of resources that are available through REST API. You can get
    the detailed list of all the resources at [https://docs.atlassian.com/jira/REST/latest/](https://docs.atlassian.com/jira/REST/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: Use cases of JIRA REST API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having the ability to interact with JIRA through external applications opens
    up a lot of possibilities. Let''s take a look at some of the use cases of functionality
    that can be built on top of JIRA:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating business intelligence reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating bulk operations in JIRA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a custom interface for clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating business intelligence reports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JIRA comes with a lot of readymade reports, which we discussed in detail in
    [Chapter 3](ch03.html "Chapter 3. Reporting – Using Charts to Visualize the Data"),
    *Reporting - Charts to visualize the data*, but companies use the business intelligence tools
    to generate reports that are customized to their needs; in JIRA, all the data
    is stored in issues, which can be fetched from REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Bulk operations in JIRA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: System administrators in JIRA are often faced with situations where they need
    to perform various operations in bulk. For instance, if a new team in the company
    wants to start using JIRA, then several user accounts need to be created. JIRA's
    REST API provides the resources to create a user account. After the accounts are
    created, they also need to be added to the correct group. Although the JIRA group
    management interface already provides the mechanism to modify user groups by entering
    their usernames as a comma-separated list, modifying groups can also be done via
    the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: The scripts can be created to perform such bulk operations, and they can be
    run whenever it is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Building a custom interface for clients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have already seen that it's very easy to customize permissions in JIRA and
    give limited access of your JIRA instance to your clients. However, it's also
    possible to create a simple web interface that has a login box for authentication,
    a form to raise tickets, and a simple list of issues for a particular project
    or client. This web application can internally interact with JIRA, and it acts
    like the backend to store and retrieve client tickets.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA's REST API Browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: REST calls are made by calling the `http://jira.sparxsys.com/rest/api/2/RESOURCE
    URL`, and most programming languages (such as Java and PHP) support them; however,
    before you can develop the functionalities to interact with JIRA using REST, you
    need to test it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Atlassian SDK that you have installed comes with a nifty tool called **REST
    API Browser**. It helps you explore the APIs and also test them. Perform these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `atlas-run` command, as we did earlier in this chapter. It will start
    the JIRA instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `http://localhost:2990/jira` in your browser; the exact URL will also
    be displayed by the command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `admin` for both the username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to JIRA **Administrator** | **System** | **REST API Browser** (under **ADVANCED**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side, you will find the list of all the resources that REST
    API has to offer:![JIRA's REST API Browser](img/image_09_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on any one of the resources, and on the right-hand side of the main window;
    this particular resource can be tested by passing optional parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's take a look at some examples to test REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching user details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the left-hand side, either scroll or navigate to find **api/2/user** and
    click on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fetching user details](img/image_09_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter `admin` as the value in the **username** parameter and click on the **Send**
    button. You will see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fetching user details](img/image_09_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The response is actually in a JSON format, and you can see that it has returned
    the details of the `admin` user. However, the groups that this user is a part
    of are not returned in this response, but it''s possible to fetch this information
    as well. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **+**Parameter**** button on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `expand` in the **Parameter** column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `groups` in the **Value** column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Send** button again.![Fetching user details](img/image_09_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following response is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fetching user details](img/image_09_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that in the new response the groups that this user belongs to are
    also fetched by specifying the additional parameter.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA REST API Browser is a great tool to help you get familiar with all the
    available resources, and it really assists in development.
  prefs: []
  type: TYPE_NORMAL
- en: Sample code to interact with the REST API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The REST API is supported by a variety of languages (such as Java, PHP, Python,
    and so on). In this chapter, we will discuss a couple of code examples in the
    PHP language. PHP is a popular language used in web applications. The following
    examples are written in PHP, but even if you are familiar with other languages,
    such as Java, then you should be able to understand the concept explained here.
  prefs: []
  type: TYPE_NORMAL
- en: To install PHP quickly, along with Apache, the `XAMPSERVER` package can be installed
    from [https://www.apachefriends.org/](https://www.apachefriends.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an issue using PHP
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The sample code `create_issue.php` is used to create an issue using PHP as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code creates an issue in a JIRA project with the `GEN` project
    key and the `Task` issue type. Let's understand what this code does.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating with JIRA
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'First, we need to define our JIRA URL, username, and password for authentication.
    Note that this user should have the permission to create the issue in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Making the REST call to create the issue
  prefs: []
  type: TYPE_NORMAL
- en: 'The `curl_exec()` PHP function is used to make the REST call using the `curl`
    protocol. This function accepts the parameters to make the REST call. The username,
    password, and the issue data are passed in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Issuing data and printing the output
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The issue that needs to be created has a lot of information, such as the project
    key, summary, description, and issue type. This information is stored in the array.
    Finally, the output is printed when the code is run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After you run the PHP code, you will get an output, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Fetching issue details using PHP
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The previous example was quite simple, where we created the issue using the
    REST API. Now, let''s look at how to fetch the issue details that we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple code that is just fetching the details of the `GEN-1` issue,
    which we created in the previous example. The output returned by the REST API
    is a JSON file. We have converted the JSON data to an array using the `json_decode()`
    PHP function and printed it using the `print_r()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The previous code can be used to fetch user and group details; just change the
    `$url` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to develop add-ons for JIRA. If you already
    have a working knowledge of Java, and have worked on Maven, then you have a good
    opportunity to learn add-on development for JIRA and other Atlassian tools. Whenever
    the existing functionality is not sufficient to serve your needs, you can always
    develop add-ons for JIRA. These add-ons are developed in the Java language and
    also utilize Apache Maven for build automation. In this chapter, we discussed
    how to set up the development environment and the Eclipse IDE. We also created
    a skeleton plugin project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to migrate data to JIRA using the CSV
    file. JIRA provides migration tools for Bugzilla, Mantis, and a few other issue
    trackers, but if your existing issue tracker has a lot of customizations, then
    it's always preferable to migrate the data using CSV import, which is quite powerful.
    With careful planning, it can import complex data into JIRA. We will also take
    a look at the major aspects of JIRA's CSV import.
  prefs: []
  type: TYPE_NORMAL
