- en: Hardening the Security of Your AWS Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on how to secure our AWS account and application.
    The cloud and security are two concepts that don't always go together. This is
    not because of the cloud's nature, but because of the idea that a server on the
    premises is more secure than a server on the cloud. This is because you know exactly
    where an on-premise server is, and how the connections to it reach there. The
    purpose of this chapter is to look at some practical tools and information to
    demonstrate that a well-managed AWS cloud can be more secure than an on-premise
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: First we will look at how to secure access for our IAM users. Then, we will
    look at how to enable logging on for IAM usage with CloudTrail, and, at the network
    level, with VPC Flow Logs. Creating the right subnets is a crucial step to undertake
    before placing our application and infrastructure in the cloud. Finally, we will
    explore the power of a wonderful tool provided by AWS—the **web application firewall**
    (**WAF**).
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important security principles is that of the *least privilege*.
    This refers to limiting the access rights of users to the minimum permissions
    that they need in order to complete their work in the correct way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will implement this at many levels in the AWS infrastructure. Moving
    forward, we will take a closer look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity Access Management** (**IAM**) security'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudTrail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Private Cloud** (**VPC**) subnets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS WAF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files included within the chapter can be found on GitHub at link: [https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition](https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition).
  prefs: []
  type: TYPE_NORMAL
- en: IAM security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IAM enables you to securely control access to AWS services. Here, we need to
    implement the least privilege principle, and monitor who does what by recording
    all of the users' actions.
  prefs: []
  type: TYPE_NORMAL
- en: Root account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create an AWS account and log in with the root account, you will see
    something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4142040-f3e0-471a-b90e-7ccea505be86.png)'
  prefs: []
  type: TYPE_IMG
- en: It is important to perform all of the actions suggested by the IAM web console,
    and also, to change the root account's password.
  prefs: []
  type: TYPE_NORMAL
- en: Root account password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, change the root account''s password. At the top right of the page, between
    the bell icon and the Global drop-down menu, you will find your AWS alias or account
    number. Click on this, and then click on the My Account option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39ca0b41-851a-46e7-b2bb-4c0c6ba1e18c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on the Edit button. The others steps are more straightforward and
    logical, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a6e4450-fee9-440e-9324-968e0a74b905.png)'
  prefs: []
  type: TYPE_IMG
- en: For security reasons, the web page will request that you provide your login
    information again. Password protection is never enough, especially for the root
    account; you should absolutely activate **multi-factor authentication** (**MFA**),
    whether you have a virtual or hardware device. Plenty of solutions are available
    on the market. Just to provide some examples, Google Authenticator is one of the
    most well-known apps for Android devices. I have also used a physical dongle made
    by Yubico ([https://www.yubico.com/](https://www.yubico.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Delete your root access keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Access keys have the same permissions as those given following access with
    a password, so a more secure environment is created when this kind of access is
    removed from the root account, leaving only password access for use (except in
    some special cases). Don''t worry about the message shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2768c031-9a30-4859-9bb5-55f6ab30b17a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you created an access key for the root account and find that it was deleted,
    you will be shown the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0dbf61c-bbb4-4393-be9d-57aee578a269.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a password policy for IAM users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The password policy that you should apply depends on the level of security
    that you want to apply to your IAM users passwords. I would suggest something
    like the following, but it will depend on your use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16a72718-7cc7-4ee0-8526-6ac5762cbe33.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an administrator group and a personal IAM user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To operate with the root account, it is more secure to create a personal IAM
    user and operate through that. It is also a best practice to assign permissions
    to the group, and not directly to the IAM users. Do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a group called `admins` or something similiar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the administrator policy to this group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a personal IAM user with some kind of criteria. In my case, I would choose
    `myname.mysurname giuseppe.borgese`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the new IAM user in to the `admins` group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This allows other IAM users to evaluate whether to create groups with fewer
    privileges than the administrator. It also allows them to assign the necessary
    rights, but not more than are required. For example, if an IAM user needed to
    manage EC2 machines, we could give them the predefined AmazonEC2FullAccess policy, and,
    correspondingly, if they needed to manage an RDS environment, they could be given
    an AmazonRDSFullAccess policy.
  prefs: []
  type: TYPE_NORMAL
- en: AmazonEC2FullAccess policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tasks that require root account access are listed clearly on the AWS documentation
    page at [https://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html](https://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html).
    To follow is a list of these tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying root user details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing your AWS support plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closing an AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing up for GovCloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submiting a reverse DNS for Amazon EC2 requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CloudFront key pair
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AWS created X.509 signing certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transfering a route 53 domain to another AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the Amazon EC2 setting for longer resource IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting the removal of the port `25` email throttle on your EC2 instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding your AWS account canonical user ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these operations are very rare, so it would be unusual for you to find
    one of these events cropping up among your everyday tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Final security status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that all of your tasks have been accomplished, you can log out from the
    root user and start to use the IAM user with the administrator rights that you
    have created, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f250d8be-76fc-4b87-9fb5-93b414cc7d8c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you are completely new to the cloud approach, it is worth spending some time
    reading the *AWS Shared Responsibility Model* at [https://aws.amazon.com/compliance/shared-responsibility-model/](https://aws.amazon.com/compliance/shared-responsibility-model/).
    On the page, there is a clear definition of what AWS's responsibility is (*security
    of the cloud*), and also, what our responsibility is (*security in the cloud*).
    In a few words, it is our responsibility to ensure that what we create inside
    of the cloud, and all of the tools that we use to create it, are AWS-secure.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, there were many security breaches in the famous AWS S3 service, because
    people configured the service to be readable/writable from anywhere in the world.
    AWS guarantees that the service is always updated and patched, but the permissions
    we give when accessing it are left in our court.
  prefs: []
  type: TYPE_NORMAL
- en: 'On YouTube, it is possible to listen to a very nice song by Kate Turchin, located
    at [https://www.youtube.com/watch?v=tIb5PGW_t1o](https://www.youtube.com/watch?v=tIb5PGW_t1o).
    This song explains the shared responsibility model in an accessible way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7148cfd4-56ce-4ebb-9f08-eca5271b5a7a.png)'
  prefs: []
  type: TYPE_IMG
- en: CloudTrail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have enabled IAM personal users and have avoided the root account. We have
    also assigned the necessary IAM policy to our groups, and have assigned each user
    to the right group. However, we also need to record all of their actions. To fulfill
    this purpose, the AWS service to enable is CloudTrail.
  prefs: []
  type: TYPE_NORMAL
- en: Each event performed over the AWS infrastructure by an IAM user or a resource
    with an IAM role assigned to it will be recorded in an S3 bucket and/or in a CloudWatch
    log group. My advice is to follow the AWS documentation at: [https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html). Creating
    a trail from the web console will be very straightforward, if you read this document.
  prefs: []
  type: TYPE_NORMAL
- en: VPC Flow Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An **intrusion**** d****etection system** (**IDS**) and an **i****ntrusion p****revention
    system** (**IPS**) are common tools in a secure network. In an on-premise environment,
    they are not so easy or cheap to implement, because you need dedicated hardware,
    and also a network structure that accommodates this feature. By contrast, in AWS,
    using only one feature of the VPC service, you can enable and disable these tools
    whenever and wherever you consider appropriate. You can have these tools at three
    levels of your network:'
  prefs: []
  type: TYPE_NORMAL
- en: The VPC level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The subnet level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **elastic network interface** (**ENI**) level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you know, a network interface belongs to one subnet, and one subnet belongs
    to a VPC. So, if you enable tools at the subnet level, you don''t have to apply
    them at the network interface level, and if you enable them at the VPC level,
    you don''t need to apply them at the subnet level. Before you activate this feature,
    you need to create the following three resources:'
  prefs: []
  type: TYPE_NORMAL
- en: An empty CloudWatch group, where the data will be stored
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An AWS role to perform the VPC Flow Log operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A policy associated with the role, with the necessary permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, you can create these resources manually, and all of the instructions
    to do this are available on the flow logs documentation page at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html).
    However, to take a more DevOps/automated approach, we can use a Terraform module.
    In this case, we use a remote module created on GitHub. As you can see in the
    official Terraform documentation about module sources at [https://www.terraform.io/docs/modules/sources.html#github](https://www.terraform.io/docs/modules/sources.html#github),
    GitHub is a supported source type. However, if you want to use your own GitHub
    repository, you can use `ssh` or `https` as module sources. For more information,
    refer to [https://www.terraform.io/docs/modules/sources.html#github](https://www.terraform.io/docs/modules/sources.html#github).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to call the module is very simple, and requires only two parameters—the
    `source` and the `prefix`. The `prefix` will be used to name all the module resources.
    You can download or look into the GitHub repository link given in the *Technical
    requirement* section to see what this module does, in detail. However, to use
    it, the following few lines are enough:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The names in the output are useful to use in the web console after that.
  prefs: []
  type: TYPE_NORMAL
- en: After you have added the module lines to any of your existing files, or to a
    new one with a `.tf` extension, it is necessary to initialize them with `terraform
    init`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output of the `terraform init` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `terraform` binary has just downloaded the module code. At this point, if
    it wasn't been done beforehand, download the AWS provider information from the
    latest available version. The `-upgrade` option forces you to use the latest available
    version, so that is usually a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, with a `terraform plan`, we can see which three objects will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This plan was saved to: `/tmp/tf11.out`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To apply these actions, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create them with a `terraform apply` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Take a note of these last two pieces of output as we need to activate the flow
    log.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the flow log for one subnet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, with all of the prerequisites satisfied, we are going to create a flow
    log for one subnet that is open in the AWS web console for the VPC service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select one subnet. Now, select the Flow Logs tab, and click on the Create flow
    log button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c0781b0-a1fe-42a5-bb02-0f382c2075de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Insert the information as it is given in the following screenshot. The log
    group and the role are the ones created with the Terraform module. In this example,
    we are interested in seeing the traffic that is accepted, so we select the Accept option
    in the Filter drop-down menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e9d1489-e3d2-4152-85fc-4e108d682de1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have a situation like this in your AWS web console, take note of
    the subnet number, because we will need it when it comes to verification. Of course,
    your subnet ID will be different from mine, which is `subnet-15a59419`.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the flow logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to verify whether a flow log is working, and to get practice with the
    flow log, we are going to create an EC2 machine for the subnet login in SSH, and
    we will analyze the traffic for that SSH login.
  prefs: []
  type: TYPE_NORMAL
- en: We won't cover the full process of creating an EC2 machine here because it is
    a basic task. If you are at this point in the book, you should already know how
    to do it. What I suggest is to use a `t2.micro` that is a free-tier eligible type.
    Also, it is very important to create the machine in the subnet where you just
    activated the flow log, and to allow the SSH to have access from your location.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a short period of time, you can go into the CloudWatch service, click
    on the Logs option, and select the log group, `devops2nd_flowlogs`, created with
    Terraform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7da9da5f-c804-4a19-9788-8903ae83a5a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside of that, you will find the name of the network interface associated
    with the EC2 instance created previously, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80b36821-4fd6-4779-b97e-3ad60f4ae2f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have many network interfaces in the same subnet, this means that you
    have multiple machines, and you need to go to the EC2 service and the Network
    Interfaces option, and locate the network interface using the Instance ID column,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c27fb070-6a18-457b-aa82-d8d6244bed68.png)'
  prefs: []
  type: TYPE_IMG
- en: However, you will probably only have one network interface, so click on its
    name. In my case, this is `eni-0d899a52e790058aa-accept`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many lines; to understand the details of each one, you can take a
    look at the record documentation at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3e059f7-ad18-481d-938d-594609795052.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, we want to find our SSH connection attempt, so it is necessary to
    recover our laptop''s public IP with a service like the one at [http://www.whatsmyip.org/](http://www.whatsmyip.org/),
    and put it in the filter, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53195b21-6167-4346-a95c-ee9aed34698c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the first line, you can see the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: The public IP of my laptop is `79.1.172.1`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The private IP of the EC2 instance is `172.31.61.129`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source port of my laptop is `61704`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The destination port of the EC2 instance for the SSH service is port `22`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPC Flow Log consideration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have completed a tour of the VPC Flow Log service with a working **proof
    of concept** (**PoC**). Of course, there are many other options available in the
    service, which you can find in the official AWS documentation. By visiting these,
    you can continue to explore the potential of the VPC Flow Log.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, if you ever try to do the same task performed by the VPC Flow
    Log in an on-premise environment, it should be clear how easy it is to enable
    a full traffic monitor on the AWS cloud compared with doing do so in an on-premise
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to delete the EC2 instance that was created previously, in order
    to avoid incurring any unnecessary extra charges. The other resource will not
    have any costs, unless you generate a very great amount of traffic in that subnet.
  prefs: []
  type: TYPE_NORMAL
- en: VPC subnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at how to organize our VPC subnets, following
    the least privileged principle. We have to expose and give access to our resources
    (EC2, ELB, and RDS) in the fewest possible circumstances, in order to limit security
    attacks and data leaks.
  prefs: []
  type: TYPE_NORMAL
- en: In each AWS region there is already a default VPC that has been created. If
    you want to know all of the details of this, I would recommend that you read the *Default
    VPC and Default Subnets* documentation at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html).
    However, in short, it is possible to say that everything you put there is potentially
    exposed to the public network if the security group that you configure allows
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Routing and subnet types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the official documentation at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenarios.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenarios.html), there
    are four scenarios described for your VPC configuration, and it will be useful
    to look into that. It is important to understand that access to the resources
    that you place in your subnets is determined by the three following factors:'
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Network Access Control** (**NAC**) list (a stateless firewall)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security group (a stateful firewall)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'My advice is to not touch the NAC; leave the default one attached to each subnet,
    which allows all of the inbound and outbound traffic, and use the security group as
    a firewall instead. A subnet can be classified into three types, based on their
    security levels:'
  prefs: []
  type: TYPE_NORMAL
- en: Public subnets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private subnets with internet access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private subnets without internet access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing private subnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The resources in public subnets can be accessed by using the public IP and
    enabling the security group to receive connections. For private subnets, you have
    at least three ways to do this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Jump on a bastion host in one public subnet, and, from there, reach the private
    resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use site-to-site VPNs from the AWS VPN service, [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpn-connections.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpn-connections.html),
    to the physical router/s in your office. You can connect two routers, for redundancy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place a virtual VPN software in an EC2 machine and connect your device to it.
    There are countless solutions that do this, and many are in the AWS Marketplace,
    ready to be used in exchange for a monthly fee.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preferred option, if you have an office with physical routers, is always
    the site-to-site solution.
  prefs: []
  type: TYPE_NORMAL
- en: What to place in which subnet?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In my test VPC, I have six subnets—two for each type, as you can see in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b0eca17-e3cb-47c3-9cce-a5ec97e788da.png)'
  prefs: []
  type: TYPE_IMG
- en: '*What should you insert in each kind of subnet?* Consider the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public subnets**: This refers to all of the external **Elastic Load Balancing**
    (**ELB**) with public access, the bastion host (if you have one), the virtual
    VPN software in an EC2 machine, and any other resource that requires access from
    the internet, and cannot be accessed in any other way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private subnets with internet access**: This refers to all of the internal
    ELBs as well as all EC2 machines behind an ELB (internal or external), that have
    to download or upload something to the internet, and a database that is required
    to download or upload something to the internet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private subnets without internet access**: This refers to all resources that
    don''t need access to the internet for any reason, and also resources whose updates
    are downloaded from an internal repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying subnets from the web console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Keep the following points in mind :'
  prefs: []
  type: TYPE_NORMAL
- en: Every subnet can have one associated route table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One route table can be associated with multiple subnets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't explicitly associate a route table to a subnet, the default route
    table is associated automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see three route tables, where the Public
    Route is the default route table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9cda0f1b-b81a-4165-82d0-d349b49e3bf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Subnets section, you can see the route table associated with that subnet
    and the single routes, but to change the content of a route table**,** you have
    to edit from the Route Tables section. What differentiate a private route from
    a public route table/subnet is the destination of the `0.0.0.0/0` route. If it''s
    a forward internet gateway, `igw-xxxxx` means that this subnet is reachable from
    the outside world and can connect to the internet, as well (assuming that the
    security group allows for that):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60bd4329-52ad-4d9a-a8b2-6373367960a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If it points to an NAT gateway or another EC2 instance instead, this means
    that it is a private subnet with internet access, and it can access the internet
    in any way, and so it is reachable from the external world. First, you have to click
    on the Create a NAT Gateway button, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad9c7b44-6d02-4211-91f2-e0f87e0ab73e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, you can change the routing table and have a situation like the
    one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a08840b5-c40a-4099-ad57-8102b4f8d98f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the `0.0.0.0/0` isn''t present, as shown in the preceding screenshot, it
    is a completely private subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8cda0c6-bcb0-4919-9f81-2957619639c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Endpoint routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a database has to upload a backup to a private S3 bucket in the same region,
    it should never use internet access, but should take a private, internal route.
    This is called a VPC endpoint. With this kind of route, you can avoid passing
    through the internet to reach an AWS service, such as S3, DynamoDB, or CloudWatch,
    and gain speed, security, and cost savings (internet traffic has a cost). To see
    all of the services with a VPC endpoint, you can take a look at the official documentation
    at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will configure the first VPC endpoint available for the S3 service,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to VPC | Endpoints | Create Endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a55f50e-9aa3-4a64-9d1a-0611a2711145.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Leave the default AWS service and select the S3 service, as seen in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff40f237-8d4a-44a2-ad75-7e33af134d78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the VPC that you are working on, and all of the route tables to modify:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a711d1b-fb73-4641-aa7f-64133709a0d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can see a new route rule, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b8643d5-1fa1-40ee-9c77-a52f33f52ca1.png)'
  prefs: []
  type: TYPE_IMG
- en: Keep in mind that this will work for all of the buckets created in the same
    VPC region. In this example, it is `us-east-1`, North Virginia.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the AWS documentation for the *Endpoints for Amazon S3* at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints-s3.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints-s3.html), there
    is an interesting hardening rule for the S3 bucket policy, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: I have changed this by adding my VPC endpoint ID, `vpce-039f31bfec07367ea` instead
    of the one in the documentation. With this rule, the bucket `my_secure_bucket`
    will be only reachable from the VPCs that are associated with that endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: AWS WAF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You restrict access by using security groups and private subnets for all your
    resources. All of the monitor logs, VPC Flow Logs, and CloudTrails are active.
    IAM policies are enforced, everything is correctly secured, and nothing is exposed.
    This is because you have the VPN service to access any resources. However, if
    you want to provide an internet service, you have to open at least one point of
    access to the external world. As we already discussed in the *VPC* *Subnets* section,
    you should expose as few resources in the public subnet as possible, with the
    `0.0.0.0/0` security group rule open. If possible, only an ELB should stay in
    this situation, passing connections to the EC2 machines in private subnets, since
    the EC2 machines communicate with the RDS databases with strict security rules.
  prefs: []
  type: TYPE_NORMAL
- en: This is the most classic AWS application, and it is not necessary to explain
    it in detail here. Instead, we want to focus on increasing the security of the
    ELB with the AWS WAF. For more information, refer to [https://aws.amazon.com/waf/](https://aws.amazon.com/waf/). AWS
    WAF is a firewall that works at the application level and can protect at level
    7 of the TCP/IP stack protocol, rather than at level 4 of the TCP/IP stack, where the
    security groups work.
  prefs: []
  type: TYPE_NORMAL
- en: '*What can the WAF do that a security group can''t?* Consider the following
    answers to this question:'
  prefs: []
  type: TYPE_NORMAL
- en: Protect against SQL injection and cross-site scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block **denial-of-service** (**DoS**) and **distributed denial-of-service**
    (**DDoS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protect a part of the URL of your web application, such as `www.mywebsite/admin`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will create two practical POCs with Terraform about DoS
    and a sub-URL. To do this, we are going to create a web application playground,
    apply the WAF, and test the rules to trigger its protection. Keep in mind that
    when this part of the book was being written, the WAF could only be applied to
    the **application load balancer** (**ALB**) and CloudFront, but AWS continuously
    updates its services, so there is no knowing what might be done in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: Web application playground
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our test playground will be an ALB and an EC2 machine with an Apache2 web server installed.
    In this section, we will only create the environment and test it, without any
    WAF configuration. In the next section, however, we will add the WAF level on
    the ALB.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the following playground, we will use a Terraform module that is
    available on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69c2e81d-c9e6-40e9-b752-5614a7d72dc6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Start by adding the following code to your `main.tf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Some things to keep in mind are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The ALB must always live in at least two subnets, in two different availability
    zones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This ALB is reachable on port `80` and uses an HTTP listener that can be acceptable
    for a PoC. However, in your real environment, it is best to register a public
    domain with AWS Route 53, create an SSL certificate with AWS Certificate Manager,
    associate this certificate to the ALB, and use an HTTPS listener.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security group settings are very strict, and you can take a look at the
    module code to see that the ALB security group ingress is reachable only from
    port `80` to the whole internet, `0.0.0.0/0`, and this can be reached in *egress*
    only from port `80` of the EC2 security group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As usual, to create the resource you need to run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the DNS ALB name, as shown in the following screenshot, and copy it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e2d7f8d-fcc7-4f29-91b5-efa188b5929a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open it from your browser, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f443cb9-679c-48e6-afab-daac71e6a059.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also a subdirectory that we can use to test our WAF later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/feaf6ed6-30cd-45ff-814e-4f66514444c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you don''t use it quickly enough, your playground will destroy it with the `terraform` command,
    to avoid incurring any unnecessary charges. If you want to destroy just the playground,
    but not the other resources that were created, you can use a selective `destroy` module,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you confirm with a `Yes`, then the 12 module resources will be destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: Allow a sub-URL to be accessible only from an IP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, in your web application, you have an admin area, and it could be the
    case that this part of your portal isn't accessible by everyone. Of course, you
    have a username and password, but an attacker can steal those credentials in many
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: If it is a sensitive application, for the principle of least privilege to be
    followed, it is convenient to restrict access to the locations where this kind
    of admin access needs to be used; for example, from the office. If you can have
    different access for the admin section you can put this behind an internal load
    balancer and connect the VPC to your office by using a VPN service, as discussed
    in previous sections. The internal load balancer DNS name is converted with the
    private IPs of your VPC, and, in this way, you can assure that connections are
    only made from a trusted source, such as your office.
  prefs: []
  type: TYPE_NORMAL
- en: However, many times, you won't have this option, because the application is
    all in one bundle, and you cannot separate the admin sub-URL from the main part.
    In such cases, the only change available is to use an AWS WAF and apply a filter
    to the admin sub-URL only. We need to create a WAF and attach it to the ALB for
    our playground web app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, I have created a `terraform` module, and you can use it in your
    code with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Of course, don't forget to replace your office IP or home connection public
    IP in the `my_office_ip` field, and to use the subnet mask `/32` if it is a single
    IP, as in my case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The commands are the usual ones, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To facilitate the test, I have added an `alb_url` output variable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, the WAF is associated to the ALB, and all of the requests will be filtered.
  prefs: []
  type: TYPE_NORMAL
- en: Testing with the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This time, we are going to test it using the command-line tool, `curl`. As
    you can see from my office IP, no issues arose when trying to reach both the root
    directory and the sub-URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, when I used a virtual machine with another public IP, I got back the
    following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Identifying the WAF from the web console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the resource created, that is, the service WAF, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab338043-bd83-4d95-9747-9beb1f125b46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'View the Web ACLs option, and select the region where you are working from
    the Filter menu. You can see what the Terraform module creates, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c79cb95c-dd32-4735-891f-a324d7023f48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Rules section, it is possible to see the filter itself, and the IP that
    is allowed to access the restricted area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f580a4a8-7dd0-40bf-b740-f97774e2b7b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Blocking DoS/DDoS attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A DoS attack is an old problem for our applications, especially in their distributed
    versions, the DDoS, where multiple sources (usually hacked devices of many kinds,
    that form a botnet) try to run a DoS by running so many queries at the same time
    that a network becomes overloaded. In this case, to defend and continue to serve
    traffic to legitimate users, it is fundamental to identify and block malicious
    sources.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth spending a little bit of time reading the official documentation
    on *Denial of Service Attack Mitigation on AWS, *at [https://aws.amazon.com/answers/networking/aws-ddos-attack-mitigation/](https://aws.amazon.com/answers/networking/aws-ddos-attack-mitigation/).
    What we want to do here is to focus on a practical example of using WAF.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS WAF can block a single public IP that is sending too many requests.
    The question that should pop up in your mind is, *how many requests are too many?*
    This depends on your web application, so what you should do before applying any
    filter of this kind is measure the number of requests received from a single IP
    in a five-minute time range.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the AWS WAF lower limit that it is 2,000 requests and also
    according to my tests, though request `2001` will be not blocked, after a while,
    you will see a number of subsequent requests blocked. As we did for the other
    examples, we will not trust what AWS declares, but we will test our PoC after
    its creation. To immediately see whether the system is working, we will set up
    the AWS limit for our sub-URL: `http://playground-1940933132.us-east-1.elb.amazonaws.com/subdir/`.
    We are not going to apply anything on the main page, at `http://playground-1940933132.us-east-1.elb.amazonaws.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating AWS WAF with Terraform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Destroy the `limit_admin_WAF` module to avoid conflicts. You can do so with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, comment on the module in your code, using `/* */`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the new module with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As usual, include the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Take the DNS name from the output and test that everything is working with
    the `curl` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a `playground` main directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a subdirectory. Log in to the web console, go to the WAF service, select
    the Virginia region, and note the `subdir` rule of the Rate-based type, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8045127-8b44-40dd-999a-fa32ffc9b43b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, in the Rules section, you will notice that right now, there aren''t any
    IPs blocked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7a96ad3-d9ef-4563-a078-d2a5e866f569.png)'
  prefs: []
  type: TYPE_IMG
- en: Keep in mind that any kind of DoS test is forbidden by AWS by default, and it
    can be blocked, because it violates the terms and conditions. For more information
    on the *AWS Service Terms*, refer to [https://aws.amazon.com/service-terms/](https://aws.amazon.com/service-terms/).
    In our case, we are going to run 2,000/4,000 requests from a single IP in a short
    period of time. It is not so large an amount that it will trigger the AWS alarm. If
    you have a very good internet connection, you can run this script from your laptop,
    but my advice is to use an Amazon Linux EC2 machine in a public subnet directly
    exposed to the internet, so that we have the same conditions of experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in on your machine and download the script with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run 4,000 requests to your ALB playground. From the output, you can
    see that the first 2,000/3,000 requests will be successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'However, you will then start to receive rejected requests like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t see this during the first run, you will have to run the script again to
    trigger the requests. You can log in with the web console in the WAF service,
    and you will see the public IP of your EC machine in the Rules section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a25056f8-5185-421e-bd53-dfe2724a4539.png)'
  prefs: []
  type: TYPE_IMG
- en: Still, if you run a `curl` to the root directory, you will see that it is still
    accessible from your EC2 machine. If you try to access it from your laptop, the
    `subdir` URL will still be accessible. If you don't send any more requests for
    a while, the public IP of your EC2 machine will be removed from the blacklist,
    and this is correct, because that IP is not a threat if it returns to transmitting
    normal traffic amounts.
  prefs: []
  type: TYPE_NORMAL
- en: DDoS attach consideration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS WAF can be a very useful tool for mitigating DOS and DDOS attacks, but
    before starting to use it, it''s convenient to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Read and observe how to implement the DoS attack mitigation on AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know your application, and set up a good limit for concurrent connections, to
    avoid blocking valid traffic and getting false positive responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a scalable web application, to respond to requests until the WAF understands
    that it is under attack and triggers its filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAF for SQL Injection (SQLi)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created and tested the WAF features for rate rules and sub-URL limits. As
    we said at the beginning, there is also the SQLi feature, and it is possible to
    find some CloudFormation templates related to this on the official AWS website
    at [https://github.com/aws-samples/aws-waf-sample](https://github.com/aws-samples/aws-waf-sample) GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we applied the least privilege principle at different level.
    In the IAM section, you learned how to lock in your root account and pass control
    to IAM users, by configuring a password policy and setting up permissions and
    groups. Enabling CloudTrail, we tracked and monitored every action performed on
    our infrastructure by an IAM user or by a service, in our environment. With VPC
    Flow Logs, we observed a powerful network monitor applicable at any point of our
    VPC, and we also created our prerequisites using Terraform, a wonderful tool for
    growing our practice. . We also covered the concept of the Terraform module. In
    the *VPC subnets* section, we looked at the three kinds of subnet that we can
    use in our AWS cloud, and where to place the different kinds of resources available
    in our infrastructure, exposing it to the internet as little as possible and keeping
    as much as possible in private zones.
  prefs: []
  type: TYPE_NORMAL
- en: While discussing the WAF service, we explored one of the most powerful services
    for security available in the AWS world. Protecting some sensitive parts of your
    web application can be useful. DoS protection is something that should always
    be present in professional web service. Configuring WAF is not always easy, but
    thanks to the power of Terraform automation and to the PoC modules available in
    this book, understanding the principles and configuring accordingly is only some
    `terraform` and `git` commands away.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose that I have just registered to the AWS cloud and received my password
    by email. Can I start to build my infrastructure, or do I have to follow some
    best practice beforehand?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of logging in should I enable in my AWS account?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are security groups and NACL the only firewalls available in AWS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I protect my web application from DDoS attacks by using AWS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can I put all of my resources in one subnet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a very wide field and one chapter cannot be exhaustive. Further
    resources are available at [https://aws.amazon.com/whitepapers/aws-security-best-practices/](https://aws.amazon.com/whitepapers/aws-security-best-practices/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Center for Internet Security** (**CIS**) Benchmark for AWS Foundation
    is a security hardening guideline for securing AWS accounts/environments. Refer
    to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*CIS Amazon Web Services Foundations* at [https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf](https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CIS **Script to check benchmark against the AWS API* at [https://github.com/awslabs/aws-security-benchmark](https://github.com/awslabs/aws-security-benchmark)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on *AWS Certified Security - Specialty*, refer to [https://aws.amazon.com/certification/certified-security-specialty/](https://aws.amazon.com/certification/certified-security-specialty/).
  prefs: []
  type: TYPE_NORMAL
