["```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh\n```", "```\nhelm install -f values.yaml /path/to/chart/root\n```", "```\nhelm install -f values.yaml stable/drupal\n```", "```\nhelm repo add jetstack https://charts.jetstack.io\nhelm install certmanager --namespace cert-manager jetstack/cert-manager\n```", "```\nhelm install certmanager --namespace cert-manager jetstack/cert-manager\n```", "```\nNAME: certmanager\nLAST DEPLOYED: Sun May 23 19:07:04 2020\nNAMESPACE: cert-manager\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n```", "```\nNOTES:\ncert-manager has been deployed successfully!\nIn order to begin issuing certificates, you will need to set up a ClusterIssuer\nor Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).\nMore information on the different types of issuers and how to configure them\ncan be found in our documentation:\nhttps://cert-manager.io/docs/configuration/\nFor information on how to configure cert-manager to automatically provision\nCertificates for Ingress resources, take a look at the `ingress-shim`\ndocumentation:\nhttps://cert-manager.io/docs/usage/ingress/\n```", "```\nKubectl get secret -n cert-manager\n```", "```\nhelm ls -A\n```", "```\nChart.yaml\ncharts/\ntemplates/\ndev-values.yaml\nstaging-values.yaml\nproduction-values.yaml\n```", "```\napiVersion: v2\nname: mynodeapp\nversion: 1.0.0\n```", "```\nhelm create myfakenodeapp\n```", "```\nLs myfakenodeapp/templates\n```", "```\nhelpers.tpl\ndeployment.yaml\nNOTES.txt\nservice.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-myapp\n  labels:\n    app: frontend-myapp\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend-myapp\n  template:\n    metadata:\n      labels:\n        app: frontend-myapp\n    spec:\n      containers:\n      - name: frontend-myapp\n        image: myrepo/myapp:1.0.0\n        ports:\n        - containerPort: 80\n```", "```\nhelm install myapp .\n```", "```\nkubectl get deployment\n```", "```\nNAMESPACE  NAME            READY   UP-TO-DATE   AVAILABLE   AGE\ndefault    frontend-myapp  2/2     2            2           2m\n```", "```\nhelm uninstall myapp\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-{{ .Release.Name }}\n  labels:\n    app: frontend-{{ .Release.Name }}\n    chartVersion: {{ .Chart.version }}\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend-{{ .Release.Name }}\n  template:\n    metadata:\n      labels:\n        app: frontend-{{ .Release.Name }}\n    spec:\n      containers:\n      - name: frontend-{{ .Release.Name }}\n        image: myrepo/{{ .Values.image.name }}\n:{{ .Values.image.tag }}\n        ports:\n        - containerPort: 80\n```", "```\nimage:\n  name: myapp\n  tag: 2.0.1\n```", "```\nhelm install myrelease -f values.yaml .\n```", "```\nimage:\n  name: myapp\n  tag: 2.0.2\n```", "```\napiVersion: v2\nname: mynodeapp\nversion: 1.0.1\n```", "```\nhelm upgrade myrelease -f values.yaml .\n```", "```\nhelm rollback myrelease 1.0.0\n```", "```\ncurl -s \"https://raw.githubusercontent.com/\\\nkubernetes-sigs/kustomize/master/hack/install_kustomize.sh\"  | bash\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-myapp\n  labels:\n    app: frontend-myapp\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend-myapp\n  template:\n    metadata:\n      labels:\n        app: frontend-myapp\n    spec:\n      containers:\n      - name: frontend-myapp\n        image: myrepo/myapp:1.0.0\n        ports:\n        - containerPort: 80\n```", "```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- deployment.yaml\nnamespace: default\ncommonLabels:\n  app: frontend-app\nimages:\n  - name: frontend-myapp\n    newTag: 2.0.0\n    newName: frontend-app-1\n```", "```\nkustomize build deployment-kustomization1.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-myapp\n  labels:\n    app: frontend-app\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend-app\n  template:\n    metadata:\n      labels:\n        app: frontend-app\n    spec:\n      containers:\n      - name: frontend-app-1\n        image: myrepo/myapp:2.0.0\n        ports:\n        - containerPort: 80\n```", "```\nkustomize build deployment-kustomization.yaml | kubectl apply -f -\n```", "```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- deployment.yaml\nnamespace: default\npatchesStrategicMerge:\n  - deployment-patch-1.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-myapp\n  labels:\n    app: frontend-myapp\nspec:\n  replicas: 4\n```", "```\n kustomize build deployment-kustomization2.yaml\n```", "```\nKubectl apply -k deployment-kustomization2.yaml\n```", "```\nkustomize build deployment-kustomization2.yaml | kubectl apply -f -\n```", "```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- deployment.yaml\nnamespace: default\npatches:\n- path: deployment-patch-2.json\n  target:\n    group: apps\n    version: v1\n    kind: Deployment\n    name: frontend-myapp\n```", "```\n[\n  {\n   \"op\": \"replace\",\n   \"path\": \"/spec/template/spec/containers/0/name\",\n   \"value\": \"frontend-myreplacedapp\"\n  }\n]\n```", "```\nversion: 0.2\nphases:\n  build:\n    commands:\n      - npm run build\n  test:\n    commands:\n      - npm test\n  containerbuild:\n    commands:\n      - docker build -t $ECR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG .\n  push:\n    commands:\n      - docker push_$ECR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG\n```", "```\nversion: 0.2\nphases:\n  install:\n    commands:\n      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/darwin/amd64/kubectl  \n      - chmod +x ./kubectl\n      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin\n      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc\n      - source ~/.bashrc\n  pre_deploy:\n    commands:\n      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $K8S_CLUSTER\n  deploy:\n    commands:\n      - cd $CODEBUILD_SRC_DIR\n      - kubectl set image deployment/$KUBERNETES-DEPLOY-NAME myrepo:\"$IMAGE_TAG\"\n```", "```\nversion: 0.2\nphases:\n  install:\n    commands:\n      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/darwin/amd64/kubectl  \n      - chmod +x ./kubectl\n      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin\n      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc\n      - source ~/.bashrc\n  pre_deploy:\n    commands:\n      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $K8S_CLUSTER\n  deploy:\n    commands:\n      - cd $CODEBUILD_SRC_DIR\n      - kubectl apply -f .\n```", "```\n    helm repo add fluxcd https://charts.fluxcd.io\n    ```", "```\n    kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/master/deploy/crds.yaml\n    ```", "```\n    kubectl create namespace flux\n    ```", "```\n    helm upgrade -i flux fluxcd/flux \\\n    --set git.url=git@github.com:GITHUB_USERNAME/REPOSITORY_NAME \\\n    --namespace flux\n    helm upgrade -i helm-operator fluxcd/helm-operator \\\n    --set git.ssh.secretName=flux-git-deploy \\\n    --namespace flux\n    ```", "```\napiVersion: helm.fluxcd.io/v1\nkind: HelmRelease\nmetadata:\n  name: myapp\n  annotations:\n    fluxcd.io/automated: \"true\"\n    fluxcd.io/tag.chart-image: glob:myapp-v*\nspec:\n  releaseName: myapp\n  chart:\n    git: ssh://git@github.com/<myuser>/<myinfrastructurerepository>/myhelmchart\n    ref: master\n    path: charts/myapp\n  values:\n    image:\n      repository: myrepo/myapp\n      tag: myapp-v2\n```", "```\nhelmrelease1.yaml\n```", "```\nhelmrelease1.yaml\nmyhelmchart/\n  Chart.yaml\n  Values.yaml\n  Templates/\n    … chart templates\n```"]