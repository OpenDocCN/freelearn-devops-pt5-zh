- en: Security Assessment for New Releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have finished looking at security monitoring, we are going to learn
    about security assessment for new releases in this chapter. Cloud services may
    have frequent releases and updates. It's a challenge for the development, operations,
    and security teams to release their work within a short time frame and to finish
    the minimum required security testing before releases. In this chapter, we will
    look at the security review policies and the suggested checklist and testing tools
    for every release. For testing integration, the BDD security framework and other
    integrated security testing framework will also be introduced in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the main topics that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Security review policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security checklist and tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BDD security framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consolidated testing results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security review policies for releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An organization should define its own security assessment policies for every
    release. For a major or new application release, there is no doubt that a full
    security assessment is needed. However, should we do the same for a patch release,
    especially when it's a time-sensitive and business-critical release? Having a
    clear understanding of the application release scope and objective will help the
    security team to plan the necessary security assessment scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows an example of the relationship between the application
    releases and the security assessment scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Application release objective** | **Security assessment scope** |'
  prefs: []
  type: TYPE_TB
- en: '| New or major application release | Full assessment |'
  prefs: []
  type: TYPE_TB
- en: '| Third-party component update | Assessment based on the third party and the
    integration interfaces |'
  prefs: []
  type: TYPE_TB
- en: '| Patch releases | Targeted assessment based on patch scope |'
  prefs: []
  type: TYPE_TB
- en: '| Emergency releases | The security testing scope is limited to ensure that
    there are no major security issues |'
  prefs: []
  type: TYPE_TB
- en: 'When a team receives more projects with more frequent releases, it may be unrealistic
    for one security team to handle all of the security assessment of all of the projects.
    Therefore, it''s recommended that you define what security assessment should be
    done by the product development team and what will be done by the security team.
    Typically, the security team will help to prepare the security checklist, toolkits,
    and guidelines that will be used by the product team to do the self-assessment.
    Please also refer to the next section for a more complete list of security checklists
    and tools. The following table shows an example of the security assessment activities''
    execution by the development, security, and DevOps teams:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security review stage** | **Example key security practices** | **Executed
    by** |'
  prefs: []
  type: TYPE_TB
- en: '| Self-assessment |'
  prefs: []
  type: TYPE_TB
- en: Review the OWASP ASVS checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review the OWASP Top 10 checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute the defined automated security tools, such as ZAP, NMAP, and SQLmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix major security issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Product development team |'
  prefs: []
  type: TYPE_TB
- en: '| Pre-release |'
  prefs: []
  type: TYPE_TB
- en: Submit the self-assessment testing results and the prerelease package to the
    security team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security team focuses on the assessment with the highest risk modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security team performs the acceptance security testing, which includes not
    only the packages, but also the secure configurations of the whole system, such
    as Linux, MySQL, and NginX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual and automated application and network security testing will be performed
    by the security review team, and you will receive your review results (see the
    following results section for more details)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Security team |'
  prefs: []
  type: TYPE_TB
- en: '| Production | Perform regular security scans for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Known CVEs of software components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network communications, such as ports and insecure protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Top 10 security issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Operation and security team |'
  prefs: []
  type: TYPE_TB
- en: Security checklist and tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The scope of the security checklist we will discuss here is mainly for pre-production
    deployment releases. The DevOps and the security team do the final testing before
    the deployment to production. In the best-case scenarios, those defined security
    checklists can be done automatically. This will help the DevOps team perform regular
    security checks, even after the deployment to production. Refer to the *Further
    reading* section for the reference sources of every tool. The following table
    shows the feature being checked, the security testing approaches, and the suggested
    security testing tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security category** | **Security testing approaches** | **Suggested security
    testing tools** |'
  prefs: []
  type: TYPE_TB
- en: '| Hidden communication ports or channels |'
  prefs: []
  type: TYPE_TB
- en: Ensure that there are no hidden communication ports or backdoors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that there are no hidden hardcoded secrets, passwords, or hard keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for unnecessary system maintenance tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform a source code review for networking communication, such as Java-related
    API `connect()`, `getPort()`, `getLocalPort()`, `Socket()`, `bind()`, `accept()`,
    `ServerSocket()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening to `0.0.0.0` is forbidden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| NMAPGrauditTruffleHogSnallygasterHpingmasscan |'
  prefs: []
  type: TYPE_TB
- en: '| Privacy information |'
  prefs: []
  type: TYPE_TB
- en: Search for the plaintext password and key in the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for the personal information for the GDPR compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The personal information can be modified and removed by the end user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The personal information can be removed within a defined period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| TruffleHogBlueflowerYARAPrivacyScoreSnallygaster |'
  prefs: []
  type: TYPE_TB
- en: '| Secure communication |'
  prefs: []
  type: TYPE_TB
- en: SSH v2 instead of Telnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SFTP instead of FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TLS 1.2 instead of SSL TLS 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| NMAPWireSharkSSLyzeSSL/TLS tester |'
  prefs: []
  type: TYPE_TB
- en: '| Third-party components |'
  prefs: []
  type: TYPE_TB
- en: CVE check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Known vulnerabilities check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden malicious code or secrets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| OWASP Dependency checkLMD (Linux Malware Detection)OpenVASNMAPCVEChecker
    |'
  prefs: []
  type: TYPE_TB
- en: '| Cryptography |'
  prefs: []
  type: TYPE_TB
- en: Ensure that there is no weak encryption algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that there are no secret files on the public web interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| GrauditSSLyzeSnallygaster |'
  prefs: []
  type: TYPE_TB
- en: '| Audit logging | Ensure that the operation and security teams can log the
    following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Non-query operations, including success and failure actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-query scheduled tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API access or tool connections that execute administration tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| GREP |'
  prefs: []
  type: TYPE_TB
- en: '| DoS attacks | The testing of the DoS is to ensure if the application failure
    is as expected. The DoS scenario may cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: TCP Sync flooding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP Slow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP Post Flooding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NTP DoS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL DoS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| PwnlorisSlowlorisSynfloodThc-sll-DoSWreckuestsntpDoS |'
  prefs: []
  type: TYPE_TB
- en: '| Web security | To develop a policy concerning web security, you can refer
    to the OWASP Testing Guide and OWASP Top 10:'
  prefs: []
  type: TYPE_NORMAL
- en: Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data exposure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XXE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broken access control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security misconfiguration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure deserialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Known vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insufficient logging and monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Refer to OWASP Testing Guide v4OWASP ZAPBurpSuiteArachni ScannerSQLMap |'
  prefs: []
  type: TYPE_TB
- en: '| Secure configuration | Ensure that the configurations of applications, web
    services, databases, and the OS are secure. The secure configurations are based
    on the CIS security benchmark and OpenSCAP. | OpenSCAPDocker Bench SecurityClair
    |'
  prefs: []
  type: TYPE_TB
- en: '| Fuzz testing | The purpose of fuzz testing is to generate dynamic testing
    data as input to check whether the application will fail unexpectedly. | API FuzzerRadamsaAmerican
    Fuzzy lopFuzzDBWfuzz |'
  prefs: []
  type: TYPE_TB
- en: '| Mobile app security | Refer to the OWASP Mobile App Security Testing Guide
    for a good set of guidelines to apply to your security policy. | Mobile Security
    Framework |'
  prefs: []
  type: TYPE_TB
- en: '| Top common issue | Draw up a list of the most common security issues based
    on projected historical data. | CWE/SANS Top 25 Most Dangerous Software Errors
    |'
  prefs: []
  type: TYPE_TB
- en: '| Security compliance | Security compliance that is based on business needs
    may also be included, such as GDPR or PCI DSS. | Refer to the specific security
    compliance requirements |'
  prefs: []
  type: TYPE_TB
- en: BDD security framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As there are various kinds of security testing tools, it may be time-consuming
    to analyze the testing results generated by every testing tool. When simply reading
    the security testing results, it may be hard to tell what security testing cases
    are executed. For example, the security testing reports generated by NMAP can
    be understood by the security testing team, but may not be easily understood by
    the DevOps team. Those are the issues that the BDD security framework can solve.
    The purpose of the adoption of the BDD security framework is to integrate all
    security testing tools and to define all the security testing cases by using human-readable
    user-story statements.
  prefs: []
  type: TYPE_NORMAL
- en: To build the whole automation framework, it's suggested that you have the security
    testing tools in place first, such as NMAP, SSLyze, SQLmap, ZAP, and Arachni.
    Don't try to build the BDD security automation framework when those security tools
    and practices are not ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'After all, the BDD security framework is used to consolidate all the security
    tools and results in defined user stories, and requires each security testing
    tool to perform the execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table is a comparison of the open source BDD security tool with
    other options. These frameworks are flexible enough to perform security tool integration
    and to provide consolidated testing results. If you are looking for a BDD framework
    that can be executed on both Windows and Linux, and that can be integrated with
    other tools, then GAUNTLT can be considered. GAUNTLT provides the *generic command-line*
    adapters, which allow you to execute any command-line tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **MITTN** | **GAUNTLT** | **BDD Security** |'
  prefs: []
  type: TYPE_TB
- en: '| Programming language | Python | Ruby | Java |'
  prefs: []
  type: TYPE_TB
- en: '| BDD framework | Behave | Cucumber | CucumberSelenium |'
  prefs: []
  type: TYPE_TB
- en: '| Windows/Unix | Unix | Both | Both |'
  prefs: []
  type: TYPE_TB
- en: '| Default plugins | BurpSuiteSSLyzeRadamsa | NMapSSLyzeSQLMapGarmrGeneric command
    line | ZAPSSLyzeNessus |'
  prefs: []
  type: TYPE_TB
- en: Consolidated testing results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your security team has performed the security testing using various kinds
    of security tools, one of the challenges is the consolidation of all the output.
    The BDD framework that we looked at previously is one of the solutions. However,
    if you don't build another BDD framework and would just like to consolidate all
    the testing outputs, then OWASP DefectDojo may be the solution for you (see [https://github.com/DefectDojo/django-DefectDojo ](https://github.com/DefectDojo/django-DefectDojo)for
    more information).
  prefs: []
  type: TYPE_NORMAL
- en: 'The key advantage of using DefectDojo to consolidate all the security testing
    tool outputs is the ability to present the results in one dashboard  alongside
    the metrics, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Source: [https://github.com/DefectDojo/django-DefectDojo](https://github.com/DefectDojo/django-DefectDojo)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the open source security tool output formats that
    DefectDojo can import:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Open source security tools** | **Output format** |'
  prefs: []
  type: TYPE_TB
- en: '| **Arachni Scanner**: [http://www.arachni-scanner.com/](http://www.arachni-scanner.com/)
    | JSON |'
  prefs: []
  type: TYPE_TB
- en: '| **Bandit**: [https://github.com/PyCQA/bandit](https://github.com/PyCQA/bandit)
    | JSON |'
  prefs: []
  type: TYPE_TB
- en: '| **Burp**: [https://portswigger.net/burp](https://portswigger.net/burp) |
    XML |'
  prefs: []
  type: TYPE_TB
- en: '| **Dependency Check**: [https://www.owasp.org/index.php/OWASP_Dependency_Check](https://www.owasp.org/index.php/OWASP_Dependency_Check)
    | XML |'
  prefs: []
  type: TYPE_TB
- en: '| **Nikto**: [https://github.com/sullo/nikto](https://github.com/sullo/nikto)
    | XML |'
  prefs: []
  type: TYPE_TB
- en: '| **NMAP**: [https://nmap.org/](https://nmap.org/) | XML |'
  prefs: []
  type: TYPE_TB
- en: '| **OpenVAS**: [http://www.openvas.org/](http://www.openvas.org/) | CSV |'
  prefs: []
  type: TYPE_TB
- en: '| **Retire.JS**: [https://retirejs.github.io/retire.js/](https://retirejs.github.io/retire.js/)
    | JSON |'
  prefs: []
  type: TYPE_TB
- en: '| **ssllabs-scan**: [https://github.com/ssllabs/ssllabs-scan](https://github.com/ssllabs/ssllabs-scan)
    | JSON |'
  prefs: []
  type: TYPE_TB
- en: '| **Trufflehog**: [https://github.com/dxa4481/truffleHog](https://github.com/dxa4481/truffleHog)
    | JSON |'
  prefs: []
  type: TYPE_TB
- en: '| **Visual Code Grepper (VCG)**: [https://github.com/nccgroup/VCG](https://github.com/nccgroup/VCG)
    | CSV or XML |'
  prefs: []
  type: TYPE_TB
- en: '| **ZAP**: [https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)
    | XML |'
  prefs: []
  type: TYPE_TB
- en: '| **Generic Findings Import** | CSV |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to establish a security review policy for
    every release. We learned that it was  recommended that the security assessment
    scope is based on the application release objective. For example, a new and major
    application release should have a full security assessment. A third-party component
    update release may focus on the integration interfaces instead of a full-scope
    assessment. In addition, the security review can be done in different stages,
    such as the self-assessment by the product development team, the prerelease assessment
    by the security team, and the product security assessment by the operations team.
  prefs: []
  type: TYPE_NORMAL
- en: The security checklist and the related testing tools for the pre-production
    deployment release were also discussed. The key area of the security checklist
    includes hidden communication interfaces, privacy information, secure communication,
    third-party components, cryptography, audit logging, DoS attacks, web security,
    configuration, fuzz testing, and lists of recent top issues.
  prefs: []
  type: TYPE_NORMAL
- en: To integrate all the testing cases with different tools, the use of a BDD security
    framework was recommended. There are three open source BDD security frameworks—MITTN,
    GAUNTLT, and BDD-Security. If a BDD security framework is not used, we suggested
    using OWASP DefectDojo, which can help to consolidate all the various kinds of
    security testing tool outputs to present the results in one dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the process (security release policies, checklists, and testing
    strategies), the technologies (security testing tools and frameworks), and the
    teams' (development, operation, and security team) involvement are the keys to
    ensuring the security of every release.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What security assessment may apply to a new or major application release?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Full assessment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Assessment based on the patch scope
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Assessment based on the third party and the integration interfaces
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The security testing scope is limited to ensure no major security issues
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not one of the self-assessment activities that should
    be done by the product development team?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the OWASP ASVS checklist
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Security awareness training program
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute defined automated security tools, such as ZAP, NMAP, and SQLmap
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Fix major security issues
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not the security testing approach for checking hidden
    communication interfaces?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listening to 0.0.0.0 is forbidden
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Searching for hidden hard-coded secrets, password, or hard key
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Searching for personal information
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Unnecessary system maintenance tools
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following communication protocols is insecure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH v2
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SFTP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TLS 1.2
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Telnet
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following tests is not for DoS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TCP sync flooding
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTP slow
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTP post flooding
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CVE checking
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SAS Cloud Security Framework Audit Methods**: [https://www.sans.org/reading-room/whitepapers/cloud/cloud-security-framework-audit-methods-36922](https://www.sans.org/reading-room/whitepapers/cloud/cloud-security-framework-audit-methods-36922)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Securing Web Application Technologies Checklist**: [https://software-security.sans.org/resources/swat](https://software-security.sans.org/resources/swat)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Server Security Requirements Guide**: [https://www.stigviewer.com/stig/application_server_security_requirements_guide/2018-01-08/](https://www.stigviewer.com/stig/application_server_security_requirements_guide/2018-01-08/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mozilla Checklist for Releases**: [https://wiki.mozilla.org/Releases/Checklist](https://wiki.mozilla.org/Releases/Checklist)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SANS Security Policies**: [https://www.sans.org/security-resources/policies/#template](https://www.sans.org/security-resources/policies/#template)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CWE/SANS Top 25 Most Dangerous Software Errors**: [http://cwe.mitre.org/top25/](http://cwe.mitre.org/top25/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
