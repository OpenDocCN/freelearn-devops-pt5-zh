- en: What Are Containers and Why Should I Use Them?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是容器，为什么我应该使用它们？
- en: This first chapter will introduce you to the world of containers and their orchestration.
    This book starts from the very beginning, in that it assumes that you have no
    prior knowledge of containers, and will give you a very practical introduction
    to the topic.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍容器及其编排的世界。本书从最基础开始，假设你没有任何容器的相关知识，并将为你提供一个非常实用的入门介绍。
- en: In this chapter, we will focus on the software supply chain and the friction
    within it. Then, we'll present containers, which are used to reduce this friction
    and add enterprise-grade security on top of it. We'll also look into how containers
    and the ecosystem around them are assembled. We'll specifically point out the
    distinction between the upstream **Open Source Software** (**OSS**) components,
    united under the code name Moby, that form the building blocks of the downstream
    products of Docker and other vendors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讨论软件供应链及其中的摩擦。接着，我们将介绍容器，它们用于减少这种摩擦并在其上增加企业级的安全性。我们还将探讨容器及其周围生态系统是如何组装的。我们将特别指出，容器的上游**开源软件**（**OSS**）组件，统一以
    Moby 为代号，这些组件构成了 Docker 及其他供应商的下游产品的基石。
- en: 'The chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括以下主题：
- en: What are containers?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: Why are containers important?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么容器如此重要？
- en: What's the benefit for me or for my company?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对我或我的公司有什么好处？
- en: The Moby project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Moby 项目
- en: Docker products
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 产品
- en: Container architecture
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器架构
- en: 'After completing this module, you will be able to do the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本模块后，你将能够做到以下几点：
- en: Explain what containers are, using an analogy such as physical containers, in
    a few simple sentences to an interested layman
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用简单的几句话，使用类似物理容器的类比，向感兴趣的外行人解释容器是什么。
- en: Justify why containers are so important using an analogy such as physical containers
    versus traditional shipping or apartment homes versus single-family homes, and
    so on, to an interested lay person
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类比解释为什么容器如此重要，比如将物理容器与传统运输方式或公寓房屋与独立住宅进行比较，以此向感兴趣的外行人说明。
- en: Name at least four upstream open source components that are used by Docker products,
    such as Docker for Desktop
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列举至少四个被 Docker 产品使用的上游开源组件，比如 Docker for Desktop。
- en: Identify at least three Docker products
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别至少三个 Docker 产品。
- en: What are containers?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: A software container is a pretty abstract thing, so it might help if we start
    with an analogy that should be pretty familiar to most of you. The analogy is
    a shipping container in the transportation industry. Throughout history, people
    have been transporting goods from one location to another by various means. Before
    the invention of the wheel, goods would most probably have been transported in
    bags, baskets, or chests on the shoulders of the humans themselves, or they might
    have used animals such as donkeys, camels, or elephants to transport them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 软件容器是一个相当抽象的概念，因此如果我们从一个大多数人都很熟悉的类比入手，可能会更容易理解。这个类比是运输行业中的货运集装箱。纵观历史，人们一直在通过各种方式运输货物。轮子发明之前，货物很可能是通过袋子、篮子或箱子，由人类自己肩挑，或者他们可能会使用驴、骆驼或大象等动物来运输。
- en: With the invention of the wheel, transportation became a bit more efficient
    as humans built roads that they could move their carts along. Many more goods
    could be transported at a time. When the first steam-driven machines, and later gasoline-driven
    engines, were introduced, transportation became even more powerful. We now transport huge
    amounts of goods on trains, ships, and trucks. At the same time, the types of
    goods became more and more diverse, and sometimes complex to handle.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着轮子的发明，运输变得更加高效，人类修建了可以推动马车的道路，能够一次运输更多的货物。随着第一台蒸汽驱动机器的问世，后续出现的汽油发动机，运输变得更加强大。现在，我们可以通过火车、船舶和卡车运输大量的货物。同时，货物的种类越来越多，有时也变得更加复杂，难以处理。
- en: In all these thousands of years, one thing didn't change, and that was the necessity to
    unload goods at a target location and maybe load them onto another means of transportation.
    Take, for example, a farmer bringing a cart full of apples to a central train station
    where the apples are then loaded onto a train, together with all the apples from many
    other farmers. Or think of a winemaker bringing his barrels of wine with a truck
    to the port where they are unloaded, and then transferred to a ship that will
    transport them overseas.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这几千年的发展中，有一件事始终没有改变，那就是需要在目标地点卸下货物，并可能将它们装上另一种运输工具。比如，农民将一车苹果运到一个中央火车站，那里会将苹果与其他许多农民的苹果一起装上火车。又比如，酿酒师将装满酒桶的卡车运到港口，货物被卸下后再转移到船上，运往海外。
- en: This unloading from one means of transportation and loading onto another means
    of transportation was a really complex and tedious process. Every type of product
    was packaged in its own way and thus had to be handled in its own particular way.
    Also, loose goods faced the risk of being stolen by unethical workers or damaged
    in the process of being handled.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将货物从一种运输工具卸下再装上另一种运输工具的过程，曾经是一个非常复杂且繁琐的流程。每种类型的产品都有自己独特的包装方式，因此需要以特定的方式处理。此外，散装货物还面临着被不道德工人偷窃或在处理过程中损坏的风险。
- en: Then, there came containers and they totally revolutionized the transportation
    industry. A container is just a metallic box with standardized dimensions. The
    length, width, and height of each container is the same. This is a very important
    point. Without the World agreeing on a standard size, the whole container thing
    would not have been as successful as it is now.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，集装箱出现了，它们彻底改变了运输行业。集装箱只是一个具有标准化尺寸的金属盒子。每个集装箱的长度、宽度和高度都是一样的。这是一个非常重要的点。如果全世界没有就标准尺寸达成一致，集装箱的成功就不会像现在这样。
- en: Now, with standardized containers, companies who want to have their goods transported from
    A to B package those goods into these containers. Then, they call a shipper, which comes
    with a standardized means for transportation. This can be a truck that can load
    a container or a train whose wagons can each transport one or several containers.
    Finally, we have ships that are specialized in transporting huge numbers of containers.
    Shippers never need to unpack and repackage goods. For a shipper, a container
    is just a black box, and they are not interested in what is in it, nor should
    they care in most cases. It is just a big iron box with standard dimensions. Packaging
    goods into containers is now fully delegated to the parties who want to have their
    goods shipped, and they should know how to handle and package those goods.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，借助标准化的集装箱，想要将货物从A地运输到B地的公司，会将这些货物装入这些集装箱。然后，他们会联系一个运输公司，运输公司会提供标准化的运输工具。这可以是一个能装载集装箱的卡车，或者是一个每个车厢可以运输一个或多个集装箱的火车。最后，我们有专门用来运输大量集装箱的船只。运输公司无需拆卸或重新包装货物。对于运输公司来说，集装箱只是一个黑色的盒子，他们对里面的东西不感兴趣，大多数情况下也不需要关心。它只是一个具有标准尺寸的大铁盒子。现在，包装货物进入集装箱的任务完全交由那些希望将货物运输出去的各方，他们应该知道如何处理和包装这些货物。
- en: Since all containers have the same agreed-upon shape and dimensions, shippers
    can use standardized tools to handle containers; that is, cranes that unload containers,
    say from a train or a truck, and load them onto a ship and vice versa. One type
    of crane is enough to handle all the containers that come along over time. Also,
    the means of transportation can be standardized, such as container ships, trucks,
    and trains.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有集装箱都具有相同的形状和尺寸，运输公司可以使用标准化的工具来处理集装箱；例如，起重机可以将集装箱从火车或卡车上卸下，再装到船上，反之亦然。只需一种类型的起重机，就可以处理所有过来的集装箱。此外，运输工具也可以标准化，比如集装箱船、卡车和火车。
- en: Because of all this standardization, all the processes in and around shipping
    goods could also be standardized and thus made much more efficient than they were
    before the age of containers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正是由于这一切标准化，所有与货物运输相关的流程也得以标准化，从而比集装箱时代之前要高效得多。
- en: Now, you should have a good understanding of why shipping containers are so important
    and why they revolutionized the whole transportation industry. I chose this analogy
    purposefully, since the software containers that we are going to introduce here fulfill
    the exact same role in the so-called software supply chain that shipping containers
    do in the supply chain of physical goods.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该已经很好地理解了为什么集装箱运输如此重要，以及它为什么能彻底改变整个运输行业。我故意选择这个类比，因为我们将要介绍的软件容器在所谓的软件供应链中，正好履行了与运输行业中集装箱相同的角色。
- en: In the old days, developers would develop a new application. Once that application
    was completed in their eyes, they would hand that application over to the operations
    engineers, who were then supposed to install it on the production servers and
    get it running. If the operations engineers were lucky, they even got a somewhat
    accurate document with installation instructions from the developers. So far,
    so good, and life was easy.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，开发者会开发一个新的应用程序。一旦他们认为应用程序完成了，就会将其交给运维工程师，后者负责将其安装到生产服务器上并启动。如果运维工程师足够幸运，他们甚至能从开发者那里获得一份相对准确的安装文档。到此为止，一切顺利，生活也变得简单。
- en: But things get a bit out of hand when, in an enterprise, there are many teams
    of developers that create quite different types of application, yet all of them
    need to be installed on the same production servers and kept running there. Usually,
    each application has some external dependencies, such as which framework it was
    built on, what libraries it uses, and so on. Sometimes, two applications use the
    same framework but in different versions that might or might not be compatible
    with each other. Our operations engineer's life became much harder over time.
    They had to be really creative with how they could load their ship, (their servers,)
    with different applications without breaking something.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但当一个企业中有多个开发团队，开发出不同类型的应用，而这些应用却都需要安装在同一台生产服务器上并保持运行时，事情就变得有些失控了。通常，每个应用都有一些外部依赖，例如它基于的框架、所使用的库等等。有时，两个应用使用相同的框架，但版本不同，这可能会导致兼容性问题。我们的运维工程师的工作变得越来越困难。他们必须非常有创意地想办法在不出问题的情况下将不同的应用加载到（他们的服务器）上。
- en: Installing a new version of a certain application was now a complex project
    on its own, and often needed months of planning and testing. In other words, there
    was a lot of friction in the software supply chain. But these days, companies
    rely more and more on software, and the release cycles need to become shorter
    and shorter. We cannot afford to just release twice a year or so anymore. Applications
    need to be updated in a matter of weeks or days, or sometimes even multiple times
    per day. Companies that do not comply risk going out of business, due to the lack
    of agility. So, what's the solution?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装某个应用的新版本如今已经变成了一个复杂的项目，通常需要几个月的规划和测试。换句话说，软件供应链中存在很多摩擦。然而，现在的公司越来越依赖软件，发布周期需要变得越来越短。我们已经无法再只每年发布一两次了。应用需要在几周或几天内更新，有时甚至是每天多次更新。不遵守这一点的公司，因缺乏敏捷性而面临破产的风险。那么，解决方案是什么呢？
- en: One of the first approaches was to use **virtual machines** (**VMs**). Instead
    of running multiple applications, all on the same server, companies would package
    and run a single application on each VM. With this, all the compatibility problems
    were gone and life seemed to be good again. Unfortunately, that happiness didn't
    last long. VMs are pretty heavy beasts on their own since they all contain a full-blown
    operating system such as Linux or Windows Server, and all that for just a single
    application. This is just as if you were in the transportation industry and were
    using a whole ship just to transport a single truckload of bananas. What a waste!
    That could never be profitable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的一个解决方法是使用**虚拟机**（**VMs**）。公司不再在同一台服务器上运行多个应用，而是将每个应用打包并在各自的虚拟机上运行。通过这种方式，所有的兼容性问题都解决了，生活似乎恢复了平静。不幸的是，这种幸福没有持续多久。虚拟机本身非常“沉重”，因为每个虚拟机都包含一个完整的操作系统，如Linux或Windows
    Server，而这一切只是为了运行单个应用。这就像你在运输行业中，使用整艘船只来运输一车香蕉。真是浪费！这种方式永远无法盈利。
- en: The ultimate solution to this problem was to provide something that is much
    more lightweight than VMs, but is also able to perfectly encapsulate the goods
    it needs to transport. Here, the goods are the actual application that has been
    written by our developers, plus – and this is important – all the external dependencies
    of the application, such as its framework, libraries, configurations, and more.
    This holy grail of a software packaging mechanism was the *Docker container*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的终极方案是提供比虚拟机（VMs）更轻量级的东西，但又能够完美封装需要运输的物品。在这里，物品指的是由我们的开发者编写的实际应用程序，并且——这点很重要——还包括所有应用程序的外部依赖项，如框架、库、配置等。这种软件包装机制的“圣杯”就是*Docker容器*。
- en: Developers use Docker containers to package their applications, frameworks,
    and libraries into them, and then they ship those containers to the testers or 
    operations engineers. To testers and operations engineers, a container is just
    a black box. It is a standardized black box, though. All containers, no matter
    what application runs inside them, can be treated equally. The engineers know
    that, if any container runs on their servers, then any other containers should
    run too. And this is actually true, apart from some edge cases, which always exist.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者使用Docker容器将他们的应用程序、框架和库打包到其中，然后将这些容器交给测试人员或运维工程师。对于测试人员和运维工程师来说，容器只是一个黑盒子。尽管如此，它是一个标准化的黑盒子。所有容器，不管内部运行什么应用，都可以平等对待。工程师知道，如果任何容器能够在他们的服务器上运行，那么其他容器也应该能运行。除了一些总会存在的边缘情况外，这一点是成立的。
- en: Thus, Docker containers are a means to package applications and their dependencies
    in a standardized way. Docker then coined the phrase *Build, ship, and run anywhere*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Docker容器是一种以标准化方式打包应用程序及其依赖项的手段。然后，Docker创造了“*构建、运输和随处运行*”这一说法。
- en: Why are containers important?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么容器如此重要？
- en: These days, the time between new releases of an application become shorter and
    shorter, yet the software itself doesn't become any simpler. On the contrary,
    software projects increase in complexity. Thus, we need a way to tame the beast
    and simplify the software supply chain.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现如今，应用程序的更新发布周期越来越短，但软件本身却没有变得更简单。相反，软件项目的复杂性不断增加。因此，我们需要一种方法来驯服这一“猛兽”，简化软件供应链。
- en: Also, every day, we hear that cyber-attacks are on the rise. Many well-known companies
    are and have been affected by security breaches. Highly sensitive customer data
    gets stolen during such events, such as social security numbers, credit card information,
    and more. But not only customer data is compromised – sensitive company secrets
    are stolen too.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们每天都听到网络攻击正在上升。许多知名公司已经或曾经受到过安全漏洞的影响。像社会安全号码、信用卡信息等高度敏感的客户数据在此类事件中被盗取。但不仅仅是客户数据受到威胁——公司的敏感机密也同样被盗取。
- en: Containers can help in many ways. First of all, Gartner found that applications
    running in a container are more secure than their counterparts not running in
    a container. Containers use Linux security primitives such as Linux kernel *namespaces*
    to sandbox different applications running on the same computers and **control
    groups** (**cgroups**) in order to avoid the noisy-neighbor problem, where one
    bad application is using all the available resources of a server and starving
    all other applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以在许多方面提供帮助。首先，Gartner发现，运行在容器中的应用比那些没有运行在容器中的应用更安全。容器利用Linux安全原语，如Linux内核*命名空间*，将运行在同一台计算机上的不同应用程序进行沙箱化，同时使用**控制组**（**cgroups**）来避免“噪声邻居”问题，即某个不良应用占用了服务器的所有可用资源，导致其他应用无法运行。
- en: Due to the fact that container images are immutable, it is easy to have them
    scanned for **common vulnerabilities and exposures** (**CVEs**), and in doing
    so, increase the overall security of our applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于容器镜像是不可变的，因此很容易对其进行扫描，以检测**常见漏洞和暴露**（**CVE**），从而提高我们应用程序的整体安全性。
- en: Another way to make our software supply chain more secure is to have our containers
    use a content trust. A content trust basically ensures that the author of a container
    image is who they pretend to be and that the consumer of the container image has
    a guarantee that the image has not been tampered with in transit. The latter is
    known as a **man-in-the-middle **(**MITM**) attack.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们的软件供应链更安全的另一种方法是让容器使用内容信任。内容信任基本上确保容器镜像的作者是真正的身份，并且容器镜像的消费者能够保证镜像在传输过程中没有被篡改。这种攻击被称为**中间人攻击**（**MITM**）。
- en: Everything I have just said is, of course, technically also possible without
    using containers, but since containers introduce a globally accepted standard,
    they make it so much easier to implement these best practices and enforce them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚才所说的一切，当然在技术上也可以在不使用容器的情况下实现，但由于容器引入了一个全球公认的标准，它们使得实施这些最佳实践并加以执行变得更加容易。
- en: OK, but security is not the only reason why containers are important. There
    are other reasons too.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，但安全并不是容器重要的唯一原因，还有其他原因。
- en: One is the fact that containers make it easy to simulate a production-like environment,
    even on a developer's laptop. If we can containerize any application, then we can
    also containerize, say, a database such as Oracle or MS SQL Server. Now, everyone
    who has ever had to install an Oracle database on a computer knows that this is
    not the easiest thing to do, and it takes up a lot of precious space on your computer.
    You wouldn't want to do that to your development laptop just to test whether the
    application you developed really works end-to-end. With containers at hand, we
    can run a full-blown relational database in a container as easily as saying 1,
    2, 3\. And when we're done with testing, we can just stop and delete the container
    and the database will be gone, without leaving a trace on our computer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个原因是容器使得即使在开发者的笔记本电脑上，也能轻松模拟类似生产环境的情况。如果我们能容器化任何应用程序，那么我们也能容器化一个数据库，比如 Oracle
    或 MS SQL Server。现在，任何曾经在计算机上安装过 Oracle 数据库的人都知道，这并不是一件容易的事，而且它会占用你电脑上大量宝贵的空间。你肯定不想为了测试你开发的应用程序是否真正能端到端运行而在开发笔记本上做这样的操作。有了容器，我们可以像说
    1、2、3 一样，轻松地在容器中运行一个完整的关系型数据库。而且当测试完成后，我们只需停止并删除容器，数据库也会消失，不会在我们的电脑上留下任何痕迹。
- en: Since containers are very lean compared to VMs, it is not uncommon to have many
    containers running at the same time on a developer's laptop without overwhelming
    the laptop.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于与虚拟机相比，容器非常精简，因此在开发者的笔记本电脑上同时运行多个容器而不使电脑超负荷是很常见的情况。
- en: 'A third reason why containers are important is that operators can finally concentrate
    on what they are really good at: provisioning the infrastructure and running and
    monitoring applications in production. When the applications they have to run
    on a production system are all containerized, then operators can start to standardize
    their infrastructure. Every server becomes just another Docker host. No special
    libraries or frameworks need to be installed on those servers, just an OS and
    a container runtime such as Docker.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 容器重要的第三个原因是，运维人员终于可以专注于他们擅长的事情：提供基础设施并在生产环境中运行和监控应用程序。当他们需要在生产系统中运行的所有应用程序都是容器化的时，运维人员就可以开始标准化他们的基础设施。每台服务器就变成了另一个
    Docker 主机。这些服务器上无需安装特殊的库或框架，只需要一个操作系统和容器运行时，比如 Docker。
- en: Also, operators do not have to have intimate knowledge of the internals of applications
    anymore, since those applications run self-contained in containers that ought
    to look like black boxes to them, similar to how shipping containers look to the
    personnel in the transportation industry.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，运维人员不再需要深入了解应用程序的内部结构，因为这些应用程序在容器中独立运行，这些容器对他们来说应该就像黑匣子一样，类似于运输行业中的货运集装箱对工作人员的意义。
- en: What's the benefit for me or for my company?
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，这对我或我的公司有什么好处呢？
- en: Somebody once said that, today, every company of a certain size has to acknowledge
    that they need to be a software company. In this sense, a modern bank is a software
    company that happens to specialize in the business of finance. Software runs all
    businesses, period. As every company becomes a software company, there is a need
    to establish a software supply chain. For the company to remain competitive, their
    software supply chain has to be secure and efficient. Efficiency can be achieved
    through thorough automation and standardization. But in all three areas – security,
    automation, and standardization – containers have been shown to shine. Large and
    well-known enterprises have reported that, when containerizing existing legacy
    applications (many call them traditional applications) and establishing a fully automated
    software supply chain based on containers, they can reduce the cost for the maintenance
    of those mission-critical applications by a factor of 50% to 60% and they can reduce
    the time between new releases of these traditional applications by up to 90%.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有人曾经说过，今天每个一定规模的公司都必须认识到，他们需要成为一家软件公司。从这个意义上讲，现代银行是一家软件公司，恰好专注于金融业务。软件运行所有的业务，没错。随着每个公司都成为软件公司，建立软件供应链成为一种需求。为了保持竞争力，公司的软件供应链必须既安全又高效。效率可以通过全面的自动化和标准化来实现。但是，在安全、自动化和标准化这三个领域中，容器技术已经展现出卓越的优势。大型和知名企业报告称，当它们将现有的传统应用程序（许多人称之为旧版应用程序）容器化，并建立基于容器的完全自动化软件供应链时，能够将这些关键应用程序的维护成本降低50%到60%，并且能够将这些传统应用程序的新版本发布之间的时间缩短最多90%。
- en: That being said, the adoption of container technologies saves these companies
    a lot of money, and at the same time it speeds up the development process and
    reduces the time to market.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，采用容器技术为这些公司节省了大量资金，同时也加快了开发进程并缩短了上市时间。
- en: The Moby project
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Moby项目
- en: Originally, when Docker (the company) introduced Docker containers, everything
    was open source. Docker didn't have any commercial products at this time. The
    Docker engine that the company developed was a monolithic piece of software. It
    contained many logical parts, such as the container runtime, a network library,
    a **RESTful** (**REST**) API, a command-line interface, and much more.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，当Docker（公司）推出Docker容器时，一切都是开源的。那个时候，Docker没有任何商业产品。公司开发的Docker引擎是一个单体软件，包含了许多逻辑部分，例如容器运行时、网络库、**RESTful**（**REST**）API、命令行界面等等。
- en: Other vendors or projects such as Red Hat or Kubernetes were using the Docker
    engine in their own products, but most of the time, they were only using part
    of its functionality. For example, Kubernetes did not use the Docker network library
    for the Docker engine but provided its own way of networking. Red Hat, in turn,
    did not update the Docker engine frequently and preferred to apply unofficial patches
    to older versions of the Docker engine, yet they still called it the Docker engine.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其他供应商或项目，如Red Hat或Kubernetes，曾将Docker引擎应用于自己的产品中，但大多数情况下，他们只是使用了Docker引擎的部分功能。例如，Kubernetes并没有使用Docker引擎的网络库，而是提供了自己的网络方式。Red
    Hat则更倾向于不频繁更新Docker引擎，而是为Docker引擎的旧版本应用非官方补丁，但他们仍然称之为Docker引擎。
- en: Out of all these reasons, and many more, the idea emerged that Docker had to
    do something to clearly separate the Docker open source part from the Docker commercial
    part. Furthermore, the company wanted to prevent competitors from using and abusing
    the name Docker for their own gains. This was the main reason why the Moby project
    was born. It serves as an umbrella for most of the open source components Docker
    developed and continues to develop. These open source projects do not carry the
    name Docker in them anymore.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些原因，以及更多的原因中，出现了这样一个想法：Docker必须采取措施，明确区分Docker的开源部分与Docker的商业部分。此外，公司还希望防止竞争对手利用并滥用Docker这一名称谋取私利。这就是Moby项目诞生的主要原因。Moby项目作为一个伞式项目，涵盖了Docker开发并持续开发的大部分开源组件。这些开源项目现在不再使用Docker这个名称。
- en: The Moby project provides components that are used for image management, secret
    management, configuration management, and networking and provisioning, to name
    just a few. Also, part of the Moby project is special Moby tools that are, for
    example, used to assemble components into runnable artifacts.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Moby项目提供了用于镜像管理、秘密管理、配置管理、网络和配置等方面的组件，举几个例子。同时，Moby项目的一部分是特殊的Moby工具，例如，用于将组件组装成可运行的工件。
- en: Some components that technically belong to the Moby project have been donated
    by Docker to the Cloud-Native Computing Foundation (CNCF) and thus do not appear
    in the list of components anymore. The most prominent ones are `notary`, `containerd`,
    and `runc`, where the first is used for content trust and the latter two form
    the container runtime.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一些技术上属于 Moby 项目的组件已被 Docker 捐赠给云原生计算基金会（CNCF），因此这些组件不再出现在组件列表中。最显著的包括 `notary`、`containerd`
    和 `runc`，其中 `notary` 用于内容信任，后两个则组成了容器运行时。
- en: Docker products
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 产品
- en: Docker currently separates its product lines into two segments. There is the
    **Community** **Edition** (**CE**), which is closed-source yet completely free,
    and then there is the **Enterprise Edition** (**EE**), which is also closed-source
    and needs to be licensed on a yearly basis. These enterprise products are backed
    by 24/7 support and are supported by bug fixes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 目前将其产品线分为两个部分。一个是**社区版**（**CE**），它是闭源的但完全免费；另一个是**企业版**（**EE**），它也是闭源的，需要按年许可。这些企业产品提供
    24/7 支持并包含错误修复。
- en: Docker CE
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker CE
- en: Part of the Docker Community Edition are products such as the Docker Toolbox
    and Docker for Desktop with its editions for Mac and Windows. All these products
    are mainly targeted at developers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 社区版的一部分包括像 Docker Toolbox 和 Docker for Desktop 这样适用于 Mac 和 Windows 的版本。这些产品主要面向开发人员。
- en: Docker for Desktop is an easy-to-install desktop application that can be used
    to build, debug, and test Dockerized applications or services on a macOS or Windows
    machine. Docker for macOS and Docker for Windows are complete development environments
    that are deeply integrated with their respective hypervisor framework, network,
    and filesystem. These tools are the fastest and most reliable way to run Docker on
    a Mac or Windows.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for Desktop 是一个易于安装的桌面应用程序，可以在 macOS 或 Windows 机器上构建、调试和测试 Docker 化的应用程序或服务。Docker
    for macOS 和 Docker for Windows 是完整的开发环境，深度集成了各自的虚拟化框架、网络和文件系统。这些工具是运行 Docker 于
    Mac 或 Windows 上最快且最可靠的方式。
- en: Under the CE umbrella, there are also two products that are more geared toward
    operations engineers. These products are Docker for Azure and Docker for AWS.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CE 版下，还有两个更偏向运维工程师的产品。这些产品是 Docker for Azure 和 Docker for AWS。
- en: For example, with Docker for Azure, which is a native Azure application, you
    can set up Docker in a few clicks, optimized for and integrated with underlying
    Azure **Infrastructure as a Service** (**IaaS**) services. It helps operations
    engineers accelerate time to productivity when building and running Docker applications
    in Azure.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用原生 Azure 应用程序的 Docker for Azure，您可以通过几次点击即可在 Azure 上设置 Docker，它已优化并与底层
    Azure **基础设施即服务**（**IaaS**）服务集成。它帮助运维工程师在 Azure 中构建和运行 Docker 应用时加速生产力。
- en: Docker for AWS works very similarly but for Amazon's cloud.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for AWS 的工作方式非常相似，但它是为 Amazon 云设计的。
- en: Docker EE
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker EE
- en: The Docker Enterprise Edition consists of the **Universal Control Plane** (**UCP**)
    and the **Docker Trusted Registry** (**DTR**), both of which run on top of Docker
    Swarm. Both are swarm applications. Docker EE builds on top of the upstream components
    of the Moby project and adds enterprise-grade features such as **role-based access
    control** (**RBAC**), multi-tenancy, mixed clusters of Docker swarm and Kubernetes,
    web-based UI, and content trust, as well as image scanning on top.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 企业版由**统一控制平面**（**UCP**）和**Docker 受信注册表**（**DTR**）组成，它们都运行在 Docker Swarm
    之上。这两个组件都是 Swarm 应用程序。Docker EE 基于 Moby 项目的上游组件，并添加了企业级功能，如**基于角色的访问控制**（**RBAC**）、多租户、Docker
    Swarm 和 Kubernetes 混合集群、基于 Web 的 UI、内容信任以及图像扫描等。
- en: Container architecture
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器架构
- en: 'Now, let''s discuss how a system that can run Docker containers is designed
    at a high level. The following diagram illustrates what a computer that Docker
    has been installed on looks like. Note that a computer that has Docker installed
    on it is often called a Docker host because it can run or host Docker containers:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论一下一个能够运行 Docker 容器的系统是如何设计的。下图展示了已安装 Docker 的计算机的外观。请注意，安装了 Docker 的计算机通常被称为
    Docker 主机，因为它可以运行或托管 Docker 容器：
- en: '![](img/07669239-7cef-4bc6-ab0e-2e70c47473e4.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07669239-7cef-4bc6-ab0e-2e70c47473e4.png)'
- en: High-level architecture diagram of the Docker engine
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 引擎的高级架构图
- en: 'In the preceding diagram, we can see three essential parts:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图中，我们可以看到三个关键部分：
- en: On the bottom, we have the **Linux operating system**
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部是**Linux 操作系统**
- en: In the middle, in dark gray, we have the container runtime
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在中间，深灰色部分是容器运行时
- en: On the top, we have the **Docker engine**
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在顶部，我们有 **Docker 引擎**
- en: Containers are only possible due to the fact that the Linux OS provides some
    primitives, such as namespaces, control groups, layer capabilities, and more,
    all of which are leveraged in a very specific way by the container runtime and
    the Docker engine. Linux kernel namespaces, such as **process ID** (**pid**) namespaces
    or **network** (**net**) namespaces, allow Docker to encapsulate or sandbox processes
    that run inside the container. **Control Groups** make sure that containers cannot
    suffer from the noisy-neighbor syndrome, where a single application running in
    a container can consume most or all of the available resources of the whole Docker
    host. **Control Groups** allow Docker to limit the resources, such as CPU time
    or the amount of RAM, that each container is allocated.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 容器之所以可能，是因为 Linux 操作系统提供了一些基本功能，比如命名空间、控制组、层能力等，所有这些都被容器运行时和 Docker 引擎以非常特定的方式利用。Linux
    内核命名空间，如**进程 ID**（**pid**）命名空间或**网络**（**net**）命名空间，允许 Docker 封装或沙箱化在容器内运行的进程。**控制组**确保容器不会受到“噪音邻居”现象的影响，即一个在容器中运行的单个应用程序可以消耗整个
    Docker 主机的大部分或所有可用资源。**控制组**允许 Docker 限制每个容器分配的资源，如 CPU 时间或 RAM 数量。
- en: The container runtime on a Docker host consists of `containerd` and `runc`.
    `runc` is the low-level functionality of the container runtime, while `containerd`,
    which is based on `runc`, provides higher-level functionality. Both are open source
    and have been donated by Docker to the CNCF.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 主机上的容器运行时由 `containerd` 和 `runc` 组成。`runc` 是容器运行时的低级功能，而基于 `runc` 的 `containerd`
    提供了更高级的功能。两者都是开源的，并且已由 Docker 捐赠给 CNCF。
- en: The container runtime is responsible for the whole life cycle of a container.
    It pulls a container image (which is the template for a container) from a registry
    if necessary, creates a container from that image, initializes and runs the container,
    and eventually stops and removes the container from the system when asked.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时负责容器的整个生命周期。如果需要，它会从注册表中拉取容器镜像（容器的模板），基于该镜像创建容器，初始化并运行容器，最终在需要时停止并从系统中移除容器。
- en: The **Docker engine** provides additional functionality on top of the container
    runtime, such as network libraries or support for plugins. It also provides a
    REST interface over which all container operations can be automated. The Docker
    command-line interface that we will use frequently in this book is one of the
    consumers of this REST interface.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker 引擎** 在容器运行时之上提供了额外的功能，例如网络库或插件支持。它还提供了一个 REST 接口，通过该接口可以自动化所有容器操作。本书中我们将频繁使用的
    Docker 命令行界面就是这个 REST 接口的消费者之一。'
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how containers can massively reduce friction in the
    software supply chain and, on top of that, make the supply chain much more secure.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了容器如何大大减少软件供应链的摩擦，并且在此基础上，使供应链更加安全。
- en: In the next chapter, we will learn how to prepare our personal or working environment
    such as that we can work efficiently and effectively with Docker. So, stay tuned.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何准备个人或工作环境，以便我们能够高效且有效地使用 Docker。所以，请继续关注。
- en: Questions
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Please answer the following questions to assess your learning progress:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请回答以下问题以评估你的学习进度：
- en: Which statements are correct (multiple answers are possible)?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些说法是正确的（可能有多个答案）？
- en: A. A container is kind of a lightweight VM
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: A. 容器是一种轻量级虚拟机
- en: B. A container only runs on a Linux host
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: B. 容器仅在 Linux 主机上运行
- en: C. A container can only run one process
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: C. 容器只能运行一个进程
- en: D. The main process in a container always has PID 1
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: D. 容器中的主进程始终具有 PID 1
- en: E. A container is one or more processes encapsulated by Linux namespaces and
    restricted by cgroups
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: E. 容器是一个或多个被 Linux 命名空间封装并受到 cgroups 限制的进程
- en: In your own words, maybe by using analogies, explain what a container is.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你自己的话，也许通过类比，解释一下什么是容器。
- en: Why are containers considered to be a game-changer in IT? Name three or four reasons.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么容器被认为是 IT 领域的变革者？列举三到四个原因。
- en: 'What does it mean when we claim: *If a container runs on a given platform,
    then it runs anywhere...?* Name two to three reasons why this is true.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们说：“如果一个容器在给定平台上运行，那么它可以在任何地方运行……”这是什么意思？列举两到三个原因，说明为什么这是正确的。
- en: Docker containers are only really useful for modern greenfield applications
    based on microservices. Please justify your answer.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker 容器仅对基于微服务的现代绿色田野应用程序非常有用。请解释你的答案。
- en: A. True
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: A. 正确
- en: B. False
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: B. 错误
- en: How much does a typical enterprise save when containerizing its legacy applications?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将企业的传统应用程序容器化后，通常能节省多少成本？
- en: A. 20%
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: A. 20%
- en: B. 33%
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: B. 33%
- en: C. 50%
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: C. 50%
- en: D. 75%
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: D. 75%
- en: Which two core concepts of Linux are containers based on?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器基于 Linux 的哪两个核心概念？
- en: Further reading
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following is a list of links that lead to more detailed information regarding
    the topics we discussed in this chapter:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些链接，带有更多关于本章讨论内容的详细信息：
- en: Docker overview: [https://docs.docker.com/engine/docker-overview/](https://docs.docker.com/engine/docker-overview/)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 概述：[https://docs.docker.com/engine/docker-overview/](https://docs.docker.com/engine/docker-overview/)
- en: 'The Moby project: [https://mobyproject.org/](https://mobyproject.org/)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Moby 项目：[https://mobyproject.org/](https://mobyproject.org/)
- en: 'Docker products: [https://www.docker.com/get-started](https://www.docker.com/get-started)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 产品：[https://www.docker.com/get-started](https://www.docker.com/get-started)
- en: Cloud-Native Computing Foundation: [https://www.cncf.io/](https://www.cncf.io/)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生计算基金会：[https://www.cncf.io/](https://www.cncf.io/)
- en: containerd – an industry-standard container runtime: [https://containerd.io/](https://containerd.io/)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: containerd – 行业标准的容器运行时：[https://containerd.io/](https://containerd.io/)
