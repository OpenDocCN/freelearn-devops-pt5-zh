- en: Chapter 2. Application Container Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we will scale one of the containers we built into a multi-tier
    setup. This will involve splitting the application into different logical sections.
    For example, we could have an application running on a Docker container and the
    application's data in a separate database container; however, both should work
    as a single entity. For this, we will use Docker's tool for running multi-container
    applications. The tool goes by the name `docker-compose`. In summary, `docker-compose`
    is the tool used for defining and running multi-container Docker applications.
  prefs: []
  type: TYPE_NORMAL
- en: Lesson Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By the end of this lesson, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Get an overview of a multi-container application setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work through the `docker-compose` file and CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage multiple containers and distributed application bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a network with `docker-compose`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle and debug the different application layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The docker-compose Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin the lesson by looking at what a multi-container setup is, why it
    is important, and how Docker, with the tool `docker-compose`, works like a charm
    in such scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have recently been introduced to how applications work, with their separate
    elements: frontend, backend, and database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run such a multi-tier application using Docker, one would need to run the
    following commands to spin up the containers in different terminal sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can run `docker run` with (`-d`) as detached to prevent us from running
    the three commands in separate sessions, for example: `docker run <front-end>
    -d`'
  prefs: []
  type: TYPE_NORMAL
- en: That said, it even becomes particularly tasking linking different containers
    (networking).
  prefs: []
  type: TYPE_NORMAL
- en: '`docker-compose` comes in to save the day. We can define and run multi-containers
    from one file - `docker-compose.yml`. In the following topics, we''ll discuss
    this further. First, let''s install it.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing docker-compose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you went through the installation of Docker in *Lesson 1*, *Images and Containers,*
    `docker-compose` was most likely installed with Docker. To confirm this, run `docker-compose`
    in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the command is recognized, you should have an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing docker-compose](img/image02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Windows users should install the Community Edition of Docker to install `docker-compose`
    alongside it. Docker Toolbox includes `docker-compose` in its installation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For further `docker-compose` installation steps, check out the documentation
    at: [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'While on this subject, please note the various ways of uninstalling it. In
    order to uninstall the program:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Programs and Features**.
  prefs: []
  type: TYPE_NORMAL
- en: Look for Docker, right-click, and **Uninstall**.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of a Multi-Container Application Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous lesson, we introduced Docker and containerization. We ran sample
    Python and JavaScript scripts as demonstrations of how applications can be containerized
    and how images can be built. We are now ready to run an application that goes
    beyond that.
  prefs: []
  type: TYPE_NORMAL
- en: In a Dockerfile, every line describes a layer. The union filesystem used in
    Docker allows different directories to transparently overlay, forming a single,
    coherent filesystem. The foundational layer is always an image which you build
    upon. Each additional line with a command, say, RUN, CMD, and so on, adds a layer
    to it. The advantage of layers is that as long as the layer has not been modified,
    it will not bother building that part of the image. Secondly, as an image is pulled
    from a Docker image registry, it is pulled in layers, therefore mitigating issues
    such as connection cuts during pulling and pushing of images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many applications are built under a common structure: **frontend, backend**,
    and **database**. Let''s break this down further and understand how we can set
    this up.'
  prefs: []
  type: TYPE_NORMAL
- en: The Frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you open a web application, the page that you see is part of the frontend.
    Sometimes, the frontend has the controller (the logical end) and the view layer
    (the dumb end). The styling of the layout and content (Read, HTML, and CSS) is
    the view layer. The content here is managed by the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller influences what is presented in the view layer based on the
    user''s action and/or database changes. Take, for example, an application like
    Twitter: if someone follows you, your data has changed. The controller will pick
    up this change and update the view layer with the new number of followers.'
  prefs: []
  type: TYPE_NORMAL
- en: The Backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might have heard of the term Model-view-controller (MVC) **.** The model
    sits on the backend side of things in an application. With the earlier example
    of Twitter, the model does not concern itself with the HTML or its layout. It
    handles the state of the application: the number of followers and people you are
    following, the tweets, images, videos, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a summary of what the backend layer includes. The backend mainly deals
    with the application's logic. This includes the code that is manipulating the
    database; that means all queries come from the backend. However, requests come
    from the **frontend**. This happens when a user clicks a button, for example.
  prefs: []
  type: TYPE_NORMAL
- en: You might have also heard of the term API. API is an acronym standing for **Application
    Program Interface**. This also sits at the backend. APIs expose the internal workings
    of an application.
  prefs: []
  type: TYPE_NORMAL
- en: This means the API can also be an application's backend or logical layer.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use the Twitter example so that this is clear. Actions such as posting
    a tweet and searching for tweets can easily be in an API as methods which can
    be called from any frontend application if the API is made public.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Docker and `docker-compose` CLIs are actually API calls, for instance when
    interacting with external resources or content, such as Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: The Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The database contains organized data (information) that is easily accessible,
    managed, and updated. We have file-based databases and server-based databases.
  prefs: []
  type: TYPE_NORMAL
- en: Server-based databases involve a server process running, accepting requests
    and reading and writing the database files themselves. The databases could be
    in the cloud, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Server-based databases are hosted on virtual hosts, mostly on cloud platforms
    such as Google Cloud Platform and Amazon Web Services. Examples are Amazon RDS
    and Google Cloud SQL for PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obtain server-based databases from the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://aws.amazon.com/rds/postgresql/](https://aws.amazon.com/rds/postgresql/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/sql/docs/postgres](https://cloud.google.com/sql/docs/postgres)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a nutshell, development has always involved building application layers,
    and shipping has always been a hassle considering the price of the cloud platforms
    and development and operations (DevOps, for short) involved.
  prefs: []
  type: TYPE_NORMAL
- en: Docker and `docker-compose` help us manage all our application components as
    a single bundle, which is cheaper, faster, and easier to manage. `docker-compose`
    helps us coordinate all the application layers through a single file and in very
    simple definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we conclude this overview, it is important to know that developers, over
    time, have coined different stack variations to summarize the frontend, backend,
    and database structure of their apps. Here''s a list of them with their meaning
    (we will not delve further than this during this course):'
  prefs: []
  type: TYPE_NORMAL
- en: PREN - PostgresDB, React, Express, Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MEAN - MongoDB, Express, Angular, Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPEN - VueJS, PostgresDB, Express, Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAMP - Linux, Apache, MySQL, PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to know that applications are structured in this manner to manage
    separation of concerns.
  prefs: []
  type: TYPE_NORMAL
- en: With the knowledge of application structures, we can get to the `docker-compose`
    CLI and put this knowledge to work.
  prefs: []
  type: TYPE_NORMAL
- en: Using docker-compose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using `docker-compose` requires three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Build an application's environment as an image using a `Dockerfile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `docker-compose.yml` file to define the services your app requires to
    run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `docker-compose up` to run the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`docker-compose` is a **command-line interface (CLI)** just like the Docker
    CLI. Running `docker-compose` gives a list of commands and how to use each.'
  prefs: []
  type: TYPE_NORMAL
- en: We went through images in the previous lesson, so step 1 is checked off.
  prefs: []
  type: TYPE_NORMAL
- en: Some `docker-compose` versions are incompatible with some Docker versions.
  prefs: []
  type: TYPE_NORMAL
- en: We'll dwell on step 2 for some time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `docker-compose` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One that runs the two images we created in our previous lesson:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Using docker-compose](img/image02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer the complete code placed at `Code/Lesson-2/example-docker-compose.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://goo.gl/11rwXV](https://goo.gl/11rwXV) to access the code.
  prefs: []
  type: TYPE_NORMAL
- en: docker-compose first run
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new directory and name it `py-js`; you can have a different directory
    name if you prefer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file in the directory and name it `docker-compose.yml`. Copy the
    content of the image above or the example shared on example-`docker-compose.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the command `docker-compose up` from the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice the outputs of running both `js-docker` and `python-docker`. This is
    also because we have both images built locally from the previous lesson.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have the images, running `docker-compose up` will result in an
    error or an attempt to pull it from Docker Hub if it exists online:'
  prefs: []
  type: TYPE_NORMAL
- en: '![docker-compose first run](img/image02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A `docker-compose.yml` that runs **WordPress**. WordPress is a free and open
    source **content** **management system** **(CMS)** based on PHP and MySQL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity 1 — Running WordPress Using docker-compose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get you conversant with running `docker-compose` commands.
  prefs: []
  type: TYPE_NORMAL
- en: You have been asked to build a WordPress website using `docker-compose`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory and name it `sandbox`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file and name it `docker-compose.yml.` Add the code in `wordpress-docker-compose.yml`
    or copy the following figure:![Activity 1 — Running WordPress Using docker-compose](img/image02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer the complete code placed at `Code/Lesson-2/wordpress-docker-compose.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://goo.gl/t7UGvy](https://goo.gl/t7UGvy) to access the code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take heed of the indentation in the file. It is advised to use an equal number
    of tabs and spaces when indenting the lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `docker-compose up` in the `sandbox` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Activity 1 — Running WordPress Using docker-compose](img/image02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll notice that, based on one file, we have an application running. This
    example is the perfect showcase of the power of `docker-compose`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `docker ps`. You''ll see the containers running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Activity 1 — Running WordPress Using docker-compose](img/image02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open your browser and go to the address at: `http://0.0.0.0:8000/`. We''ll
    have the WordPress website set up ready.'
  prefs: []
  type: TYPE_NORMAL
- en: Proceed with the set up and, in an instant, you have a WordPress site up and
    ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'The docker-compose file: docker-compose.yml'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`docker-compose.yml` is a YAML file. It defines **services, networks**, and
    **volumes**.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Services are application container definitions that include all components that
    relate to an application, for example, **DB, frontend**, or **backend**. What
    really weighs in when defining services is the components, which are networks,
    volumes, and environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: The first line of any `docker-compose.yml` defines the version of the `docker-compose`
    file format.
  prefs: []
  type: TYPE_NORMAL
- en: By running `docker -v`, you can tell which Docker version is running and thus
    know which version to put on the first line of the file.
  prefs: []
  type: TYPE_NORMAL
- en: For `docker-compose` file format 1.0, the first line was not necessary. Each
    `docker-compose` file introduced a new configuration or deprecated an earlier
    one.
  prefs: []
  type: TYPE_NORMAL
- en: We will use version 3.3 and the program should be compatible with version 3.0
    and above.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure everyone is running version 3 and at least a Docker that's 1.13.0+.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up is **services**. Let''s use this simplified skeleton:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The docker-compose file: docker-compose.yml](img/image02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take heed of the indentation.
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, we have two services, that is, `db` and `web`. These two
    are indented just once.
  prefs: []
  type: TYPE_NORMAL
- en: The next lines after defining the services defines the image or the Dockerfile
    from which the image is to be built.
  prefs: []
  type: TYPE_NORMAL
- en: Line 4 will specify the image from which the `db` service container will run
    from. We earlier mentioned a number of stacks; the `db` image can be any of the
    server-based databases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To confirm whether a stack you want to use exists, run the following:`docker
    search <image or name of your preferred stack`> (for example, `docker search mongo
    or docker search postgres`).
  prefs: []
  type: TYPE_NORMAL
- en: Line 6 explains that the web services image will be built from the Dockerfile
    in the location (`.`) relative to the `docker-compose.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also define the name of the Dockerfile in line 6\. `docker-compose`
    will search for the file with a name as listed, for example, in the `docker-compose.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Lines 7 to 10 gives more definition to the web services.
  prefs: []
  type: TYPE_NORMAL
- en: 'As evidenced in the `docker-compose.yml` we used to build and run WordPress,
    there are two services: `db` and `wordpress`. In the output of `docker ps,` these
    are the container names: `sandbox_wordpress_1` and `sandbox_db_1`.'
  prefs: []
  type: TYPE_NORMAL
- en: The first word before the underscore signifies the name of the directory holding
    the `docker-compose.yml`. The second word in that container name is the service
    name, as defined in `docker-compose.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: We'll go into more context in the following topic.
  prefs: []
  type: TYPE_NORMAL
- en: The docker-compose CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As soon as `docker-compose` is installed, I mentioned that you expect a list
    of options when you run `docker-compose`. Run `docker-compose –v`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These two commands, `docker-compose` and `docker-compose -v`, are the only ones
    that can be ran from whichever working directory is open on your terminal command
    line or Git bash.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, the other options in `docker-compose` are only run in the presence
    of the `docker-compose.yml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s dig deep into the common commands: `docker-compose build`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This command builds images referenced in the `docker-compose line: (build:
    .)` in the template `docker-compose.ym`.'
  prefs: []
  type: TYPE_NORMAL
- en: Building images can also be achieved through the command `docker-compose up`.
    Take note that this doesn't happen unless the image has not been built yet, or
    there has been a recent change that affects the container to be run.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This command will also work for the WordPress example, even though both services
    run from images in the Docker registry and not Dockerfiles within the directory.
    This would be **pulling** an image and **not building** because we build from
    a Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command lists the services as configured in the `docker-compose.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker-compose config --services`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This command lists the images used by the created containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker-compose images`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This command lists the logs from the services:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker-compose logs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker-compose logs <service>` lists the logs of a specific service, for example,
    `docker-compose logs db`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This command lists the containers running based on the `docker-compose`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker-compose ps`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that in most cases, there is a difference between the results of `docker-compose
    ps` and `docker ps`. Containers that were not running in the context of `docker-compose`
    will not be displayed by the command `docker-compose ps`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command builds, creates, recreates, and runs services:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker-compose up`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When running `docker-compose up`, if one service exits, the entire command exits.
  prefs: []
  type: TYPE_NORMAL
- en: Running `docker-compose up -d` is running `docker-compose up` in detached mode.
    That is, the command will be running in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 2 — Analyzing the docker- compose CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get you conversant with the `docker-compose` CLI.
  prefs: []
  type: TYPE_NORMAL
- en: You have been asked to demonstrate the difference in changes resulting from
    running two containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'While still within the directory with the WordPress `docker-compose.yml`--
    in my case, sandbox -- run the commands of *Activity B-1*, then the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Managing Multiple Containers and Distributed Application Bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the `docker-compose.yml` for running a Django application. A similar
    application can be found in the `docker-compose` documentation under the Django
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Django example from: [ttps://docs.docker.com/compose/django/](https://docs.docker.com/compose/django/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing Multiple Containers and Distributed Application Bundles](img/image02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer the complete code placed at `Code/Lesson-2/django-docker-compose.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://goo.gl/H624J1](https://goo.gl/H624J1) to access the code.
  prefs: []
  type: TYPE_NORMAL
- en: Improve a Docker Workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To give more context on how `docker-compose` is involved and how it improves
    a Docker workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory and name it `django_docker`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `django-docker` directory, create a new `docker-compose.yml` and add
    the information in the figure above, or in the `django-docker-compose.yml` script
    provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Dockerfile and add the content in the Dockerfile script provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a requirements file; simply copy the `django-requirements.txt` file provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `docker-compose` up and observe the logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that we are able to spin up both containers with one simple command,
    docker-compose up.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No prior experience with Django is needed; this is for basic demo purposes.
    `Code/Lesson-2/django-requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Django Compose File Broken Down**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First things first, how many services does this file have? Yes, two: `db` and
    `web`. The service `db` is based on the Postgres image. The service web is built
    from the Dockerfile in the same directory that contains this `docker-compose.yml`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Without the `docker-compose` file, the `db` service container would have otherwise
    been run in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django Compose File Broken Down](img/image02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This command is translated to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django Compose File Broken Down](img/image02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Open another tab or window in the terminal and run `docker ps`. You'll see the
    container running.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, the `web` service container as per the example would be
    run in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django Compose File Broken Down](img/image02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second command, broken down, is in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore, the aforementioned command is translated to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django Compose File Broken Down](img/image02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One advantage of using `docker-compose.yml` is that instead of running the commands
    in the terminal again and again, you have one command to run as many containers
    as you've included in the file.
  prefs: []
  type: TYPE_NORMAL
- en: We did not cover volumes and ports in the last lesson. I'll take time to help
    us understand this.
  prefs: []
  type: TYPE_NORMAL
- en: Endure Data Using Volumes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Volumes are used to persist data generated and used by Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Volumes persist any update to a local file or script. This makes an equal change
    on the container side.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the command is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Endure Data Using Volumes](img/image02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the docker run options, which comes after the main command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is in the `docker-compose.yml` file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Endure Data Using Volumes](img/image02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As long as volumes is defined in the `docker-compose` file, when a local change
    is made, such as a file update, the changes will be automatically synced to the
    files in the container(s).
  prefs: []
  type: TYPE_NORMAL
- en: '![Endure Data Using Volumes](img/image02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Django, as other web servers do, runs on specific ports. The Dockerfile used
    to build the Django image has a similar command to this: `EXPOSE 8000`.This port
    remains open when the container is run and is open for connection.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Django Dockerfile, we defined our port as `8000` and prefixed the number
    with an address `(0.0.0.0):`
  prefs: []
  type: TYPE_NORMAL
- en: '![Ports](img/image02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The number `0.0.0.0` defines the host address running the container.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The address tells `docker-compose` to run the container on our machine or, in
    short, localhost. If we were to skip the address and just expose the port, our
    set up would have unexpected results like a blank page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following line in the `docker run` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Ports](img/image02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the following lines in the `do‑cker-compose.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ports](img/image02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `docker-compose` port format maps the local workstation port to container
    port. The format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This allows us from our local machine to access the port 8000 which was mapped
    from the container port.
  prefs: []
  type: TYPE_NORMAL
- en: There's one option at the end, `depends_on`, that is specific to `docker-compose.yml`.
    The `depends_on` specifies the order in which the containers are spun up as soon
    as we run `docker-compose` run.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the `depends_on` option is under the web service. This means that
    the web service container depends on the `db` service container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ports](img/image02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Activity 3 — Running the docker-compose File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get you conversant with the `docker-compose` syntax and commands.
  prefs: []
  type: TYPE_NORMAL
- en: You have been asked to build and run a simple Python application which exposes
    port 5000 from the image `josephmuli/flask-app`. Define a `docker-compose` file
    and extend the Postgres image as the database. Make sure the database relates
    to the application.
  prefs: []
  type: TYPE_NORMAL
- en: I have prebuilt an image with the name `josephmuli/flask-app`. Extend this image
    in your `docker-compose.yml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure to write a version 3 `docker-compose` and define the two services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application on port `5000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your browser and check the listening port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Networking with docker-compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, `docker-compose` sets up a single network for your application(s)
    where each container can reach and discover other containers.
  prefs: []
  type: TYPE_NORMAL
- en: The network is given a name based on the name of the directory it lives in.
    Thus, if your directory is called `py_docker`, when your run `docker-compose up`,
    the network created is called `py_docker_default`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We mentioned ports in the previous topic, when creating the WordPress container.
    To explain networking better, we''ll use the `docker-compose.yml` used to spin
    up a WordPress application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Networking with docker-compose](img/image02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this file, we have two services: `db` and `wordpress`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the WordPress service, we have the `ports` option mapping port `80` to port
    `8000`. No wonder, the WordPress app runs on `0.0.0.0:8000` on our browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ports option is not in the `db` service. However, if you go to the `docker
    hub page for mysql`, you''ll notice that port `3306` is exposed. This is the standard
    port for MySQL. You can obtain more information on MySQL from: [https://hub.docker.com/r/library/mysql](https://hub.docker.com/r/library/mysql).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We don't have port mapping for DB because we don't necessarily need the port
    mapped to our computer; instead, we want the WordPress app mapped to the DB for
    communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t have port mapping for `db` because we don''t necessarily need the
    port mapped to our local workstation or computer. We only need it to be exposed
    in the container environment and thus it can be connected from the web service
    as in line 23: `WORDPRESS_DB_HOST: db:3306`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `docker-compose` file, this is how you connect one container to another:'
  prefs: []
  type: TYPE_NORMAL
- en: Note the port exposed by the image(s) you want to connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reference the container under the service that is connecting to it; in our case,
    the `db` service is connected to by the WordPress service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we named the service `db`, we reference this connection as `db:3306`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Therefore, the format is `<service>:<port` exposed by that `service>`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the WordPress Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To give more context on how containers are connected, sync, and communicate.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the compose file, did you notice the restart option? The available values
    for this option are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'no'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: always
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on-failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unless-stopped
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Run the WordPress Containers](img/image02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If it is not specified, the default is `no`. This means that the container
    will not be restarted under any circumstance. However, the `db` service here has
    been specified as restart: always, so the container always restarts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the Django example and see how networking works out there. This
    is the `docker-c` `ompose.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Run the WordPress Containers](img/image02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Immediately, you might not see the networking section present in the WordPress
    site. Here''s a snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The question here is, how did we know that the name and user is `postgres`,
    the HOST is `db`, and the port is `5432`?
  prefs: []
  type: TYPE_NORMAL
- en: These are the default values set in the `postgres` image and containers we run.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more clarity, you can take a look at this line, in the official Postgres
    Docker library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can obtain a Postgres Docker sample from GitHub at: [https://github.com/docker-library/postgres/blob/master/10/docker-entrypoint.sh#L101.](https://github.com/docker-library/postgres/blob/master/10/docker-entrypoint.sh#L101.)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Run the WordPress Containers](img/image02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As earlier explained, the Host is `DB` because the service name is `db` that
    is created by running the `postgres` image.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can obtain a Postgres Docker example from GitHub at: [https://github.com/docker-library/postgres/blob/master/10/Dockerfile#L132:](https://github.com/docker-library/postgres/blob/master/10/Dockerfile#L132:)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Run the WordPress Containers](img/image02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Indirectly, it proves why the `settings.py` was configured in that manner.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this lesson, we have done the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Discussed and displayed a multi-container setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walked through `docker-compose` commands to build and run multiple containers
    in a parallel manner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gained a high-level understanding of networking containers and how data is persisted
    in a container from local machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built and run applications without even setting them up, via Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
