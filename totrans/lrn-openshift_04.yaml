- en: OpenShift Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we briefly covered Container Runtime and Container
    Runtime Interface basics, followed by what CRI-O is and how it works. Finally,
    we installed a Kubernetes cluster with CRI-O as a Container Runtime Interface
    and ran a few simple commands to verify that Kubernetes was working through CRI-O.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is focused on giving a brief description of OpenShift as a **Platform
    as a Service** (**PaaS**) Solution. We will describe **Infrastructure as a Service**
    (**IaaS**) and PaaS clouds. As a part of the PaaS cloud descriptions, we will
    provide a basic explanation of OpenShift's business value. In this chapter, you
    will also learn about OpenShift's technical components and available OpenShift
    variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'After reading this chapter, you will have learned about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud technology landscape and the role of PaaS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift as an extension of Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift business value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift flavors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud technology landscape and the role of PaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, any business expects automation to be a cornerstone of success. Traditional
    approaches are too slow when it comes to delivering innovation at the pace at
    which the business ecosystem changes. This is one of the main reasons why many
    businesses are moving towards automation and DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: If we take a look at evolving software delivery technologies, we can easily
    see that old-generation applications were installed first directly on bare metal,
    and then on virtual machines. And with time, these companies started using different
    IaaS cloud platforms. The reason is very obvious—the IaaS platform allows us to
    bring automation to the next level using cloud orchestration tools and exposed
    APIs. The way IaaS automation does this on an infrastructure level is that it
    simplifies virtual networking, storage, and virtual servers. To use IaaS platforms,
    we still need to install and configure applications and it is usually a time-consuming
    process. Imagine that there is a need to install and configure a PHP-based application
    from scratch each and every time you develop a new feature and test it. It takes
    a lot of time even with automation tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'PaaS is the next generation of platforms to deliver applications in a quick
    and automated manner in production. With PaaS, the application delivering process
    looks very simple—there is no need to install and configure an application platform
    for web servers, databases, and so on. It is provided by the platform itself,
    OpenShift in our case. This means that you just need to upload your application
    code and database structures; the rest of it will be taken care of by PaaS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the difference between hosting applications on
    bare-metal, IaaS, and PaaS platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.gif)'
  prefs: []
  type: TYPE_IMG
- en: IaaS, PaaS, and SaaS cloud comparison
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift as an extension of Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we looked at how Kubernetes can simplify the management
    of Docker containers and take care of container deployment. Kubernetes brings
    additional value to container management across multiple nodes, which is very
    important in modern highly available and distributed infrastructure. Despite all
    the advantages Kubernetes has, it has drawbacks, and most of them are rectified
    by OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift is a PaaS offering from Red Hat that natively integrates Docker and
    Kubernetes to create a powerful container cluster management and orchestration
    system. OpenShift encompasses the architecture, processes, platforms, and services
    needed to empower developers and operations teams. OpenShift increases reliability
    across all environments and meets all customer requirements while reducing infrastructure
    costs.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenShift leverages Kubernetes as a container management platform and adds
    several new important components and capabilities. Some of them are:'
  prefs: []
  type: TYPE_NORMAL
- en: Self-service Portal and Service Catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build and application deployment automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in registry service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended application routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: OpenShift services
  prefs: []
  type: TYPE_NORMAL
- en: Understanding OpenShift's business value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'N-tier design is a standard application design like a three-tier web app with
    web, application, and database tiers. This design slowly evolved into the microservice
    architecture. The microservice architecture influences the industry and forces
    many companies to embrace this new trend and make it a new standard. The microservice
    architecture is much cheaper, scalable, and more secure compared to the monolithic
    and N-tier architectures. That is why containerized applications bring you to
    a whole new level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Application, Infrastructure, and Software development evolution
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift pushes these boundaries even further, allowing both software developers
    and operation teams to utilize powerful microservice architecture and the simplicity
    of OpenShift GUI and the additional features it brings to the table. OpenShift
    is where you can really benefit from automation and DevOps. OpenShift has many
    built-in tools that allow the new microservice architecture to be backward-compatible
    with previous-generation software.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned, the software development approach has also changed; initially,
    software developers followed a waterfall approach, polishing their apps to perfection
    and adding one feature after another, making sure it was bug-free. But it is neither
    time, nor money-efficient. That is why an agile approach came into the picture.
    Business owners needed shorted software development cycles. It was not perfect
    though, because of all the bugs and other shortcomings. The next evolutionary
    step was DevOps. OpenShift leverages modern DevOps processes and makes them simpler
    and more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift flavors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift for production comes in several variants:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift Origin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift Container Platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift Online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift Dedicated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with other products under the Red Hat umbrella, OpenShift has an upstream
    project called **OpenShift Origin**. The OpenShift Origin homepage is available
    at [http://openshift.org](http://openshift.org). It has a number of installation
    methods, including the installation of a development environment on a local developer
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Red Hat OpenShift Container Platform** is a production-ready build of OpenShift
    Origin with all Red Hat production advantages including official support, certification,
    and so on. OpenShift Container Platform integrates with Red Hat Enterprise Linux
    and is tested via Red Hat''s QA process in order to offer a stable, supportable
    product for customers who want to have their own private or on-site cloud. An
    enterprise might get updates every six months, maintaining stabilization across
    minor updates. OpenShift Container Platform allows for building a private or public
    PaaS cloud on your infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Red Hat OpenShift Online** is a multi-tenant public cloud managed by Red
    Hat. OpenShift Online can be a good choice for companies that want to start working
    with OpenShift but don’t want to have their own on-premise infrastructure. This
    platform allows for hosting a small application for free.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Red Hat OpenShift Dedicated** is a single-tenant container application platform
    hosted on **Amazon Web Services** (**AWS**) or Google Cloud Platform and managed
    by Red Hat. It allows application development teams to quickly build, deploy,
    and scale traditional and cloud-native applications. OpenShift Dedicated is built
    on Red Hat Enterprise Linux, Docker container technology, and Google Kubernetes
    for orchestration and management. It securely connects to your data center so
    you can implement a flexible, hybrid cloud IT strategy with minimal infrastructure
    and operating expenses. It can be a good choice for companies who don’t want to
    share the platform with other companies.'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OpenShift Container platform is both simple and complex when it comes to
    OpenShift components and overall architecture. It is complex in that it involves
    a lot of components interconnected with each other, but OpenShift is simple in
    the sense that all its components work independently of each other, and work seamlessly
    if something fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: OpenShift components
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenShift and Kubernetes have most architecture components in common, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift masters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Etcd as a key-value store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Components that are unique to OpenShift are:'
  prefs: []
  type: TYPE_NORMAL
- en: Router as ingress traffic control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift Internal Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram describes the OpenShift container platform from an architectural
    point of view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: OpenShift architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenShift is built on top of Docker and Kubernetes, sometimes referred to as
    Kubernetes++. In addition to the Docker and Kubernetes solution, OpenShift brings
    additional capabilities and features required to provide a stable and production-ready
    PaaS platform. These new capabilities and features are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication**: OpenShift has several built-in authentication methods to
    allow granular access to OpenShift projects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: LDAP authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Request header authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystone authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-tenancy**: OpenShift''s powerful functionalities allow granular multi-user
    and multi-project access control, a must-have feature for medium and large organizations
    that allows collaboration and access control for different groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal Image Registry**: OpenShift uses an internal registry to store images
    in OpenShift that are ready to be deployed on OpenShift nodes. It is also used
    for S2I builds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GUI and web console**: OpenShift provides an easy-to-use web interface, powerful
    enough to create, build, deploy, update, and troubleshoot OpenShift projects and
    microservice applications running inside OpenShift.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SCM Integration**: OpenShift has built-in integration with Git. This solution
    is tightly coupled with an image builder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image builders**: Process that is used to transform image parameters or source
    code into a runnable image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CI/CD Integration**: OpenShift provides very flexible integration with Jenkins
    for Continuous Integration and Continuous Delivery pipelines. It scales the pipeline
    execution through Jenkins provisioning in containers. This allows Jenkins to run
    as many jobs in parallel as required and scales solutions on demand out of the
    box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Additional Kubernetes resource extensions**: There is a set of resources
    added to Kubernetes by OpenShift:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment Configurations (DC)**: This is a set of pods created from the
    same container image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build Configurations (BC)**: Primarily used by S2I to build an image from
    source code in Git.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Routes**: DNS hostname service used by the OpenShift router as an ingress
    point for OpenShift applications,'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**REST API**: In addition to the Kubernetes API, Openshift provides its own
    API interface to leverage all the features of automation and seamless integration
    with external platforms, other automation frameworks, and DevOps solutions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed, briefly, the difference between IaaS and PaaS
    solutions. We also talked about OpenShift as part of a PaaS solution. We provided
    a basic explanation of OpenShift's business value and the main OpenShift components,
    and talked about OpenShift in general.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to work with OpenShift and learn different
    ways to bring about an OpenShift development environment using the most popular
    methods and tools.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift is one of the following cloud platforms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which two OpenShift flavors can be installed on-premise inside your data center?
    choose 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Origin
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Dedicated
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Enterprise
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Offline
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'OpenShift uses its own container management platform to orchestrate and control
    container deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following is NOT a new feature added by OpenShift in comparison
    to Kubernetes? choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SCM integration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: GUI and web console
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Multi-tenancy
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Persistent storage
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wich two components are unique to OpenShift in comparison to Kubernetes? choose
    two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Router as an ingress traffic control
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Internal Registry
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Master
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Node
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'OpenShift provides an additional REST API in addition to the Kubernetes API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OpenShift development life cycle is every 3 months, which means that, every
    3 months, new features are added. This implies that, by the time this book is
    published, OpenShift might be a bit different. So, it is highly important to keep
    track of these changes. Here is a list of links including further reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenShift general documentation**: [https://docs.openshift.com/index.html](https://docs.openshift.com/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenShift Origin documentation web page**: [https://docs.openshift.org/](https://docs.openshift.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenShift GitHub project**:[ https://github.com/openshift/](https://github.com/openshift/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
