- en: Self-Healing Applied To Services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The job of a system that self-heals services is to make sure that they are (almost)
    always running according to the design. Such a system needs to monitor the state
    of the cluster and continuously ensure that all the services are running the specified
    number of replicas. If one of them stops, the system should start a new one. If
    a whole node goes does, all the replicas that were running on that node should
    be scheduled to run across the healthy nodes. As long as the capacity of the cluster
    can host all the replicas, such a system should be able to maintain the defined
    specifications.
  prefs: []
  type: TYPE_NORMAL
- en: Having a system that self-heals services does not mean that it provides high-availability.
    If a replica stops being operational, the system will bring it back into the running
    state. However, there will be a (very) short period between a failure and until
    the system is restored to the desired state. If we’re running only one replica
    of a service, during that time there will be downtime. The best way to remedy
    this problem is to run at least a couple of replicas of each service. That way,
    when one of them goes down, the others will handle the requests until the failed
    one is restored to its desired state.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that the conditions of the cluster do not change (nodes do not go down)
    and that the load on the cluster is constant, the system capable of self-healing
    services should provide near 100% up-time. Unfortunately, nodes do go down, and
    the load on the cluster is (almost) never constant. We’ll explore how to remedy
    those problems later. For now, we’ll focus on how to build the part of the system
    that will make sure that the services are healing automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Creating The Cluster And Deploying Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll start by setting up a Swarm cluster and deploying the stacks that we’ll
    use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
