- en: GitHub Pages and Web Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to build web pages around your project,
    hosted for free and exclusively on GitHub, by using Jekyll, which is a static
    site generator, or by providing your own HTML pages.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing our exploration of GitHub features, next comes the ability to visualize
    a repository's data. GitHub has implemented some nice features, such as graphs
    that can depict, among other things, the commit activity of the contributors and
    the traffic a repository gains, as well as the commit history in a network graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of 2008, GitHub announced GitHub Pages ([https://github.com/blog/272-github-pages](https://github.com/blog/272-github-pages)),
    a static-site hosting service. Static sites have seen a significant increase over
    recent years, and GitHub played a big part in that. A static site is a site that
    contains pages written in HTML, CSS, and JavaScript. No server code, such as PHP,
    Ruby, or Python, is included, nor is a database required.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create a functional website hosted on GitHub Pages, you must follow
    some conventions. Let's look in detail at how to create any of these pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user or an organization page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For users and organizations, a repository named `username.github.io` must be
    created, where `username` is your username or organization name, and files must
    be pushed to the `master` branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new empty repository named after your username. After creating it,
    clone it locally and add a test `index.html` page (replace `username` with yours):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Right after the upload finishes, visit `https://username.github.io` (where `username` is
    your own username) and look at the results.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! You can start writing your own HTML pages and push to GitHub. The
    changes are almost instant.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Project pages are somewhat different to user/org pages; the source files of
    your website can reside in one of the three following locations: the `gh-pages`
    branch, the  `master` branch, or a `docs` directory of the `master` branch. You
    can choose which one you want to use by selecting it under your repository''s
    Settings under GitHub Pages.'
  prefs: []
  type: TYPE_NORMAL
- en: For project pages, if there is a branch named `gh-pages` in the repository,
    then its HTML content is automatically served by GitHub. The project page will
    ultimately be accessible via `https://<username>.github.io/<repositoryname>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, I will create a `gh-pages` branch in the `github-essentials` repository,
    make a new `index.html` file, and commit and push to the `gh-pages` branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once `index.html` is uploaded, it will immediately be rendered under your page's
    URL. Since I uploaded it under my username (`axilleas`) in a repository named
    `github-essentials`, I know that the URL will be [http://axilleas.github.io/github-essentials](http://axilleas.github.io/github-essentials).
  prefs: []
  type: TYPE_NORMAL
- en: While you could manually modify the content of the project's website, GitHub
    provides a better automatic method to update the content of your web page in one
    go. Read the following sections to learn how to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a theme to style your page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About four years after the launch of GitHub Pages, GitHub announced the addition
    of another feature, the GitHub page generator.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an easy way to bootstrap a website for your project with just a few
    clicks. Under each repository''s settings, there is a section for GitHub Pages
    with the option Choose a theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When you select Choose a theme, GitHub helps you to create a single HTML page
    based on your `README.md` file with a variety of beautiful layouts to choose from,
    in an interactive step-by-step guide. This will work only on a `README.md` file
    that is present in one of the `gh-pages` or `master` branches. If the `README.md`
    file doesn't exist, GitHub will create one for you when you choose a theme for
    the first time.
  prefs: []
  type: TYPE_NORMAL
- en: The formatting of the website's content is written in Markdown, which we have
    explored in [Chapter 2](part0044.html#19UOO0-184576c1044a4350bd24f18b869c0732),
    *Using the Wiki and Managing Code Versioning*. You can use its markup language
    to define headings and lists, add links, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are inside the theme chooser, you will be able to choose from the
    existing layouts. Each layout follows a pattern, and there are links and buttons
    that point to your repository''s URL and the ZIP or TAR file downloads. When ready,
    hit Select theme, and the website will change its layout in a few seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From now on, each time you change the `README.md` file, the changes will be
    automatically published in your website.
  prefs: []
  type: TYPE_NORMAL
- en: Each time you choose a theme, a `_config.yml` file is committed to your repository
    with information about what theme is currently in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you head over to the commits page, you can see that GitHub has some useful
    information about the build of your website. Clicking on the green check-mark
    icon will take you to the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that your website is up and running, let's look at how you can use your
    own custom domain.
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of using the classic GitHub Pages URL, you can use a custom domain name
    linked to your `user/org` GitHub page. This means you can tell GitHub that when
    someone asks for `www.mydomain.rocks`, it will serve the content that's published
    under `username.github.io`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a CNAME record in your DNS provider that will point `www.mydomain.rocks`
    to `username.github.io`. Then, head over to your repository''s `username.github.io`
    Settings > GitHub Pages, add your domain name under Custom domain, and hit Save.
    From now on, every time you visit `username.github.io`, you will be redirected
    to `www.mydomain.rocks`. Similarly, a project page under `username.github.io/repository-name`
    will be redirected to `www.mydomain.rocks/repository-name`. Note that your custom
    domain will be served automatically by HTTPS. If the Enforce HTTPS option is not
    set, make sure you set it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the `www` subdomain as your custom domain has some benefits over using
    just `mydomain.com` or another subdomain, such as `blog.mydomain.com`. Notably,
    that way, you automatically use GitHub's CDN and you are protected from DoS attacks.
    For more information about the kinds of domains you can use, visit GitHub's documentation
    at [https://help.github.com/articles/about-supported-custom-domains/](https://help.github.com/articles/about-supported-custom-domains/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's now explore how you can leverage the power of a static-site generator
    to create more content for your website.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Jekyll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned how to create web pages manually by pushing HTML files
    or using the GitHub theme generator for project pages. However, there is another,
    more sophisticated way to build your website.
  prefs: []
  type: TYPE_NORMAL
- en: Every day, more and more people turn to using static websites for their personal
    projects, and even companies use it for their main sites or blog platforms. A
    static site is faster and more secure than one built with a server-side language,
    such as PHP. On the other hand, maintaining a static site and updating its content
    completely manually is a tedious task.
  prefs: []
  type: TYPE_NORMAL
- en: 'For these reasons, so-called static-site generators exist: applications that
    use templates, markup languages, and configuration files, and convert these to
    pure HTML pages.'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Pages uses Jekyll, which is a static-site generator written in Ruby,
    and is among the top open source static-site generators ([https://www.staticgen.com/](https://www.staticgen.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: In order to use Jekyll, you will need access to a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jekyll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to install Jekyll, refer to its documentation at [https://jekyllrb.com/docs/installation/](https://jekyllrb.com/docs/installation/).
    If you encounter any problems, be sure to visit their troubleshooting guide at [https://jekyllrb.com/docs/troubleshooting/#installation-problems](https://jekyllrb.com/docs/troubleshooting/#installation-problems).
  prefs: []
  type: TYPE_NORMAL
- en: 'Following installation, you can check whether it was installed correctly by
    running `jekyll` in your terminal. You should see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Customizing your page using Jekyll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will create a new boilerplate site that `Jekyll` provides in order to
    start building on it. This is achieved with the `jekyll new path/to/site` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the new directory that was created and list the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following directories and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s build the site locally and see how that looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser to `http://127.0.0.1:4000` and you should see the default
    Jekyll boilerplate site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `–watch` switch enables the autogeneration of files so that you don't have
    to stop and start the server all the time. However, if you edit `_config.yml`,
    you must restart the server by stopping and running the `jekyll serve` command
    again.
  prefs: []
  type: TYPE_NORMAL
- en: From there on, you can start hacking on the new website. For starters, try to
    edit `_config.yml` and change some options. After changing the title, description,
    and email, stop and start Jekyll again to see the changes in effect.
  prefs: []
  type: TYPE_NORMAL
- en: When you're happy with the changes, it's time to push to your GitHub repository's
    `master` branch for user/org pages, or to `gh-pages` if it's a project page. For
    a brand new project, you'd need to initiate a new Git repository inside the `website`
    directory; or, for an existing project, you'd need to move all those files Jekyll
    generated under the existing repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, I will assume a new user page is created from scratch.
    First, you''d need to create a new empty `username.github.io` repository on GitHub.
    Next, in the `website` directory, issue the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After a few seconds, GitHub should build the site, and you can visit your user
    page at `username.github.io` to confirm that all went well.
  prefs: []
  type: TYPE_NORMAL
- en: For project pages, make sure that `baseurl` in `_config.yml` reads `/repository-name/`,
    otherwise the CSS files won't be picked up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Jekyll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may have noticed, we have only set up the base for developing with Jekyll.
    For extensive documentation, refer to the Jekyll website at [https://jekyllrb.com/docs/home/](https://jekyllrb.com/docs/home/).
    You can find a list of sites that run Jekyll at [https://github.com/jekyll/jekyll/wiki/sites](https://github.com/jekyll/jekyll/wiki/sites).
  prefs: []
  type: TYPE_NORMAL
- en: 'Other helpful articles are, of course, the GitHub help pages about Jekyll:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.github.com/articles/using-jekyll-with-pages/](https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.github.com/articles/using-jekyll-plugins-with-github-pages/](https://help.github.com/articles/adding-jekyll-plugins-to-a-github-pages-site/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to GitHub's nature, a repository contains a great deal of metadata, such
    as commits over time, who contributed what, the number of contributors, the number
    of forks, and even site referrals to various files.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub provides some useful graphs and data, from which you can deduct the information
    you require under the Insights tab of a repository. Let's explore what's underneath.
  prefs: []
  type: TYPE_NORMAL
- en: Pulse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pulse is an overview of a repository's activity. The default is to show the
    last week, but you can change the period from the drop-down menu on the right,
    by choosing 24 hours, 3 days, 1 week, or 1 month.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you have a high-level overview of the merged and open pull requests,
    and open and closed issues, as well as the top committers for that period:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Contributors – additions/deletions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An overview of the top 100 contributors of a project can be seen at the Contributors
    tab. The graph is created by the data of the default branch of a repository and
    it depicts the commits from the beginning of the project until the current day:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The default filter is the commit count. If you want to change to see who made
    the most additions or deletions, you can toggle the filter with the Filter contributions
    drop-down menu on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The data can be fine-tuned further by choosing a specific period from the graph
    by selecting an area. For example, to see the contributions data between 2015
    and 2016, you would do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Community profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the **Community** tab, there's a checklist for the most important things
    you should have present in your repository so that it is friendly to outside contributors.
    You can see from the following screenshot that a `README` file, a contributing
    guide ([https://help.github.com/articles/setting-guidelines-for-repository-contributors/](https://help.github.com/articles/setting-guidelines-for-repository-contributors/)),
    and a license ([https://help.github.com/articles/adding-a-license-to-a-repository/](https://help.github.com/articles/adding-a-license-to-a-repository/))
    are already present, whereas a code of conduct file ([https://help.github.com/articles/adding-a-code-of-conduct-to-your-project/](https://help.github.com/articles/adding-a-code-of-conduct-to-your-project/))
    is missing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In that case, GitHub will help you add one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Commits over time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Commits tab shows the commit activity during the previous year. In the
    upper bar graph, you can visualize the number of commits per week; if you click
    on one bar, the graph that appears below will show the number of commits per day
    of that particular week:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Code frequency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Code frequency tab shows the weekly code additions and deletions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dependency graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Under the Dependency graph tab, you can see the dependencies and the dependent
    libraries of your project. At the time of writing, GitHub only supports Ruby and
    JavaScript, and checks whether your repository contains a `Gemfile` and `package.json`
    file, respectively. Once it finds one, it scans and lists all the dependencies,
    as well the dependencies of their dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Apart from the dependency listing, GitHub also notifies you when a vulnerability
    is found in one of the libraries you use. For more information about the security
    alerts, read [https://help.github.com/articles/about-security-alerts-for-vulnerable-dependencies/](https://help.github.com/articles/about-security-alerts-for-vulnerable-dependencies/).
  prefs: []
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Network graph shows the branch history of the main repository as well as
    its forks. You can click and drag the graph or use your keyboard arrows to see
    the older history. To view how another fork deviates from its parent, click on
    the owner name and you will be transferred to that repository network graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can click on the little bullets, and you will be transferred to
    that particular commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If a project has many forks, GitHub will not be able to render the Network graph.
  prefs: []
  type: TYPE_NORMAL
- en: Forks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Forks tab, as the name suggests, shows a list of forks of your repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Traffic tab is the only tab that can only be seen by project owners or team
    members. The higher the traffic a repository has, the more data is to explore.
    Generally, there information is available for a period of about two weeks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first graph, you can see how many times a repository has been cloned
    in that period. By hovering the mouse on the bullets, you can clearly see the
    clones and unique cloners as GitHub names them, per day:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Likewise, you can see the total views for the last two weeks, as well as how
    many unique visitors your repository has had:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Right below these graphs are the referring sites and the popular content. Clicking
    on a site will take you to another page where the actual link appears. Search
    engines and GitHub''s own search are excluded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next tip is to use some advanced techniques that use the GitHub API.
  prefs: []
  type: TYPE_NORMAL
- en: Making use of Github Pages' metadata with Jekyll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub provides some metadata when using Jekyll for GitHub Pages. This means
    that you can add certain keywords in the Jekyll templates and these will be rendered
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you could add the `{{ site.github.project_title }}` variable, and
    the project title would be filled by GitHub automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Following the example in the *Introduction to Jekyll* section of this chapter,
    we will add a new post to the Jekyll site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, head over to the repository directory and make sure you are in the
    `master` branch and up to date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, copy the default post to have it as a reference (the dates in your site
    will differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open the new file and remove all content except for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit it to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit your changes and push them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few seconds, the post will appear on the front page and its content
    will have the variables rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can read more at [https://help.github.com/articles/repository-metadata-on-github-pages/](https://help.github.com/articles/repository-metadata-on-github-pages/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the purpose of GitHub Pages and the various ways
    to upload your content. A quick introduction to Jekyll will hopefully provide
    a basis for further reading and use of this cool static-site generator.
  prefs: []
  type: TYPE_NORMAL
- en: We also ran through the various visualizations that GitHub provides, with the
    graphs and other tools that are part of every repository.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](part0149.html#4E33Q0-184576c1044a4350bd24f18b869c0732), *Exploring
    the User and Repository Settings*, we will explore the user and repository settings.
  prefs: []
  type: TYPE_NORMAL
