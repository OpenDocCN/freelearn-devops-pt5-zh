- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fixing Mistakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common reaction to making a mistake in Git is to panic. What if you
    have just lost all your work? Worse, what if you have broken the master branch?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will review a number of common Git mistakes and how to fix them.
    The first rule, of course, is stay calm, or as Douglas Adams said, *Don't Panic!*
  prefs: []
  type: TYPE_NORMAL
- en: 'The problems we''ll review are:'
  prefs: []
  type: TYPE_NORMAL
- en: You wrote the wrong message in a commit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You forgot to add changed files from your last commit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problems with the order of commits or their messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to undo changes made in a commit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You misnamed your branch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You committed to the wrong branch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You trashed a file in a previous commit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You messed up the remote by pushing a broken branch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To see the answers at work, let''s mirror `Panofy` into `ErrorsDemo`. Here
    are the steps we''ll be doing:'
  prefs: []
  type: TYPE_NORMAL
- en: On the remote, create `ErrorsDemo` and get its URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the local branch you want to mirror (in our case, `Panofy`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push that up to the server with the mirror command, using `ErrorsDemo`'s URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone the new branch (be sure to clone it in the directory you want it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change directory to the new (cloned) directory (`ErrorsDemo`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see this walked through in *Chapter 10*, *Important Git Commands & Metadata*.
  prefs: []
  type: TYPE_NORMAL
- en: You wrote the wrong message in the last commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with the log so that we can see the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Log of initial state'
  prefs: []
  type: TYPE_NORMAL
- en: 'This one is easy; all you need do is enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Your editor will open and allow you to change the message. To change the wording
    of the message just change the "pick" to "reword."
  prefs: []
  type: TYPE_NORMAL
- en: 'After you save your file, the message of the last commit will be changed as
    shown in *Figure 12.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Log after amend (changed message in the last commit)'
  prefs: []
  type: TYPE_NORMAL
- en: You forgot to add changed files from your last commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You solve this problem in the exact same way you solved the problem of fixing
    the message in your last commit: with `--amend`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, stage your new or changed files. Then enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t want to edit the message when you add the files, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Problems with the order of commits or their messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the problem is not with the last commit (in which case you'd use `--amend`),
    it's time to break out interactive rebase as shown in *Chapter 8*, *Interactive
    Rebasing*. If you haven't pushed yet, Interactive Rebase will let you do all this
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: You need to undo changes made in a commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All you need to do here is to call the log, get the ObjectID of the commit
    you want to undo and call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go back to the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Log, starting point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s revert the commit that added the hello message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Because I reverted a change in the middle of the branch, it''s no surprise
    that I run into a merge conflict:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Merge conflict'
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this I will call `git mergetool`, invoking the tool I set up in *Chapter
    4*, *Merging, Pull Requests, and Handling Merge Conflicts*. Kdiff3 is smart enough
    to fix all the conflicts without my help:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Kdiff3 fixes the conflicts for me'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure enough, when we open `Program.cs` the Hello World is gone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_12_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Program.cs after revert'
  prefs: []
  type: TYPE_NORMAL
- en: You misnamed your branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Checkout the branch in question and enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_12_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Renaming branch foo to bar'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 12.7* you create the branch foo and then check it out. Finally, you
    rename it as shown above and your branch name is changed.
  prefs: []
  type: TYPE_NORMAL
- en: You committed to the wrong branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The way this plays out for me (again and again!) is that I forget to create
    a new branch and so make my changes on the develop branch or to main. To fix this,
    enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You are creating the new branch, then removing the check-in from main (`HEAD~`)
    but leaving the files in the new branch.
  prefs: []
  type: TYPE_NORMAL
- en: You trashed a file in a previous commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You ruin a file but you only find out about it after a number of other commits.
    Ouch. Use `git log` to find the ObjectID for a commit from *before* the problem
    commit. Now we want to get only that file from the commit. For this, we enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: (The path to the file is relative to the root of the project.)
  prefs: []
  type: TYPE_NORMAL
- en: You now have the earlier version in the staging area. You can "unstage" it and
    edit it from the work area.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative to using the ObjectID is to count back from `HEAD`, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This just says "go back 4 commits and get the file from there." The two approaches
    work equally well.
  prefs: []
  type: TYPE_NORMAL
- en: You messed up the remote by pushing a broken branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If (and when) you break the Master branch by pushing an incomplete and broken
    local copy, dry your tears, take heart! This can be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Note, this should not be possible. If you are using Azure DevOps (or something
    similar) your pipeline should not accept any merge that doesn't compile (and arguably
    pass a set of unit tests). But I digress…
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command you want is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That resets your local copy of `<Yourbranch>` to the last synchronized version
    of `<remoteRepo>`. Thus, if your branch is Feature1 and it is on origin, you would
    write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you want to restore the remote repo to its state before you broke it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The challenge for this chapter consists of a quiz. The answers are all at the
    end of the quiz.
  prefs: []
  type: TYPE_NORMAL
- en: What do you do if you left out a changed file in the last commit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you do if you committed to the wrong branch?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you do if you corrupted a file in a previous commit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you do if you need to undo changes made in a commit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you do if you trash Master by pushing a broken branch?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What do you do if you left out a changed file in the last commit?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You solve this with the same command you use to modify the message in the last
    commit, using `--amend`, but you need to indicate that you do not want to edit
    the message (make sure your files are staged):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What do you do if you committed to the wrong branch?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Checkout or create the branch you want to have committed to and then use reset
    to remove the change from the remote branch, but leave your files in the index
    (staging area) to be committed to the new branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What do you do if you corrupted a file in a previous commit?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, use `git log` to find a commit before the corruption. Get the ObjectID
    of that commit. Next, get the problem file (and only that file) from the good
    commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember: The path to the file is relative to the root of the project.'
  prefs: []
  type: TYPE_NORMAL
- en: You now have the healthy version of the file in the staging area. If that file
    needs editing you can unstage it, but the more likely case is that you can use
    this older version as is. In that case, you can just commit it.
  prefs: []
  type: TYPE_NORMAL
- en: What do you do if you need to undo changes made in a commit?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this case, open the log and get the ObjectID of the commit you want to undo.
    You can now call `revert` on that ObjectID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: What do you do if you trashed Master by pushing a broken branch?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your DevOps system allowed you to push a broken branch to Master, fix this
    immediately. In fact, if you can, tell the rest of your team not to commit to
    Master until you fix it. After they stop yelling at you, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'That resets your local copy of `<Yourbranch>` to the last synchronized version
    of `<remoteRepo>`. Thus, if your branch is `myFeature` and it is on origin, you
    would write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you need to restore the remote repo to its state before you broke it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Master should now be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Great job with the quiz! Keep this chapter around for the inevitable day you
    will need it.
  prefs: []
  type: TYPE_NORMAL
