- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The title of this book is "DevOps For Networking". DevOps, as you are probably
    well-aware, is an abbreviated amalgamation of "Development" and "Operations",
    so why does it have any significance to networking? It is true that there is no
    "Net" in the DevOps name, though it is fair to say that the remit of DevOps has
    extended well beyond its initial goal.
  prefs: []
  type: TYPE_NORMAL
- en: The initial DevOps movement sought to remove the "chucking it over the fence"
    and reactive mentality that existed between development and operations teams,
    but DevOps can be efficiently used to promote collaboration between all teams
    in IT, not just Development and Operations staff.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps, as a concept, initially aimed to solve the scenario where developers
    would develop code, make significant architectural changes, and not consider the
    Operations team that needed to deploy the code to production. So when the time
    came for the operations team to deploy the developers' code changes to production,
    this would result in a broken deployment, meaning crucial software fixes or new
    products would not reach customers as planned, and the deployment process would
    typically take days or weeks to fix.
  prefs: []
  type: TYPE_NORMAL
- en: This led to frustration to all the teams involved, as developers would have
    to stop coding new features and instead would have to help operations staff fix
    the deployment process. Operations teams would also be frustrated, as often they
    would not have been told that infrastructure changes were required to deploy the
    new release to production. As a result, the operations team did not have the idea
    to adequately prepare the production environment to support the architectural
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: This common IT scenario highlights the broken process and operational model
    that would happen continually and cause friction between development and operations
    teams.
  prefs: []
  type: TYPE_NORMAL
- en: '"DevOps" was an initiative setup to foster an environment of collaboration
    and communication between these previously conflicting teams. It promotes teams
    to speak daily, making each other aware of changes and consequently preventing
    avoidable situations from happening. So, it just so happens that development and
    operations staff were the first set of silos that DevOps aimed to solve. Consequently,
    it branded DevOps as a way to unify the teams to work, as one consolidated fluid
    function, but it could easily have been called something else.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps aims to create better working relationships between teams and a happier
    working environment, as frankly nobody enjoys conflict or firefighting preventable
    issues on a daily basis. It also aims to share knowledge between teams to prevent
    the development teams being viewed as "ignorant to infrastructure" and operations
    teams to be "blockers to changes" and "slowing down devs". These are the common
    misconceptions that teams working in silos have of one another when they don't
    take the time to understand each other's goals.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps strives to build an office environment where teams appreciate other teams
    and their aims, and they are respectful of their common goals. DevOps is undoubtedly
    one most talked about topics in the IT industry today. It is not a coincidence
    that its popularity has risen with the emergence of agile software development,
    as an alternative to using the more traditional waterfall approach.
  prefs: []
  type: TYPE_NORMAL
- en: Waterfall development and the "V-Model" encompass the separate phases of analysis,
    design, implementation (coding), and testing. These phases are split up traditionally
    into different isolated teams, with formalized project hand-off dates that are
    set in stone.
  prefs: []
  type: TYPE_NORMAL
- en: Agile was born out of the realization that in the fast-paced software industry,
    long running projects were suboptimal and not the best way of delivering real
    value to customers. As a result, agile has moved projects to shorter iteration
    cycles that incorporated analysis, design, implementation, and testing into two-week
    cycles (sprints) and aimed at using a prototyping approach instead.
  prefs: []
  type: TYPE_NORMAL
- en: The prototyping approach uses the notion of incremental development, which has
    allowed companies to gather feedback on products earlier in the release cycle,
    rather than utilizing a big bang approach that delivered the full solution in
    one big chunk at the end of the implementation phase.
  prefs: []
  type: TYPE_NORMAL
- en: Delivering projects in a waterfall fashion at the end of the waterfall implementation
    stage ran the risk of delivering products that customers did not want or where
    developers had misinterpreted requirements. These issues were typically only discovered
    in the final test phase when the project was ready to be taken to market. This
    often resulted in projects being deemed a failure or resulting in huge delays,
    whereas costly rework and change requests could be actioned.
  prefs: []
  type: TYPE_NORMAL
- en: Agile software development for the best part has fostered the need to collapse
    down those team silos that were typically associated with waterfall software development,
    and this strengthened the need for daily collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: With the introduction of agile software development, it also has changed the
    way software testing is carried out too, with the same DevOps principles also
    being applied to testing functions.
  prefs: []
  type: TYPE_NORMAL
- en: Quality assurance test teams can no longer afford to be reactive either, much
    like operations teams before them. So, this promoted the need for test teams to
    work more efficiently and not delay products reaching market. This, however, could
    not be done at the expense of the product, so they needed to find a way to make
    sure applications are tested adequately and pass all quality assurance checks
    while working in a smarter way.
  prefs: []
  type: TYPE_NORMAL
- en: It was readily accepted that quality assurance test teams can no longer operate
    in silos separate from development teams; instead, agile software development
    has promoted test cases being written in parallel to the software development,
    so they are not a separate activity. This is in stark contrast to code being deployed
    into a test environment and left to a team of testers to execute manual tests
    or run a set of test packs where they deal with issues reactively.
  prefs: []
  type: TYPE_NORMAL
- en: Agile has promoted developers and quality assurance testers to instead work
    together in scrum teams on a daily basis to test software before it is packaged
    for deployment, with those same tests then being maintained and kept up to date
    and used to seed the regression test packs.
  prefs: []
  type: TYPE_NORMAL
- en: This has been used to mitigate the friction caused by developers checking in
    code changes that break quality assurance test team's regression packs. With siloed
    test teams, a common scenario that would often cause friction is be that a graphical
    user interface (GUI) would suddenly be changed by a developer, resulting in a
    portion of regression tests breaking. This change would be done without notifying
    the test team. The tests would be failing because they were written for an old
    GUI and were suddenly outdated, as opposed to breaking because developers had
    actually introduced a software failure or a bug.
  prefs: []
  type: TYPE_NORMAL
- en: This reactive approach to testing did not build confidence in the validity of
    the test failures reported by automated test packs as they are not always conclusively
    down to a software failure, and this introduced unnecessary delays due to suboptimal
    IT structure.
  prefs: []
  type: TYPE_NORMAL
- en: Instead if the communication between development and test teams had been better,
    using the principles promoted by DevOps, then these delays and suboptimal ways
    of working can be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: More recently, we have seen the emergence of DevSecOps that have looked at integrating
    security and compliance into the software delivery process, as opposed to being
    bolted on manual actions and separate reactive initiatives. DevSecOps has looked
    at using DevOps and agile philosophies and embraced the idea of embedding security
    engineers in scrum teams to make sure that security requirements are met at the
    point of inception.
  prefs: []
  type: TYPE_NORMAL
- en: This means that security and compliance can be integrated as automated phases
    in Continuous Delivery pipelines, to run security compliance checks on every software
    release, and not slow down the software development lifecycle for developers and
    generate the necessary feedback loops.
  prefs: []
  type: TYPE_NORMAL
- en: So networking teams can learn from DevOps methodologies too much like development,
    operations, quality assurance, and security teams. These teams have utilized agile
    processes to improve their interaction with the software development process and
    benefit from using feedback loops.
  prefs: []
  type: TYPE_NORMAL
- en: How many times have network engineers had no choice but to delay a software
    release, as network changes need to be implemented and have been done so inefficiently
    using ticket-based systems that are not aligned with the processes other departments
    use? How many times have manually implemented network changes broken production
    services? This isn't a criticism of network teams or the ability of network engineers;
    it's the realization that the operational model needs to change and they can.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will look at how networking changes can be made more efficient so
    as not to slow down the software development lifecycle. It will help outline strategies
    network engineers can adopt to automate network operations. We will focus on setting
    up network teams to succeed in an automation-driven environment, enabling the
    teams to work in a more collaborative fashion, and improve efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: It will also show that network teams need to build new skills and learn configuration
    management tools such as Ansible to help them achieve this goal. The book will
    show the advantages that these tools bring, using the network modules they provide,
    and that they will help make automation easy and act as a self-starter guide.
  prefs: []
  type: TYPE_NORMAL
- en: We will focus on some of the cultural challenges that need to be overcome to
    influence and implement automation processes for network functions and convince
    network teams to make the most of networking APIs that are now provided by vendors
    can be trusted.
  prefs: []
  type: TYPE_NORMAL
- en: The book will discuss public and private clouds such as AWS and OpenStack, and
    ways they are used to provide networking to users. It will also discuss the emergence
    of software-defined networking solutions, such as Juniper Contrail, VMWare NSX,
    CISCO ACI, and focus on the Nokia Nuage VSP solution, which aims to make networking
    functions a self-service commodity.
  prefs: []
  type: TYPE_NORMAL
- en: The book will also highlight how continuous integration and delivery processes
    and deployment pipelines can be applied to govern network changes. It will also
    show ways that unit testing can be applied to automated network changes to integrate
    them with the software delivery lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'A detailed chapter overview for the book is detailed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. The Impact of Cloud on Networking"), *The
    Impact of Cloud on Networking*, will discuss ways in which the emergence of AWS
    for public cloud and OpenStack for private cloud have changed the way developers
    want to consume networking. It will look at some of the networking services AWS
    and OpenStack provide out of the box and look at some of the networking features
    they provide. It will show examples of how these cloud platforms have made networking
    a commodity much like infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. The Emergence of Software-defined Networking"),
    *The Emergence of Software-defined Networking*, will discuss how software-defined
    networking has emerged. It will look at the methodology and focus on some of the
    scaling benefits and features this provides over and above the out-of-the-box
    experience from AWS and OpenStack. It will illustrate how one of the market-leading
    SDN solutions, Nuage, applies these concepts and principles and discusses other
    SDN solutions on the market.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Bringing DevOps to Network Operations"),
    *Bringing DevOps to Network Operations*, will detail the pros and cons of a top-down
    and bottom-up DevOps initiatives with regards to networking. It will give readers
    food for thought on some of the strategies that have been a success and which
    ones have typically failed. This chapter will help CTOs, senior managers, and
    engineers who are trying to initiate a DevOps model in their company''s network
    department and outline some of the different strategies they could use to achieve
    the cultural changes they desire.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Configuring Network Devices Using Ansible"),
    *Configuring Network Devices Using Ansible*, will outline the benefits of using
    configuration management tools to install and push configuration to network devices
    and discuss some of the open source network modules available to do this at the
    moment and how they work. It will give some examples of process flows that could
    be adopted to maintain device configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Orchestrating Load Balancers Using Ansible"),
    *Orchestrating Load Balancers Using Ansible*, will describe the benefits of using
    Ansible to orchestrate load balancers and the approaches to roll new software
    releases into service without the need for downtime or manual intervention. It
    will give some examples of some process flows that could be adopted to allow orchestration
    of both immutable and static servers looking at the different load balancer technologies
    available.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Orchestrating SDN Controllers Using Ansible"),
    *Orchestrating SDN Controllers Using Ansible*, will outline the benefits of using
    Ansible to orchestrate SDN controllers. It will outline the benefits of software-defined
    networking and why it is paramount to automate the network functions that an SDN
    controller exposes. This includes setting ACL rules dynamically, which will allow
    network engineers to provide a Network as a Service (NaaS) allowing developers
    to self-service their networking needs. It will discuss deployment strategies
    such as blue green networks as well as exploring some of the process flows that
    could be used to implement a NaaS approach.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Using Continuous Integration Builds for Network
    Configuration"), *Using Continuous Integration Builds for Network Configuration*,
    will discuss moving to a model where network configuration is stored in source
    control management systems, so it is easily audited and versioned and changes
    can be rolled back.'
  prefs: []
  type: TYPE_NORMAL
- en: It will look at workflows that can be used to set up network configuration CI
    builds using tools such as Jenkins and Git.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Testing Network Changes"), *Testing Network
    Changes*, will outline the importance of using test environments to test network
    changes before applying them in production. It will explore some of the open source
    tooling available and walk through some of the test strategies that can be applied
    to make sure that network changes are thoroughly tested before applying them to
    production.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Using Continuous Delivery Pipelines to Deploy
    Network Changes"), *Using Continuous Delivery Pipelines to Deploy Network Changes*,
    will show readers how to use continuous integration and Continuous Delivery pipelines
    to deliver network changes to production and put them through associated test
    environments. It will give some examples of some process flows that could be adopted
    to deliver network changes to production and how they can easily sit alongside
    infrastructure and code changes in deployment pipelines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. The Impact of Containers on Networking"),
    *The Impact of Containers on Networking*, dedicated container technologies such
    as Docker and container orchestration engines such as Kubernetes and Swarm are
    becoming more and more popular with companies that are moving to microservice
    architectures. As a result, this has changed networking requirements. This chapter
    will look at how containers operate and the impact they have had on networking.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Securing the Network"), *Securing the Network*,
    will look at how this approach makes a security engineer''s job of auditing the
    network easier. It will look at the possible attack vectors in a software-defined
    network and ways that security checks can be integrated into a DevOps model.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes a medium level on networking knowledge, a basic level of Linux
    knowledge, a basic knowledge of cloud computing technologies, and a broad knowledge
    of IT. It is focusing primarily on particular process workflows that can be implemented
    rather than base technologies, so the ideas and content can be applied to any
    organization, no matter the technology that is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, that being said, it could be beneficial to readers to access the following
    technologies when digesting some of the chapters'' content:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS [https://aws.amazon.com/free/](https://aws.amazon.com/free/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack [http://trystack.org/](http://trystack.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuage VSP [http://nuagex.io/](http://nuagex.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The target audience for this book is network engineers who want to automate
    the manual and repetitive parts of their job or developers or system admins who
    want to automate all network functions.
  prefs: []
  type: TYPE_NORMAL
- en: This book will also provide a good insight to CTOs or managers who want to understand
    ways in which they can make their network departments more agile and initiate
    real cultural change within their organizations.
  prefs: []
  type: TYPE_NORMAL
- en: The book will also aid casual readers who want to understand more about DevOps,
    continuous integration, and Continuous Delivery and how they can be applied to
    real-world scenarios as well as insights on some of the tooling that is available
    to facilitate automation.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "These
    services are then bound to the `lbvserver` entity."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Click the **Search** button on Google."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply e-mail `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book's title in the subject of your message. If there is a topic
    that you have expertise in and you are interested in either writing or contributing
    to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the color images of this book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also provide you with a PDF file that has color images of the screenshots/diagrams
    used in this book. The color images will help you better understand the changes
    in the output. You can download this file from [http://www.packtpub.com/sites/default/files/downloads/DevOpsforNetworking_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/DevOpsforNetworking_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
