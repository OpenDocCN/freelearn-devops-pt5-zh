- en: '*Chapter 2*: Setting Up Your Kubernetes Cluster'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 2 章*：设置您的 Kubernetes 集群'
- en: This chapter contains a review of some of the possibilities for creating a Kubernetes
    cluster, which we'll need to be able to learn the rest of the concepts in this
    book. We'll start with minikube, a tool to create a simple local cluster, then
    touch on some additional, more advanced (and production-ready) tools and review
    the major managed Kubernetes services from public cloud providers, before we finally
    introduce the strategies for creating a cluster from scratch.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将回顾一些创建 Kubernetes 集群的可能性，这些内容对于学习本书中的其他概念至关重要。我们将从 minikube 开始，这是一款用于创建简单本地集群的工具，然后简要介绍一些附加的、更高级（并且适用于生产环境）的工具，并回顾主要的公共云提供商的托管
    Kubernetes 服务，最后我们将介绍从零开始创建集群的策略。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Options for creating your first cluster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建第一个集群的选项
- en: minikube – an easy way to start
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube – 一种简便的入门方式
- en: Managed services – EKS, GKE, AKS, and more
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管服务 – EKS、GKE、AKS 等
- en: Kubeadm – simple conformance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubeadm – 简单的一致性
- en: Kops – infrastructure bootstrapping
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kops – 基础设施引导
- en: Kubespray – Ansible-powered cluster creation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubespray – 基于 Ansible 的集群创建
- en: Creating a cluster completely from scratch
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全从零开始创建集群
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to run the commands in this chapter, you will need to have the kubectl
    tool installed. Installation instructions are available in [*Chapter 1*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016),
    *Communicating with Kubernetes*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本章中的命令，您需要安装 kubectl 工具。安装说明请参见[*第 1 章*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016)，*与
    Kubernetes 通信*。
- en: If you are actually going to create a cluster using any of the methods in this
    chapter, you will need to review the specific technical requirements for each
    method in the relevant project's documentation. For minikube specifically, most
    machines running Linux, macOS, or Windows will work. For large clusters, please
    review the specific documentation of the tool you plan to use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算使用本章中的任何方法创建集群，您需要查看相关项目文档中的每种方法的具体技术要求。特别是对于 minikube，大多数运行 Linux、macOS
    或 Windows 的机器都能正常工作。对于大型集群，请查看您计划使用的工具的具体文档。
- en: 'The code used in this chapter can be found in the book''s GitHub repository
    at the following link:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在本书的 GitHub 仓库中找到，链接如下：
- en: '[https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2)'
- en: Options for creating a cluster
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群的选项
- en: There are many ways to create a Kubernetes cluster, ranging from simple local
    tools all the way to fully creating a cluster from scratch.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以创建 Kubernetes 集群，从简单的本地工具到完全从零开始创建集群。
- en: If you're just getting started with learning Kubernetes, you'll probably want
    to spin up a simple local cluster with a tool such as minikube.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您刚开始学习 Kubernetes，可能希望使用如 minikube 之类的工具来启动一个简单的本地集群。
- en: 'If you''re looking to build a production cluster for an application, you have
    several options:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想为应用程序构建生产集群，您有几个选项：
- en: You can use a tool such as Kops, Kubespray, or Kubeadm to create the cluster
    programmatically.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用如 Kops、Kubespray 或 Kubeadm 等工具程序化地创建集群。
- en: You can use a managed Kubernetes service.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用托管的 Kubernetes 服务。
- en: You can create a cluster completely from scratch on VMs or physical hardware.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在虚拟机或物理硬件上完全从零开始创建集群。
- en: Unless you have extremely specific demands in terms of cluster configuration
    (and even then), it is not usually recommended to create your cluster completely
    from scratch without using a bootstrapping tool.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您的集群配置有非常具体的需求（即使是那样），通常不建议完全从头开始创建集群而不使用引导工具。
- en: For most use cases, the decision will be between using a managed Kubernetes
    service on a cloud provider and using a bootstrapping tool.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数使用案例，决策通常是在使用云提供商的托管 Kubernetes 服务和使用引导工具之间选择。
- en: In air-gapped systems, using a bootstrapping tool is the only way to go – but
    some are better than others for particular use cases. In particular, Kops is aimed
    at making it easier to create and manage clusters on cloud providers such as AWS.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在隔离的系统中，使用引导工具是唯一可行的方式——但对于特定的使用案例，某些工具比其他工具更合适。特别地，Kops 旨在简化在 AWS 等云提供商上创建和管理集群的过程。
- en: Important note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Not included in this section is a discussion of alternative third-party managed
    services or cluster creation and administration tools such as Rancher or OpenShift.
    When making a selection for running clusters in production, it is important to
    take into account a large variety of factors including the current infrastructure,
    business requirements, and much more. To keep things simple, in this book we will
    focus on production clusters, assuming no other infrastructure or hyper-specific
    business needs – a "clean slate," so to speak.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本节未讨论第三方托管服务或集群创建和管理工具，如 Rancher 或 OpenShift。在选择用于生产环境的集群时，考虑多种因素至关重要，包括当前基础设施、业务需求等。为了简化起见，本书将重点关注生产集群，假设没有其他基础设施或超具体的业务需求——可以说是一个“白纸”。
- en: minikube – an easy way to start
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: minikube – 一种简单的启动方式
- en: minikube is the easiest way to get started with a simple local cluster. This
    cluster won't be set up for high availability, and is not aimed at production
    uses, but it is a great way to get started running workloads on Kubernetes in
    minutes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: minikube 是开始使用简单本地集群的最简便方法。此集群不会设置为高可用性，并且不适合生产用途，但它是一个在几分钟内开始在 Kubernetes 上运行工作负载的绝佳方式。
- en: Installing minikube
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 minikube
- en: minikube can be installed on Windows, macOS, and Linux. What follows is the
    installation instructions for all three platforms, which you can also find by
    navigating to [https://minikube.sigs.k8s.io/docs/start](https://minikube.sigs.k8s.io/docs/start).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: minikube 可以安装在 Windows、macOS 和 Linux 上。以下是所有三个平台的安装说明，你也可以通过访问 [https://minikube.sigs.k8s.io/docs/start](https://minikube.sigs.k8s.io/docs/start)
    获取这些信息。
- en: Installing on Windows
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Windows 上安装
- en: The easiest installation method on Windows is to download and run the minikube
    installer from [https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe](https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上最简单的安装方法是从[https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe](https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe)
    下载并运行 minikube 安装程序。
- en: Installing on macOS
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 macOS 上安装
- en: 'Use the following command to download and install the binary. You can find
    it in the code repository as well:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令下载并安装二进制文件。你也可以在代码库中找到它：
- en: Minikube-install-mac.sh
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube-install-mac.sh
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing on Linux
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Linux 上安装
- en: 'Use the following command to download and install the binary:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令下载并安装二进制文件：
- en: Minikube-install-linux.sh
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube-install-linux.sh
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a cluster on minikube
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 minikube 上创建集群
- en: To get started with a cluster on minikube, simply run `minikube start`, which
    will create a simple local cluster with the default VirtualBox VM driver. minikube
    also has several additional configuration options that can be reviewed at the
    documentation site.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在 minikube 上使用集群，只需运行`minikube start`，它将使用默认的 VirtualBox VM 驱动程序创建一个简单的本地集群。minikube
    还有几个额外的配置选项，可以在文档网站上查看。
- en: Running the `minikube` `start` command will automatically configure your `kubeconfig`
    file so you can run `kubectl` commands without any further configuration on your
    newly created cluster.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `minikube` `start` 命令将自动配置你的 `kubeconfig` 文件，这样你就可以在新创建的集群上运行 `kubectl` 命令，而无需进行进一步配置。
- en: Managed Kubernetes services
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管 Kubernetes 服务
- en: 'The number of managed cloud providers that offer a managed Kubernetes service
    is always growing. However, for the purposes of this book, we will focus on the
    major public clouds and their particular Kubernetes offerings. This includes the
    following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 提供托管 Kubernetes 服务的云提供商数量在不断增长。然而，出于本书的目的，我们将重点关注主要的公共云及其特定的 Kubernetes 服务。这包括以下内容：
- en: '**Amazon Web Services** (**AWS**) – **Elastic Kubernetes Service** (**EKS**)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**） – **弹性 Kubernetes 服务**（**EKS**）'
- en: Google Cloud – **Google Kubernetes Engine** (**GKE**)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud – **Google Kubernetes 引擎**（**GKE**）
- en: Microsoft Azure – **Azure Kubernetes Service** (**AKS**)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure – **Azure Kubernetes 服务**（**AKS**）
- en: Important note
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: The number and implementation of managed Kubernetes services is always changing.
    AWS, Google Cloud, and Azure were selected for this section of the book because
    they are very likely to continue working in the same manner. Whatever managed
    service you use, make sure to check the official documentation provided with the
    service to ensure that the cluster creation procedure is still the same as what
    is presented in this book.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 管理型 Kubernetes 服务的数量和实施方式始终在变化。选择 AWS、Google Cloud 和 Azure 作为本书这一章节的内容，因为它们很可能会继续以相同的方式运行。无论使用哪个管理型服务，都要确保检查服务附带的官方文档，以确保集群创建过程仍与本书中所述相同。
- en: Benefits of managed Kubernetes services
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理型 Kubernetes 服务的好处
- en: Generally, the major managed Kubernetes service offerings provide a few benefits.
    Firstly, all three of the managed service offerings we're reviewing provide a
    completely managed Kubernetes control plane.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，主要的管理型 Kubernetes 服务提供一些好处。首先，我们审查的三个管理型服务都提供完全托管的 Kubernetes 控制平面。
- en: This means that when you use one of these managed Kubernetes services, you do
    not need to worry about your master nodes. They are abstracted away and may as
    well not exist. All three of these managed clusters allow you to choose the number
    of worker nodes when creating a cluster.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，当您使用这些管理型 Kubernetes 服务时，您无需担心主节点。它们已被抽象化，几乎可以认为它们不存在。这三个管理型集群都允许您在创建集群时选择工作节点的数量。
- en: Another benefit of a managed cluster is seamless upgrades from one version of
    Kubernetes to another. Generally, once a new version of Kubernetes (not always
    the newest version) is validated for the managed service, you should be able to
    upgrade using a push button or a reasonably simple procedure.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 管理型集群的另一个好处是可以无缝地将 Kubernetes 从一个版本升级到另一个版本。一般来说，一旦为管理型服务验证了一个新的 Kubernetes
    版本（并不总是最新版本），您应该能够通过一键操作或相对简单的程序来进行升级。
- en: Drawbacks of managed Kubernetes services
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理型 Kubernetes 服务的缺点
- en: Although a managed Kubernetes cluster can make operations easier in many respects,
    there are also some downsides.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管管理型 Kubernetes 集群在许多方面可以简化操作，但也有一些缺点。
- en: For many of the managed Kubernetes services available, the minimum cost for
    a managed cluster far exceeds the cost of a minimal cluster created manually or
    with a tool such as Kops. For production use cases, this is generally not as much
    of an issue because a production cluster should contain a minimum amount of nodes
    anyway, but for development environments or test clusters, the additional cost
    may not be worth the ease of operations depending on the budget.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多可用的管理型 Kubernetes 服务，管理集群的最低成本远超手动创建或使用像 Kops 这样的工具创建的最小集群成本。对于生产使用场景，这通常不是问题，因为生产集群应包含最低数量的节点，但对于开发环境或测试集群，额外的成本可能无法根据预算与操作简便性相匹配。
- en: Additionally, though abstracting away master nodes makes operations easier,
    it also prevents fine tuning or advanced master node functionality that may otherwise
    be available on clusters with defined masters.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然抽象化主节点使得操作更简单，但它也限制了主节点功能的微调或高级功能，这些功能在具有定义主节点的集群中可能是可用的。
- en: AWS – Elastic Kubernetes Service
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS – 弹性 Kubernetes 服务
- en: AWS' managed Kubernetes service is called EKS, or Elastic Kubernetes Service.
    There are a few different ways to get started with EKS, but we'll cover the simplest
    way.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 的管理型 Kubernetes 服务称为 EKS（Elastic Kubernetes Service）。有几种不同的方式可以开始使用 EKS，但我们将介绍最简单的方式。
- en: Getting started
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用
- en: In order to create an EKS cluster, you must provision the proper **Virtual Private
    Cloud (VPC)** and **Identity and Access Management (IAM)** role settings – at
    which point you can create a cluster through the console. These settings can be
    created manually through the console, or through infrastructure provisioning tools
    such as CloudFormation and Terraform. Full instructions for creating a cluster
    through the console can be found at [https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html](https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个 EKS 集群，您必须配置适当的**虚拟私有云（VPC）**和**身份与访问管理（IAM）**角色设置——此时您就可以通过控制台创建集群。这些设置可以通过控制台手动创建，或者使用像
    CloudFormation 和 Terraform 这样的基础设施配置工具来创建。有关通过控制台创建集群的完整说明，请参见 [https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html](https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html)。
- en: Assuming you're creating a cluster and VPC from scratch, however, you can instead
    use a tool called `eksctl` to provision your cluster.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您是从头开始创建集群和VPC，则可以使用名为`eksctl`的工具来提供您的集群。
- en: To install `eksctl`, you can find installation instructions for macOS, Linux,
    and Windows at [https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 若要安装`eksctl`，您可以在macOS、Linux和Windows上找到安装说明，请访问[https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html)。
- en: 'Once you have `eksctl` installed, creating a cluster is as simple as using
    the `eksctl create cluster` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`eksctl`，创建集群就像使用`eksctl create cluster`命令一样简单：
- en: Eks-create-cluster.sh
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Eks-create-cluster.sh
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create a cluster of three `t2.small` instances as worker nodes set
    up in an autoscaling group with a minimum of one node and a maximum of four. The
    Kubernetes version that is used will be `1.17`. Importantly, `eksctl` starts with
    a default region, and depending on the number of nodes chosen, they will be spread
    throughout multiple availability zones in that region.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含三个`t2.small`实例作为工作节点的集群，并设置为具有一个节点的自动伸缩组和最多四个节点。使用的Kubernetes版本将为`1.17`。重要的是，`eksctl`从默认区域开始，并根据选择的节点数量将它们分布在该区域的多个可用区中。
- en: '`eksctl` will also automatically update your `kubeconfig` file, so you should
    be able to run `kubectl` commands immediately after the cluster creation process
    is finished.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`eksctl`还将自动更新您的`kubeconfig`文件，因此在集群创建过程完成后，您应该能够立即运行`kubectl`命令。'
- en: 'Test the configuration with the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码测试配置：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should see a list of your nodes and their associated IPs. Your cluster is
    ready! Next, let's take a look at Google's GKE setup process.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到节点及其关联IP的列表。您的集群已准备就绪！接下来，让我们看一看Google的GKE设置过程。
- en: Google Cloud – Google Kubernetes Engine
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cloud – Google Kubernetes Engine
- en: GKE is Google Cloud's managed Kubernetes service. With the gcloud command-line
    tool, it is very easy to quickly spin up a GKE cluster.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: GKE是Google Cloud的托管Kubernetes服务。使用gcloud命令行工具，快速启动GKE集群非常容易。
- en: Getting started
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: To create a cluster on GKE using gcloud, you can either use Google Cloud's Cloud
    Shell service, or run the commands locally. If you want to run the commands locally,
    you must install the gcloud CLI via the Google Cloud SDK. See [https://cloud.google.com/sdk/docs/quickstarts](https://cloud.google.com/sdk/docs/quickstarts)
    for installation instructions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使用gcloud在GKE上创建集群，您可以使用Google Cloud的Cloud Shell服务，或在本地运行命令。如果要在本地运行命令，则必须通过Google
    Cloud SDK安装gcloud CLI。请参阅[https://cloud.google.com/sdk/docs/quickstarts](https://cloud.google.com/sdk/docs/quickstarts)获取安装说明。
- en: Once you have gcloud installed, you need to ensure that you have activated the
    GKE API in your Google Cloud account.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完gcloud后，您需要确保已在您的Google Cloud帐户中激活了GKE API。
- en: To easily accomplish this, navigate to [https://console.cloud.google.com/apis/library](https://console.cloud.google.com/apis/library),
    then search for `kubernetes` in the search bar. Click on **Kubernetes Engine API**
    and then click **Enable**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要轻松完成此操作，请转到[https://console.cloud.google.com/apis/library](https://console.cloud.google.com/apis/library)，然后在搜索栏中搜索`kubernetes`。点击**Kubernetes
    Engine API**，然后点击**启用**。
- en: 'Now that the API is activated, set your project and compute zone in Google
    Cloud by using the following commands:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在API已激活，请使用以下命令在Google Cloud中设置您的项目和计算区域：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the commands, `proj_id` corresponds to the project ID in Google Cloud that
    you want to create your cluster in, and `compute_zone` corresponds to your desired
    compute zone in Google Cloud.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令中，`proj_id`对应于您希望在其中创建集群的Google Cloud项目ID，而`compute_zone`对应于您在Google Cloud中所需的计算区域。
- en: 'There are actually three types of clusters on GKE, each with different (increasing)
    levels of reliability and fault tolerance:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，GKE上有三种类型的集群，每种具有不同（增加）的可靠性和容错能力：
- en: Single-zone clusters
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单区域集群
- en: Multi-zonal clusters
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多区域集群
- en: Regional clusters
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域集群
- en: A **single-zone** cluster in GKE means a cluster that has a single control plane
    replica and one or more worker nodes running in the same Google Cloud zone. If
    something happens to the zone, both the control plane and the workers (and thus
    the workloads) will go down.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在GKE中，**单区域**集群意味着具有单个控制平面副本和一个或多个工作节点的集群，这些节点运行在同一Google Cloud区域中。如果区域发生故障，控制平面和工作节点（因此工作负载）将同时停机。
- en: A **multi-zonal** cluster in GKE means a cluster that has a single control plane
    replica and two or more worker nodes running in different Google Cloud zones.
    This means that if a single zone (even the zone containing the control plane)
    goes down, the workloads running in the cluster will still persist, but the Kubernetes
    API will be unavailable until the control plane zone comes back up.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GKE 中，**多区域**集群意味着一个具有单个控制平面副本和两个或更多运行在不同 Google Cloud 区域的工作节点的集群。这意味着如果一个单独的区域（即使是包含控制平面的区域）宕机，运行在集群中的工作负载仍将持久存在，但
    Kubernetes API 将不可用，直到控制平面区域恢复为止。
- en: Finally, a **regional cluster** in GKE means a cluster that has both a multi-zonal
    control plane and multi-zonal worker nodes. If any zone goes down, both the control
    plane and the workloads on the worker nodes will persist. This is the most expensive
    and reliable option.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 GKE 中，**区域**集群意味着一个具有多区域控制平面和多区域工作节点的集群。如果任何区域宕机，控制平面和工作在工作节点上的负载都将持久存在。这是最昂贵和可靠的选择。
- en: 'Now, to actually create your cluster, you can run the following command to
    create a cluster named `dev` with the default settings:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要实际创建您的集群，您可以运行以下命令来创建一个名为`dev`且具有默认设置的集群：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will create a single-zone cluster in your chosen compute zone.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将在您选择的计算区域内创建一个单区域集群。
- en: 'In order to create a multi-zonal cluster, you can run the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个多区域集群，您可以运行以下命令：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `compute_zone_1` and `compute_zone_2` are disparate Google Cloud zones.
    In addition, more zones can be added via the `node-locations` flag.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`compute_zone_1`和`compute_zone_2`是不同的 Google Cloud 区域。此外，可以通过`node-locations`标志添加更多区域。
- en: 'Finally, to create a regional cluster, you can run the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要创建一个区域集群，您可以运行以下命令：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, the `node-locations` flag is actually optional. If left out, the
    cluster will be created with worker nodes in all the zones within the region.
    If you'd like to change this default behavior, you can override it using the `node-locations`
    flag.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`node-locations`标志实际上是可选的。如果省略，集群将在区域内所有区域的工作节点中创建。如果您希望更改此默认行为，可以使用`node-locations`标志进行覆盖。
- en: 'Now that you have a cluster running, you need to configure your `kubeconfig`
    file to communicate with the cluster. To do this, simply pass the cluster name
    into the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的集群正在运行，您需要配置您的`kubeconfig`文件以与集群通信。为此，只需将集群名称传递到以下命令中：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, test the configuration with the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令测试配置：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As with EKS, you should see a list of all your provisioned nodes. Success! Finally,
    let's take a look at Azure's managed offering.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与 EKS 一样，您应该看到所有已提供节点的列表。成功！最后，让我们看一下 Azure 的托管服务。
- en: Microsoft Azure – Azure Kubernetes Service
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure – Azure Kubernetes Service
- en: Microsoft Azure's managed Kubernetes service is called AKS. Creating a cluster
    on AKS can be done via the Azure CLI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 的托管 Kubernetes 服务称为 AKS。可以通过 Azure CLI 在 AKS 上创建集群。
- en: Getting started
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'To create a cluster on AKS, you can use the Azure CLI tool and run the following
    command to create a service principal (a role that the cluster will use to access
    Azure resources):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 AKS 上创建集群，您可以使用 Azure CLI 工具，并运行以下命令来创建服务主体（集群用于访问 Azure 资源的角色）：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result of this command will be a JSON object with information on the service
    principal, which we will use in the next step. This JSON object looks like the
    following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的结果将是一个包含服务主体信息的 JSON 对象，我们将在下一步中使用它。此 JSON 对象看起来像以下内容：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, you can use the values from the previous JSON command to actually create
    your AKS cluster:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用上一个 JSON 命令中的值实际创建您的 AKS 集群：
- en: Aks-create-cluster.sh
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Aks-create-cluster.sh
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command assumes a resource group named `devResourceGroup`, and a cluster
    named `devCluster`. For `appId` and `password`, use the values from the service
    principal creation step.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令假设已经存在一个名为`devResourceGroup`的资源组和一个名为`devCluster`的集群。对于`appId`和`password`，请使用服务主体创建步骤中的值。
- en: 'Finally, to generate the proper `kubectl` configuration on your machine, you
    can run the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了在您的机器上生成正确的`kubectl`配置，您可以运行以下命令：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: At this point, you should be able to properly run `kubectl` commands. Test the
    configuration with the `kubectl get nodes` command.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到了这一步，您应该能够正确运行`kubectl`命令。使用`kubectl get nodes`命令测试配置。
- en: Programmatic cluster creation tools
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程化集群创建工具
- en: 'There are several tools available that will bootstrap a Kubernetes cluster
    in various non-managed environments. We''ll focus on three of the most popular:
    Kubeadm, Kops, and Kubespray. Each tool is aimed at a different use case and generally
    works by a different method.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种工具可用于在各种非托管环境中引导Kubernetes集群。我们将重点介绍三种最流行的工具：Kubeadm、Kops和Kubespray。每种工具都有不同的使用场景，并且通常采用不同的方法。
- en: Kubeadm
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeadm
- en: Kubeadm is a tool created by the Kubernetes community to simplify cluster creation
    on infrastructure that is already provisioned. Unlike Kops, Kubeadm does not have
    the ability to provision infrastructure on cloud services. It simply creates a
    best-practices cluster that will pass Kubernetes conformance tests. Kubeadm is
    agnostic to infrastructure – it should work anywhere you can run Linux VMs.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeadm是由Kubernetes社区创建的工具，用于简化在已配置好的基础设施上创建集群。与Kops不同，Kubeadm没有在云服务上配置基础设施的能力。它仅创建一个符合最佳实践的集群，能够通过Kubernetes一致性测试。Kubeadm与基础设施无关——它应该可以在任何能够运行Linux虚拟机的地方工作。
- en: Kops
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kops
- en: Kops is a popular cluster provisioning tool. It provisions the underlying infrastructure
    for your cluster, installs all cluster components, and validates the functionality
    of your cluster. It can also be used to perform various cluster operations such
    as upgrades, node rotations, and more. Kops currently supports AWS, with (as of
    the time of writing this book) beta support for Google Compute Engine and OpenStack,
    and alpha support for VMware vSphere and DigitalOcean.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Kops是一个流行的集群配置工具。它为集群配置底层基础设施，安装所有集群组件，并验证集群功能。它还可以用于执行各种集群操作，如升级、节点轮换等。Kops目前支持AWS，且（在撰写本书时）对Google
    Compute Engine和OpenStack提供beta支持，对VMware vSphere和DigitalOcean提供alpha支持。
- en: Kubespray
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubespray
- en: Kubespray is different to both Kops and Kubeadm. Unlike Kops, Kubespray does
    not inherently provision cluster resources. Instead, Kubespray allows you to choose
    between Ansible and Vagrant in order to perform provisioning, orchestration, and
    node setup.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Kubespray与Kops和Kubeadm有所不同。与Kops不同，Kubespray本身并不会自动配置集群资源。相反，Kubespray允许您选择使用Ansible或Vagrant来进行配置、编排和节点设置。
- en: When compared to Kubeadm, Kubespray has far fewer integrated cluster creation
    and life cycle processes. Newer versions of Kubespray allow you to use Kubeadm
    specifically for cluster creation after node setup.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与Kubeadm相比，Kubespray集成的集群创建和生命周期管理过程要少得多。Kubespray的较新版本允许您在节点设置后，专门使用Kubeadm来创建集群。
- en: Important note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Since creating a cluster with Kubespray requires some Ansible-specific domain
    knowledge, we will keep that discussion out of this book – but a guide to all
    things Kubespray can be found at [https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md](https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用Kubespray创建集群需要一些特定于Ansible的领域知识，我们将在本书中不讨论这一部分内容——但关于Kubespray的所有内容可以参考[https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md](https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md)。
- en: Creating a cluster with Kubeadm
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubeadm创建集群
- en: To create a cluster with Kubeadm, you will need your nodes provisioned ahead
    of time. As with any other Kubernetes cluster, we'll need VMs or bare-metal servers
    running Linux.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Kubeadm创建一个集群，您需要提前为节点进行配置。与任何其他Kubernetes集群一样，我们需要运行Linux的虚拟机或裸金属服务器。
- en: For the purposes of this book, we will show how to bootstrap a Kubeadm cluster
    with only a single master node. For highly available setups, you'll need to run
    additional join commands on the other master nodes, which you can find at [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将展示如何仅使用单个主节点来引导一个Kubeadm集群。对于高可用设置，您需要在其他主节点上运行额外的加入命令，相关内容可以在[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/)找到。
- en: Installing Kubeadm
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Kubeadm
- en: First things first – you'll need to install Kubeadm on all nodes. The installation
    instructions for each supported operating system can be found at [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要在所有节点上安装Kubeadm。每个支持的操作系统的安装说明可以在[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm)找到。
- en: For each node, also make sure to check that all the required ports are open,
    and that you've installed your intended container runtime.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个节点，还需要确保检查所有必需的端口是否已开放，并且已安装你所选择的容器运行时。
- en: Starting the master nodes
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动主节点
- en: 'To quickly start master nodes with Kubeadm, you only need to run a single command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速启动主节点，可以使用Kubeadm运行一个命令：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This initialization command can take in several optional arguments – depending
    on your preferred cluster setup, networking, and so on, you may need to use them.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此初始化命令可以接受多个可选参数——根据你选择的集群设置、网络配置等，可能需要使用这些参数。
- en: In the output of the `init` command, you'll see a `kubeadm join` command. Make
    sure to save this command.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在`init`命令的输出中，你将看到一个`kubeadm join`命令。请确保保存这个命令。
- en: Starting the worker nodes
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动工作节点
- en: 'In order to bootstrap the worker nodes, you need to run the `join` command
    you saved. The command will be of the following form:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动工作节点，你需要运行之前保存的`join`命令。该命令的格式如下：
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The token in this command is a bootstrap token. It is used to authenticate nodes
    with each other and join new nodes to the cluster. With access to this token comes
    the power to join new nodes to the cluster, so treat it as such.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令中的令牌是一个引导令牌。它用于对节点进行身份验证并将新节点加入集群。拥有此令牌的访问权限意味着你有能力将新节点加入集群，因此请谨慎对待它。
- en: Setting up kubectl
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置kubectl
- en: 'With Kubeadm, kubectl will already be properly set up on the master node. However,
    to use kubectl from any other machine or outside the cluster, you can copy the
    config from the master to your local machine:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kubeadm时，`kubectl`已经在主节点上正确配置。不过，如果你希望在其他机器或集群外部使用`kubectl`，可以将配置从主节点复制到本地机器：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This `kubeconfig` will be the cluster administrator config – in order to specify
    other users (and permissions), you will need to add new service accounts and generate
    `kubeconfig` files for them.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此`kubeconfig`将是集群管理员配置——若要为其他用户指定权限，你需要添加新的服务帐户，并为其生成`kubeconfig`文件。
- en: Creating a cluster with Kops
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kops创建集群
- en: Since Kops will provision infrastructure for you, there is no need to pre-create
    any nodes. All you need to do is install Kops, ensure your cloud platform credentials
    are working, and create your cluster all at once. Kops can be installed on Linux,
    macOS, and Windows.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kops将为你提供基础设施，因此无需预先创建任何节点。你只需安装Kops，确保你的云平台凭证正常工作，然后一键创建集群。Kops可以在Linux、macOS和Windows上安装。
- en: For this tutorial, we will go through creating a cluster on AWS, but you can
    find instructions for other supported Kops platforms in the Kops documentation
    at [https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将演示如何在AWS上创建集群，但你可以在Kops文档中找到其他支持的平台的安装说明：[https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs)。
- en: Installing on macOS
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在macOS上安装
- en: 'On OS X, the easiest way to install Kops is using Homebrew:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在OS X上，安装Kops的最简单方法是使用Homebrew：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Alternatively, you can grab the newest stable Kops binary from the Kops GitHub
    page at [https://github.com/kubernetes/kops/releases/tag/1.12.3](https://github.com/kubernetes/kops/releases/tag/1.12.3).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以从Kops的GitHub页面下载最新的稳定版Kops二进制文件：[https://github.com/kubernetes/kops/releases/tag/1.12.3](https://github.com/kubernetes/kops/releases/tag/1.12.3)。
- en: Installing on Linux
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Linux上安装
- en: 'On Linux, you can install Kops via the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，你可以通过以下命令安装Kops：
- en: Kops-linux-install.sh
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Kops-linux-install.sh
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Installing on Windows
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装
- en: To install Kops on Windows, you'll need to download the newest Windows release
    from [https://github.com/kubernetes/kops/releases/latest](https://github.com/kubernetes/kops/releases/latest),
    rename it to `kops.exe`, and add it to your `path` variable.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装Kops，你需要从[https://github.com/kubernetes/kops/releases/latest](https://github.com/kubernetes/kops/releases/latest)下载最新的Windows版本，重命名为`kops.exe`，并将其添加到你的`path`变量中。
- en: Setting up credentials for Kops
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Kops凭证
- en: In order for Kops to work, you'll need AWS credentials on your machine with
    a few required IAM permissions. To do this safely, you will want to create an
    IAM user specifically for Kops.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Kops正常工作，你需要在机器上配置AWS凭证，并授予一些必要的IAM权限。为了安全起见，你应为Kops创建一个专用的IAM用户。
- en: 'First, create an IAM group for the `kops` user:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为`kops`用户创建一个IAM组：
- en: '[PRE19]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, attach the required roles for the `kops_users` group. To function properly,
    Kops will need `AmazonEC2FullAccess`, `AmazonRoute53FullAccess`, `AmazonS3FullAccess`,
    `IAMFullAccess`, and `AmazonVPCFullAccess`. We can accomplish this by running
    the following commands:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为 `kops_users` 组附加所需的角色。为了正常运行，Kops 需要 `AmazonEC2FullAccess`、`AmazonRoute53FullAccess`、`AmazonS3FullAccess`、`IAMFullAccess`
    和 `AmazonVPCFullAccess`。我们可以通过运行以下命令来实现：
- en: Provide-aws-policies-to-kops.sh
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 AWS 策略给 kops.sh
- en: '[PRE20]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, create the `kops` user, add it to the `kops_users` group, and create
    programmatic access keys, which you should save:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建 `kops` 用户，将其添加到 `kops_users` 组中，并创建编程访问密钥，请保存这些密钥：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To allow Kops to access your new IAM credentials, you can use the following
    commands to configure your AWS CLI with the access key and secret from the previous
    command (`create-access-key`):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许 Kops 访问您的新 IAM 凭证，您可以使用以下命令将访问密钥和密钥对配置到 AWS CLI 中，这些密钥来自前一个命令（`create-access-key`）：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Setting up state storage
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置状态存储
- en: With the proper credentials set up, we can start creating our cluster. In this
    case, we're going to build a simple gossip-based cluster so we won't need to mess
    around with DNS. To see the possible DNS setups, you can look at the Kops documentation
    ([https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs)).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好适当的凭证后，我们可以开始创建集群。在本例中，我们将构建一个简单的基于 gossip 的集群，因此不需要处理 DNS。要查看可能的 DNS 设置，可以查看
    Kops 文档 ([https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs))。
- en: First, we'll need a location to store our cluster spec. S3 is perfect for this
    since we're on AWS.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个位置来存储我们的集群规格。由于我们使用的是 AWS，S3 是一个完美的选择。
- en: 'As usual with S3, bucket names need to be unique. You can easily create a bucket
    using the AWS SDK (make sure to replace `my-domain-dev-state-store` with your
    desired S3 bucket name):'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，S3 存储桶的名称需要唯一。您可以使用 AWS SDK 轻松创建一个存储桶（确保将 `my-domain-dev-state-store`
    替换为您希望使用的 S3 存储桶名称）：
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It''s a best practice to enable bucket encryption and versioning as well:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是启用存储桶加密和版本控制：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, to set up variables for Kops, use the following commands:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要为 Kops 设置变量，请使用以下命令：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Important note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Kops supports several state storage locations such as AWS S3, Google Cloud Storage,
    Kubernetes, DigitalOcean, OpenStack Swift, Alibaba Cloud, and memfs. However,
    you can just save the Kops state to a local file and use that instead. The benefit
    of having a cloud-based state store is the ability for multiple infrastructure
    developers to access and update it with versioning controls.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Kops 支持多个状态存储位置，例如 AWS S3、Google Cloud Storage、Kubernetes、DigitalOcean、OpenStack
    Swift、阿里云和 memfs。然而，您也可以将 Kops 状态保存到本地文件中并使用它。使用云端状态存储的好处是多个基础设施开发人员可以访问并更新它，同时进行版本控制。
- en: Creating clusters
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建集群
- en: With Kops, we can deploy clusters of any size. For the purposes of this guide,
    we will deploy a production-ready cluster by having both worker and master nodes
    span three availability zones. We're going to use the US-East-1 region, and both
    the masters and workers will be `t2.medium` instances.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kops，我们可以部署任意大小的集群。为了本指南的目的，我们将通过让工作节点和主节点跨越三个可用区来部署一个生产就绪的集群。我们将使用 US-East-1
    区域，主节点和工作节点将是 `t2.medium` 实例。
- en: 'To create the config for this cluster, you can run the following `kops create`
    command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要为该集群创建配置，您可以运行以下 `kops create` 命令：
- en: Kops-create-cluster.sh
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Kops-create-cluster.sh
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To see the config that has been created, use the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看已创建的配置，请使用以下命令：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, to create our cluster, run the following command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要创建我们的集群，请运行以下命令：
- en: '[PRE28]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The cluster creation process may take some time, but once it is complete, your
    `kubeconfig` should be properly configured to use kubectl with your new cluster.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 集群创建过程可能需要一些时间，但一旦完成，您的 `kubeconfig` 应该已经正确配置，可以与新的集群一起使用 kubectl。
- en: Creating a cluster completely from scratch
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头创建集群
- en: Creating a Kubernetes cluster entirely from scratch is a multi-step endeavor
    that could likely span multiple chapters of this book. However, since our purpose
    is to get you up and running with Kubernetes as quickly as possible, we will refrain
    from describing the entire process.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 从头创建 Kubernetes 集群是一个多步骤的过程，可能会跨越本书的多个章节。然而，由于我们的目的是让你尽快启动并运行 Kubernetes，我们将避免描述整个过程。
- en: If you are interested in creating a cluster from scratch, either for educational
    reasons or a need to finely customize your cluster, a great guide is *Kubernetes
    The Hard Way*, which is a full cluster creation tutorial written by *Kelsey Hightower*.
    It can be found at [https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've gotten that out of the way, we can proceed with an overview of
    the manual cluster creation process.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning your nodes
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First things first – you'll need some infrastructure to run Kubernetes on. Generally,
    VMs are a good candidate for this, though Kubernetes can be run on bare metal
    as well. If you're working in an environment where you cannot easily add nodes
    (which removes many of the scaling benefits of the cloud, but is definitely possible
    in enterprise settings), you'll need enough nodes to meet your application demands.
    This is more likely to be an issue in air-gapped environments.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Some of your nodes will be used for the master control plane, while others will
    solely be used as workers. There is no need to make the master and worker nodes
    identical from a memory or CPU perspective – you could even have some weaker and
    some more powerful workers. This pattern results in a non-homogeneous cluster,
    in which certain nodes are better suited to particular workloads.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Kubernetes certificate authority for TLS
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to function properly, all major control plane components will need
    a TLS certificate. To create these, a **Certificate Authority** (**CA**) needs
    to be created, which will in turn create the TLS certificates.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: To create the CA, a **Public Key Infrastructure** (**PKI**) needs to be bootstrapped.
    For this task, you can use any PKI tool, but the one used in the Kubernetes docs
    is cfssl.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Once the PKI, CA, and TLS certificates have been created for all components,
    the next step is to create config files for the control plane and worker node
    components.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Creating config files
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Config files need to be created for the `kubelet`, `kube-proxy`, `kube-controller-manager`,
    and `kube-scheduler` components. They will use the certificates in these config
    files to authenticate with `kube-apiserver`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Creating an etcd cluster and configuring encryption
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating the data encryption config is handled via a YAML file with a data encryption
    secret. At this point, it is required to start the `etcd` cluster.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: To do this, `systemd` files are created on each node with the `etcd` process
    config. Then `systemctl` is used on each node to start the `etcd` servers.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample `systemd` file for `etcd`. The `systemd` files for the other
    control plane components will be similar to this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Example-systemd-control-plane
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This service file provides a runtime definition for our `etcd` component, which
    will be started on each master node. To actually start `etcd` on our node, we
    run the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This enables the `etcd` service along with automatic restarts when the node
    is restarted.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping the control plane component
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrapping the control plane components on the master nodes is similar to
    the process used to create the `etcd` cluster. `systemd` files are created for
    each component – the API server, the controller manager, and the scheduler – and
    then a `systemctl` command is used to start each component.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: The previously created config files and certificates also need to be included
    on each master node.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our service file definition for the `kube-apiserver`
    component, broken down into its sections as follows. The `Unit` section is just
    a quick description of our `systemd` file:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Api-server-systemd-example
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'This second piece is the actual start command for the services, along with
    any variables to be passed to the services:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, the `Install` section allows us to specify a `WantedBy` target:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The service files for `kube-scheduler` and `kube-controller-manager` will be
    very similar to the `kube-apiserver` definition, and once we''re ready to start
    the components on the node, the process is easy:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Similarly to `etcd`, we want to ensure the services restart on a node shutdown.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping the worker node
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's a similar story on the worker nodes. Service specs for `kubelet`, the container
    runtime, `cni`, and `kube-proxy` need to be created and run using `systemctl`.
    The `kubelet` config will specify the aforementioned TLS certificate so that it
    can communicate with the control plane via the API server.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what our `kubelet` service definition looks like:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Kubelet-systemd-example
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see, this service definition references `cni`, the container runtime,
    and the `kubelet-config` file. The `kubelet-config` file contains the TLS information
    we need for our workers.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: After bootstrapping the workers and master, the cluster should be functional
    via the use of the admin `kubeconfig` file that was created as part of the TLS
    setup.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed several methods for creating a Kubernetes cluster.
    We looked at minimal local cluster creation using minikube, setting up clusters
    on managed Kubernetes services on Azure, AWS, and Google Cloud, creating clusters
    using the Kops provisioning tool, and finally, manually creating a cluster from
    scratch.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the skills to create a Kubernetes cluster in several different
    environments, we can move on to using Kubernetes to run applications.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to start running applications on Kubernetes.
    The knowledge you've gained about how Kubernetes works at the architectural level
    should make it much easier to understand the concepts in the next few chapters.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What purpose does minikube serve?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some downsides to using a managed Kubernetes service?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does Kops compare to Kubeadm? What are the major differences?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which platforms does Kops support?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When manually creating a cluster, how are the major cluster components specified?
    How are they run on each node?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手动创建集群时，如何指定主要的集群组件？它们如何在每个节点上运行？
- en: Further reading
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The official Kubernetes documentation: [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '官方 Kubernetes 文档: [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)'
- en: '*Kubernetes The Hard Way*: [https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kubernetes The Hard Way*: [https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way)'
