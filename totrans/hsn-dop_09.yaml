- en: Containers, IoT, and Microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will study the concepts of Containers, Virtualization, Kubernetes,
    Internet of Things, microservices, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Virtualization:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Para virtualization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Container-based virtualization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Introduction to containers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of containers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Java container services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon container services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivotal container services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google container services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Container orchestration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mesosphere
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microservices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a method of logically dividing mainframes to simultaneously allow multiple
    applications to run concurrently. Bare metal applications were unable to cope
    up with the advancements to use abundance availability of resources such as the
    server processing power and capacity improvements. This paved way for designing
    **virtual machines** (**VMs**), by running specialized software on top of physical
    servers to emulate a type of underlying hardware system.
  prefs: []
  type: TYPE_NORMAL
- en: The same physical server can host multiple VM, each with different operating
    systems. Each VM runs a unique operating system and its own binaries/libraries
    and applications that it supports and services. VMs can be many gigabytes large.
    Server virtualization benefits are like a consolidation of applications onto a
    single system, with reduced server footprint, quicker server provisioning, improved
    disaster recovery, and cost savings.
  prefs: []
  type: TYPE_NORMAL
- en: Hypervisor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A hypervisor is software, firmware, or hardware that creates and runs on VMs
    also named as a virtual machine monitor. It is a layer between the OS and hardware
    to virtualize the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The hypervisor creates the virtual environment to host the guest VM. It supervises
    the guest systems and allocates resources to them as required. The hypervisor
    emulates the operation on the host machine''s operating system, and provides virtualization
    services to the VMs in between the physical machine and virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a136436-5743-466f-b192-1f5591cc91f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Virtualization technologies have become popular with rapid development in cloud
    using hypervisors, such as Xen, VMware Player, and KVM, and in incorporation of
    hardware support in commodity processors, such as Intel VT and AMD-V.
  prefs: []
  type: TYPE_NORMAL
- en: Types of virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The virtualization types are categorized depending on the way it mimics hardware
    to a guest operating system, and also emulates a guest operating environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Primarily, there are three types of virtualization:'
  prefs: []
  type: TYPE_NORMAL
- en: Emulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paravirtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container-based virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Emulation is full virtualization to run the OS kernel of VM entirely in software.
    This type of hypervisor is termed as *Type 2 hypervisor*, and is installed on
    the top of the host operating system in order to translate a guest OS kernel code
    to software instructions. There is no hardware involvement, and the translation
    is done entirely in software layer. By emulation to any operating system that
    supports the underlying environment is emulate; however, the overhead of additional
    system resource leads to performance reduction as compared with other types of
    virtualizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few examples are VMware player, VirtualBox, QEMU, Bochs, parallels, and so
    on are shown in the following digram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3f457f0-c26f-4885-a016-4d385956614f.png)'
  prefs: []
  type: TYPE_IMG
- en: Paravirtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Paravirtualization, also referred to as *Type 1 hypervisor*, runs directly on
    the bare-metal hardware to provide virtualization services to the VM directly
    running on it. It supports collaboration between the operating system, the virtualized
    hardware, and the bare-metal hardware to accomplish optimal performance. These
    hypervisors do not require extensive resources, and typically run on small footprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few examples are Xen, KVM, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9364d2ce-a37b-41cf-935d-80e158702cae.png)'
  prefs: []
  type: TYPE_IMG
- en: Container-based virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Container-based virtualization is also referred to as operating system-level
    virtualization; within a single operating system kernel, it enables executions
    of multiple isolated environments. This isolated virtual execution environment
    is called container-managed with a group of processes. It offers features and
    benefits such as high performance and dynamic resource management:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d14d4af-9a54-4d71-8d37-eaf0da96ab6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of containers in IT is synonymous to the concept of containers used
    in the transportation sector. The basic purpose of containers is to carry or port
    items from source to destination.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the same analogy, containers in IT operate on this basic purpose to
    port software from one server to another safely and securely. Moving an application
    from development server to QA (test) server and to production server is usually
    associated with multiple complexities, such as preparing infrastructure environment
    checklists, validating the compliers, libraries, runtime dependencies, and so
    on. The container concept is to ensure that it carries along with it the ecosystem
    required for an application to run from one bare-metal system to another. A container
    in that sense is self-sufficient, with all the requisite components, and the environment
    for the application to run on any server is installed. A container image is a
    standalone executable package, an abstraction that packages the code and dependencies
    at the application layer; they consume less space, and operate within the allocated
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Containers are a logical packaging mechanism to abstract the applications from
    the underlying environment they actually operate. Container-based applications
    because of decoupling can be deployed easily and consistently on a variety of
    target environments from private data center to the public cloud, or a personal
    laptop. Containerization separates roles, responsibilities, and concerns; this
    facilitates developers to work on the application logic and dependencies. IT operations
    teams, without diving into the specifics for software versions and configurations
    specific to the applications, can focus on pure deployment and management:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3097b100-a0f7-45a3-8678-ce48ebd38ea3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The attributes of a container making them quite a popular choice are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lightweight**: These containers are to use fewer resources and start instantly;
    many containers can share the operating system kernel and use less resources.
    They share common files, and images are built from filesystem layers to minimize
    disk consumption and faster image downtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interoperability**: Containers should be operating on open standards, and
    portable between platforms of Linux distributions (Debian, Ubuntu, and CentOs),
    VMs, and Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Containers offer a high degree of security by isolating and separating
    both in between the applications and with underlying infrastructure. The isolation
    of issues related to an application should be contained within the container,
    and it neither impacts the other applications, nor the entire machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multiple tenancy that containers share a common kernel (system resources) through
    unique mount process. For each container, the commonly shared components are write-enabled,
    and they have read-only access. Due to this sharing concept, containers bring
    the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Being exceptionally lightweight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick startup time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portability on a variety of cloud deployments, public, private, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development and testing phases are accelerated by quick assembling (package)
    of applications with dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management effort reduced to manage a single system compared with multiple servers,
    reduced effort for patches, and upgrades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Guest OS and Host OS should be compatible, so both should match like Linux,
    neither should be run on Windows, and vice versa:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7cd310ad-2b41-4529-a001-40677c8ebe52.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Container security**: The namespaces feature included with Linux kernel led
    to the creation of the concept of a container. Separate instances are created
    for global namespaces; the way it works is for every process the container adds
    a unique ID, and also for every system call, new access control checks are added.
    These serve as isolated containers wherein the outside objects have neither access
    nor visibility to the processes running inside the container. Although they share
    the underlying kernel, each container is treated separately; for example, the
    root user of each container is restricted for the respective container, adding
    a high security feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container management**: The common kernel has full visibility among multiple
    containers, so it''s imperative to limit the resource allocation to containers.
    This is accomplished by the Linux **Control Groups** (**cgroups**) subsystem for
    resource allocation and scheduling. Container virtualization is enabled by grouping
    processes to manage their aggregate resource consumption to limit memory and CPU
    consumption. The management tools to limit resource allocations for Linux containers
    are LXC, LXD, Linux-VServer, OpenVZ, Docker, systemd-nspawn, lmctfy, Warden, and
    so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: Cluster management infrastructure supports scalability to
    install and operate, to schedule container-enabled applications across the cluster
    based on resource needs, and availability. It supports the ability to grow from
    single to multiple instances without additional complexity on how the applications,
    batch jobs, or microservices are managed, abstracting the complexity of infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task definitions**: Tasks are defined with declarative JSON template called
    **task definition**. Multiple containers required for the task are specified inside
    task definitions, and they include Docker repository/image, CPU, memory, and shared
    data volumes. The way containers are to be linked to each other can be part of
    a single task definition file registered with service. Version control for application
    specification is also part of task definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Programmatic control**: Container services provide APIs to integrate and
    extend services such as creation and deletion of clusters, registration and deregistration
    of Docker containers, including launch and termination tasks, and provide details
    on the cluster state and information of its instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduling**: Applications, batch jobs, and services are managed with schedulers
    to run as they are designated. Schedulers place containers based on availability
    requirements and resource needs (such as RAM or CPU) onto the clusters. Provision
    for custom schedulers and integrate third-party schedulers, container management,
    and orchestration support with open source projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container auto-recovery**: Containers automatically recover unhealthy containers,
    to ensure application support with the required number of containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container deployments**: By uploading a newer version of application task
    definition, the scheduler will automatically stop the old version containers and
    start the containers with new versions. Ease of updating containers to new versions
    by conveniently registering and deregistering containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load balancing**: Distribute traffic across containers with **Elastic Load
    Balancer** (**ELB**), by specifying in the task definition to add and remove containers
    from ELB. A dynamic port allocation in task definition gives unused port access
    to the container while scheduled; to share multiple services with ELB path-based
    routing is also an option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local development**: Docker composes an open source tool to define and run
    multicontainer applications; this can be extended to both work machine and production
    server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring**: Clusters and containers to run tasks, average and aggregate
    of CPU and memory utilization, grouped by task definition, service or cluster,
    provision to set up alarms in order to alert to scale up or down the containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: The details of agent logs, API calls, and Docker logs are captured
    for issue diagnostics, the time of the API call, the API call source IP address,
    the request parameters, response elements, security analysis, compliance, audit,
    and resource change tracking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repository support**: Container service along with third-party, private Docker
    registry, or Docker hub image repository accessibility to retrieve appropriate
    images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Inbuilt features to gain visibility into roles and access at
    task level, and manage instance-based roles and task-based roles separately with
    least privilege policy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we have seen, the containers are standardized units of software development,
    incorporating everything as code, runtime, system tools, and system libraries
    for software applications to run. The image is a read-only template to create
    containers. Application components must be architected to deploy and run in containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Containers have become popular in digital technology and offered by many vendors
    a like. Docker is a popular container choice, so its adoption and support is a
    natural choice by other vendors:'
  prefs: []
  type: TYPE_NORMAL
- en: Dockers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java container services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivotal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM Bluemix container service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker container platform is available as **Community Edition** (**CE**) and
    **Enterprise Edition** (**EE**), with optimized installers for a variety of infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f95b606-d68a-4dee-80fe-a088924433aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The features of Docker container services are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Universal packaging**: This packages apps of any programming language or
    service into containers to port them, without the risk of incompatibilities, or
    version conflicts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer toolkit**: Readily available containers in the Docker store offer
    everything needed to build, test, and run multicontainer apps for any programming
    language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container orchestration in-built**: In-built clustering at scale with sophisticated
    scheduling to monitor, build highly available and fault-tolerant services to run
    apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Highly secure**: Security out-of-the-box with mutual TLS, certificate rotation,
    container isolation, and image signing makes it secure and easy-to-use container
    app runtimes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App-centric networking**: Containers connected together with software-defined
    networking to intelligent routes and load balances traffic. Container-defined
    networks abstract configuration and deploy apps from underlying network infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible architecture**: Integration with third-party systems for Open
    APIs, plugins, and drivers is convenient to change storage and networking backends
    with minimal or no code changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java EE containers as a part of Java EE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thin-client multi-tiered applications to handle transaction and state management,
    multithreading, resource pooling, and other complex low-level details involve
    many lines of intricate code and hard-to-maintain Java EE architecture is component-based
    and platform independent, ensuring convenience for Java EE applications, as business
    logic is organized into reusable components, and provides underlying services
    in the form of a container for every component type. Rather than investing to
    develop these services, concentrate on solving the business problem at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Java containers are the interface between a component and the low-level platform-specific
    functionality that supports the component. For a web service, the enterprise beans,
    the application client component must be assembled into a Java EE module, and
    deployed into its container to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: For the assembly process, container settings are specified for each component
    of the Java EE application, and also the Java EE application itself. Container
    settings can be customized with the underlying features of the Java EE server,
    such as transaction management, **Java Naming and Directory Interface** (**JNDI**)
    lookups, security, and remote connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some features are:'
  prefs: []
  type: TYPE_NORMAL
- en: The Java EE security model-authorized users are configured access for a web
    component or enterprise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java EE transaction model treats all methods in one transaction as a single
    unit, by specifying relationships among methods to cluster them as a single transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JNDI lookup service helps application components access a unified interface
    in the enterprise to the multiple naming and directory services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java EE remote connectivity model mimics VM by invoking methods to manage
    low-level communications between clients after enterprise beans are created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java EE architecture features configurable services, and application components
    within itself, so can provide different functionality like security settings levels
    of access to database data customized for each production environment. The Java
    EE container facilitates nonconfigurable services such as enterprise bean and
    servlet life cycles, data persistence, database connection, resource pooling,
    and access to the Java EE platform APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Java EE server and containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The container types in the Java EE application components are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java EE server**: This is the runtime environment of Java EE, and provides
    EJB and web containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise JavaBeans (EJB) container**: It''s part of Java EE server, and
    it''s responsible for the execution of enterprise beans for Java EE applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web container**: They are part of Java EE server. They manage the execution
    of JSP page and servlet components for Java EE applications. Web components and
    their containers run on the Java EE server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application client container**: This hosts application clients and their
    containers'' execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applet container**: This is responsible for execution of applets, and hosts
    web browser and Java plugin together to run on the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1af0bd14-06fb-453f-94f1-4ba7c907ffaf.png)'
  prefs: []
  type: TYPE_IMG
- en: Amazon ECS container service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazon ECS comes with a variety of following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Highly scalable, fast container management service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage Docker containers are easy to run, stop on a cluster of **Amazon Elastic
    Compute Cloud** (**Amazon EC2**) instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container-based applications launch and stop through simple API calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized service to monitor state of your cluster, and access to many familiar
    Amazon EC2 features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schedule the containers placement across the clusters based on resource needs,
    isolation policies, and availability requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistent deployment and build experience, manage scale **Extract-Transform-Load**
    (**ETL**) and batch workloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build sophisticated microservices and model-based application architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides more fine-grained control and access to a wider set of use cases, hence
    more popular compared with AWS Elastic Beanstalk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon ECS is also highly available, which supports the concept of running
    application containers across multiple availability zones. Container images are
    stored in and pulled from container registries (either within or outside of AWS).
    Task definitions and services are defined to specify alignment of Docker container
    images to run on respective clusters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0765500a-cfb2-4c1f-8898-77cd97447ca9.png)'
  prefs: []
  type: TYPE_IMG
- en: The Amazon ECS multizone architecture components are discussed further.
  prefs: []
  type: TYPE_NORMAL
- en: Containers and images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Application components must be architected to run in containers for deployment
    to ECS. The standardized unit is Docker container for software development, comprising
    application requirements to run code, runtime, system tools, system libraries,
    and so on. An image template is used to create containers, and it specifies all
    of the components to be part of the container. It is typically a read-only format
    file created from a plain text Dockerfile, stored in a registry for download and
    run on container instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a096d53-ee07-47c2-a4ed-35db0ceb0017.png)'
  prefs: []
  type: TYPE_IMG
- en: Task definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Task definitions prepare the application to run on ECS as a blueprint for the
    application, a JSON format text file. It describes the application use by various
    parameters as to which containers to use, the corresponding ports to be opened,
    the repositories to be located, and the data volumes to be used with the containers
    for the tasks on a web server such as Nginx.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks and scheduling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With task definition, the number of tasks are specified for instantiation on
    a container instance within the cluster. Task scheduler is responsible for placing
    and scheduling tasks on container instances simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e06a543e-bad0-468f-8a36-c7f36c8a50c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A cluster is a logical grouping of instances to run tasks. The container images
    are downloaded from a specified registry to run them on the container instances
    within the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Container agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The container agent runs on each instance within the cluster. It relays the
    instance''s information such as current running tasks and resource utilization
    to also start and stop tasks as per the requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/645a866e-dd70-4e5e-a8f6-aab6175dafde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Amazon ECS functionality can be augmented using additional services in conjunction:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity and access management**: IAM is a web service to control access
    to resources securely for users by authentication to control use of resources
    and authorization on how to access resources. Using IAM roles control access at
    the container instance level, and also the task level are managed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autoscaling**: Autoscaling is a web service to scale out and scale in the
    container instances, automatically launching or terminating EC2 instances. It
    could be defined in user-defined policies, health status checks, and schedules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elastic Load Balancing**: ELB accomplishes high levels of fault tolerance
    for applications by distributing the incoming application traffic automatically
    across multiple EC2 instances, and across services in a cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EC2 Container Registry:** Docker registry service is secure, scalable, and
    reliable. Resource-based permissions enabled by IAM to access repositories and
    images on Docker private repositories. Docker CLI can be used to push, pull, and
    manage images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Cloud Formation**: AWS Cloud Formation is a convenient way to create,
    manage, provision, and update a collection of related AWS resources. Cloud Formation
    script can help define clusters, task definitions, and services in an orderly
    and predictable fashion as entities in an AWS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon ECS CLI**: Amazon ECS CLI using Docker compose from a local development
    environment. It provides high-level commands to create, update, and monitor clusters
    and tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS SDKs**: The SDKs support programming languages, and take care of tasks
    automatically such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing of service requests cryptographically
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrying requests
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Error responses handling
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivotal container services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pivotal technologies offer container services with the following core features:'
  prefs: []
  type: TYPE_NORMAL
- en: Containerized workloads are reliably deployed and run across private and public
    clouds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container orchestration is built in with high availability, automated health
    checks, monitoring, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suited for Spark and elastic search workloads needing access to infrastructure
    primitives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apt for apps that require specific colocation of container instances, and where
    multiple port binds are needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High operational efficiency for Kubernetes and Open Source Kubernetes with latest
    stable OSS distribution no proprietary extensions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-demand provisioning with BOSH, a powerful release engineering tool chain,
    a reliable and consistent operational experience on any cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multicloud flexibility to deploy and consume Kubernetes on-premises with vSphere,
    or in the public cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network Management and Security to programmatically manage software-based virtual
    networks, out-of-the-box network virtualization on vSphere and VMC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fully automated Ops can deploy, scale, patch, and upgrade the system without
    downtime also for Kubernetes clusters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy integration with VMware tools like vRealize Operations Manager, vSAN network
    storage, and Wavefront for a full-featured on-prem deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Harbor, an enterprise-class container registry server, is part of PKS. Harbor
    extends features for an open source Docker like vulnerability scanning, identity
    management, and support for multiple registries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated with the PCF Service Catalog, easily adds APM tools, database services,
    and the Service Broker API. Extend PKS with a growing library of add-on services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constant compatibility with GKE, can easily move workloads to (and from) GKE.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PKS is built on top Kubo, an open-source project managed by the Cloud Foundry
    Foundation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google container services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google container services is a popular choice, with features as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Google containerized application management offers multiple advanced features
    and flexibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container engine provides a managed environment for containerized applications
    to deploy, manage, and scale on a container cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes open source cluster management system powers container cluster engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides tools and interface to perform administration tasks, manage, deploy
    applications, and set up policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitors status of application containers, the health of deployed workloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load-balancing for compute engine instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node pools within a cluster as a subset for additional flexibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic scaling of cluster's node instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic upgrades for cluster's node software versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto-repair of node to maintain node health and availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stack driver logging and monitoring for visibility into your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Master and node architecture for the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP aliases, IAM, role-based access, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP rotation and IP Masquerade agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container orchestration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Container orchestration is the process of automatically deploying multiple
    containers in an optimized manner to implement an application. This is quite important
    with a growing number of containers and hosts day by day. Orchestration means
    the automation of the process, and includes a number of features:'
  prefs: []
  type: TYPE_NORMAL
- en: Hosts provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set of containers instantiation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failed containers rescheduling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers linking together with interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing services outside of the cluster to machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling by adding or removing containers, out or down the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a6c17a1e-227c-49a1-aa92-8d210ef099e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Orchestration tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A few popular orchestration tools are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Mesos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CorCos Tectonic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4b4006b7-7f58-4d0d-9799-41ebbb57e7a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The popularity of repositories as per their usage is shown in following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7f7aac8-89bd-4877-9ec7-f4382cfc7b1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The three key differentiators among the orchestration tools to select for organization
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Level of abstraction**: Support for containers or services that are container-based'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tooling**: Orchestration management and integration with other services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Architecture**: How does it support scalability and recover from failure?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will discuss the following popular tools in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mesosphere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each orchestration platform has advantages compared with the others. There
    are multiple evaluations to consider, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise DevOps framework and orchestration methodology along with APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of hosts if over thousands of physical machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mesos can be considered for large farm
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are the containers based on bare metal, private VMs, or in the cloud?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For cloud deployments, Kubernetes is popular
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Need for automated high availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes failed pods/containers will be automatically rescheduled by replication
    controller
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Mesos application's framework, code performs that role for automated high
    availability
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping and load balancing requirement for services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes provides this, but Mesos application's framework code performs it
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization skills
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mesos allow application to run as a framework programmatically with custom coding
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes is more declarative
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up orchestration frameworks infrastructure can have challenges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes was created by Google, and now with **Cloud Native Computing Foundation**
    (**CNCF**). Its concept is to build orchestration for container deployments across
    multiple domains public clouds to hybrid deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kubernetes makes deploying and managing application easier, automates deployment,
    scaling, and management of containerized applications. Kubernetes adds the higher-level
    functions, such as load balancing, high availability through failover (rescheduling),
    and elastic scaling, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic health checks against the services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-healing, restarting containers that fail, or have stalled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horizontal scaling, scale services up or down based on utilization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service discovery and load balancing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version-controlled automated rollouts and rollbacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secret and configuration management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage orchestration only running what is needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch execution, declaratively manages your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The key components making up Kubernetes are:'
  prefs: []
  type: TYPE_NORMAL
- en: A cluster is a collection of nodes, either bare-metal servers or VMs providing
    the resources to run one or more applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pods are co-located resources on the same host groups, such as containers and
    volumes. Pod-based containers share the same network namespace and use localhost
    to communicate. Pods are the basic scheduling unit, ephemeral not designed as
    durable entities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labels are tags that allow them to be managed as a group. Like assigned to entities
    such as containers to be exposed as a service to the outside world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services are basic load balancers and references for exposing them to the outside
    world and other containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The replication controller manages the scheduling of pods across the cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker orchestration tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker orchestration most common tools are described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Swarm**: It is one of the most easy-to-use orchestrators, with just
    a couple of commands. It lets you spin up your first cluster much like the first
    container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Engine**: It is the lightweight runtime and tooling engine used to
    run Docker containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Machine**: This provisions hosts and installs Docker Engine software
    on them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Swarm**: By clustering multiple Docker hosts together produces a single,
    virtual Docker host. It enables Docker API to integrate with tools compatible
    with a single Docker host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Compose**: Applicable for development, testing, and staging environments.
    Creates required containers for deploying requisite application from a file defining
    a multicontainer application along with its dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Mesos**: It is adopted by large enterprises, such as Twitter, Airbnb,
    and Apple, as it''s designed to scale to tens of thousands of physical machines.
    A framework in Mesos is an application running on one or more containers. Each
    frame can accept the resources offered by Mesos. Compared to Kubernetes, Mesos
    is less in features, involves extra integration work, is programmatic, defining
    services or batch jobs. Mesos also supports the fine-grained resource allocation
    across the nodes in a cluster of Kubernetes pods:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ea33a793-296e-453c-9f1c-26b6536c0402.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Mesos is proved to be efficient wherein the application is collocated with
    other services such as Hadoop, Kafka, and Spark. Mesos is the foundation for few
    distributed systems as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Aurora**: A highly scalable scheduler service for long-running services
    and cronjobs such as adding rolling updates, service registration, and resource
    quotas'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chronos**: A fault-tolerant service scheduler for orchestrating scheduled
    jobs within Mesos as a replacement for Cron'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marathon**: A simple-to-use service scheduler; it enhances performance of
    Mesos and Chronos by running two Chronos instances simultaneously'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet of Things (IoT)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IoT integrates sensory data, big data, networking, robotics, and artificial
    intelligence technology into an advanced automation and analytics system. IoT,
    when applied to any industry or system, can bring in greater transparency, control,
    and performance to deliver a complete product or service.
  prefs: []
  type: TYPE_NORMAL
- en: IoT systems span across industries using smart devices and enabling powerful
    technology to enhance data collection, analysis, achieve deeper automation, operations
    and integration through applications apt in any environment.
  prefs: []
  type: TYPE_NORMAL
- en: IoT benefits span across multiple business domains and even lifestyles providing
    benefits of improved customer engagement, technology optimization, reduced waste,
    enhanced data collection, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'IoT-perceived challenges are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security**: An ecosystem of constantly connected devices communicating over
    networks even with security measures is vulnerable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privacy**: Substantial personal data is captured without the user''s active
    participation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complexity**: Design, deployment, and maintenance of IoT systems integrating
    multiple technologies is a complex system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexibility**: IoT systems with several interfacing and locked systems are
    tightly coupled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compliance**: When standard software compliance to comply with regulations
    is challenging, complexity of IoT makes the issue of regulatory compliance much
    more challenging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The most important features of IoT include connectivity, sensors, active engagement,
    and being a small device and artificial intelligence combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connectivity**: New enabling technologies between system devices, specifically
    IoT networking on a much smaller and cheaper scale, need not be exclusively tied
    to major providers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sensors**: IoT capability comes with sensors that transform IoT from a standard
    passive network of devices into an interactive integrated system to address real-world
    needs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active engagement**: IoT introduces real-time interaction with connected
    technology, a new paradigm for active content, product, and service engagement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Small devices**: Purpose-built small devices extend IoT capabilities to deliver
    its precision, scalability, and versatility at low, affordable costs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Artificial intelligence**: IoT essentially enhances every aspect of life
    with the power of data collection and analytics with artificial intelligence algorithms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT - eco system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IoT systems capture data with hardware devices such as remote dashboard, control
    devices, sensors, servers, and routing bridge device. Key tasks and functions
    managed with these devices can extend to system activation, security, communication,
    action, and detection.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdffc013-71a3-4c6e-a79b-3efee6e3fc49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Multiple devices sensors for different functions are:'
  prefs: []
  type: TYPE_NORMAL
- en: Accelerometers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magnetometers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gyroscopes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acoustic sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressure sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Humidity sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temperature sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proximity sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gas RFID sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard devices such as desktop, tablet, and cell phone are also integrated
    with IoT for command interfaces and remote management.
  prefs: []
  type: TYPE_NORMAL
- en: Desktop and tablet can offer the highest level of control for the system and
    its settings.
  prefs: []
  type: TYPE_NORMAL
- en: Cell phone can also provide remote functionality to modify some settings or
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Routers and switches are standard network devices, and key to connected devices.
  prefs: []
  type: TYPE_NORMAL
- en: Data synthesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IoT systems effectiveness is through data collection, device integration, real-time
    analytics, networking, and action through platforms, embedded systems, partner
    systems, and middleware. These individual and master applications are responsible
    for integration with critical business systems, such as ordering systems, robotics,
    and scheduling within the IoT network.
  prefs: []
  type: TYPE_NORMAL
- en: Data collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data collection software collects and eventually transmits all collected
    data to a central server. It collects variety of data such as sensory data, measurements
    by applying data filtering, data security, and aggregation of data. Through protocols,
    data from multiple devices and sensors are connected real time with machine-to-machine
    networks. It also can reverse transmit distributing data back to the devices.
  prefs: []
  type: TYPE_NORMAL
- en: Device integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integration of all connected system devices through dependency and relationships
    binds the IoT ecosystem. It ensures that the necessary cooperation manages the
    various applications, protocols, and limitations of each device to allow communication
    and stable networking between devices.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The analytics applications collect real-time data input from various devices,
    and convert it into clear patterns for human analysis and viable actions. The
    information analysis and visualization techniques can be extended for automation-related
    tasks specific to industry requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Application and process extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These IoT applications integrate predefined devices to extend the reach of existing
    systems such as allowing certain mobile devices, or engineering instruments access
    and software to allow a wider, more effective system to improved productivity
    and more accurate data collection and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Technology and protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IoT technologies, apart from standard networking protocols, are RFID, NFC, low-energy
    radio protocols, low-energy Bluetooth, low-energy wireless, LTE-A, and WiFi-Direct,
    all of which support the specific networking functionality needed in an IoT system.
    We will review these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Radio-frequency identification** (**RFID**) and **near-field communication**
    (**NFC**) are simple, low-energy options connection bootstrapping, and payments
    for identity and access tokens.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on the IoT technologies and Protocols can be found at: [https://www.tutorialspoint.com/internet_of_things/internet_of_things_quick_guide.htm](https://www.tutorialspoint.com/internet_of_things/internet_of_things_quick_guide.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: IoT - application in multiple fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the applications of IoT across multiple fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wearable electronics**: The penetration of IoT smart wearable electronics,
    such as helmets, watches, shoes, and glasses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manufacturing and engineering industry**: Dynamic response to market demands,
    malfunctions in equipment, problems in the distribution network, customer needs,
    nonconforming product, lower costs, optimized resource use, and waste reduction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product safety**: Avoid malfunctions, nonconforming product, and other hazards,
    avoiding recalls, and controlling nonconforming or product distribution to market'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Healthcare applications**: Healthcare in remote areas can be extended by
    IoT applications to offer high level of medical assistance as in developed areas
    supporting mobile clinics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Housing, environment, health, and safety applications**: Also use IoT to
    extend their productivity, benefits for improved quality of life'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transportation application**: Extend to commercial vehicles on road, trains,
    UAVs provide improved communication, control, and data distribution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commercial farming**: Exploiting advanced biotechnology, IoT enables deeper
    automation and analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/831e33c2-fe48-4aff-aff2-bd0ff62f28da.png)'
  prefs: []
  type: TYPE_IMG
- en: IoT platforms for development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many IoT development platforms with integrated development tools
    to support connectivity, analysis for the rapid development, and deployment of
    smart, connected devices:'
  prefs: []
  type: TYPE_NORMAL
- en: ThingWorx by PTC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualized Packet Core by Cisco
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Electric Imp- Salesforce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predix by GE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contiki is open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ThingWorx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enables rapid development with interfaces and embedded tools such as Vuforia,
    Kepware, Composer, Mashup builder, search engine for storage, collaboration, and
    connectivity:'
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia for reality development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kepware for single-point data distribution to facilitate interoperability in
    alignment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ThingWorx agent for industrial connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The composer is the modeling environment for design testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Mashup builder is a dashboard to build components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQUEL is the search engine, extension means search, query, and analysis; it's
    for analyzing and filtering data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data shapes describe data structures of custom events, infotables, streams,
    and data tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thing templates allow new devices to inherit properties in large IoT systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thing shapes define templates, properties, or execute services, allowing developers
    to avoid repeating device property definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualized Packet Core (VPC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'VPC technology provides core services for 4G, 3G, 2G, Wi-Fi, and small cell
    networks with key features such as packet core service consolidation, dynamic
    scaling, and system agility. The networking functionality is delivered as virtualized
    services for greater scalability and faster deployment at a reduced cost of new
    services. It distributes and manages packet core functions, whether virtual or
    physical, across all resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b67611fb-a583-4c9b-9df3-5927b383531d.png)'
  prefs: []
  type: TYPE_IMG
- en: VPC application is more prominent for network function virtualization, **software-defined
    networking** (**SDN**), and rapid networked system deployment by supporting low-power,
    high-flow networking, and the simple deployment of a wide variety of small devices.
    VPC introduces direct communication over a standard network, enhanced automated
    monitoring, automatic data updates through smart signs, and native IP networks
    along with **Power over Ethernet** (**PoE**) technology for all devices, improving
    overall safety and quality of service.
  prefs: []
  type: TYPE_NORMAL
- en: Electric Imp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Salesforce Electric Imp platform is for quickly connecting devices to the cloud,
    and developing applications through a high-level, OO, lightweight scripting language
    named Squirrel language. Applications consist of two modules:'
  prefs: []
  type: TYPE_NORMAL
- en: The device module runs on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The agent module runs in the Electric Imp cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Electric Imp platform ensures secure communication messages with a simple
    call between the modules, standard web application development coding for device
    interaction, monitoring, and response with a simple, easy-to-learn syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Predix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**General Electric** (**GE**) Predix is a software platform for industrial
    instruments. It''s a cloud-based **Platform as a Service** (**PasS**), data collection
    platforms to enable industrial-grade analytics. It connects factories data, individuals,
    and equipment in a simple way for operations optimization and performance management.
    A predix ecosystem consists of an Intel Edison processor module, of a dual core
    board and a Raspberry Pi board. Developers provide an IP address, Ethernet connection,
    power supply to automatically establish the connection, register with the central
    Predix system, to transmit data from sensors.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cca497f-454c-4ba2-8b71-dcc38a540bcc.png)'
  prefs: []
  type: TYPE_IMG
- en: Eclipse IoT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An open source technology-based Eclipse IoT is an ecosystem of entities (industry
    and academia), creating open source frameworks and services for utilization in
    IoT solutions, developing tools for IoT developers, open source implementations
    of IoT standard technology. There are a few utilities, as mentioned next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4da20216-0474-4594-9c78-144ef3302cd4.png)'
  prefs: []
  type: TYPE_IMG
- en: SmartHome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eclipse IoT's major service SmartHome is a framework for building smart home
    solutions, with assorted protocols and standards integration for heterogeneous
    environments. It facilitates interaction between devices by uniform device and
    information access consisting of OSGi bundles to deploy in an OSGi runtime, with
    OSGi services. OSGi bundles are Java class groups and other resources with manifest
    files containing information on file contents, services to enhance class behavior,
    and the nature of the aggregate as a component, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse SCADA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eclipse state-of-the-art open source SCADA is to connect various industrial
    instruments with a shared communication system to post-processes data. The technologies
    incorporated are shell applications, JDBC, Modbus TCP and RTU, Simatic S7 PLC,
    OPC, and SNMP. The SCADA system is with communication service, monitoring system,
    archive, and data visualization for developing custom solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Contiki
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/d34fb6bd-429e-44eb-9e93-6dde03db6c0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Open source operating system Contiki provides functionality for small IoT devices
    for management of programs, processes, resources, memory, and communication. Its
    ecosystem is an operating system, a web browser, web server, calculator, shell,
    telnet client and daemon, email client, VNC viewer, and FTP.
  prefs: []
  type: TYPE_NORMAL
- en: Its popular with academics, organization researchers, and professionals being
    very lightweight quite apt for devices with limited memory, power, bandwidth,
    and processing power requires a few kilobytes to run, and within a space of under
    30 KB.
  prefs: []
  type: TYPE_NORMAL
- en: Contiki communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Standard protocols supported by Contiki, and also enabling protocols for IoT
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**uIP (for IPv4)**: This TCP/IP supports 8-bit and 16-bit microcontrollers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**uIPv6 (for IPv6)**: Extension to uIP is a fully compliant IPv6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rime**: This offers a set of primitives for low-power systems and alternative
    stack when IPv4 or IPv6 are not applicable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**6LoWPAN**: This stands for IPv6 over low-power wireless personal area networks.
    A low data rate wireless compression technology to support devices with limited
    resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RPL**: This distance vector IPv6 protocol can find the best path for devices
    with varied capability in complex network of LLNs (low-power and lossy networks).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CoAP**: This protocol is for simple devices requiring a heavy remote supervisor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic module loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamic module loader loads, relocates, and links ELF files to load and link
    at run-time supports environments to support application behavior changes after
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: The Cooja network simulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Cooja Contiki network simulator spawns to compile for working Contiki and
    control system by Cooja simulator.
  prefs: []
  type: TYPE_NORMAL
- en: IoT devices, security, compliance and maintenance are important features to
    be thoroughly considered while adopting.
  prefs: []
  type: TYPE_NORMAL
- en: Microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is an architecture pattern to structure as loosely coupled services to implement
    business capabilities, enabling an organization to evolve its technology stack
    on continuous delivery/deployment of large, complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: Microservices core patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microservice architecture is the core differentiator compared to monolithic
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Monolithic architecture was based on unique requirement for building server-side
    enterprise application. It has to support a variety of clients, such as browsers
    from desktop, mobile, expose itself to third-party, and integrate with other applications
    through web services or message broker. Business logic is executed by handling
    HTTP requests and messages with a database, and returning a HTML/JSON/XML response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b042db02-06cd-41cd-b518-8a04f7cd6220.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The challenges associated with such architecture are:'
  prefs: []
  type: TYPE_NORMAL
- en: The large monolithic code base is difficult to maintain, modularity breaks down
    over time because there are no hard module boundaries; hence, implementing a change
    becomes cumbersome over time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overloaded IDE**: The slower the IDE with the larger the code base lower
    productivity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overloaded web container**: The larger the application, the longer it takes
    the container to start up, deployment lowers developer productivity too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous deployment is difficult**: Large monolithic application frequent
    deployments for updates are challenge. The user interface need to be developed
    iterative and redeployed frequently, the risk associated with redeployment increases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scaling the application can be difficult**: A monolithic architecture can
    only scale in one dimension with an increasing transaction volume by running more
    copies of the application, adjusting the number of instances dynamically based
    on load. However, with an increasing data volume, the architecture can''t scale.
    Each application instance copy will access all of the data, making the caching
    less effective and increasing memory consumption and I/O traffic. With a monolithic
    architecture scaling, each component independently for different resource requirements
    will be challenge such as CPU intensive and might memory intensive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Obstacle to scaling development**: A monolithic application prevents the
    teams from working independently, so it should be coordinated development between
    the UI team, accounting team, inventory team, and so on. Once the application
    gets to a certain size, it is an obstacle to scalability to develop involving
    multiple teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Long-term commitment to a technology stack**: A monolithic architecture could
    be tied to a technology stack, and a particular version of upgrading with some
    newer technology framework will be tedious. If platform framework subsequently
    becomes obsolete, then to adopt a newer platform framework rewriting the entire
    application could be a risky proposal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microservices architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microservices are a set of loosely coupled collaborating services that are the
    building blocks of applications. Each service implements a set of narrowly, related
    functions such as order management and the customer management services. The services
    communicate with each other with synchronous protocols such as HTTP/REST, or asynchronous
    protocols such as AMQP. The services are independently developed and deployed
    with its own database decoupled from other services with data consistency enforced.
  prefs: []
  type: TYPE_NORMAL
- en: 'The divers for microservices architecture are:'
  prefs: []
  type: TYPE_NORMAL
- en: To build application quickly, easy to understand, maintain and continuous deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalability and availability to run on multiple machines, multiple copies of
    the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emerging technologies adoption for frameworks, programming languages, and so
    on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An application built on these lines could be of several components such as
    StoreFrontU to implement the user interface, backend services to check credit,
    maintaining inventory, and shipping orders. This can take orders from customers,
    check inventory, credit availability, and ship them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4c301b2-280f-49af-8baf-2375bd94e491.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This solution has a number of advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Each microservice is relatively nimble to understand, and can build faster and
    deploy; the IDE is faster and more productive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each service can be developed by their respective teams, and deployed of other
    services independently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequent deployment for new versions is easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved fault isolation any service memory leak will affect only that service,
    and other services will continue to handle requests unaffected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible to adopt new technology stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Challenges associated with microservices-based solutions are:'
  prefs: []
  type: TYPE_NORMAL
- en: Complexity of creating distributed systems with multiple services transactions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDE support and testing is difficult, including the inter-service communication
    mechanism for coordinating multiple services between the teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment/operational complexity of deploying and managing a system comprised
    of many different service types.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Increased memory usage: The microservice architecture runs its own VM to isolate
    the instances. If there are *M* instances, there will be *M* times the VMs causing
    the overhead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microservice decision
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microservice architecture is more appropriate for larger, complex scale of application,
    rather than small or startup applications where in monolithic is more appropriate.
    Microservice architecture structures an application as a set of loosely coupled
    services to accelerate software development by enabling continuous delivery/deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microservice decision is based on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Microservice based on business capability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microservice based on subdomain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object-oriented design** (**OOD**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single Responsibility Principle** (**SRP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Closure Principle** (**CCP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/201a399d-bc5d-48e3-8e43-9d99a94588c9.png)![](img/6f1cacb1-1da3-47a5-bb90-2b1e591d3d02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Microservice architecture**--service must be adequately planned to be developed
    by a small team and to be easily tested. The SRP is a basis for service design
    to define responsibility of a class and reason to initiate the change. It creates
    cohesive design of services and implements a small set of strongly related functions.
    The **common closure principle** (**CCP**) means classes that change for the same
    reason should be in the same package. If the same business rule is implemented
    in different aspects by two classes, then for any business rule change only small
    modifications to be done in code to accommodate the same.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Microservices should correspond to business capabilities/business object to
    generate value:'
  prefs: []
  type: TYPE_NORMAL
- en: Inventory management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The corresponding microservice architecture would have services aligned to
    each of these capabilities. Following this pattern has the benefits such as:'
  prefs: []
  type: TYPE_NORMAL
- en: The business capabilities are relatively stable so as the architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development teams are delivering business value based on cross-functional, autonomous,
    and organized, rather than technical features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services are loosely coupled and cohesive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying business capabilities, and hence services require an understanding
    of the business. An organization's business capabilities and services are identified
    by analyzing the organization's purpose, business processes, structure, and areas
    of expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Organization structure can be based on **domain-driven design** (**DDD**) subdomains
    or business capability groups. DDD is related to the application's problem space
    as the domain criteria; for example, business groups organized on a basis of regions,
    domains, locations, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'A domain is made up of multiple subdomains. Different parts of the business
    corresponds to subdomain as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core subdomain**: Key business differentiator and the most critical part
    of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supporting**: Not key business differentiator, can be implemented in-house
    or outsourced'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generic**: Not business specific and implemented using off-the-shelf software'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The subdomains of an online store application can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Product catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inventory management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The corresponding microservice architecture would have services corresponding
    to each of these subdomains:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f27df024-ddfc-4b23-99a0-24441d8d12bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Microservices deployment patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The guiding principles for services are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A variety of languages, frameworks, and framework versions can be used for services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple service instances for each service for throughput and availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Independently deployable and scalable services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolated service instances from one another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster build and deploy ability for a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resources (CPU and memory) consumed by a service should be constrained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each service instance should be transparent to monitor behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reliable and cost-effective deployment of service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application metrics and health check API's
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit logging and compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed tracing and management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exception tracking and management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log aggregation, log deployments, and changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service component testing and service integration contract testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI composition (server-side page fragment, client-side UI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security--Access Token based on JSON Web Token identifying the requestor securely
    to each service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distribution patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multiple service instances per host, like multiple instances of different services
    running on a physical or virtual host machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a service instance on a shared host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy each service instance as a JVM process, per service instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy multiple service instances in the same JVM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding conflicting resource requirements, or dependency versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service instance per VM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service instance linked to each container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Serverless deployment options are explored as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Functions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Functions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Microservice chassis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Externalized configuration for credentials management, and of external services
    such as databases and message brokers for network locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: Usage of logging framework like log4j or logback'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Health checks**: Determine the health of the application through a URL-based
    monitoring service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metrics**: Measurement and insight for application performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed tracing**: A unique identifier between services traced with instrument
    code-based services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Java:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Boot and Spring Cloud
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropwizard
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gizmo
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Micro
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go kit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The various types of communication used in microservices are shared following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remote Procedure Invocation for interservice communication for client requests
    by services as listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: gRPC
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Thrift
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Messaging requests from clients through asynchronous mode by channels as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Kafka
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RabbitMQ
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Domain-specific protocol:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protocols such as SMTP and IMAP for emails
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Protocols such as RTMP, HLS, and HDS for media streaming
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data management options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The various modes of data management process in use for microservices are listed
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Database per service ensures loosely coupled services, each service can choose
    use type of database that's best suited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared database helps, as developer uses ACID transactions to enforce data consistency
    that are familiar and straightforward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event sourcing persists the state of a business entity as a sequence of state-changing
    events. A new event is appended to the list of events with the state of a business
    entity changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transaction log tailing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database triggers insert events into an EVENTS table to be polled by a separate
    process that publishes the events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The different APIs  used in microservices are as following:'
  prefs: []
  type: TYPE_NORMAL
- en: UI for desktop and mobile browsers is HTML5/JavaScript-based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side web application generates HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native Android and iPhone clients interact through REST APIs with the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For third-party applications through the online exposure of details is by REST
    API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fe0e6d41-0efa-422c-be76-bded50ec0f4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Usage of Application Program Interface (API) gateway protocols
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows usage of backend for frontend APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d26606d-d0ce-4015-9a66-195ccbdfd26b.png)'
  prefs: []
  type: TYPE_IMG
- en: Service discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microservice application is designed where the number of instances of a service
    and their locations change dynamically to run in a virtualized containerized environment,
    so the typical problem associated with service discovery is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5119b18e-8404-44a3-8f4b-d65667783124.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Client-side discovery exposes a remote API such as HTTP/REST or Thrift at a
    particular location (host and port) for each instance of a service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c4c8cd1-0518-48a4-8600-8f71d177a889.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Server-side discovery is making a request to a service by the client through
    a router (that is, load balancer) that runs at a well identified location address
    like a service registry, which the router queries and forwards the request to
    an available service instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58b47513-d959-44fe-8cd5-9ca5d6993a85.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the topics of containers and flavors offered by
    different vendors,
  prefs: []
  type: TYPE_NORMAL
- en: virtualization methods, container orchestrations, Internet of Things, and microservices
    applications and architectures.
  prefs: []
  type: TYPE_NORMAL
