- en: Containers, IoT, and Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器、物联网与微服务
- en: In this chapter, we will study the concepts of Containers, Virtualization, Kubernetes,
    Internet of Things, microservices, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习容器、虚拟化、Kubernetes、物联网、微服务等概念。
- en: 'Virtualization:'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟化：
- en: Para virtualization
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 半虚拟化
- en: Container-based virtualization
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于容器的虚拟化
- en: 'Introduction to containers:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器简介：
- en: Types of containers
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器类型
- en: Dockers
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Java container services
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java容器服务
- en: Amazon container services
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊容器服务
- en: Pivotal container services
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键容器服务
- en: Google container services
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google容器服务
- en: 'Container orchestration:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器编排：
- en: Kubernetes
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Docker Swarm
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Mesosphere
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mesosphere
- en: IoT
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网
- en: Microservices
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务
- en: Virtualization
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化
- en: It is a method of logically dividing mainframes to simultaneously allow multiple
    applications to run concurrently. Bare metal applications were unable to cope
    up with the advancements to use abundance availability of resources such as the
    server processing power and capacity improvements. This paved way for designing
    **virtual machines** (**VMs**), by running specialized software on top of physical
    servers to emulate a type of underlying hardware system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种逻辑上将大型计算机系统划分的方式，使多个应用程序能够同时并行运行。裸机应用无法跟上资源如服务器处理能力和容量改进的进步。这为设计**虚拟机**（**VMs**）铺平了道路，通过在物理服务器上运行专门的软件来仿真一种底层硬件系统。
- en: The same physical server can host multiple VM, each with different operating
    systems. Each VM runs a unique operating system and its own binaries/libraries
    and applications that it supports and services. VMs can be many gigabytes large.
    Server virtualization benefits are like a consolidation of applications onto a
    single system, with reduced server footprint, quicker server provisioning, improved
    disaster recovery, and cost savings.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同一物理服务器可以承载多个虚拟机，每个虚拟机都可以运行不同的操作系统。每个虚拟机都运行一个独特的操作系统以及它支持的二进制文件/库和应用程序。虚拟机可能会非常大，达到几个GB。服务器虚拟化的好处包括将应用程序整合到单一系统中，减少服务器占地空间，加快服务器配置速度，改善灾难恢复和节省成本。
- en: Hypervisor
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟机管理程序
- en: A hypervisor is software, firmware, or hardware that creates and runs on VMs
    also named as a virtual machine monitor. It is a layer between the OS and hardware
    to virtualize the server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机管理程序是创建并运行虚拟机的软件、固件或硬件，也称为虚拟机监控器。它是操作系统和硬件之间的一层，用于虚拟化服务器。
- en: 'The hypervisor creates the virtual environment to host the guest VM. It supervises
    the guest systems and allocates resources to them as required. The hypervisor
    emulates the operation on the host machine''s operating system, and provides virtualization
    services to the VMs in between the physical machine and virtual machines:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机管理程序（Hypervisor）创建虚拟环境以承载客户机虚拟机（VM）。它监管客户机系统，并根据需要分配资源。虚拟机管理程序仿真主机操作系统上的操作，并在物理机和虚拟机之间为虚拟机提供虚拟化服务：
- en: '![](img/8a136436-5743-466f-b192-1f5591cc91f7.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a136436-5743-466f-b192-1f5591cc91f7.png)'
- en: Virtualization technologies have become popular with rapid development in cloud
    using hypervisors, such as Xen, VMware Player, and KVM, and in incorporation of
    hardware support in commodity processors, such as Intel VT and AMD-V.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算的迅速发展，虚拟化技术变得越来越流行，使用像Xen、VMware Player、KVM等虚拟机管理程序，并在普通处理器中集成硬件支持，如Intel
    VT和AMD-V。
- en: Types of virtualization
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化类型
- en: The virtualization types are categorized depending on the way it mimics hardware
    to a guest operating system, and also emulates a guest operating environment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化类型根据它如何模拟硬件以支持客户操作系统，并仿真客户操作环境进行分类。
- en: 'Primarily, there are three types of virtualization:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 主要有三种虚拟化类型：
- en: Emulation
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仿真
- en: Paravirtualization
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 半虚拟化
- en: Container-based virtualization
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于容器的虚拟化
- en: Emulation
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仿真
- en: Emulation is full virtualization to run the OS kernel of VM entirely in software.
    This type of hypervisor is termed as *Type 2 hypervisor*, and is installed on
    the top of the host operating system in order to translate a guest OS kernel code
    to software instructions. There is no hardware involvement, and the translation
    is done entirely in software layer. By emulation to any operating system that
    supports the underlying environment is emulate; however, the overhead of additional
    system resource leads to performance reduction as compared with other types of
    virtualizations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟是完全的虚拟化，它通过软件在虚拟机中完全运行操作系统内核。这种类型的虚拟机管理程序被称为*类型 2 虚拟机管理程序*，它安装在主机操作系统上方，将来宾操作系统内核代码转换为软件指令。没有硬件的参与，翻译完全在软件层进行。通过模拟支持底层环境的任何操作系统，然而，由于额外的系统资源开销，与其他虚拟化类型相比，性能有所下降。
- en: 'A few examples are VMware player, VirtualBox, QEMU, Bochs, parallels, and so
    on are shown in the following digram:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示意图展示了一些示例，包括 VMware Player、VirtualBox、QEMU、Bochs、Parallels 等：
- en: '![](img/a3f457f0-c26f-4885-a016-4d385956614f.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3f457f0-c26f-4885-a016-4d385956614f.png)'
- en: Paravirtualization
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 半虚拟化
- en: Paravirtualization, also referred to as *Type 1 hypervisor*, runs directly on
    the bare-metal hardware to provide virtualization services to the VM directly
    running on it. It supports collaboration between the operating system, the virtualized
    hardware, and the bare-metal hardware to accomplish optimal performance. These
    hypervisors do not require extensive resources, and typically run on small footprint.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 半虚拟化，也称为*类型 1 虚拟机管理程序*，直接运行在裸金属硬件上，为运行在其上的虚拟机提供虚拟化服务。它支持操作系统、虚拟化硬件和裸金属硬件之间的协作，以实现最佳性能。这些虚拟机管理程序不需要大量资源，通常可以在小型系统上运行。
- en: 'A few examples are Xen, KVM, and so on:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，包括 Xen、KVM 等：
- en: '![](img/9364d2ce-a37b-41cf-935d-80e158702cae.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9364d2ce-a37b-41cf-935d-80e158702cae.png)'
- en: Container-based virtualization
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于容器的虚拟化
- en: 'Container-based virtualization is also referred to as operating system-level
    virtualization; within a single operating system kernel, it enables executions
    of multiple isolated environments. This isolated virtual execution environment
    is called container-managed with a group of processes. It offers features and
    benefits such as high performance and dynamic resource management:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 基于容器的虚拟化也称为操作系统级虚拟化；在单个操作系统内核中，它支持多个隔离环境的执行。这个隔离的虚拟执行环境称为容器管理，其中包含一组进程。它提供了高性能和动态资源管理等特点和优势：
- en: '![](img/4d14d4af-9a54-4d71-8d37-eaf0da96ab6b.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d14d4af-9a54-4d71-8d37-eaf0da96ab6b.png)'
- en: Containers
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: The concept of containers in IT is synonymous to the concept of containers used
    in the transportation sector. The basic purpose of containers is to carry or port
    items from source to destination.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: IT中容器的概念与运输行业中容器的概念相同。容器的基本目的是从源点到目的地运送物品。
- en: Extending the same analogy, containers in IT operate on this basic purpose to
    port software from one server to another safely and securely. Moving an application
    from development server to QA (test) server and to production server is usually
    associated with multiple complexities, such as preparing infrastructure environment
    checklists, validating the compliers, libraries, runtime dependencies, and so
    on. The container concept is to ensure that it carries along with it the ecosystem
    required for an application to run from one bare-metal system to another. A container
    in that sense is self-sufficient, with all the requisite components, and the environment
    for the application to run on any server is installed. A container image is a
    standalone executable package, an abstraction that packages the code and dependencies
    at the application layer; they consume less space, and operate within the allocated
    resources.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 类比地，IT中的容器在基本用途上起着将软件从一台服务器安全迁移到另一台服务器的作用。将应用程序从开发服务器迁移到 QA（测试）服务器，再到生产服务器，通常涉及多个复杂问题，如准备基础设施环境检查清单、验证编译器、库、运行时依赖关系等。容器的概念确保它将所需的生态系统一同携带，以便应用程序能够从一个裸金属系统运行到另一个裸金属系统。从这个意义上来说，容器是自给自足的，具备所有必要的组件，并且为应用程序提供了可以在任何服务器上运行的环境。容器镜像是一个独立的可执行包，它抽象了应用层的代码和依赖项；它们占用较少的空间，并在分配的资源内运行。
- en: 'Containers are a logical packaging mechanism to abstract the applications from
    the underlying environment they actually operate. Container-based applications
    because of decoupling can be deployed easily and consistently on a variety of
    target environments from private data center to the public cloud, or a personal
    laptop. Containerization separates roles, responsibilities, and concerns; this
    facilitates developers to work on the application logic and dependencies. IT operations
    teams, without diving into the specifics for software versions and configurations
    specific to the applications, can focus on pure deployment and management:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一种逻辑打包机制，将应用程序与其实际运行的底层环境进行抽象。基于容器的应用程序由于解耦的特性，可以轻松且一致地在各种目标环境中部署，从私有数据中心到公共云，或个人笔记本电脑。容器化将角色、责任和关注点分离；这使得开发人员可以专注于应用程序逻辑和依赖关系。IT
    运维团队可以在不深入了解特定软件版本和配置的情况下，专注于纯粹的部署和管理：
- en: '![](img/3097b100-a0f7-45a3-8678-ce48ebd38ea3.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3097b100-a0f7-45a3-8678-ce48ebd38ea3.png)'
- en: 'The attributes of a container making them quite a popular choice are:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的特点使其成为一个非常受欢迎的选择：
- en: '**Lightweight**: These containers are to use fewer resources and start instantly;
    many containers can share the operating system kernel and use less resources.
    They share common files, and images are built from filesystem layers to minimize
    disk consumption and faster image downtime.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻量级**：这些容器使用更少的资源并能立即启动；多个容器可以共享操作系统内核，使用更少的资源。它们共享公共文件，镜像是从文件系统层构建的，以最小化磁盘消耗并加快镜像下线速度。'
- en: '**Interoperability**: Containers should be operating on open standards, and
    portable between platforms of Linux distributions (Debian, Ubuntu, and CentOs),
    VMs, and Windows.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互操作性**：容器应基于开放标准运行，并能在不同平台之间移植，包括 Linux 发行版（Debian、Ubuntu 和 CentOs）、虚拟机和
    Windows。'
- en: '**Security**: Containers offer a high degree of security by isolating and separating
    both in between the applications and with underlying infrastructure. The isolation
    of issues related to an application should be contained within the container,
    and it neither impacts the other applications, nor the entire machine.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：容器通过将应用程序与底层基础设施隔离和分离，提供了较高的安全性。与应用程序相关的问题应仅限于容器内，既不会影响其他应用程序，也不会影响整个机器。'
- en: 'Multiple tenancy that containers share a common kernel (system resources) through
    unique mount process. For each container, the commonly shared components are write-enabled,
    and they have read-only access. Due to this sharing concept, containers bring
    the following benefits:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 多租户：容器通过独特的挂载进程共享公共内核（系统资源）。对于每个容器，共享的组件是可写的，而它们则具有只读访问权限。由于这种共享概念，容器带来了以下好处：
- en: Being exceptionally lightweight
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常轻量
- en: Quick startup time
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速启动时间
- en: Portability on a variety of cloud deployments, public, private, and so on
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在各种云部署中的可移植性，包括公有云、私有云等
- en: Development and testing phases are accelerated by quick assembling (package)
    of applications with dependencies
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过快速组装（打包）带有依赖关系的应用程序，开发和测试阶段得以加速
- en: Management effort reduced to manage a single system compared with multiple servers,
    reduced effort for patches, and upgrades
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理工作量减少，相比于管理多个服务器，管理单个系统的工作量更小，打补丁和升级的工作量也降低
- en: 'Guest OS and Host OS should be compatible, so both should match like Linux,
    neither should be run on Windows, and vice versa:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户操作系统和宿主操作系统应兼容，因此两者应匹配，如 Linux，不能在 Windows 上运行，反之亦然：
- en: '![](img/7cd310ad-2b41-4529-a001-40677c8ebe52.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cd310ad-2b41-4529-a001-40677c8ebe52.png)'
- en: '**Container security**: The namespaces feature included with Linux kernel led
    to the creation of the concept of a container. Separate instances are created
    for global namespaces; the way it works is for every process the container adds
    a unique ID, and also for every system call, new access control checks are added.
    These serve as isolated containers wherein the outside objects have neither access
    nor visibility to the processes running inside the container. Although they share
    the underlying kernel, each container is treated separately; for example, the
    root user of each container is restricted for the respective container, adding
    a high security feature.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器安全性**：Linux 内核中的命名空间特性促成了容器概念的创建。为全局命名空间创建了独立的实例；其工作原理是，为每个进程，容器添加一个唯一的
    ID，并且每个系统调用时，都添加新的访问控制检查。这些作为隔离的容器，其中外部对象既无法访问也无法查看容器内运行的进程。尽管共享底层内核，每个容器都被单独对待；例如，每个容器的根用户仅限于各自容器，增强了安全性。'
- en: '**Container management**: The common kernel has full visibility among multiple
    containers, so it''s imperative to limit the resource allocation to containers.
    This is accomplished by the Linux **Control Groups** (**cgroups**) subsystem for
    resource allocation and scheduling. Container virtualization is enabled by grouping
    processes to manage their aggregate resource consumption to limit memory and CPU
    consumption. The management tools to limit resource allocations for Linux containers
    are LXC, LXD, Linux-VServer, OpenVZ, Docker, systemd-nspawn, lmctfy, Warden, and
    so on.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器管理**：公共内核在多个容器之间具有完全的可见性，因此必须限制资源分配给容器。这是通过 Linux **控制组**（**cgroups**）子系统进行资源分配和调度实现的。容器虚拟化是通过将进程分组来管理它们的总体资源消耗，从而限制内存和
    CPU 消耗。用于限制 Linux 容器资源分配的管理工具包括 LXC、LXD、Linux-VServer、OpenVZ、Docker、systemd-nspawn、lmctfy、Warden
    等。'
- en: '**Scalability**: Cluster management infrastructure supports scalability to
    install and operate, to schedule container-enabled applications across the cluster
    based on resource needs, and availability. It supports the ability to grow from
    single to multiple instances without additional complexity on how the applications,
    batch jobs, or microservices are managed, abstracting the complexity of infrastructure.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：集群管理基础设施支持可扩展性，能够根据资源需求和可用性在集群中安装、操作并调度容器化应用程序。它支持从单个实例扩展到多个实例的能力，并且在管理应用程序、批处理作业或微服务时无需额外的复杂性，抽象了基础设施的复杂性。'
- en: '**Task definitions**: Tasks are defined with declarative JSON template called
    **task definition**. Multiple containers required for the task are specified inside
    task definitions, and they include Docker repository/image, CPU, memory, and shared
    data volumes. The way containers are to be linked to each other can be part of
    a single task definition file registered with service. Version control for application
    specification is also part of task definition.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务定义**：任务通过声明性 JSON 模板定义，称为**任务定义**。任务所需的多个容器在任务定义中指定，包括 Docker 仓库/镜像、CPU、内存和共享数据卷。容器之间的链接方式可以作为一个单一的任务定义文件的一部分，注册到服务中。应用程序规范的版本控制也是任务定义的一部分。'
- en: '**Programmatic control**: Container services provide APIs to integrate and
    extend services such as creation and deletion of clusters, registration and deregistration
    of Docker containers, including launch and termination tasks, and provide details
    on the cluster state and information of its instances.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程控制**：容器服务提供 API，用于集成和扩展服务，如集群的创建和删除、Docker 容器的注册和注销，包括启动和终止任务，并提供有关集群状态和其实例的详细信息。'
- en: '**Scheduling**: Applications, batch jobs, and services are managed with schedulers
    to run as they are designated. Schedulers place containers based on availability
    requirements and resource needs (such as RAM or CPU) onto the clusters. Provision
    for custom schedulers and integrate third-party schedulers, container management,
    and orchestration support with open source projects.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度**：应用程序、批处理作业和服务通过调度器进行管理，按照指定的方式运行。调度器根据可用性要求和资源需求（如内存或 CPU）将容器放置到集群中。提供自定义调度器的配置，并集成第三方调度器、容器管理和编排支持与开源项目。'
- en: '**Container auto-recovery**: Containers automatically recover unhealthy containers,
    to ensure application support with the required number of containers.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器自动恢复**：容器自动恢复不健康的容器，以确保以所需数量的容器支持应用程序。'
- en: '**Container deployments**: By uploading a newer version of application task
    definition, the scheduler will automatically stop the old version containers and
    start the containers with new versions. Ease of updating containers to new versions
    by conveniently registering and deregistering containers.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器部署**：通过上传更新版的应用任务定义，调度器会自动停止旧版本的容器，并启动新版本的容器。通过方便的注册和注销容器，可以轻松地将容器更新为新版本。'
- en: '**Load balancing**: Distribute traffic across containers with **Elastic Load
    Balancer** (**ELB**), by specifying in the task definition to add and remove containers
    from ELB. A dynamic port allocation in task definition gives unused port access
    to the container while scheduled; to share multiple services with ELB path-based
    routing is also an option.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：通过**弹性负载均衡器**（**ELB**）分配流量到容器中，可以在任务定义中指定将容器添加到 ELB 或从 ELB 中移除容器。在任务定义中，动态端口分配会在容器调度时为其提供未使用的端口；要共享多个服务，基于路径的
    ELB 路由也是一种选择。'
- en: '**Local development**: Docker composes an open source tool to define and run
    multicontainer applications; this can be extended to both work machine and production
    server.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地开发**：Docker Compose 是一个开源工具，用于定义和运行多容器应用程序；这可以扩展到工作机器和生产服务器。'
- en: '**Monitoring**: Clusters and containers to run tasks, average and aggregate
    of CPU and memory utilization, grouped by task definition, service or cluster,
    provision to set up alarms in order to alert to scale up or down the containers.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：集群和容器运行任务，按任务定义、服务或集群分组的 CPU 和内存利用率的平均值和汇总值，提供设置警报的功能，以便在容器需要扩展或缩减时发出警告。'
- en: '**Logging**: The details of agent logs, API calls, and Docker logs are captured
    for issue diagnostics, the time of the API call, the API call source IP address,
    the request parameters, response elements, security analysis, compliance, audit,
    and resource change tracking.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：捕获代理日志、API 调用和 Docker 日志的详细信息，用于问题诊断，包括 API 调用的时间、API 调用源 IP 地址、请求参数、响应元素、安全分析、合规性、审计和资源变更跟踪。'
- en: '**Repository support**: Container service along with third-party, private Docker
    registry, or Docker hub image repository accessibility to retrieve appropriate
    images.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库支持**：容器服务支持第三方、私有 Docker 注册表或 Docker hub 镜像仓库访问，以检索适当的镜像。'
- en: '**Security**: Inbuilt features to gain visibility into roles and access at
    task level, and manage instance-based roles and task-based roles separately with
    least privilege policy.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：内置功能可以获得对角色和访问权限的可见性，在任务级别管理实例角色和任务角色，并通过最小权限策略进行分离。'
- en: As we have seen, the containers are standardized units of software development,
    incorporating everything as code, runtime, system tools, and system libraries
    for software applications to run. The image is a read-only template to create
    containers. Application components must be architected to deploy and run in containers.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，容器是标准化的软件开发单元，涵盖了作为代码的所有内容，包括运行时、系统工具和系统库，以便软件应用程序运行。镜像是一个只读模板，用于创建容器。应用组件必须被架构化以便在容器中部署和运行。
- en: 'Containers have become popular in digital technology and offered by many vendors
    a like. Docker is a popular container choice, so its adoption and support is a
    natural choice by other vendors:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 容器在数字技术中变得越来越流行，并且被许多供应商提供。Docker 是一个流行的容器选择，因此其他供应商自然也会采用和支持它：
- en: Dockers
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Java container services
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 容器服务
- en: Amazon
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊
- en: Pivotal
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pivotal
- en: Azure
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure
- en: Google
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌
- en: IBM Bluemix container service
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM Bluemix 容器服务
- en: Docker containers
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 容器
- en: 'Docker container platform is available as **Community Edition** (**CE**) and
    **Enterprise Edition** (**EE**), with optimized installers for a variety of infrastructure:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器平台分为**社区版**（**CE**）和**企业版**（**EE**），并为各种基础设施提供了优化的安装程序：
- en: '![](img/7f95b606-d68a-4dee-80fe-a088924433aa.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f95b606-d68a-4dee-80fe-a088924433aa.png)'
- en: 'The features of Docker container services are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器服务的特点如下：
- en: '**Universal packaging**: This packages apps of any programming language or
    service into containers to port them, without the risk of incompatibilities, or
    version conflicts.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用打包**：将任何编程语言或服务的应用打包成容器进行移植，避免了不兼容或版本冲突的风险。'
- en: '**Developer toolkit**: Readily available containers in the Docker store offer
    everything needed to build, test, and run multicontainer apps for any programming
    language.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者工具包**：Docker 商店中提供的现成容器包含构建、测试和运行多容器应用所需的一切，适用于任何编程语言。'
- en: '**Container orchestration in-built**: In-built clustering at scale with sophisticated
    scheduling to monitor, build highly available and fault-tolerant services to run
    apps.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内建容器编排**：通过内建的集群功能，具备复杂的调度能力，监控、构建高可用性和容错服务，运行应用程序。'
- en: '**Highly secure**: Security out-of-the-box with mutual TLS, certificate rotation,
    container isolation, and image signing makes it secure and easy-to-use container
    app runtimes.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度安全**：开箱即用的安全性，包括相互 TLS、证书轮换、容器隔离和镜像签名，使得容器应用运行时既安全又易于使用。'
- en: '**App-centric networking**: Containers connected together with software-defined
    networking to intelligent routes and load balances traffic. Container-defined
    networks abstract configuration and deploy apps from underlying network infrastructure.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向应用的网络**：容器通过软件定义的网络连接在一起，智能路由并负载均衡流量。容器定义的网络抽象了配置，从底层网络基础设施部署应用程序。'
- en: '**Extensible architecture**: Integration with third-party systems for Open
    APIs, plugins, and drivers is convenient to change storage and networking backends
    with minimal or no code changes.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展架构**：与第三方系统集成，支持开放 API、插件和驱动程序，便于在最小或不需要代码更改的情况下更改存储和网络后端。'
- en: Java EE containers as a part of Java EE
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE 容器作为 Java EE 的一部分
- en: Thin-client multi-tiered applications to handle transaction and state management,
    multithreading, resource pooling, and other complex low-level details involve
    many lines of intricate code and hard-to-maintain Java EE architecture is component-based
    and platform independent, ensuring convenience for Java EE applications, as business
    logic is organized into reusable components, and provides underlying services
    in the form of a container for every component type. Rather than investing to
    develop these services, concentrate on solving the business problem at hand.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 精简客户端的多层应用程序来处理事务和状态管理、多线程、资源池化及其他复杂的低级细节，这些都涉及许多行复杂的代码和难以维护的 Java EE 架构。Java
    EE 是基于组件的、平台独立的，确保了 Java EE 应用程序的便捷性，因为业务逻辑被组织成可重用的组件，并为每种组件类型提供容器形式的底层服务。与其投入开发这些服务，不如专注于解决当前的业务问题。
- en: Java containers are the interface between a component and the low-level platform-specific
    functionality that supports the component. For a web service, the enterprise beans,
    the application client component must be assembled into a Java EE module, and
    deployed into its container to be executed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Java 容器是组件与支持该组件的低级平台特定功能之间的接口。对于 Web 服务，企业 Beans、应用客户端组件必须组装成一个 Java EE 模块，并部署到其容器中执行。
- en: For the assembly process, container settings are specified for each component
    of the Java EE application, and also the Java EE application itself. Container
    settings can be customized with the underlying features of the Java EE server,
    such as transaction management, **Java Naming and Directory Interface** (**JNDI**)
    lookups, security, and remote connectivity.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于组装过程，为 Java EE 应用程序的每个组件以及 Java EE 应用程序本身指定容器设置。容器设置可以通过 Java EE 服务器的底层功能进行自定义，如事务管理、**Java
    命名和目录接口**（**JNDI**）查找、安全性和远程连接。
- en: 'Some features are:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一些功能包括：
- en: The Java EE security model-authorized users are configured access for a web
    component or enterprise.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE 安全模型——授权用户被配置为访问 Web 组件或企业。
- en: The Java EE transaction model treats all methods in one transaction as a single
    unit, by specifying relationships among methods to cluster them as a single transaction.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE 事务模型将一个事务中的所有方法视为一个单元，通过指定方法之间的关系，将它们归类为单一事务。
- en: A JNDI lookup service helps application components access a unified interface
    in the enterprise to the multiple naming and directory services.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JNDI 查找服务帮助应用组件访问企业中的统一接口，支持多个命名和目录服务。
- en: The Java EE remote connectivity model mimics VM by invoking methods to manage
    low-level communications between clients after enterprise beans are created.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE 远程连接模型通过调用方法来管理客户端之间的低级通信，模拟虚拟机（VM），在企业 Beans 创建后进行管理。
- en: The Java EE architecture features configurable services, and application components
    within itself, so can provide different functionality like security settings levels
    of access to database data customized for each production environment. The Java
    EE container facilitates nonconfigurable services such as enterprise bean and
    servlet life cycles, data persistence, database connection, resource pooling,
    and access to the Java EE platform APIs.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE架构具有可配置服务和内部应用组件，可以提供不同的功能，如安全设置、访问数据库数据的权限级别，针对每个生产环境的定制。Java EE容器提供不可配置的服务，如企业Bean和servlet生命周期、数据持久化、数据库连接、资源池和对Java
    EE平台API的访问。
- en: Java EE server and containers
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE服务器和容器
- en: 'The container types in the Java EE application components are:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE应用程序组件中的容器类型包括：
- en: '**Java EE server**: This is the runtime environment of Java EE, and provides
    EJB and web containers.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java EE服务器**：这是Java EE的运行时环境，提供EJB和Web容器。'
- en: '**Enterprise JavaBeans (EJB) container**: It''s part of Java EE server, and
    it''s responsible for the execution of enterprise beans for Java EE applications.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业JavaBeans（EJB）容器**：它是Java EE服务器的一部分，负责执行Java EE应用程序中的企业Bean。'
- en: '**Web container**: They are part of Java EE server. They manage the execution
    of JSP page and servlet components for Java EE applications. Web components and
    their containers run on the Java EE server.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web容器**：它们是Java EE服务器的一部分，负责管理JSP页面和servlet组件的执行，适用于Java EE应用程序。Web组件及其容器运行在Java
    EE服务器上。'
- en: '**Application client container**: This hosts application clients and their
    containers'' execution.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用客户端容器**：用于托管应用客户端及其容器的执行。'
- en: '**Applet container**: This is responsible for execution of applets, and hosts
    web browser and Java plugin together to run on the client.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小程序容器**：负责小程序的执行，并将Web浏览器和Java插件托管在一起，在客户端运行。'
- en: '![](img/1af0bd14-06fb-453f-94f1-4ba7c907ffaf.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1af0bd14-06fb-453f-94f1-4ba7c907ffaf.png)'
- en: Amazon ECS container service
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon ECS容器服务
- en: 'Amazon ECS comes with a variety of following features:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ECS具有以下多种功能：
- en: Highly scalable, fast container management service
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度可扩展、快速的容器管理服务。
- en: Manage Docker containers are easy to run, stop on a cluster of **Amazon Elastic
    Compute Cloud** (**Amazon EC2**) instances
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Docker容器可以轻松地在**Amazon Elastic Compute Cloud**（**Amazon EC2**）实例集群上运行和停止。
- en: Container-based applications launch and stop through simple API calls
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于容器的应用通过简单的API调用启动和停止。
- en: Centralized service to monitor state of your cluster, and access to many familiar
    Amazon EC2 features
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中式服务用于监控集群的状态，并提供对许多熟悉的Amazon EC2功能的访问。
- en: Schedule the containers placement across the clusters based on resource needs,
    isolation policies, and availability requirements
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据资源需求、隔离策略和可用性要求，安排容器在集群中的位置。
- en: Consistent deployment and build experience, manage scale **Extract-Transform-Load**
    (**ETL**) and batch workloads
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致的部署和构建体验，管理规模**提取-转换-加载**（**ETL**）和批量工作负载。
- en: Build sophisticated microservices and model-based application architectures
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建复杂的微服务和基于模型的应用架构。
- en: Provides more fine-grained control and access to a wider set of use cases, hence
    more popular compared with AWS Elastic Beanstalk
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供更细粒度的控制，并访问更多的使用案例，因此相比AWS Elastic Beanstalk更受欢迎。
- en: 'Amazon ECS is also highly available, which supports the concept of running
    application containers across multiple availability zones. Container images are
    stored in and pulled from container registries (either within or outside of AWS).
    Task definitions and services are defined to specify alignment of Docker container
    images to run on respective clusters:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ECS也具有高度可用性，支持在多个可用区运行应用容器的概念。容器镜像存储在容器注册表中，并可以从中拉取（无论是在AWS内还是外）。任务定义和服务被定义以指定Docker容器镜像在相应集群上运行的对齐方式：
- en: '![](img/0765500a-cfb2-4c1f-8898-77cd97447ca9.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0765500a-cfb2-4c1f-8898-77cd97447ca9.png)'
- en: The Amazon ECS multizone architecture components are discussed further.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ECS多区架构组件将在后文进一步讨论。
- en: Containers and images
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器和镜像
- en: 'Application components must be architected to run in containers for deployment
    to ECS. The standardized unit is Docker container for software development, comprising
    application requirements to run code, runtime, system tools, system libraries,
    and so on. An image template is used to create containers, and it specifies all
    of the components to be part of the container. It is typically a read-only format
    file created from a plain text Dockerfile, stored in a registry for download and
    run on container instances:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 应用组件必须被设计为在容器中运行，才能部署到 ECS。标准化单元是 Docker 容器，用于软件开发，包含运行代码所需的应用程序需求、运行时、系统工具、系统库等。镜像模板用于创建容器，并指定所有作为容器一部分的组件。通常，它是一个只读格式的文件，来自一个普通文本的
    Dockerfile，存储在注册表中以供下载并在容器实例上运行：
- en: '![](img/3a096d53-ee07-47c2-a4ed-35db0ceb0017.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a096d53-ee07-47c2-a4ed-35db0ceb0017.png)'
- en: Task definitions
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务定义
- en: Task definitions prepare the application to run on ECS as a blueprint for the
    application, a JSON format text file. It describes the application use by various
    parameters as to which containers to use, the corresponding ports to be opened,
    the repositories to be located, and the data volumes to be used with the containers
    for the tasks on a web server such as Nginx.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 任务定义为应用程序在 ECS 上运行做准备，作为应用程序的蓝图，是一个 JSON 格式的文本文件。它通过各种参数描述应用程序的使用方式，包括要使用的容器、需要打开的相应端口、要定位的仓库以及与容器一起使用的数据卷，这些都是
    Web 服务器（如 Nginx）上任务的一部分。
- en: Tasks and scheduling
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务和调度
- en: 'With task definition, the number of tasks are specified for instantiation on
    a container instance within the cluster. Task scheduler is responsible for placing
    and scheduling tasks on container instances simultaneously:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任务定义，可以指定任务的数量，以便在集群内的容器实例上进行实例化。任务调度程序负责同时将任务放置和调度到容器实例上：
- en: '![](img/e06a543e-bad0-468f-8a36-c7f36c8a50c0.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e06a543e-bad0-468f-8a36-c7f36c8a50c0.png)'
- en: Clusters
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群
- en: A cluster is a logical grouping of instances to run tasks. The container images
    are downloaded from a specified registry to run them on the container instances
    within the cluster.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 集群是用于运行任务的实例的逻辑分组。容器镜像从指定的注册表中下载，以便在集群内的容器实例上运行它们。
- en: Container agent
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器代理
- en: 'The container agent runs on each instance within the cluster. It relays the
    instance''s information such as current running tasks and resource utilization
    to also start and stop tasks as per the requests:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 容器代理在集群内的每个实例上运行。它将实例的信息，如当前运行的任务和资源使用情况，传递出去，并根据请求启动和停止任务：
- en: '![](img/645a866e-dd70-4e5e-a8f6-aab6175dafde.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/645a866e-dd70-4e5e-a8f6-aab6175dafde.png)'
- en: 'Amazon ECS functionality can be augmented using additional services in conjunction:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ECS 的功能可以通过额外的服务进行增强：
- en: '**Identity and access management**: IAM is a web service to control access
    to resources securely for users by authentication to control use of resources
    and authorization on how to access resources. Using IAM roles control access at
    the container instance level, and also the task level are managed.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份与访问管理**：IAM 是一项 Web 服务，用于通过认证控制对资源的访问，安全地控制用户如何使用资源和授权如何访问资源。通过使用 IAM 角色控制容器实例级别的访问权限，并且任务级别的访问权限也得到管理。'
- en: '**Autoscaling**: Autoscaling is a web service to scale out and scale in the
    container instances, automatically launching or terminating EC2 instances. It
    could be defined in user-defined policies, health status checks, and schedules.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展**：自动扩展是一项 Web 服务，用于扩展和缩减容器实例，自动启动或终止 EC2 实例。它可以在用户定义的策略、健康状态检查和计划中进行定义。'
- en: '**Elastic Load Balancing**: ELB accomplishes high levels of fault tolerance
    for applications by distributing the incoming application traffic automatically
    across multiple EC2 instances, and across services in a cluster.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性负载均衡**：ELB 通过自动将传入的应用程序流量分发到多个 EC2 实例和集群中的服务，实现应用程序的高故障容忍能力。'
- en: '**EC2 Container Registry:** Docker registry service is secure, scalable, and
    reliable. Resource-based permissions enabled by IAM to access repositories and
    images on Docker private repositories. Docker CLI can be used to push, pull, and
    manage images.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EC2 容器注册表**：Docker 注册表服务是安全的、可扩展的且可靠的。通过 IAM 启用基于资源的权限，允许访问 Docker 私有注册表中的仓库和镜像。可以使用
    Docker CLI 推送、拉取和管理镜像。'
- en: '**AWS Cloud Formation**: AWS Cloud Formation is a convenient way to create,
    manage, provision, and update a collection of related AWS resources. Cloud Formation
    script can help define clusters, task definitions, and services in an orderly
    and predictable fashion as entities in an AWS.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Cloud Formation**：AWS Cloud Formation 是一种方便的方式，用于创建、管理、配置和更新一组相关的 AWS
    资源。Cloud Formation 脚本可以帮助以有序且可预测的方式定义 AWS 中的集群、任务定义和服务。'
- en: '**Amazon ECS CLI**: Amazon ECS CLI using Docker compose from a local development
    environment. It provides high-level commands to create, update, and monitor clusters
    and tasks.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon ECS CLI**：Amazon ECS CLI 使用来自本地开发环境的 Docker Compose。它提供了高层次的命令，用于创建、更新和监控集群和任务。'
- en: '**AWS SDKs**: The SDKs support programming languages, and take care of tasks
    automatically such as:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS SDKs**：SDK 支持多种编程语言，并自动处理以下任务：'
- en: Signing of service requests cryptographically
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对服务请求进行加密签名
- en: Retrying requests
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重试请求
- en: Error responses handling
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误响应处理
- en: Pivotal container services
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pivotal 容器服务
- en: 'Pivotal technologies offer container services with the following core features:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Pivotal 技术提供具有以下核心特性的容器服务：
- en: Containerized workloads are reliably deployed and run across private and public
    clouds.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器化工作负载可以可靠地在私有云和公有云之间部署和运行。
- en: Container orchestration is built in with high availability, automated health
    checks, monitoring, and so on.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器编排内置高可用性、自动健康检查、监控等功能。
- en: Suited for Spark and elastic search workloads needing access to infrastructure
    primitives.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于需要访问基础设施原语的 Spark 和 Elasticsearch 工作负载。
- en: Apt for apps that require specific colocation of container instances, and where
    multiple port binds are needed.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于需要特定容器实例共址的应用，以及需要多个端口绑定的情况。
- en: High operational efficiency for Kubernetes and Open Source Kubernetes with latest
    stable OSS distribution no proprietary extensions.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Kubernetes 和开源 Kubernetes 提供高效的操作性能，采用最新稳定的 OSS 版本，没有专有扩展。
- en: On-demand provisioning with BOSH, a powerful release engineering tool chain,
    a reliable and consistent operational experience on any cloud.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 BOSH 按需配置，BOSH 是一个强大的发布工程工具链，在任何云环境中提供可靠一致的操作体验。
- en: Multicloud flexibility to deploy and consume Kubernetes on-premises with vSphere,
    or in the public cloud.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多云灵活性，能够在本地通过 vSphere 部署并使用 Kubernetes，或者在公有云中使用。
- en: Network Management and Security to programmatically manage software-based virtual
    networks, out-of-the-box network virtualization on vSphere and VMC.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络管理与安全性，通过编程方式管理基于软件的虚拟网络，提供 vSphere 和 VMC 上的开箱即用的网络虚拟化。
- en: Fully automated Ops can deploy, scale, patch, and upgrade the system without
    downtime also for Kubernetes clusters.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全自动化的运维能够在没有停机的情况下部署、扩展、修补和升级系统，包括 Kubernetes 集群。
- en: Easy integration with VMware tools like vRealize Operations Manager, vSAN network
    storage, and Wavefront for a full-featured on-prem deployment.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 VMware 工具（如 vRealize Operations Manager、vSAN 网络存储和 Wavefront）轻松集成，实现功能齐全的本地部署。
- en: Harbor, an enterprise-class container registry server, is part of PKS. Harbor
    extends features for an open source Docker like vulnerability scanning, identity
    management, and support for multiple registries.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Harbor，企业级容器注册服务器，是 PKS 的一部分。Harbor 扩展了开源 Docker 的功能，如漏洞扫描、身份管理以及对多个注册表的支持。
- en: Integrated with the PCF Service Catalog, easily adds APM tools, database services,
    and the Service Broker API. Extend PKS with a growing library of add-on services.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 PCF 服务目录集成，轻松添加 APM 工具、数据库服务和服务代理 API。通过不断扩展的附加服务库扩展 PKS。
- en: Constant compatibility with GKE, can easily move workloads to (and from) GKE.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 GKE 保持持续兼容，可以轻松将工作负载迁移到（或从）GKE。
- en: PKS is built on top Kubo, an open-source project managed by the Cloud Foundry
    Foundation.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PKS 构建于 Kubo 之上，这是一个由 Cloud Foundry Foundation 管理的开源项目。
- en: Google container services
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google 容器服务
- en: 'Google container services is a popular choice, with features as listed here:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Google 容器服务是一个受欢迎的选择，具有如下所列的特性：
- en: Google containerized application management offers multiple advanced features
    and flexibility
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 容器化应用管理提供多项高级功能和灵活性
- en: Container engine provides a managed environment for containerized applications
    to deploy, manage, and scale on a container cluster
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器引擎为容器化应用提供了一个托管环境，用于在容器集群上部署、管理和扩展。
- en: Kubernetes open source cluster management system powers container cluster engine
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 开源集群管理系统驱动容器集群引擎
- en: Provides tools and interface to perform administration tasks, manage, deploy
    applications, and set up policies
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供工具和接口执行管理任务，管理、部署应用程序并设置策略
- en: Monitors status of application containers, the health of deployed workloads
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控应用程序容器的状态，检查已部署工作负载的健康情况
- en: Load-balancing for compute engine instances
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算引擎实例的负载均衡
- en: Node pools within a cluster as a subset for additional flexibility
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群中的节点池作为附加的灵活性子集
- en: Automatic scaling of cluster's node instances
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群节点实例的自动扩展
- en: Automatic upgrades for cluster's node software versions
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群节点软件版本的自动升级
- en: Auto-repair of node to maintain node health and availability
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的自动修复，以保持节点的健康和可用性
- en: Stack driver logging and monitoring for visibility into your cluster
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stackdriver 日志记录和监控，让你能更清晰地了解集群的情况
- en: Master and node architecture for the cluster
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群的主节点和节点架构
- en: IP aliases, IAM, role-based access, and so on
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 别名、身份访问管理 (IAM)、基于角色的访问等
- en: IP rotation and IP Masquerade agent
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 轮换和 IP 伪装代理
- en: Container orchestration
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器编排
- en: 'Container orchestration is the process of automatically deploying multiple
    containers in an optimized manner to implement an application. This is quite important
    with a growing number of containers and hosts day by day. Orchestration means
    the automation of the process, and includes a number of features:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编排是自动化部署多个容器以优化方式实现应用程序的过程。随着容器和主机数量日益增长，这一点显得尤为重要。编排意味着该过程的自动化，并包括多个特性：
- en: Hosts provisioning
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机配置
- en: Set of containers instantiation
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器实例化集合
- en: Failed containers rescheduling
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败的容器重新调度
- en: Containers linking together with interfaces
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器通过接口互相连接
- en: Exposing services outside of the cluster to machines
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将集群外的服务暴露给机器
- en: Scaling by adding or removing containers, out or down the cluster
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过增加或移除容器来扩展集群
- en: '![](img/a6c17a1e-227c-49a1-aa92-8d210ef099e9.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6c17a1e-227c-49a1-aa92-8d210ef099e9.png)'
- en: Orchestration tools
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编排工具
- en: 'A few popular orchestration tools are listed here:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了一些流行的编排工具：
- en: Mesos
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mesos
- en: Kubernetics
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: CorCos Tectonic
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CorCos Tectonic
- en: Docker Swarm
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: '![](img/4b4006b7-7f58-4d0d-9799-41ebbb57e7a3.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b4006b7-7f58-4d0d-9799-41ebbb57e7a3.png)'
- en: 'The popularity of repositories as per their usage is shown in following image:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像展示了按使用情况排列的仓库的流行度：
- en: '![](img/e7f7aac8-89bd-4877-9ec7-f4382cfc7b1c.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7f7aac8-89bd-4877-9ec7-f4382cfc7b1c.png)'
- en: 'The three key differentiators among the orchestration tools to select for organization
    are:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择编排工具时，组织需要考虑的三个关键差异化因素是：
- en: '**Level of abstraction**: Support for containers or services that are container-based'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抽象级别**：支持基于容器的容器或服务'
- en: '**Tooling**: Orchestration management and integration with other services'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具**：编排管理及与其他服务的集成'
- en: '**Architecture**: How does it support scalability and recover from failure?'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构**：它如何支持可扩展性并从故障中恢复？'
- en: 'We will discuss the following popular tools in detail:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细讨论以下流行工具：
- en: Kubernetes
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Docker Swarm
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Mesosphere
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mesosphere
- en: 'Each orchestration platform has advantages compared with the others. There
    are multiple evaluations to consider, such as:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 每个编排平台都有相较于其他平台的优势。有多个评估因素需要考虑，比如：
- en: Enterprise DevOps framework and orchestration methodology along with APIs
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业 DevOps 框架和编排方法论，以及 APIs
- en: Number of hosts if over thousands of physical machines
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机数量超过数千台物理机器
- en: Mesos can be considered for large farm
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mesos 可以用于大型农场
- en: Are the containers based on bare metal, private VMs, or in the cloud?
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器是基于裸机、私有虚拟机，还是云中的？
- en: For cloud deployments, Kubernetes is popular
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于云部署，Kubernetes 很受欢迎
- en: Need for automated high availability
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对自动化高可用性的需求
- en: Kubernetes failed pods/containers will be automatically rescheduled by replication
    controller
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 失败的 Pods/容器将会被复制控制器自动重新调度
- en: In Mesos application's framework, code performs that role for automated high
    availability
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mesos 应用程序框架中，代码执行该角色，实现自动化的高可用性
- en: Grouping and load balancing requirement for services
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务的分组和负载均衡需求
- en: Kubernetes provides this, but Mesos application's framework code performs it
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 提供了这个功能，但 Mesos 应用程序框架代码执行了这个功能
- en: Organization skills
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织技能
- en: Mesos allow application to run as a framework programmatically with custom coding
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mesos 允许应用程序以框架的方式通过编程运行，并支持自定义编码
- en: Kubernetes is more declarative
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 更加声明式
- en: Setting up orchestration frameworks infrastructure can have challenges
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置编排框架的基础设施可能会面临挑战
- en: Kubernetes
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Kubernetes was created by Google, and now with **Cloud Native Computing Foundation**
    (**CNCF**). Its concept is to build orchestration for container deployments across
    multiple domains public clouds to hybrid deployments.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是由 Google 创建的，现在与 **Cloud Native Computing Foundation**（**CNCF**）共同维护。它的概念是为容器部署跨多个领域的公共云到混合部署建立编排。
- en: 'Kubernetes makes deploying and managing application easier, automates deployment,
    scaling, and management of containerized applications. Kubernetes adds the higher-level
    functions, such as load balancing, high availability through failover (rescheduling),
    and elastic scaling, as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 使得应用程序的部署和管理更加简便，自动化了容器化应用程序的部署、扩展和管理。Kubernetes 提供了更高层次的功能，如负载均衡、通过故障转移（重新调度）实现高可用性和弹性扩展，具体如下：
- en: Automatic health checks against the services
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对服务进行自动健康检查
- en: Self-healing, restarting containers that fail, or have stalled
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自我修复，重新启动失败或停滞的容器
- en: Horizontal scaling, scale services up or down based on utilization
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 横向扩展，根据使用情况上下调整服务的规模
- en: Service discovery and load balancing
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务发现和负载均衡
- en: Version-controlled automated rollouts and rollbacks
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制的自动化发布与回滚
- en: Secret and configuration management
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秘密和配置管理
- en: Storage orchestration only running what is needed
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储编排，仅运行所需的资源
- en: Batch execution, declaratively manages your cluster
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量执行，声明式管理你的集群
- en: 'The key components making up Kubernetes are:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 构成 Kubernetes 的关键组件有：
- en: A cluster is a collection of nodes, either bare-metal servers or VMs providing
    the resources to run one or more applications.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群是由多个节点组成的集合，这些节点可以是裸金属服务器或虚拟机，提供运行一个或多个应用程序所需的资源。
- en: Pods are co-located resources on the same host groups, such as containers and
    volumes. Pod-based containers share the same network namespace and use localhost
    to communicate. Pods are the basic scheduling unit, ephemeral not designed as
    durable entities.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pod 是在同一主机组上共存的资源，例如容器和卷。基于 Pod 的容器共享相同的网络命名空间，并使用 localhost 进行通信。Pod 是基本的调度单元，是临时的，不是为持久存在设计的实体。
- en: Labels are tags that allow them to be managed as a group. Like assigned to entities
    such as containers to be exposed as a service to the outside world.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签是可以将它们作为一组进行管理的标签。像是分配给容器等实体，以便将其暴露为对外服务。
- en: Services are basic load balancers and references for exposing them to the outside
    world and other containers.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务是基本的负载均衡器，并提供将其暴露给外部世界和其他容器的引用。
- en: The replication controller manages the scheduling of pods across the cluster.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 副本控制器负责管理 Pod 在集群中的调度。
- en: Docker orchestration tools
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 编排工具
- en: 'Docker orchestration most common tools are described here:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这里描述了 Docker 编排最常见的工具：
- en: '**Docker Swarm**: It is one of the most easy-to-use orchestrators, with just
    a couple of commands. It lets you spin up your first cluster much like the first
    container.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Swarm**：它是最易于使用的编排工具之一，仅需几条命令。它让你像启动第一个容器一样启动你的第一个集群。'
- en: '**Docker Engine**: It is the lightweight runtime and tooling engine used to
    run Docker containers.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Engine**：它是用于运行 Docker 容器的轻量级运行时和工具引擎。'
- en: '**Docker Machine**: This provisions hosts and installs Docker Engine software
    on them.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Machine**：它负责为主机提供配置，并在其上安装 Docker 引擎软件。'
- en: '**Docker Swarm**: By clustering multiple Docker hosts together produces a single,
    virtual Docker host. It enables Docker API to integrate with tools compatible
    with a single Docker host.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Swarm**：通过将多个 Docker 主机聚集在一起，生成一个虚拟的 Docker 主机。它使得 Docker API 能够与兼容单一
    Docker 主机的工具进行集成。'
- en: '**Docker Compose**: Applicable for development, testing, and staging environments.
    Creates required containers for deploying requisite application from a file defining
    a multicontainer application along with its dependencies.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Compose**：适用于开发、测试和预生产环境。通过一个定义多容器应用程序及其依赖关系的文件创建部署所需的容器。'
- en: '**Apache Mesos**: It is adopted by large enterprises, such as Twitter, Airbnb,
    and Apple, as it''s designed to scale to tens of thousands of physical machines.
    A framework in Mesos is an application running on one or more containers. Each
    frame can accept the resources offered by Mesos. Compared to Kubernetes, Mesos
    is less in features, involves extra integration work, is programmatic, defining
    services or batch jobs. Mesos also supports the fine-grained resource allocation
    across the nodes in a cluster of Kubernetes pods:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Mesos**：它被大型企业如Twitter、Airbnb和Apple采纳，因为它设计上能够扩展到数万个物理机器。Mesos中的框架是运行在一个或多个容器上的应用程序。每个框架都可以接受Mesos提供的资源。与Kubernetes相比，Mesos的功能较少，涉及额外的集成工作，更具程序化，定义服务或批处理作业。Mesos还支持在Kubernetes节点集群中进行细粒度的资源分配：'
- en: '![](img/ea33a793-296e-453c-9f1c-26b6536c0402.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea33a793-296e-453c-9f1c-26b6536c0402.png)'
- en: 'Mesos is proved to be efficient wherein the application is collocated with
    other services such as Hadoop, Kafka, and Spark. Mesos is the foundation for few
    distributed systems as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Mesos已被证明是高效的，其中应用与Hadoop、Kafka和Spark等其他服务协同工作。Mesos是以下几个分布式系统的基础：
- en: '**Apache Aurora**: A highly scalable scheduler service for long-running services
    and cronjobs such as adding rolling updates, service registration, and resource
    quotas'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Aurora**：一个高度可扩展的调度服务，适用于长时间运行的服务和定时任务，如添加滚动更新、服务注册和资源配额'
- en: '**Chronos**: A fault-tolerant service scheduler for orchestrating scheduled
    jobs within Mesos as a replacement for Cron'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chronos**：一个容错的服务调度器，用于在Mesos中编排定时任务，作为Cron的替代品'
- en: '**Marathon**: A simple-to-use service scheduler; it enhances performance of
    Mesos and Chronos by running two Chronos instances simultaneously'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Marathon**：一个易于使用的服务调度器；通过同时运行两个Chronos实例，它增强了Mesos和Chronos的性能'
- en: Internet of Things (IoT)
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网（IoT）
- en: IoT integrates sensory data, big data, networking, robotics, and artificial
    intelligence technology into an advanced automation and analytics system. IoT,
    when applied to any industry or system, can bring in greater transparency, control,
    and performance to deliver a complete product or service.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网将传感数据、大数据、网络、机器人技术和人工智能技术集成到一个先进的自动化和分析系统中。当物联网应用于任何行业或系统时，可以带来更高的透明度、控制力和性能，以交付完整的产品或服务。
- en: IoT systems span across industries using smart devices and enabling powerful
    technology to enhance data collection, analysis, achieve deeper automation, operations
    and integration through applications apt in any environment.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网系统跨越多个行业，使用智能设备并启用强大的技术来增强数据收集、分析，实现更深层次的自动化、运营和通过适合任何环境的应用进行整合。
- en: IoT benefits span across multiple business domains and even lifestyles providing
    benefits of improved customer engagement, technology optimization, reduced waste,
    enhanced data collection, and so on.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网的好处跨越多个业务领域，甚至生活方式，提供了改善客户参与度、技术优化、减少浪费、增强数据收集等优势。
- en: 'IoT-perceived challenges are as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: IoT感知的挑战如下：
- en: '**Security**: An ecosystem of constantly connected devices communicating over
    networks even with security measures is vulnerable'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：一个由不断连接的设备组成的生态系统，通过网络进行通信，即便有安全措施，仍然是脆弱的'
- en: '**Privacy**: Substantial personal data is captured without the user''s active
    participation'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隐私**：大量个人数据在用户未主动参与的情况下被捕获'
- en: '**Complexity**: Design, deployment, and maintenance of IoT systems integrating
    multiple technologies is a complex system'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性**：设计、部署和维护集成多种技术的物联网系统是一个复杂的系统'
- en: '**Flexibility**: IoT systems with several interfacing and locked systems are
    tightly coupled'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：拥有多个接口和锁定系统的物联网系统是紧密耦合的'
- en: '**Compliance**: When standard software compliance to comply with regulations
    is challenging, complexity of IoT makes the issue of regulatory compliance much
    more challenging'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性**：当标准软件合规性以遵守规定为挑战时，物联网的复杂性使得监管合规问题更加棘手'
- en: 'The most important features of IoT include connectivity, sensors, active engagement,
    and being a small device and artificial intelligence combination:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网的最重要特性包括连接性、传感器、主动参与，以及小型设备与人工智能的结合：
- en: '**Connectivity**: New enabling technologies between system devices, specifically
    IoT networking on a much smaller and cheaper scale, need not be exclusively tied
    to major providers.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接性**：在系统设备之间，尤其是物联网网络在更小且更廉价的规模上，新型的启用技术无需专门依赖主要供应商。'
- en: '**Sensors**: IoT capability comes with sensors that transform IoT from a standard
    passive network of devices into an interactive integrated system to address real-world
    needs'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传感器**：物联网的功能依赖于传感器，这些传感器将物联网从一个标准的被动设备网络转变为一个互动的集成系统，以应对现实世界的需求'
- en: '**Active engagement**: IoT introduces real-time interaction with connected
    technology, a new paradigm for active content, product, and service engagement'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动参与**：物联网引入了与连接技术的实时互动，形成了内容、产品和服务参与的新范式'
- en: '**Small devices**: Purpose-built small devices extend IoT capabilities to deliver
    its precision, scalability, and versatility at low, affordable costs'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小型设备**：专门设计的小型设备扩展了物联网的功能，提供精确性、可扩展性和多功能性，且成本低廉，适合大众使用'
- en: '**Artificial intelligence**: IoT essentially enhances every aspect of life
    with the power of data collection and analytics with artificial intelligence algorithms'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人工智能**：物联网本质上通过数据收集和分析与人工智能算法的结合，提升生活的各个方面'
- en: IoT - eco system
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网 - 生态系统
- en: IoT systems capture data with hardware devices such as remote dashboard, control
    devices, sensors, servers, and routing bridge device. Key tasks and functions
    managed with these devices can extend to system activation, security, communication,
    action, and detection.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网系统通过硬件设备（如远程仪表板、控制设备、传感器、服务器和路由桥设备）捕获数据。通过这些设备管理的关键任务和功能可以扩展到系统激活、安全、通信、动作和检测。
- en: '![](img/cdffc013-71a3-4c6e-a79b-3efee6e3fc49.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cdffc013-71a3-4c6e-a79b-3efee6e3fc49.png)'
- en: 'Multiple devices sensors for different functions are:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 不同功能的多个设备传感器包括：
- en: Accelerometers
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速度计
- en: Magnetometers
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁力计
- en: Gyroscopes
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 陀螺仪
- en: Acoustic sensors
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声学传感器
- en: Pressure sensors
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压力传感器
- en: Humidity sensors
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 湿度传感器
- en: Temperature sensors
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度传感器
- en: Proximity sensors
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接近传感器
- en: Image sensors
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像传感器
- en: Light sensors
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光传感器
- en: Gas RFID sensors
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 气体 RFID 传感器
- en: Standard devices
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准设备
- en: The standard devices such as desktop, tablet, and cell phone are also integrated
    with IoT for command interfaces and remote management.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 标准设备，如桌面、平板电脑和手机，也与物联网集成，提供命令接口和远程管理功能。
- en: Desktop and tablet can offer the highest level of control for the system and
    its settings.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 桌面和平板电脑能够为系统及其设置提供最高级别的控制。
- en: Cell phone can also provide remote functionality to modify some settings or
    configurations.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 手机也可以提供远程功能，修改一些设置或配置。
- en: Routers and switches are standard network devices, and key to connected devices.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器和交换机是标准的网络设备，是连接设备的关键。
- en: Data synthesis
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据合成
- en: IoT systems effectiveness is through data collection, device integration, real-time
    analytics, networking, and action through platforms, embedded systems, partner
    systems, and middleware. These individual and master applications are responsible
    for integration with critical business systems, such as ordering systems, robotics,
    and scheduling within the IoT network.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网系统的有效性通过数据收集、设备集成、实时分析、网络连接和通过平台、嵌入式系统、合作伙伴系统和中间件采取行动来实现。这些单个和主应用程序负责与关键业务系统的集成，如订单系统、机器人技术和物联网网络中的调度。
- en: Data collection
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据收集
- en: The data collection software collects and eventually transmits all collected
    data to a central server. It collects variety of data such as sensory data, measurements
    by applying data filtering, data security, and aggregation of data. Through protocols,
    data from multiple devices and sensors are connected real time with machine-to-machine
    networks. It also can reverse transmit distributing data back to the devices.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 数据收集软件收集并最终将所有收集到的数据传输到中央服务器。它收集各种数据，如传感器数据、测量数据，应用数据过滤、数据安全和数据聚合。通过协议，来自多个设备和传感器的数据实时连接到机器对机器网络。它还可以将分发数据反向传输回设备。
- en: Device integration
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备集成
- en: Integration of all connected system devices through dependency and relationships
    binds the IoT ecosystem. It ensures that the necessary cooperation manages the
    various applications, protocols, and limitations of each device to allow communication
    and stable networking between devices.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 通过依赖关系和关系集成所有连接的系统设备，构建物联网生态系统。它确保必要的合作来管理各个设备的各种应用、协议和限制，以便设备之间进行通信和稳定的网络连接。
- en: Real-time analytics
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时分析
- en: The analytics applications collect real-time data input from various devices,
    and convert it into clear patterns for human analysis and viable actions. The
    information analysis and visualization techniques can be extended for automation-related
    tasks specific to industry requirements.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 分析应用收集来自各种设备的实时数据输入，并将其转化为清晰的模式，供人类分析和可行的行动。信息分析和可视化技术可以扩展到特定行业需求的自动化相关任务。
- en: Application and process extension
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用和过程扩展
- en: These IoT applications integrate predefined devices to extend the reach of existing
    systems such as allowing certain mobile devices, or engineering instruments access
    and software to allow a wider, more effective system to improved productivity
    and more accurate data collection and analysis.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这些物联网应用集成了预定义的设备，扩展现有系统的覆盖范围，如允许某些移动设备或工程仪器访问软件，从而实现更广泛、更有效的系统，提高生产力并收集和分析更精确的数据。
- en: Technology and protocols
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术和协议
- en: IoT technologies, apart from standard networking protocols, are RFID, NFC, low-energy
    radio protocols, low-energy Bluetooth, low-energy wireless, LTE-A, and WiFi-Direct,
    all of which support the specific networking functionality needed in an IoT system.
    We will review these technologies.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的网络协议，物联网技术还包括RFID、NFC、低能耗无线电协议、低能耗蓝牙、低能耗无线、LTE-A和WiFi-Direct，这些都支持物联网系统所需的特定网络功能。我们将回顾这些技术。
- en: '**Radio-frequency identification** (**RFID**) and **near-field communication**
    (**NFC**) are simple, low-energy options connection bootstrapping, and payments
    for identity and access tokens.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '**射频识别**（**RFID**）和**近场通信**（**NFC**）是简单的低能耗连接启动和支付选项，用于身份和访问令牌。'
- en: 'More information on the IoT technologies and Protocols can be found at: [https://www.tutorialspoint.com/internet_of_things/internet_of_things_quick_guide.htm](https://www.tutorialspoint.com/internet_of_things/internet_of_things_quick_guide.htm)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于物联网技术和协议的信息，请访问：[https://www.tutorialspoint.com/internet_of_things/internet_of_things_quick_guide.htm](https://www.tutorialspoint.com/internet_of_things/internet_of_things_quick_guide.htm)
- en: IoT - application in multiple fields
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网 - 多领域应用
- en: 'The following are the applications of IoT across multiple fields:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是物联网在多个领域的应用：
- en: '**Wearable electronics**: The penetration of IoT smart wearable electronics,
    such as helmets, watches, shoes, and glasses'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可穿戴电子设备**：物联网智能可穿戴设备的渗透率，如头盔、手表、鞋子和眼镜'
- en: '**Manufacturing and engineering industry**: Dynamic response to market demands,
    malfunctions in equipment, problems in the distribution network, customer needs,
    nonconforming product, lower costs, optimized resource use, and waste reduction'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制造和工程行业**：动态响应市场需求、设备故障、配电网络问题、客户需求、不合格产品、降低成本、优化资源利用和减少浪费'
- en: '**Product safety**: Avoid malfunctions, nonconforming product, and other hazards,
    avoiding recalls, and controlling nonconforming or product distribution to market'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品安全**：避免故障、不合格产品和其他危险，避免召回，并控制不合格产品或市场上的产品分发'
- en: '**Healthcare applications**: Healthcare in remote areas can be extended by
    IoT applications to offer high level of medical assistance as in developed areas
    supporting mobile clinics'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**医疗应用**：通过物联网应用，偏远地区的医疗保健可以得到扩展，提供与发达地区相同水平的医疗援助，支持移动诊所'
- en: '**Housing, environment, health, and safety applications**: Also use IoT to
    extend their productivity, benefits for improved quality of life'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**住房、环境、健康与安全应用**：也利用物联网来提升其生产力，为改善生活质量带来好处'
- en: '**Transportation application**: Extend to commercial vehicles on road, trains,
    UAVs provide improved communication, control, and data distribution'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交通运输应用**：扩展至公路上的商用车辆、列车、无人机，提供改进的通信、控制和数据分发'
- en: '**Commercial farming**: Exploiting advanced biotechnology, IoT enables deeper
    automation and analysis'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商业农业**：利用先进的生物技术，物联网实现更深入的自动化和分析'
- en: '![](img/831e33c2-fe48-4aff-aff2-bd0ff62f28da.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/831e33c2-fe48-4aff-aff2-bd0ff62f28da.png)'
- en: IoT platforms for development
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网开发平台
- en: 'There are many IoT development platforms with integrated development tools
    to support connectivity, analysis for the rapid development, and deployment of
    smart, connected devices:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多物联网开发平台，集成了开发工具，支持连接性和分析，以快速开发和部署智能连接设备：
- en: ThingWorx by PTC
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PTC的ThingWorx
- en: Virtualized Packet Core by Cisco
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cisco的虚拟化数据包核心
- en: Electric Imp- Salesforce
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Electric Imp- Salesforce
- en: Predix by GE
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GE的Predix
- en: Eclipse IoT
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse物联网
- en: Contiki is open source
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Contiki是开源的
- en: ThingWorx
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ThingWorx
- en: 'Enables rapid development with interfaces and embedded tools such as Vuforia,
    Kepware, Composer, Mashup builder, search engine for storage, collaboration, and
    connectivity:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 提供快速开发的接口和嵌入式工具，如 Vuforia、Kepware、Composer、Mashup 构建器、存储、协作和连接性的搜索引擎：
- en: Vuforia for reality development
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vuforia 用于现实开发
- en: Kepware for single-point data distribution to facilitate interoperability in
    alignment
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kepware 用于单点数据分发，促进互操作性对齐
- en: ThingWorx agent for industrial connectivity
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ThingWorx 代理用于工业连接
- en: The composer is the modeling environment for design testing
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer 是设计测试的建模环境
- en: The Mashup builder is a dashboard to build components
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mashup 构建器是用于构建组件的仪表盘
- en: SQUEL is the search engine, extension means search, query, and analysis; it's
    for analyzing and filtering data
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQUEL 是搜索引擎，扩展意味着搜索、查询和分析；用于数据分析和过滤
- en: Data shapes describe data structures of custom events, infotables, streams,
    and data tables
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据形状描述自定义事件、信息表、流和数据表的数据结构
- en: Thing templates allow new devices to inherit properties in large IoT systems
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thing 模板允许新设备在大型物联网系统中继承属性
- en: Thing shapes define templates, properties, or execute services, allowing developers
    to avoid repeating device property definitions
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thing 形状定义模板、属性或执行服务，允许开发人员避免重复定义设备属性
- en: Virtualized Packet Core (VPC)
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化数据包核心（VPC）
- en: 'VPC technology provides core services for 4G, 3G, 2G, Wi-Fi, and small cell
    networks with key features such as packet core service consolidation, dynamic
    scaling, and system agility. The networking functionality is delivered as virtualized
    services for greater scalability and faster deployment at a reduced cost of new
    services. It distributes and manages packet core functions, whether virtual or
    physical, across all resources:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 技术为 4G、3G、2G、Wi-Fi 和小型蜂窝网络提供核心服务，具有数据包核心服务整合、动态扩展和系统灵活性等关键特性。网络功能以虚拟化服务的形式提供，具有更大的可扩展性和更快的部署速度，同时降低了新服务的成本。它分发和管理数据包核心功能，无论是虚拟的还是物理的，覆盖所有资源：
- en: '![](img/b67611fb-a583-4c9b-9df3-5927b383531d.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b67611fb-a583-4c9b-9df3-5927b383531d.png)'
- en: VPC application is more prominent for network function virtualization, **software-defined
    networking** (**SDN**), and rapid networked system deployment by supporting low-power,
    high-flow networking, and the simple deployment of a wide variety of small devices.
    VPC introduces direct communication over a standard network, enhanced automated
    monitoring, automatic data updates through smart signs, and native IP networks
    along with **Power over Ethernet** (**PoE**) technology for all devices, improving
    overall safety and quality of service.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 应用更突出的是网络功能虚拟化、**软件定义网络**（**SDN**）以及通过支持低功耗、高流量的网络和广泛的小型设备的简单部署来实现快速的网络系统部署。VPC
    引入了通过标准网络进行的直接通信、增强的自动化监控、通过智能标志的自动数据更新，以及原生 IP 网络和**以太网供电**（**PoE**）技术，改善了所有设备的整体安全性和服务质量。
- en: Electric Imp
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Electric Imp
- en: 'Salesforce Electric Imp platform is for quickly connecting devices to the cloud,
    and developing applications through a high-level, OO, lightweight scripting language
    named Squirrel language. Applications consist of two modules:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce Electric Imp 平台用于快速将设备连接到云，并通过一种名为 Squirrel 语言的高级、面向对象、轻量级脚本语言开发应用程序。应用程序由两个模块组成：
- en: The device module runs on the device
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备模块运行在设备上
- en: The agent module runs in the Electric Imp cloud
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理模块运行在 Electric Imp 云端
- en: The Electric Imp platform ensures secure communication messages with a simple
    call between the modules, standard web application development coding for device
    interaction, monitoring, and response with a simple, easy-to-learn syntax.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Electric Imp 平台通过模块间的简单调用，确保安全的通信消息传递，并为设备交互、监控和响应提供标准的 Web 应用开发代码，语法简单易学。
- en: Predix
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Predix
- en: '**General Electric** (**GE**) Predix is a software platform for industrial
    instruments. It''s a cloud-based **Platform as a Service** (**PasS**), data collection
    platforms to enable industrial-grade analytics. It connects factories data, individuals,
    and equipment in a simple way for operations optimization and performance management.
    A predix ecosystem consists of an Intel Edison processor module, of a dual core
    board and a Raspberry Pi board. Developers provide an IP address, Ethernet connection,
    power supply to automatically establish the connection, register with the central
    Predix system, to transmit data from sensors.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用电气** (**GE**) Predix 是一个工业仪器的软件平台。它是基于云的 **平台即服务** (**PasS**)，数据收集平台用于支持工业级分析。它以简单的方式连接工厂数据、个人和设备，以优化操作和性能管理。Predix
    生态系统由英特尔 Edison 处理器模块、双核板和树莓派板组成。开发人员提供 IP 地址、以太网连接和电源，自动建立连接，注册到中央 Predix 系统，传输来自传感器的数据。'
- en: '![](img/4cca497f-454c-4ba2-8b71-dcc38a540bcc.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cca497f-454c-4ba2-8b71-dcc38a540bcc.png)'
- en: Eclipse IoT
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse IoT
- en: 'An open source technology-based Eclipse IoT is an ecosystem of entities (industry
    and academia), creating open source frameworks and services for utilization in
    IoT solutions, developing tools for IoT developers, open source implementations
    of IoT standard technology. There are a few utilities, as mentioned next:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 基于开源技术的 Eclipse IoT 是一个由行业和学术界等实体组成的生态系统，创建开源框架和服务，用于 IoT 解决方案，开发 IoT 开发人员使用的工具，开源实现
    IoT 标准技术。以下是一些实用工具：
- en: '![](img/4da20216-0474-4594-9c78-144ef3302cd4.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4da20216-0474-4594-9c78-144ef3302cd4.png)'
- en: SmartHome
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能家居
- en: Eclipse IoT's major service SmartHome is a framework for building smart home
    solutions, with assorted protocols and standards integration for heterogeneous
    environments. It facilitates interaction between devices by uniform device and
    information access consisting of OSGi bundles to deploy in an OSGi runtime, with
    OSGi services. OSGi bundles are Java class groups and other resources with manifest
    files containing information on file contents, services to enhance class behavior,
    and the nature of the aggregate as a component, and so on.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse IoT 的主要服务智能家居是构建智能家居解决方案的框架，集成了多种协议和标准，适用于异构环境。它通过统一的设备和信息访问促进设备之间的交互，包含部署在
    OSGi 运行时中的 OSGi 服务的 OSGi 捆绑包。OSGi 捆绑包是包含文件内容、增强类行为的服务以及作为组件的聚合特性等信息的 Java 类组及其他资源的
    manifest 文件。
- en: Eclipse SCADA
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse SCADA
- en: Eclipse state-of-the-art open source SCADA is to connect various industrial
    instruments with a shared communication system to post-processes data. The technologies
    incorporated are shell applications, JDBC, Modbus TCP and RTU, Simatic S7 PLC,
    OPC, and SNMP. The SCADA system is with communication service, monitoring system,
    archive, and data visualization for developing custom solutions.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 最先进的开源 SCADA 系统旨在通过共享通信系统将各种工业仪器连接起来，以进行数据后处理。所采用的技术包括 Shell 应用程序、JDBC、Modbus
    TCP 和 RTU、Simatic S7 PLC、OPC 和 SNMP。该 SCADA 系统具备通信服务、监控系统、档案存储和数据可视化功能，用于开发定制解决方案。
- en: Contiki
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Contiki
- en: '![](img/d34fb6bd-429e-44eb-9e93-6dde03db6c0a.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d34fb6bd-429e-44eb-9e93-6dde03db6c0a.png)'
- en: Open source operating system Contiki provides functionality for small IoT devices
    for management of programs, processes, resources, memory, and communication. Its
    ecosystem is an operating system, a web browser, web server, calculator, shell,
    telnet client and daemon, email client, VNC viewer, and FTP.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 开源操作系统 Contiki 提供了用于小型 IoT 设备的功能，用于管理程序、进程、资源、内存和通信。其生态系统包括操作系统、网页浏览器、Web 服务器、计算器、Shell、Telnet
    客户端和守护进程、电子邮件客户端、VNC 查看器和 FTP。
- en: Its popular with academics, organization researchers, and professionals being
    very lightweight quite apt for devices with limited memory, power, bandwidth,
    and processing power requires a few kilobytes to run, and within a space of under
    30 KB.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 它在学术界、组织研究人员和专业人员中非常受欢迎，因其非常轻量化，十分适合内存、功耗、带宽和处理能力有限的设备，运行所需空间仅需几千字节，且占用空间不超过
    30 KB。
- en: Contiki communication
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Contiki 通信
- en: 'Standard protocols supported by Contiki, and also enabling protocols for IoT
    include:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: Contiki 支持的标准协议，以及为 IoT 启用的协议包括：
- en: '**uIP (for IPv4)**: This TCP/IP supports 8-bit and 16-bit microcontrollers.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**uIP (针对 IPv4)**：此 TCP/IP 支持 8 位和 16 位微控制器。'
- en: '**uIPv6 (for IPv6)**: Extension to uIP is a fully compliant IPv6.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**uIPv6 (针对 IPv6)**：uIP 的扩展是完全符合 IPv6 标准的。'
- en: '**Rime**: This offers a set of primitives for low-power systems and alternative
    stack when IPv4 or IPv6 are not applicable.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rime**：此工具集为低功耗系统提供一组原语，并在 IPv4 或 IPv6 不适用时提供替代协议栈。'
- en: '**6LoWPAN**: This stands for IPv6 over low-power wireless personal area networks.
    A low data rate wireless compression technology to support devices with limited
    resources.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**6LoWPAN**：这是低功耗无线个人局域网上的 IPv6。它是一种低数据速率的无线压缩技术，支持具有有限资源的设备。'
- en: '**RPL**: This distance vector IPv6 protocol can find the best path for devices
    with varied capability in complex network of LLNs (low-power and lossy networks).'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RPL**：这种距离矢量 IPv6 协议可以在 LLNs（低功耗和丢包网络）复杂网络中找到最适合的路径，以适应不同能力的设备。'
- en: '**CoAP**: This protocol is for simple devices requiring a heavy remote supervisor.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CoAP**：这种协议适用于需要重度远程监督的简单设备。'
- en: Dynamic module loading
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态模块加载
- en: Dynamic module loader loads, relocates, and links ELF files to load and link
    at run-time supports environments to support application behavior changes after
    deployment.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 动态模块加载器加载、重定位并链接 ELF 文件，以便在运行时加载和链接，支持环境以支持部署后应用行为的变化。
- en: The Cooja network simulator
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cooja 网络模拟器
- en: The Cooja Contiki network simulator spawns to compile for working Contiki and
    control system by Cooja simulator.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: Cooja Contiki 网络模拟器生成用于工作 Contiki 和通过 Cooja 模拟器控制系统的编译。
- en: IoT devices, security, compliance and maintenance are important features to
    be thoroughly considered while adopting.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: IoT 设备、安全性、合规性和维护是采用时必须彻底考虑的重要特性。
- en: Microservices
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务
- en: It is an architecture pattern to structure as loosely coupled services to implement
    business capabilities, enabling an organization to evolve its technology stack
    on continuous delivery/deployment of large, complex applications.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种架构模式，通过将业务能力实现为松耦合的服务来组织结构，使组织能够在持续交付/部署大型复杂应用的过程中发展其技术栈。
- en: Microservices core patterns
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务核心模式
- en: Microservice architecture is the core differentiator compared to monolithic
    architecture.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构是与单体架构相比的核心区别。
- en: 'Monolithic architecture was based on unique requirement for building server-side
    enterprise application. It has to support a variety of clients, such as browsers
    from desktop, mobile, expose itself to third-party, and integrate with other applications
    through web services or message broker. Business logic is executed by handling
    HTTP requests and messages with a database, and returning a HTML/JSON/XML response:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 单体架构基于构建服务器端企业应用的独特需求。它必须支持多种客户端，例如桌面和移动浏览器，向第三方公开，并通过 Web 服务或消息代理与其他应用程序集成。业务逻辑通过处理
    HTTP 请求和消息与数据库交互，并返回 HTML/JSON/XML 响应：
- en: '![](img/b042db02-06cd-41cd-b518-8a04f7cd6220.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b042db02-06cd-41cd-b518-8a04f7cd6220.png)'
- en: 'The challenges associated with such architecture are:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 与这种架构相关的挑战包括：
- en: The large monolithic code base is difficult to maintain, modularity breaks down
    over time because there are no hard module boundaries; hence, implementing a change
    becomes cumbersome over time.
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大型单体代码库难以维护，模块化随着时间推移而逐渐崩溃，因为没有明确的模块边界；因此，随着时间的推移，实现更改变得繁琐。
- en: '**Overloaded IDE**: The slower the IDE with the larger the code base lower
    productivity.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过载的 IDE**：IDE 的响应速度越慢，代码库越大，生产力就越低。'
- en: '**Overloaded web container**: The larger the application, the longer it takes
    the container to start up, deployment lowers developer productivity too.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过载的 Web 容器**：应用程序越大，容器启动的时间就越长，部署也会降低开发者的生产力。'
- en: '**Continuous deployment is difficult**: Large monolithic application frequent
    deployments for updates are challenge. The user interface need to be developed
    iterative and redeployed frequently, the risk associated with redeployment increases.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续部署是困难的**：大型单体应用程序频繁部署更新是一个挑战。用户界面需要进行迭代开发并频繁重新部署，重新部署的风险也在增加。'
- en: '**Scaling the application can be difficult**: A monolithic architecture can
    only scale in one dimension with an increasing transaction volume by running more
    copies of the application, adjusting the number of instances dynamically based
    on load. However, with an increasing data volume, the architecture can''t scale.
    Each application instance copy will access all of the data, making the caching
    less effective and increasing memory consumption and I/O traffic. With a monolithic
    architecture scaling, each component independently for different resource requirements
    will be challenge such as CPU intensive and might memory intensive.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展应用程序可能很困难**：单体架构只能通过运行更多副本来在一个维度上扩展，以应对增加的事务量，动态调整实例数量以应对负载。然而，当数据量增加时，架构无法扩展。每个应用实例副本将访问所有数据，导致缓存效率降低，内存消耗和I/O流量增加。在单体架构扩展中，针对不同资源需求（如CPU密集型和可能的内存密集型）的每个组件独立扩展将面临挑战。'
- en: '**Obstacle to scaling development**: A monolithic application prevents the
    teams from working independently, so it should be coordinated development between
    the UI team, accounting team, inventory team, and so on. Once the application
    gets to a certain size, it is an obstacle to scalability to develop involving
    multiple teams.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发扩展的障碍**：单体应用程序阻止团队独立工作，因此UI团队、财务团队、库存团队等之间必须进行协调开发。一旦应用程序达到一定规模，涉及多个团队的开发将成为扩展的障碍。'
- en: '**Long-term commitment to a technology stack**: A monolithic architecture could
    be tied to a technology stack, and a particular version of upgrading with some
    newer technology framework will be tedious. If platform framework subsequently
    becomes obsolete, then to adopt a newer platform framework rewriting the entire
    application could be a risky proposal.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长期承诺技术栈**：单体架构可能会绑定到某个技术栈，当使用更新的技术框架进行升级时会变得繁琐。如果平台框架随后变得过时，那么采用新的平台框架并重写整个应用程序可能会是一个风险较大的提案。'
- en: Microservices architecture
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务架构
- en: Microservices are a set of loosely coupled collaborating services that are the
    building blocks of applications. Each service implements a set of narrowly, related
    functions such as order management and the customer management services. The services
    communicate with each other with synchronous protocols such as HTTP/REST, or asynchronous
    protocols such as AMQP. The services are independently developed and deployed
    with its own database decoupled from other services with data consistency enforced.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是一组松散耦合的协作服务，是应用程序的构建模块。每个服务实现一组狭义相关的功能，如订单管理和客户管理服务。这些服务通过同步协议（如HTTP/REST）或异步协议（如AMQP）进行通信。服务是独立开发和部署的，每个服务都有自己的数据库，与其他服务解耦，确保数据一致性。
- en: 'The divers for microservices architecture are:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构的推动因素有：
- en: To build application quickly, easy to understand, maintain and continuous deployment.
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速构建应用程序，易于理解、维护和持续部署。
- en: Scalability and availability to run on multiple machines, multiple copies of
    the application
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性和可用性，能够在多台机器上运行，多个应用副本
- en: Emerging technologies adoption for frameworks, programming languages, and so
    on
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用新兴技术，如框架、编程语言等
- en: 'An application built on these lines could be of several components such as
    StoreFrontU to implement the user interface, backend services to check credit,
    maintaining inventory, and shipping orders. This can take orders from customers,
    check inventory, credit availability, and ship them:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这种架构构建的应用程序可能包含多个组件，例如StoreFrontU实现用户界面、后端服务检查信用、维护库存和发货订单。这些组件能够接收客户订单、检查库存、信用可用性并发货：
- en: '![](img/f4c301b2-280f-49af-8baf-2375bd94e491.png)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4c301b2-280f-49af-8baf-2375bd94e491.png)'
- en: 'This solution has a number of advantages:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案具有多个优势：
- en: Each microservice is relatively nimble to understand, and can build faster and
    deploy; the IDE is faster and more productive
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个微服务相对容易理解，可以更快速地构建和部署；集成开发环境（IDE）更加高效和生产力更高
- en: Each service can be developed by their respective teams, and deployed of other
    services independently
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务可以由各自的团队开发，并且可以独立部署其他服务
- en: Frequent deployment for new versions is easier
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新版本的频繁部署变得更容易
- en: Improved fault isolation any service memory leak will affect only that service,
    and other services will continue to handle requests unaffected
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的故障隔离，任何服务的内存泄漏只会影响该服务，其他服务将继续处理请求，不受影响
- en: Flexible to adopt new technology stack
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灵活地采用新的技术栈
- en: 'Challenges associated with microservices-based solutions are:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 基于微服务的解决方案面临的挑战包括：
- en: Complexity of creating distributed systems with multiple services transactions.
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建分布式系统的复杂性，涉及多个服务事务。
- en: IDE support and testing is difficult, including the inter-service communication
    mechanism for coordinating multiple services between the teams.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE支持和测试困难，包括协调多个服务之间的团队间通信机制。
- en: Deployment/operational complexity of deploying and managing a system comprised
    of many different service types.
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署/运维复杂性，管理一个由多种不同服务类型组成的系统。
- en: 'Increased memory usage: The microservice architecture runs its own VM to isolate
    the instances. If there are *M* instances, there will be *M* times the VMs causing
    the overhead.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加的内存使用：微服务架构运行其自己的虚拟机以隔离实例。如果有 *M* 个实例，就会有 *M* 倍的虚拟机，从而增加了开销。
- en: Microservice decision
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务决策
- en: Microservice architecture is more appropriate for larger, complex scale of application,
    rather than small or startup applications where in monolithic is more appropriate.
    Microservice architecture structures an application as a set of loosely coupled
    services to accelerate software development by enabling continuous delivery/deployment.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构更适合规模较大、复杂的应用，而不是适用于小型或初创应用程序，在这些应用中，单体架构更为合适。微服务架构将应用结构化为一组松散耦合的服务，从而通过实现持续交付/部署来加速软件开发。
- en: 'Microservice decision is based on the following:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务决策基于以下原则：
- en: Microservice based on business capability
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于业务能力的微服务
- en: Microservice based on subdomain
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于子域的微服务
- en: '**Object-oriented design** (**OOD**)'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向对象设计**（**OOD**）'
- en: '**Single Responsibility Principle** (**SRP**)'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一责任原则**（**SRP**）'
- en: '**Common Closure Principle** (**CCP**)'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共封闭原则**（**CCP**）'
- en: '![](img/201a399d-bc5d-48e3-8e43-9d99a94588c9.png)![](img/6f1cacb1-1da3-47a5-bb90-2b1e591d3d02.png)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![](img/201a399d-bc5d-48e3-8e43-9d99a94588c9.png)![](img/6f1cacb1-1da3-47a5-bb90-2b1e591d3d02.png)'
- en: '**Microservice architecture**--service must be adequately planned to be developed
    by a small team and to be easily tested. The SRP is a basis for service design
    to define responsibility of a class and reason to initiate the change. It creates
    cohesive design of services and implements a small set of strongly related functions.
    The **common closure principle** (**CCP**) means classes that change for the same
    reason should be in the same package. If the same business rule is implemented
    in different aspects by two classes, then for any business rule change only small
    modifications to be done in code to accommodate the same.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务架构**——服务必须经过充分规划，以便由小团队开发并且易于测试。单一责任原则（SRP）是服务设计的基础，用于定义类的责任以及触发更改的原因。它创造了服务的内聚设计，并实现了一小组紧密相关的功能。**公共封闭原则**（**CCP**）意味着因相同原因而变化的类应该放在同一个包中。如果两个类在不同方面实现了相同的业务规则，那么任何业务规则的更改只需对代码做出少量修改即可适应。'
- en: 'Microservices should correspond to business capabilities/business object to
    generate value:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务应该对应于业务能力/业务对象，以产生价值：
- en: Inventory management
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存管理
- en: Order management
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单管理
- en: Delivery management
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付管理
- en: 'The corresponding microservice architecture would have services aligned to
    each of these capabilities. Following this pattern has the benefits such as:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的微服务架构将把服务与这些能力对齐。遵循这种模式有以下优点：
- en: The business capabilities are relatively stable so as the architecture
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务能力相对稳定，因此架构也是如此。
- en: Development teams are delivering business value based on cross-functional, autonomous,
    and organized, rather than technical features
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发团队基于跨职能、自治和组织方式交付业务价值，而非技术特性。
- en: Services are loosely coupled and cohesive
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务松耦合且内聚
- en: Identifying business capabilities, and hence services require an understanding
    of the business. An organization's business capabilities and services are identified
    by analyzing the organization's purpose, business processes, structure, and areas
    of expertise.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 识别业务能力，因此识别服务需要对业务有深入了解。通过分析组织的目标、业务流程、结构和专长领域，识别组织的业务能力和服务。
- en: Organization structure can be based on **domain-driven design** (**DDD**) subdomains
    or business capability groups. DDD is related to the application's problem space
    as the domain criteria; for example, business groups organized on a basis of regions,
    domains, locations, and so on.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 组织结构可以基于**领域驱动设计**（**DDD**）的子域或业务能力组。DDD与应用程序的问题空间相关，作为领域标准；例如，按地区、领域、位置等基础组织的业务组。
- en: 'A domain is made up of multiple subdomains. Different parts of the business
    corresponds to subdomain as:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 一个域由多个子域组成。业务的不同部分对应子域，如：
- en: '**Core subdomain**: Key business differentiator and the most critical part
    of the application'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心子域**：关键的业务差异化，是应用程序中最重要的部分'
- en: '**Supporting**: Not key business differentiator, can be implemented in-house
    or outsourced'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持**：不是关键的业务差异化，可以内部实现或外包'
- en: '**Generic**: Not business specific and implemented using off-the-shelf software'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用**：非业务特定，使用现成软件实现'
- en: 'The subdomains of an online store application can be as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在线商店应用程序的子域可以如下：
- en: Product catalog
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品目录
- en: Inventory management
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存管理
- en: Order management
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单管理
- en: Delivery management
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付管理
- en: 'The corresponding microservice architecture would have services corresponding
    to each of these subdomains:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的微服务架构将有与以下子域对应的服务：
- en: '![](img/f27df024-ddfc-4b23-99a0-24441d8d12bf.png)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f27df024-ddfc-4b23-99a0-24441d8d12bf.png)'
- en: Microservices deployment patterns
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务部署模式
- en: 'The guiding principles for services are as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 服务的指导原则如下：
- en: A variety of languages, frameworks, and framework versions can be used for services
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以为服务使用各种语言、框架和框架版本
- en: Multiple service instances for each service for throughput and availability
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务有多个服务实例，以提高吞吐量和可用性
- en: Independently deployable and scalable services
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立部署和可扩展的服务
- en: Isolated service instances from one another
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务实例之间相互隔离
- en: Faster build and deploy ability for a service
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的构建和部署能力
- en: The resources (CPU and memory) consumed by a service should be constrained
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务消耗的资源（CPU 和内存）应该受到限制
- en: Each service instance should be transparent to monitor behavior
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务实例应该对监控行为透明
- en: Reliable and cost-effective deployment of service
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务的可靠且具成本效益的部署
- en: Application metrics and health check API's
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序度量和健康检查 API
- en: Audit logging and compliance
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计日志和合规性
- en: Distributed tracing and management
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式追踪和管理
- en: Exception tracking and management
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常跟踪和管理
- en: Log aggregation, log deployments, and changes
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志聚合、日志部署和变化
- en: Service component testing and service integration contract testing
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务组件测试和服务集成契约测试
- en: UI composition (server-side page fragment, client-side UI)
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI 组成（服务器端页面片段，客户端 UI）
- en: Security--Access Token based on JSON Web Token identifying the requestor securely
    to each service
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性——基于 JSON Web Token 的访问令牌，安全地识别请求方到各个服务
- en: Distribution patterns
  id: totrans-448
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布模式
- en: Multiple service instances per host, like multiple instances of different services
    running on a physical or virtual host machine
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个主机的多个服务实例，如在物理或虚拟主机机器上运行的不同服务的多个实例
- en: Deploying a service instance on a shared host
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在共享主机上部署服务实例
- en: Deploy each service instance as a JVM process, per service instance
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个服务实例部署为一个 JVM 进程，每个服务实例对应一个进程
- en: Deploy multiple service instances in the same JVM
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一 JVM 中部署多个服务实例
- en: Avoiding conflicting resource requirements, or dependency versions
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免资源要求或依赖版本冲突
- en: Service instance per VM
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个虚拟机的服务实例
- en: Service instance linked to each container
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务实例与每个容器关联
- en: 'Serverless deployment options are explored as follows:'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器无关的部署选项如下：
- en: AWS Lambda
  id: totrans-457
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda
- en: Google Cloud Functions
  id: totrans-458
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Functions
- en: Azure Functions
  id: totrans-459
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Functions
- en: Microservice chassis
  id: totrans-460
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务底盘
- en: Externalized configuration for credentials management, and of external services
    such as databases and message brokers for network locations
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部化配置，用于凭证管理和外部服务（如数据库和消息代理）的网络位置
- en: '**Logging**: Usage of logging framework like log4j or logback'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：使用如 log4j 或 logback 等日志框架'
- en: '**Health checks**: Determine the health of the application through a URL-based
    monitoring service'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康检查**：通过基于 URL 的监控服务确定应用程序的健康状况'
- en: '**Metrics**: Measurement and insight for application performance'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**度量**：应用性能的测量和洞察'
- en: '**Distributed tracing**: A unique identifier between services traced with instrument
    code-based services'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式追踪**：通过带有仪器代码的服务追踪服务之间的唯一标识符'
- en: 'For example:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: 'Java:'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java：
- en: Spring Boot and Spring Cloud
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 和 Spring Cloud
- en: Dropwizard
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dropwizard
- en: 'Go:'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go：
- en: Gizmo
  id: totrans-471
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小工具
- en: Micro
  id: totrans-472
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务
- en: Go kit
  id: totrans-473
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go kit
- en: Communication mode
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信模式
- en: 'The various types of communication used in microservices are shared following:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务中使用的各种通信类型如下：
- en: 'Remote Procedure Invocation for interservice communication for client requests
    by services as listed as follows:'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程过程调用（Remote Procedure Invocation），用于服务间通信，客户端请求通过以下服务进行列出：
- en: REST
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST
- en: gRPC
  id: totrans-478
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: gRPC
- en: Apache Thrift
  id: totrans-479
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Thrift
- en: 'Messaging requests from clients through asynchronous mode by channels as follows:'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过以下通道以异步模式传递来自客户端的消息请求：
- en: Apache Kafka
  id: totrans-481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Kafka
- en: RabbitMQ
  id: totrans-482
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RabbitMQ
- en: 'Domain-specific protocol:'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定领域协议：
- en: Protocols such as SMTP and IMAP for emails
  id: totrans-484
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于电子邮件的协议，如 SMTP 和 IMAP
- en: Protocols such as RTMP, HLS, and HDS for media streaming
  id: totrans-485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于媒体流传输的协议，如 RTMP、HLS 和 HDS
- en: Data management options
  id: totrans-486
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据管理选项
- en: 'The various modes of data management process in use for microservices are listed
    following:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 用于微服务的数据管理过程的各种模式列举如下：
- en: Database per service ensures loosely coupled services, each service can choose
    use type of database that's best suited.
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务使用单独数据库确保服务松耦合，每个服务可以选择最适合的数据库类型。
- en: Shared database helps, as developer uses ACID transactions to enforce data consistency
    that are familiar and straightforward.
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享数据库有助于开发人员使用 ACID 事务来确保数据一致性，开发者对此非常熟悉且直观。
- en: Event sourcing persists the state of a business entity as a sequence of state-changing
    events. A new event is appended to the list of events with the state of a business
    entity changes.
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件溯源将业务实体的状态持久化为一系列更改状态的事件。当业务实体的状态发生变化时，一个新事件会附加到事件列表中。
- en: Transaction log tailing.
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务日志尾随。
- en: Database triggers insert events into an EVENTS table to be polled by a separate
    process that publishes the events.
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库触发器将事件插入到 EVENTS 表中，供一个单独的进程轮询并发布这些事件。
- en: Application events.
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用事件。
- en: API interface
  id: totrans-494
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 接口
- en: 'The different APIs  used in microservices are as following:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务中使用的不同 API 如下：
- en: UI for desktop and mobile browsers is HTML5/JavaScript-based
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桌面和移动浏览器的用户界面基于 HTML5/JavaScript
- en: Server-side web application generates HTML
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端 web 应用程序生成 HTML
- en: Native Android and iPhone clients interact through REST APIs with the server
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生 Android 和 iPhone 客户端通过 REST API 与服务器交互
- en: For third-party applications through the online exposure of details is by REST
    API
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 REST API 在线暴露细节的第三方应用程序
- en: '![](img/fe0e6d41-0efa-422c-be76-bded50ec0f4f.png)'
  id: totrans-500
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe0e6d41-0efa-422c-be76-bded50ec0f4f.png)'
- en: Usage of Application Program Interface (API) gateway protocols
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编程接口（API）网关协议的使用
- en: 'The following figure shows usage of backend for frontend APIs:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了后端为前端 API 的使用：
- en: '![](img/2d26606d-d0ce-4015-9a66-195ccbdfd26b.png)'
  id: totrans-503
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d26606d-d0ce-4015-9a66-195ccbdfd26b.png)'
- en: Service discovery
  id: totrans-504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务发现
- en: 'Microservice application is designed where the number of instances of a service
    and their locations change dynamically to run in a virtualized containerized environment,
    so the typical problem associated with service discovery is shown here:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务应用程序的设计是，服务的实例数量及其位置会动态变化，在虚拟化容器环境中运行，因此与服务发现相关的典型问题在这里展示：
- en: '![](img/5119b18e-8404-44a3-8f4b-d65667783124.png)'
  id: totrans-506
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5119b18e-8404-44a3-8f4b-d65667783124.png)'
- en: 'Client-side discovery exposes a remote API such as HTTP/REST or Thrift at a
    particular location (host and port) for each instance of a service:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端发现通过特定位置（主机和端口）暴露远程 API，如 HTTP/REST 或 Thrift，每个服务实例都有一个位置：
- en: '![](img/3c4c8cd1-0518-48a4-8600-8f71d177a889.png)'
  id: totrans-508
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c4c8cd1-0518-48a4-8600-8f71d177a889.png)'
- en: 'Server-side discovery is making a request to a service by the client through
    a router (that is, load balancer) that runs at a well identified location address
    like a service registry, which the router queries and forwards the request to
    an available service instance:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端发现通过路由器（即负载均衡器）向服务发出请求，路由器运行在一个已知位置（如服务注册中心），该路由器查询并将请求转发到可用的服务实例：
- en: '![](img/58b47513-d959-44fe-8cd5-9ca5d6993a85.png)'
  id: totrans-510
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58b47513-d959-44fe-8cd5-9ca5d6993a85.png)'
- en: Summary
  id: totrans-511
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the topics of containers and flavors offered by
    different vendors,
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了不同供应商提供的容器和版本相关话题，
- en: virtualization methods, container orchestrations, Internet of Things, and microservices
    applications and architectures.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化方法、容器编排、物联网以及微服务应用程序和架构。
