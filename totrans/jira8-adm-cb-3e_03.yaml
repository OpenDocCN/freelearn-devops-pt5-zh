- en: Jira Workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflows are one of the core and most powerful features in Jira. They control
    how issues in Jira move from one stage to another as they are being worked on,
    sometimes being re-assigned to other users and capturing additional information
    during the process. For this reason, workflows can be thought of as the life cycle
    of issues.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike many other systems, Jira allows you to create your own workflows to resemble
    the work processes you may already have in your organization. This is a good example
    of how Jira is able to adapt to your needs without you having to change the way
    you work.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn not only about how to create workflows with the
    new workflow designer, but also how to use workflow components, such as conditions
    and validators, to add additional behavior to your workflows. We will also look
    at the many different apps that are available to expand the possibilities of what
    you can do with workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up different workflows for your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing additional information during workflow transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using common transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using global transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the availability of workflow transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating user input in workflow transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing additional processing after a transition is executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reacting to events coming from outside of Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rearranging the workflow transition bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the resolution values in a transition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing issue updates in selected statuses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a field required during a workflow transition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom workflow transition logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up different workflows for your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A workflow is like a flowchart in which issues can go from one state to another
    by following the direction paths between the states. In Jira's workflow terminology,
    the states are called **statuses**, and the paths are called **transitions**.
    We will use these two major components when customizing a workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new, simple workflow from scratch. We will
    look at how to use existing statuses, create new statuses, and link them together
    using transitions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to create a new skeleton workflow in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira Administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Issues** > **Workflows**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add workflow** button, and name the workflow `Simple Workflow`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Diagram** button to use the workflow designer or diagram mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot explains some of the key elements of the workflow
    designer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06e9cede-00d3-4d8e-b697-0aa0bf252811.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have created a new, inactive workflow. The next step is to add various
    statuses for the issues to go through. Jira comes with a number of existing statuses,
    such as In Progress and Resolved, for us to use:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add status **button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **In Progress **status from the list, and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the steps to add the Closed status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can type the status name into the field, and Jira will automatically find
    the status for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added the statuses to the workflow, you can drag them around
    to reposition them on the canvas. We can also create new statuses, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add status **button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the new status `Frozen`, check the **Allow all statuses to transition
    to this one** option, and click on **Add**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/95e0e238-9dde-4ee4-9abe-65720327317d.png)'
  prefs: []
  type: TYPE_IMG
- en: Jira will let you know if the status you are entering is new by showing the
    text (new status) next to the status name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have added the statuses, we need to link them using transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the originating status, which, in this example, is **OPEN**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the small circle around the **OPEN **status and drag your cursor onto
    the **IN PROGRESS **status. This will prompt you to provide details for the new
    transition, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e7f6ccee-8370-4934-bf4e-c996a15769a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Name the new transition `Start Progress`, and select the **None **option for
    the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the steps to create a transition called `Close` between the **IN** **PROGRESS **and **CLOSED **statuses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should finish with a workflow that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bc69826-320f-42a2-8f0c-10aa32b28eee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, the workflow is inactive, which means it is not being used by
    a project and you can edit it without any restrictions. Workflows are applied
    on a project and issue type basis. Perform the following steps to apply the new
    workflow to a project:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the project to apply the workflow to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Administration **tab to go to the project administration page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Workflows **from the left-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Existing **from the **Add Workflow **menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the new **Simple Workflow **from the dialog, and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the issue types to apply (for example, Bug) the workflow to, and click
    on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we have applied the workflow to a project, the workflow is placed in the
    active state. So, if we now create a new issue in the target project of the selected
    issue type, our new Simple Workflow will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing additional information during workflow transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When users execute a workflow transition, we have an option to display an intermediate
    workflow screen. This is a very useful way of collecting some additional information
    from the user. For example, the default Jira workflow will display a screen for
    users to select the Resolution value when the issue is resolved.
  prefs: []
  type: TYPE_NORMAL
- en: Issues with resolution values are considered completed. You should only add
    the Resolution field to workflow screens that represent the closing of an issue.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to have a workflow to configure, such as the Simple Workflow that was
    created in the previous recipe. We also need to have screens to display; Jira's
    out-of-the-box workflow screen and **Result Issue **Screen will suffice, but if
    you have created your own screens, they can also be used.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a screen to a workflow transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the workflow to update, such as our **Simple Workflow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit **button if the workflow is active. This will create a draft
    workflow for us to work on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Start Progress **transition, and click on the **Edit **link from
    the panel on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the screen you want to use, such as the workflow screen from the **Screen**
    drop-down menu, and click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *step 3* and *step 4 *to add Resolve Issue Screen to the **Close** transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we are working with a draft workflow, we must click on the Publish Draft
    button to apply our changes to the live workflow.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not see your changes reflected, it is most likely you forgot to publish
    your draft workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Using common transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, you will have transitions that need to be made available from several
    different statuses in a workflow, such as the **Resolve** and **Close** transitions.
    In other words, these are transitions that have a common destination status but
    many different originating statuses.
  prefs: []
  type: TYPE_NORMAL
- en: To help you simplify the process of creating these transitions, Jira lets you
    reuse an existing transition as a common transition if it has the same destination
    status.
  prefs: []
  type: TYPE_NORMAL
- en: Common transitions are transitions that have the same destination status but
    different originating statuses.
  prefs: []
  type: TYPE_NORMAL
- en: A common transition has an additional advantage of ensuring that transition
    screens and other relevant configurations, such as **validators**, will stay consistent.
    Otherwise, you will have to constantly check the various transitions every time
    you make a change to one of them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to create and use common transitions in your workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the workflow, and click on the **Edit** link to create a draft.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Diagram** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a transition between two statuses, for example, **Open** and **Closed**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another transition from a different status to the same destination status,
    and click on the **Reuse a transition** tab, as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5bc646fd-c593-4341-9097-eba33493034d.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the transition created in *step 3* from the **Transition to reuse** drop-down
    menu, and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Using global transitions* recipe, which helps us to create complicated
    workflows with ease by allowing an issue to transition into a status at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Using global transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While a common transition is a great way to share transitions in a workflow
    and reduce the amount of management work that would otherwise be required, it
    has the limitation of having to manually create the transitions between the various
    statuses.
  prefs: []
  type: TYPE_NORMAL
- en: As your workflow starts becoming more complicated, explicitly creating the transitions
    becomes a tedious job; this is where **global transitions** come in.
  prefs: []
  type: TYPE_NORMAL
- en: A global transition is similar to a common transition in the sense that they
    both share the property of having a single destination status. The difference
    between the two is that the global transition is a single transition that is available
    to all the statuses in a workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to use global transitions so that issues
    can be transitioned to the Frozen status from any status throughout the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As usual, you need to have a workflow you can edit. Since we will be demonstrating
    how global transitions work, you need to have a status called Frozen in your workflow
    and ensure that there are no transitions linked to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to create and use global transitions in your workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the workflow you will be adding the global transition to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Diagram** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Frozen**status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Allow all statuses to transition to this one** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the preceding steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92e5b7ea-42b5-49b1-abd7-1a95eed7ec97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created a global transition for a status, it will be represented
    as an **All** transition, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd7b70b5-5a9b-41d2-9d46-83adc432f3fd.png)'
  prefs: []
  type: TYPE_IMG
- en: After the global transition is added to the **Frozen** status, you will be able
    to transition issues to FROZEN regardless of their current status.
  prefs: []
  type: TYPE_NORMAL
- en: You can only add global transitions in Diagram mode.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Restricting the availability of workflow transitions* recipe,
    which explains how to remove a transition when an issue is already in the Frozen
    status.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the availability of workflow transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Workflow transitions, by default, are accessible to anyone who has access to
    the issue. There will be times when you want to restrict access to certain transitions.
    For example, you might want to restrict access to the Freeze Issue transition
    for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: You want the transition to be available only to users in specific groups or
    project roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the transition is a global transition, it is available to all the workflow
    statuses, but it does not make sense to show the transition when the issue is
    already in the **Frozen** status.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To restrict the availability of a workflow transition, we can use workflow conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to have the JSU Automation Suite for Jira Workflows
    app installed. You can download it from the following link, or install it directly
    from the **Universal Plugin Manager** (**UPM**): [https://marketplace.atlassian.com/plugins/com.googlecode.jira-suite-utilities](https://marketplace.atlassian.com/plugins/com.googlecode.jira-suite-utilities).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to add a new workflow condition to the transition we want to apply
    restrictions to:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the workflow to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Diagram** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Frozen** global workflow transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Conditions** link from the panel on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add condition**, select Value Field (JSU) from the list, and click
    on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the condition with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Status` field for **Field**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The not-equal sign, `!=`, for **Condition**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Frozen` for **Value**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`String` for **Comparison Type**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This means that the transition will be shown only if the issue''s status field
    value is not Frozen as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e72af28-4680-4fe8-80b2-480d6eaa25db.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Add** button to complete the condition setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we have added a condition that will make sure that the Freeze
    Issue transition is not shown when the issue is already in the Frozen status.
    The next step is to add another condition to restrict the transition to be available
    only to users in the Developer role.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Add condition** again and select **User in the Project Role** condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Developer project role and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have applied the workflow conditions, the Frozen transition will no
    longer be available if the issue is already in the Frozen status, and/or if the
    current user is not in the Developer project role.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a workflow transition option is to be rendered on the page, such as when
    viewing an issue, all its associated conditions are evaluated to determine if
    the option should be displayed. If there is more than one condition, the transition
    with conditions will only be displayed when one or all of the conditions pass,
    depending on the logic setting (see the following section) for the conditions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Value Field condition (which comes with the JSU Automation Suite for
    Jira Workflows app) is one of the many ways in which we can restrict the availability
    of a transition based on the issue's current status. There is another app, called
    **Jira Misc Workflow Extensions**, which comes with a previous status condition
    for checking against the previous status an issue was in. You can download it
    from [https://marketplace.atlassian.com/plugins/com.innovalog.jmwe.jira-misc-workflow-extensions](https://marketplace.atlassian.com/plugins/com.innovalog.jmwe.jira-misc-workflow-extensions).
  prefs: []
  type: TYPE_NORMAL
- en: When you have more than one workflow condition applied to the transition, as
    in our example, the default behavior is that all conditions must pass for the
    transition to be available.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change this so that only one condition needs to pass for the transition
    to be available by changing the condition group logic from **All of the following
    conditions** to **Any of the following conditions**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3c517ee-a848-413c-919b-a1ebd488d3f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure you pay close attention when configuring this to make sure you do
    not expose workflow transitions to users who should not be allowed to execute
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Validating user input in workflow transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For workflow transitions that have transition screens, you can add validation
    logic to make sure what the users put in is what you are expecting. This is a
    great way to ensure data integrity, and we can do this with workflow validators.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will add a validator to perform a date comparison between
    a custom field and the issue's creation date, so the date value we select for
    the custom field must be after the issue's creation date.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to have the JSU Automation Suite for Jira Workflows
    app installed. You can download it from the following link, or install it directly
    using the UPM: [https://marketplace.atlassian.com/plugins/com.googlecode.jira-suite-utilities](https://marketplace.atlassian.com/plugins/com.googlecode.jira-suite-utilities).'
  prefs: []
  type: TYPE_NORMAL
- en: Since we are also doing a date comparison, we need to create a new date custom
    field called `Start Date` and add it to the workflow screen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to add validation rules during a workflow transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the workflow to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Diagram** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Start Progress** transition and click on the **Validators** link
    on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add validator** link and select **Date Compare (JSU)** from the
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the validator with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Start Date` custom field for **This date.**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The greater-than sign, `>`, for **Condition**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Created` for Compare with'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional custom error message, or leave it blank and a default error message
    will be displayed if the validation fails
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on **Add** to add the validator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2463e8d-4309-4289-bcbc-6045a4973d56.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After adding the validator, if we now try to select a date that is before the
    issue''s create date, Jira will prompt you with an error message and stop the
    transition from going through, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b0825c9-fcc9-4108-8c0d-11bf7de82f66.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the date validation fails, and our custom defined error message
    is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validators are run before the workflow transition is executed. This way, validators
    can intercept and prevent a transition from going through if any validation logic
    fails.
  prefs: []
  type: TYPE_NORMAL
- en: If you have more than one validator, all of them must pass for the transition
    to go through.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validators can be used to make a field required only during workflow transitions.
    Refer to the *Making a field required during a workflow transition* recipe for
    more details.
  prefs: []
  type: TYPE_NORMAL
- en: Performing additional processing after a transition is executed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira allows you to perform additional tasks as part of a workflow transition
    through the use of post functions. Jira makes heavy use of post functions internally;
    for example, in the case of an out-of-the-box workflow, the resolution field value
    is cleared automatically when you reopen an issue.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to add post functions to a workflow transition.
    We will add a post function to automatically clear out the value stored in a **Reason
    for Freezing** custom field when we take it out of the **Frozen** status.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are clearing the value of a custom field called Reason for Freezing,
    we need to have a Text field (multi-line) custom field created and add it to the
    screens used by the project.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Jira comes with a post function that can change the values for standard
    issue fields, but since **Reason for Freezing** will be a custom field, we need
    to have the JSU Automation Suite for Jira Workflows app installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download it from the following link, or install it directly using the
    UPM: [https://marketplace.atlassian.com/plugins/com.googlecode.jira-suite-utilities](https://marketplace.atlassian.com/plugins/com.googlecode.jira-suite-utilities).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to add processing logic after a workflow transition
    is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the workflow to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Diagram** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new workflow transition that will take the issue out of the **Frozen**
    status to another status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Post functions** link for the newly created transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add post** **function**, select **Clear Field Value (JSU)** from
    the list, and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Reason for Freezing field from **Field**, and click on the **Add**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the post function in place, after you have executed the transition, the
    **Reason for Freezing** field will be cleared out. You can also see from the issue's
    change history, as part of the transition execution, where the **Status** field
    is changed from **Frozen** to **Open**, the change for the **Reason for Freezing**
    field is also recorded.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Post functions are run after the transition has been executed. When you add
    a new post function, you might notice that the transition already has a number
    of post functions pre-added; this is shown in the screenshot that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53e769ac-3e2c-479f-bf38-f08e0a4c2253.png)'
  prefs: []
  type: TYPE_IMG
- en: These post functions are system post functions that carry out important internal
    functions, such as keeping the search index up to date. The order of these post
    functions is important.
  prefs: []
  type: TYPE_NORMAL
- en: Always add your own post functions to the top of the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, any changes to issue field values, such as the one we just added,
    should always happen before the Re-index post function, so by the time the transition
    is completed, all the field indexes are up to date, and ready to be searched:'
  prefs: []
  type: TYPE_NORMAL
- en: Reacting to events coming from outside of Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are using Jira with other systems, especially applications also built
    by Atlassian, such as Bitbucket and Bamboo, you can get a lot more synergy with
    them working together. One example of such synergy is automatically executing
    a workflow transition when certain actions happen from the other application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at such a use case, where if a developer commits
    some code against a Jira issue, we automatically transition the issue into the
    **In Progress** status without needing the developer to manually go into Jira
    and perform the workflow transition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our use case is about developers committing code, you will need to have
    a supported code management application available; both Bitbucket and GitHub are
    supported. In this recipe, we will be using Bitbucket. You can get a trial version
    of the application from [https://www.atlassian.com/software/bitbucket/download](https://www.atlassian.com/software/bitbucket/download).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To automatically transition an issue based on the outside event, we need to
    add the appropriate workflow trigger to the transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the workflow to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Start Progress** transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Triggers** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add trigger** button. If the button is disabled, it means you
    have not integrated Jira with Bitbucket yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Commit created** trigger and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/179a7d6b-0699-47e3-b830-aa76cd8fe76d.png)'
  prefs: []
  type: TYPE_IMG
- en: Click **Add Trigger** to apply the trigger to the workflow transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the trigger applied, if you commit some code with the issue's key as part
    of the commit message, the issue will be automatically transitioned to the destination
    status, in this case, the In Progress status.
  prefs: []
  type: TYPE_NORMAL
- en: Rearranging the workflow transition bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, workflow transitions are displayed based in the order in which they
    are defined in the workflow (as listed in text mode); the first two transitions
    will be shown as buttons, and the remaining transitions will be added to the **Workflow**
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: This sequence is determined by the order in which the transitions are added,
    so you cannot change that. But you can rearrange them by using the `opsbar-sequence`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will move the Frozen transition out from the Workflow menu
    and to its own transition button so that the users can easily access it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to rearrange the order of transitions to be displayed
    in the issue transition bar:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the workflow to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Frozen** global transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Properties** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `opsbar-sequence` as the **Property Key** and the value `10` in **Property
    Value** and click on **Add**. Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, by increasing the sequence value of the
    workflow transition, it is moved out of the Workflow menu and made into its own
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb4490d6-557f-4c7f-9f8f-044e0a556b49.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's understand the working part.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `opsbar-sequence` property orders the workflow transitions numerically,
    from the smallest to the largest. Its value needs to be a positive integer. The
    smaller the number, the closer the transition will appear to the front.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira only displays the first two transitions as buttons. You can change this
    setting by editing the `ops.bar.group.size.opsbar-transitions` property in the
    `jira-config.properties` file located in your `JIRA_HOME` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'All you have to do is edit the file, set the property to the desired number
    of transition buttons to display as shown (we are setting the number of transition
    buttons to `3`), and restart Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you do not see the `jira-config.properties` file, you can simply create a
    new file with the same name and add your properties there.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a7d24c2-06df-446a-832d-323586890888.png)'
  prefs: []
  type: TYPE_IMG
- en: Jira now shows three transition buttons instead of two.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the resolution values in a transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally, issue resolution values such as **Fixed** and **Won't Fix** are global,
    so regardless of the project and issue type, the same set of values will be available.
    As you implement different workflows in Jira, you may find that certain resolutions
    are not relevant for a given project or issue type.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will select a subset of the global resolutions available
    when we close issues using our Simple Workflow.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to selectively include a subset of resolutions
    for a given workflow transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the **Simple Workflow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Close Issue** workflow transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Properties** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `jira.field.resolution.include` for the **Property Name** and the IDs
    (comma separated) for resolutions we want to make available into **Property Value**.
    So, if we want to only include the **Done**, **Won't Do**, and **Duplicate** resolutions,
    we need to specify the `10000`, `10001`, and `10002` values as the property values,
    with no spaces in between.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3ac72cd-d530-46ac-a0cb-235e00d22750.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the actual values for the three resolutions might be different for
    your Jira instance. Please double-check their values when configuring the property.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other than selecting a subset of resolutions, there is also a `jira.field.resolution.exclude`
    property that lets you exclude a subset of resolutions from the global list.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing issue updates in selected statuses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, when an issue is in the Closed status, it cannot be updated. It
    is a good practice to make issues read-only when they are in a status that signifies
    logical completion.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will make sure that, when an issue is moved to the Frozen
    status, it can no longer be updated until it is moved back to the Open status.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to make an issue read-only when it is in the Frozen
    status:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the workflow to update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Frozen** workflow status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Properties** link from the panel on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `jira.issue.editable` for **Property Key** and `false` into **Property
    Value**, and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making a field required during a workflow transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using field configuration to make a field required will make the field required
    all the time. There are many use cases where you will only need the field to be
    required during certain workflow transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to have the JSU Automation Suite for Jira Workflows
    app installed. You can download it from the following link, or install it directly
    using the UPM: [https://marketplace.atlassian.com/plugins/com.googlecode.jira-suite-utilities](https://marketplace.atlassian.com/plugins/com.googlecode.jira-suite-utilities).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to make the Reason for Freezing field required
    during the Frozen transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the **Simple Workflow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Diagram** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Frozen** global workflow transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Validators** link from the panel on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add validator**, select Fields Required (JSU) from the list, and
    click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Reason for Freezing** field from **Available fields** and click
    on **Add >>**. This will add the selected field to the **Required fields** list,
    as seen in the next screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aaf22fb1-bd39-473f-a9ff-40f1df191962.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter an optional error message if you would like to display a customized message
    instead of the default error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to complete the validator setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have added the validator, if you try to execute the Frozen transition
    without specifying a value for the Reason for Freezing field, Jira will prompt
    you with an error message, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf1c465b-0fd0-4a34-9d3e-0f22cf3e34dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating custom workflow transition logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous recipes, we have looked at using workflow conditions, validators,
    and post functions that come out of the box with Jira and from other third-party
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at how to use scripts to define our own
    validation rules for a workflow validator. We will address a common use case,
    which is to make a field required during a workflow transition only when another
    field is set to a certain value.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, our validation logic will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If the **Resolution** field is set to **Done**, the **Solution Details** field
    will be required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the **Resolution** field is set to a value other than **Fixed**, the **Solution
    Details** field will not be required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to have the ScriptRunner for Jira app installed. You
    can download it from the following link, or install it directly using the UPM:
    [https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner](https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner).'
  prefs: []
  type: TYPE_NORMAL
- en: You might also want to get familiar with Groovy scripting ([http://groovy.codehaus.org](http://groovy.codehaus.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to set up a validator with custom-scripted logic:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and edit the **Simple Workflow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Diagram** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Done** global workflow transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Validators** link from the panel on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add validator**, select **Script Validator** [ScriptRunner] from
    the list, and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Simple scripted validator** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following script code in the **Condition** text box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Enter `You must provide the Solution Details if the Resolution is set to Done.`
    in the **Error** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Solution Details** for **Field**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to complete the validator setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Publish Draft** to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your validator configuration should look something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf66327c-6a19-49eb-8724-bdc9abeabe2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we add our custom validator, the Groovy script will run every time the
    resolve issue transition is executed. If the Resolution field is set to Done and
    the Solution Details field is empty, we will get a message from the Error field,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c221cfa-9a9b-4363-a6b3-071280a8136e.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now see how these steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Script Validator works just like any other validator, except that we can
    define our own validation logic using Groovy scripts. So, let's go through the
    script, and see what it does.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first get the Solution Details custom field via its name, as shown in the
    following line of code. If you have more than one custom field with the same name,
    you need to use its ID instead of its name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We then select the resolution value and obtain the value entered for Solution
    Details during the transition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we check the resolution name; we can also check the ID of the
    resolution by changing `getName()` to `getId()`.
  prefs: []
  type: TYPE_NORMAL
- en: If you have multiple custom fields with the same name, use `getId()`.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we check whether the **Resolution** value is **Done** and the **Solution
    Details** value is blank. In this case, we return a value of `false`, so the validation
    fails. All other cases will return the value `true`, so the validation passes.
    We also use `StringUtils.isBlank(solution)` to check for blank values so that
    we can catch cases when users enter empty spaces for the **Solution Details**
    field.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are not limited to creating scripted validators. With the ScriptRunner for
    Jira app, you can create scripted conditions and post functions using Groovy scripts.
  prefs: []
  type: TYPE_NORMAL
