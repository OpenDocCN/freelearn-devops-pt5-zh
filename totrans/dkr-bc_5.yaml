- en: Chapter 5. Docker Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During DockerCon Europe 2014, there was a round table discussion which took
    place on the state of the Docker ecosystem, the following problem and possible
    solution was identified:'
  prefs: []
  type: TYPE_NORMAL
- en: The problem which Docker currently faces is that by moving to become a platform
    it is being seen to threaten its own ecosystem. The proposed solution is that
    Docker ships its own additions to Docker as late-bound, composable, optional extensions
    and enables other vendors to do likewise. Docker calls this "batteries included
    but removable".
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: During DockerCon 2015 in Seattle, Docker announced the availability of plugins
    in the experimental branch, the announcement came in the form of a blog post which
    can be found at [https://blog.docker.com/2015/06/extending-docker-with-plugins/](https://blog.docker.com/2015/06/extending-docker-with-plugins/).
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the post, Docker provided a solution where third parties
    can swap out core functionality. Now a user could run the `docker volume` and
    `docker network` commands along with a driver option to have Docker call external
    components which add functionality outside of the core Docker Engine while maintaining
    a high level of compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to look at two different Docker plugins, the first
    is a volume plugin called **REX-Ray** and the second is a network plugin called
    **Weave**.
  prefs: []
  type: TYPE_NORMAL
- en: REX-Ray volume plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been usingthe local storage which is available on our hosts,
    as mentioned in [Chapter 4](ch04.html "Chapter 4. Docker Swarm"), *Docker Swarm*
    that isn't very useful when you potentially have move the storage between multiple
    hosts either because you are hosting a cluster or because of problems with the
    host machine itself.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are going to be launching a Docker instance in Amazon Web
    Services, install a volume plugin called REX-Ray, written by EMC, and then launch
    our WordPress example but this time we will attach AmazonElastic Block Storage
    volumes to our containers. Once configured, we will move our containers to a second
    host machine to demonstrate that the data has persisted.
  prefs: []
  type: TYPE_NORMAL
- en: 'REX-Ray supports several storage types on both public clouds and EMC''s own
    range, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Block Store - [https://aws.amazon.com/ebs/](https://aws.amazon.com/ebs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digital Ocean Block Storage - [https://www.digitalocean.com/products/storage](https://www.digitalocean.com/products/storage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack Cinder - [https://wiki.openstack.org/wiki/Cinder](https://wiki.openstack.org/wiki/Cinder)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Compute Engine - [https://cloud.google.com/compute/docs/disks/](https://cloud.google.com/compute/docs/disks/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EMC Isilon, ScaleIO, VMAX, and XtremIO - [https://www.emc.com/](https://www.emc.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The driver is in active development and more types of supported storage are
    frequently being added, also work is on-going to move the driver over to Dockers
    new plugin system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we look at installing REX-Ray we need a Docker host in Amazon Web Services,
    to launch one, use the following command. You can refer to the Amazon Web Services
    Driver section of [Chapter 2](ch02.html "Chapter 2. Launching Applications Using
    Docker"), *Launching Applications Using Docker*. for details on how to generate
    your access and secret key and find your VPC ID. Remember to replace the `access-key`,
    `secret-key` and `vpc-id` with your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have your instance launched, you can see it in the AWS Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![REX-Ray volume plugin](img/B06455_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to install the REX-Ray plugin. As REX-Ray supports Docker''s new plugin
    format this means we need to run the `docker plugin` command. To start with, we
    need to configure our local Docker client to connect to our AWS host by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we are connected to install the plugin, we simply need to run the
    following command, the `EBS_ACCESSKEY` and `EBS_SECRETKEY` variables are the same
    we used for Docker Machine, replace them with your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Before the plugin is installed, you will be asked to confirm that you are OK
    to grant permissions for the plugin to access various parts of your Docker installation,
    answer yes (y) to this when prompted and the plugin will be downloaded and installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the plugin is installed, we need to create two volumes, one which
    will hold our WordPress data and the second one will back store our MySQL databases.
    To create the volumes run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the preceding commands being run in the following terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![REX-Ray volume plugin](img/B06455_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should also be able to see your two volumes by clicking on **Volumes**
    in the left-hand side menu of the EC2 section of the AWS Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![REX-Ray volume plugin](img/B06455_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have our two volumes, we need to launch WordPress, to do this we will
    use the Docker Compose file which can be found in the repo at `/bootcamp/chapter05/wordpress-rexray/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the `docker-compose.yml` file, we are building a WordPress
    image with `wp-cli` installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can also see from the end of the file, we are telling Docker Compose
    to use the two external volumes we have already created with the `docker volume
    create` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build our WordPress image and launch the containers run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check your containers up by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the two containers we make our WordPress application are up and running
    you can quickly install WordPress by running the following command (update the
    variables as needed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you should see a message which says **Success: WordPress installed
    successfully**. This means that you can open your installation in a browser by
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This should present you with the now familiar WordPress site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![REX-Ray volume plugin](img/B06455_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s make a change to our WordPress installation so we can be sure that
    when we move our application between hosts everything works as expected. We are
    going to be replacing the image of the plant with fireworks. To do this we need
    to customize our theme, to get to the theme edit page run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You will be prompted to login using the admin username and password which if
    you followed the installation will be `admin` / `adminpassword` or if you entered
    your own then use them.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the page open click on Header Media in the left-hand menu. Scroll
    down to where it says **Add new image** in the left-hand menu and follow the on-screen
    prompts to upload, crop and set the new header image, you can find an image called
    `fireworks.jpg` in the repo or use your own image. Once you have finished click
    on **Save & Publish**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to your sites home page should then show your new header image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![REX-Ray volume plugin](img/B06455_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we remove our Docker host we need to make a note of it''s IP address,
    to do this run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: And write down the IP address as we are going to need it, in my case the IP
    address was `54.173.130.142`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s remove our host using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the host has been removed our two volumes are shown as **available** within
    the AWS console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![REX-Ray volume plugin](img/B06455_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That is our WordPress and database data, to access it on a new Docker host
    we need to first launch one. To do this run the following command again remembering
    to replace the credentials and vpc id with your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the new Docker host is up and running the following command to switch
    our local client over and install REX-Ray:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once REX-Ray is installed, we need to make it aware of our two existing volumes,
    to do this simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Do not worry, it will not overwrite our existing volumes, it will just make
    Docker aware that they are there as REX-Ray uses the name you assign to volume
    rather than a unique ID if it comes across a volume with the name you have told
    it to use it will assume that is the volume you meant to use, so be careful when
    naming your volumes as they will be attached to the running container.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may notice that the commands execute a lot quicker this time, this is because
    the volumes are already there and do not need re-creating.Running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: should show our two volumes are there as before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to launch WordPress, to do that just run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you were to try and access your WordPress site now, you would see a very
    broken looking site with content, but no styling or images.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because the database is still referencing the IP address of the Docker
    host we terminated, to the database. Run the following the command making sure
    to replace the IP address in the command to that of your previous Docker host
    (remember mine was `54.173.130.142`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You should see a list of every table within the database along with confirmation
    of how many instances of the IP address it has replaced with that of the new Docker
    host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going to your new WordPress installation by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Should show your cover image is intact and the WordPress installation is exactly
    how you left it, apart from the change in IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have finished test you can remove your installation by running the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may notice that when you run the `docker volume rm` commands you are not
    prompted to confirm your actions, so be careful.
  prefs: []
  type: TYPE_NORMAL
- en: Checking your AWS console should confirm that your Docker host has been terminated
    and your two volumes have been removed.
  prefs: []
  type: TYPE_NORMAL
- en: WeaveNetwork Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Weave are one of the original Docker plugins, in-fact they were involved in
    the round table discussions around Dockers plugin functionality, and Weave was
    included in the original plugin announcement mentioned at the start of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Weave describe their network plugin as:'
  prefs: []
  type: TYPE_NORMAL
- en: Quickly, easily, and securely network and cluster containers across any environment
    (on premises, in the cloud, or hybrid) with zero code or configuration.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Anyone who worked with software defined networks will know that this is quite
    a bold claim, especially a Weave is creating a mesh network.For a full explanation
    of what that means, I would recommend reading through Weaves own overview which
    can be found at [https://www.weave.works/docs/net/latest/how-it-works/](https://www.weave.works/docs/net/latest/how-it-works/).
  prefs: []
  type: TYPE_NORMAL
- en: Rather than going into any more detail. let's roll our sleeves up and perform
    an installation. To start with, let's bring up two independent Docker hosts DigitalOcean
    using Docker Machine.
  prefs: []
  type: TYPE_NORMAL
- en: To make it interesting, we will launch one host in New York Cityand the other
    in London. As these are going to be acting as individual hosts there is no need
    to configure Docker Swarm – which is what you would typically need to for multi-host
    networking with Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the Docker host in New York City run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And then for the Docker host in London run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our two Digital Ocean hosts we need to get Weave up and running.At
    the time of writing, Weave has not completed the transition to Dockers native
    plugin architecture and it is due very soon, so we will be using a control script
    to configure Weave.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to download the control scripton our NYC Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once downloaded we can launch Weave using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will download and launch several containers on the Docker host, once downloaded
    the Weave will be configured and the password set meaning that if you want to
    add a host to network you will need to provide a valid password.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not define a password then anyone will be able to connect to your
    Weave network, which is fine if you know that your host machines are running on
    an isolated closed network, however as we are sending traffic over the public
    internet we have set a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the containers by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the three containers we need launched, it is time to install
    Weave on our London Docker host and then connect it to our NYC Docker host. To
    do the installation run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the three containers have launched, simply run the following command to
    connect to our NYC Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Once our second host has been configured you can check the status of the Weave
    mesh network by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![WeaveNetwork Plugin](img/B06455_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding terminal above, we have five services running,
    and other than providing a password, we didn't have to configure any of them.
  prefs: []
  type: TYPE_NORMAL
- en: As I am running a Mac OS machine, I am also going to install Weave locally,
    the same instructions will also work on a Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands will install the Weave control script which will be
    used to launch the containers within your Docker for Mac installation and connect
    to our Weave mesh network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed and connected, running `weave status` locally should show you
    that there are now 3 peers with 6 established connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WeaveNetwork Plugin](img/B06455_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So now we have three Docker hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: One in NYC hosted by Digital Ocean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One in London hosted by Digital Ocean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our local Docker host running on Docker for Mac (or Linux)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All with a network called **weave** using the `weavemesh` driver. You can confirm
    this by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WeaveNetwork Plugin](img/B06455_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are ready to start launching containers into our Weave network and demonstrate
    that they can communicate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Netcat is a service which allows you to be read and write to a network using
    TCP or UDP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by launching a container in NYC running Netcat(nc). Each time
    a request is sent to port 4242 `nc` will answer with `Hello from NYC!!!`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the Docker command, we are passing quite a few different
    options, we are telling the container which network to use, as well configuring
    the DNS resolver within the container and setting a hostname of `nyc.weav` `e.local`.
  prefs: []
  type: TYPE_NORMAL
- en: '![WeaveNetwork Plugin](img/B06455_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our NYC container up and running, the first thing to do is
    to check if we can ping from our London Docker host, to do this run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This will send three pings to `nyc.weave.local`, all of which should be answered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WeaveNetwork Plugin](img/B06455_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that have confirmed that we can Ping the NYC container, we need to connect
    to port `4242` and check if we get the response we expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive the message **Hello from** **NYC!!!**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WeaveNetwork Plugin](img/B06455_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s launch a container on our local Docker host using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![WeaveNetwork Plugin](img/B06455_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As before, we will do a simple ping test to our local container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, we receive a response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WeaveNetwork Plugin](img/B06455_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s a little slow to start with, but it eventually gets better. Now that
    we know we can ping our local container lets connect to port `4242` and check
    the response. First, from our NYC Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then from our London Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following terminal output we got the answer we expected
    to receive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WeaveNetwork Plugin](img/B06455_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To tidy up your local Docker host run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'And then to terminate our two Digital Ocean hosts run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: While these tests haven't been as visually interesting as the walkthrough of
    the REX-Ray Volume plugin, as you have seen, Weave is an incredibly powerful software-defined
    network, which is very easy to configure.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking fromexperience, this is a difficult combination to pull off, as most
    SDN solutions are incredibly complex to install, configure, and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: We have only touched on what is possible with Weave. For a full feature list,
    along with instructions on some most of the advanced use cases, refer to [http://docs.weave.works/weave/latest_release/features.html](http://docs.weave.works/weave/latest_release/features.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully you are now starting to see use cases for different types of plugins.For
    example, a developer is fine working with local volumes, however for production
    traffic you would want to have some sort of either shared or block storage which
    is accessible to containers across multiple Docker hosts.
  prefs: []
  type: TYPE_NORMAL
- en: With plugins, this is possible without any real changes to your user's workflow
    as you know exactly how Docker handles volumes created with the `docker volume
    create` command.
  prefs: []
  type: TYPE_NORMAL
- en: As already mentioned, Docker are in the process of transitioning legacy plugins
    to a new architecture, a list of legacy plugins can be found at the following
    URL [https://docs.docker.com/engine/extend/legacy_plugins/](https://docs.docker.com/engine/extend/legacy_plugins/)
    and new plugins which use the new architecture a can be found at [https://store.docker.com/search?q=&type=plugin](https://store.docker.com/search?q=&type=plugin).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at how to monitor your containers,
    and what to do if anything goes wrong.
  prefs: []
  type: TYPE_NORMAL
