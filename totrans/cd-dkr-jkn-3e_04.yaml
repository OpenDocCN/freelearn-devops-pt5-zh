- en: '*Chapter 3*: Configuring Jenkins'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 3 章*：配置 Jenkins'
- en: To start any continuous delivery process, we need an automation server such
    as Jenkins. However, configuring Jenkins can be difficult, especially when the
    amount of tasks assigned to it increases over time. What's more, since Docker
    allows the dynamic provisioning of Jenkins agents, is it worth spending time to
    configure everything correctly upfront, with scalability in mind?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动任何持续交付过程，我们需要一个自动化服务器，如 Jenkins。然而，配置 Jenkins 可能很困难，尤其是当分配给它的任务随着时间增加时。更重要的是，由于
    Docker 允许动态提供 Jenkins 代理，那么值得花时间在前期将所有内容配置正确，以便考虑到可扩展性吗？
- en: In this chapter, we'll present Jenkins, which can be used separately or together
    with Docker. We will show that the combination of these two tools produces surprisingly
    good results – automated configuration and flexible scalability.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 Jenkins，它可以单独使用，也可以与 Docker 一起使用。我们将展示这两种工具的结合能够产生令人惊讶的好效果——自动化配置和灵活的可扩展性。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is Jenkins?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Jenkins？
- en: Installing Jenkins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Jenkins
- en: Jenkins – Hello World
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins – Hello World
- en: Jenkins architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 架构
- en: Configuring agents
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置代理
- en: Custom Jenkins images
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 Jenkins 镜像
- en: Configuration and management
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置与管理
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the instructions in this chapter, you''ll need the following
    hardware/software:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章的指导，您需要以下硬件/软件：
- en: Java 8+
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 8 及以上版本
- en: At least 4 GB of RAM
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少 4 GB 的内存
- en: At least 1 GB of free disk space
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少 1 GB 的空闲磁盘空间
- en: Docker Engine installed
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 Docker 引擎
- en: All the examples and solutions to the exercises in this chapter can be found
    on GitHub at [https://github.com/PacktPublishing/Continuous-Delivery-With-Docker-and-Jenkins-3rd-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Continuous-Delivery-With-Docker-and-Jenkins-3rd-Edition/tree/main/Chapter03).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有示例和练习解答可以在 GitHub 上找到，地址为 [https://github.com/PacktPublishing/Continuous-Delivery-With-Docker-and-Jenkins-3rd-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Continuous-Delivery-With-Docker-and-Jenkins-3rd-Edition/tree/main/Chapter03)。
- en: Code in Action videos for this chapter can be viewed at [https://bit.ly/3DP02TW](https://bit.ly/3DP02TW).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的《Code in Action》视频可以在[https://bit.ly/3DP02TW](https://bit.ly/3DP02TW)观看。
- en: What is Jenkins?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Jenkins？
- en: Jenkins is an open source automation server written in Java. With very active
    community-based support and a huge number of plugins, it is one of the most popular
    tools for implementing continuous integration and continuous delivery processes.
    Formerly known as **Hudson**, it was renamed after Oracle bought Hudson and decided
    to develop it as proprietary software. Jenkins was forked from Hudson but remained
    open source under the MIT license. It is highly valued for its simplicity, flexibility,
    and versatility.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是一个用 Java 编写的开源自动化服务器。它拥有非常活跃的社区支持和大量插件，是实现持续集成和持续交付流程最流行的工具之一。曾被称为
    **Hudson**，在 Oracle 收购 Hudson 并决定将其开发为专有软件后，Jenkins 被更名。Jenkins 从 Hudson 分叉，但仍然作为
    MIT 许可证下的开源软件。由于其简单性、灵活性和多功能性，它备受推崇。
- en: Jenkins outshines other continuous integration tools and is the most widely
    used software of its kind. That's all possible because of its features and capabilities.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 超越了其他持续集成工具，是最广泛使用的同类软件。这一切都得益于它的功能和能力。
- en: 'Let''s walk through the most interesting parts of Jenkins'' characteristics:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解 Jenkins 特性中最有趣的部分：
- en: '**Language-agnostic**: Jenkins has a lot of plugins, which support most programming
    languages and frameworks. Moreover, since it can use any shell command and any
    software, it is suitable for every automation process imaginable.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言无关**：Jenkins 有很多插件，支持大多数编程语言和框架。此外，由于它可以使用任何 shell 命令和任何软件，因此适用于所有可想象的自动化流程。'
- en: '**Extensible by plugins**: Jenkins has a great community and a lot of available plugins
    (over a thousand). It also allows you to write your own plugins in order to customize
    Jenkins for your needs.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过插件可扩展**：Jenkins 拥有一个强大的社区和大量可用的插件（超过千个）。它还允许你编写自己的插件，以便根据你的需求定制 Jenkins。'
- en: '**Portable**: Jenkins is written in Java, so it can be run on any operating system.
    For convenience, it is also delivered in a lot of versions – **Web Application
    Archive** (**WAR**) files, Docker images, Helm charts, Kubernetes operators, Windows
    binaries, macOS binaries, and Linux binaries.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植**：Jenkins 是用 Java 编写的，因此可以在任何操作系统上运行。为了方便，它也提供了多种版本——**Web 应用程序归档**（**WAR**）文件、Docker
    镜像、Helm 图表、Kubernetes 操作符、Windows 二进制文件、macOS 二进制文件和 Linux 二进制文件。'
- en: '**Supports most Source Control Management (SCM) tools**: Jenkins integrates
    with virtually every source code management or build tool that exists. Again,
    because of its large community and number of plugins, there is no other continuous
    integration tool that supports so many external systems.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持大多数源代码管理（SCM）工具**：Jenkins几乎与所有存在的源代码管理或构建工具集成。由于其庞大的社区和大量插件，没有其他持续集成工具能支持如此多的外部系统。'
- en: '**Distributed**: Jenkins has a built-in mechanism for the master/agent mode,
    which distributes its execution across multiple nodes, located on multiple machines.
    It can also use heterogeneous environments; for example, different nodes can have
    different operating systems installed.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式**：Jenkins具有内置的主机/代理模式机制，将其执行分布到多个节点，位于多台机器上。它还可以使用异构环境；例如，不同的节点可以安装不同的操作系统。'
- en: '**Simplicity**: The installation and configuration process is simple. There
    is no need to configure any additional software or the database. It can be configured
    completely through a GUI, XML, or Groovy scripts.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简便性**：安装和配置过程简单。无需配置任何额外的软件或数据库。可以通过GUI、XML或Groovy脚本完全配置。'
- en: '**Code-oriented**: Jenkins pipelines are defined as code. Also, Jenkins itself
    can be configured using YAML/XML files or Groovy scripts. That allows you to keep
    the configuration in the source code repository and helps in the automation of
    the Jenkins configuration.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向代码**：Jenkins流水线定义为代码。此外，Jenkins本身可以通过YAML/XML文件或Groovy脚本进行配置。这使你能够将配置保存在源代码仓库中，并有助于Jenkins配置的自动化。'
- en: Now that you have a basic understanding of Jenkins, let's move on to installing
    it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对Jenkins有了基本的了解，接下来我们来讲解如何安装它。
- en: Installing Jenkins
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Jenkins
- en: 'There are different methods of installing Jenkins, and you should choose the
    one that best suits your needs. Let''s walk through all the options you have and
    then describe the most common choices in detail:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Jenkins有不同的方法，你应选择最适合你需求的方法。接下来，我们将介绍所有可选方法，并详细描述最常见的选择：
- en: '**Servlet**: Jenkins is written in Java and natively distributed as a web application
    in the WAR format, dedicated to running inside an application server (such as
    Apache Tomcat or GlassFish); consider this option if you deploy all your applications
    as servlets.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Servlet**：Jenkins使用Java编写，并以WAR格式作为Web应用程序原生分发，专门运行在应用服务器中（如Apache Tomcat或GlassFish）；如果你将所有应用程序部署为servlet，可以考虑此选项。'
- en: '**Application**: The Jenkins WAR file embeds the Jetty application server,
    so it can be directly run with the Java command, and therefore, the **Java Runtime
    Environment** (**JRE**) is the only requirement to start Jenkins; consider this
    option if you use bare-metal servers and/or you need to install multiple Jenkins
    instances on one machine.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序**：Jenkins的WAR文件内嵌了Jetty应用服务器，因此可以直接使用Java命令运行，因此，**Java运行时环境**（**JRE**）是启动Jenkins的唯一要求；如果你使用裸机服务器和/或需要在一台机器上安装多个Jenkins实例，可以考虑此选项。'
- en: '**Dedicated package**: Jenkins is distributed for most operating systems in
    a form of dedicated packages (MSI for Windows, the Homebrew package for macOS,
    the deb package for Debian/Ubuntu, and so on); consider this option for the simplest
    installation and configuration if you use bare-metal servers.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专用包**：Jenkins以专用包的形式为大多数操作系统分发（Windows的MSI、macOS的Homebrew包、Debian/Ubuntu的deb包等）；如果你使用裸机服务器，考虑此选项以便进行最简单的安装和配置。'
- en: '**Docker**: Jenkins is distributed in a form of a Docker image, and so the
    only requirement is to have Docker installed; consider this option for the simplest
    installation if you use Docker in your ecosystem.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**：Jenkins以Docker镜像的形式分发，因此唯一的要求是安装Docker；如果你在生态系统中使用Docker，考虑此选项以获得最简单的安装。'
- en: '**Kubernetes**: Jenkins provides a Helm chart and a Kubernetes operator to
    simplify its installation, management, and scaling in a Kubernetes cluster; consider
    this option for the simplest Jenkins scaling and management.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**：Jenkins提供了Helm图表和Kubernetes操作符，简化了在Kubernetes集群中的安装、管理和扩展；如果你需要最简单的Jenkins扩展和管理，考虑使用此选项。'
- en: '**Cloud**: Jenkins is hosted in a form of **Software as a Service** (**SaaS**)
    by a number of platforms; consider this option if you don''t want to think about
    server maintenance and Jenkins installation.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云服务**：Jenkins作为**软件即服务**（**SaaS**）由多个平台托管；如果你不想考虑服务器维护和Jenkins安装，考虑使用此选项。'
- en: Each installation method has its own pros and cons. Let's describe the most
    common approaches, starting from using a Jenkins Docker image.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每种安装方式都有其优缺点。我们将描述最常见的方法，从使用 Jenkins Docker 镜像开始。
- en: Information
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: You can find a detailed description of each installation method at [https://www.jenkins.io/doc/book/installing/](https://www.jenkins.io/doc/book/installing/).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://www.jenkins.io/doc/book/installing/](https://www.jenkins.io/doc/book/installing/)
    上找到每种安装方法的详细描述。
- en: Installing Jenkins with Docker
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Docker 安装 Jenkins
- en: 'The Jenkins image is available in the Docker Hub registry, so in order to install
    its latest version, we should execute the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 镜像在 Docker Hub 仓库中可用，因此为了安装其最新版本，我们应该执行以下命令：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We need to specify the following parameters:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要指定以下参数：
- en: 'The first `host_port` parameter: The port on which Jenkins is visible outside
    of the container.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个 `host_port` 参数：Jenkins 在容器外部可见的端口。
- en: 'A second `host_volume` parameter: This specifies the directory where the Jenkins
    home is mapped. It needs to be specified as volume; therefore, it is persisted
    permanently because it contains the configuration, pipeline builds, and logs.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个 `host_volume` 参数：它指定了 Jenkins 主目录的映射目录。需要将其指定为卷，以便永久保存，因为它包含了配置、流水线构建和日志。
- en: 'As an example, let''s follow the installation steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们按照以下安装步骤进行：
- en: '**Prepare the volume directory**: We need a separate directory to keep the
    Jenkins data. Let''s prepare one with the following commands:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**准备存储卷目录**：我们需要一个单独的目录来存储 Jenkins 数据。让我们使用以下命令来准备它：'
- en: '[PRE1]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Run the Jenkins container**: Let''s run the container as a daemon and give
    it a proper name with the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行 Jenkins 容器**：让我们以守护进程的方式运行容器，并使用以下命令为其指定一个合适的名称：'
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Check whether Jenkins is running**: After a moment, we can check whether
    Jenkins has started correctly by printing the logs:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查 Jenkins 是否正在运行**：过一会儿，我们可以通过打印日志来检查 Jenkins 是否已正确启动：'
- en: '[PRE3]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Information
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 信息
- en: In the production environment, you may also want to set up some additional parameters;
    for details, please refer to [https://www.jenkins.io/doc/book/installing/docker/](https://www.jenkins.io/doc/book/installing/docker/).
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生产环境中，您可能还需要设置一些额外的参数；有关详细信息，请参考 [https://www.jenkins.io/doc/book/installing/docker/](https://www.jenkins.io/doc/book/installing/docker/)。
- en: After performing these steps, you can access your Jenkins instance at `http://localhost:8080/`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，您可以通过 `http://localhost:8080/` 访问您的 Jenkins 实例。
- en: Installing Jenkins with dedicated packages
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用专用安装包安装 Jenkins
- en: If you don't use Docker on your servers, then the simplest way is to use dedicated
    packages. Jenkins supports most operating systems – for example, MSI for Windows,
    the Homebrew package for macOS, and the deb package for Debian/Ubuntu.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的服务器上没有使用 Docker，那么最简单的方法是使用专用的安装包。Jenkins 支持大多数操作系统——例如，Windows 的 MSI、macOS
    的 Homebrew 包以及 Debian/Ubuntu 的 deb 包。
- en: 'As an example, in the case of Ubuntu, it''s enough to run the following commands
    to install Jenkins (and the required Java dependency):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，在 Ubuntu 系统中，只需运行以下命令即可安装 Jenkins（以及所需的 Java 依赖）：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After successful installation, the Jenkins instance is accessible via `http://localhost:8080/`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，可以通过 `http://localhost:8080/` 访问 Jenkins 实例。
- en: Initial configuration
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始配置
- en: 'No matter which installation you choose, starting Jenkins requires a few configuration
    steps. Let''s walk through them step by step:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择哪种安装方式，启动 Jenkins 都需要几个配置步骤。让我们一步步地走过这些步骤：
- en: Open Jenkins in the browser, at `http://localhost:8080`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 Jenkins，地址为 `http://localhost:8080`。
- en: 'Jenkins will ask for the administrator password. It can be found in the Jenkins
    logs:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 会要求输入管理员密码。可以在 Jenkins 日志中找到该密码：
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After accepting the initial password, Jenkins asks whether to install the suggested
    plugins, which are adjusted for the most common use cases. Your answer depends
    on your needs, of course. However, as the first Jenkins installation, it's reasonable
    to let Jenkins install all the recommended plugins.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接受初始密码后，Jenkins 会询问是否安装建议的插件，这些插件是针对最常见的用例进行调整的。您的回答当然取决于您的需求。不过，作为第一次安装 Jenkins，允许
    Jenkins 安装所有推荐插件是合理的选择。
- en: After the plugin installation, Jenkins asks you to set up a username, password,
    and other basic information. If you skip it, the token from *step 2* will be used
    as the admin password.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件安装完成后，Jenkins 会要求您设置用户名、密码以及其他基本信息。如果跳过此步骤，将使用 *步骤 2* 中的令牌作为管理员密码。
- en: 'The installation is then complete, and you should see the **Jenkins** dashboard:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你应该会看到 **Jenkins** 仪表盘：
- en: '![Figure 3.1 – A successful Jenkins installation'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – 成功安装 Jenkins'
- en: '](img/B18223_03_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_01.jpg)'
- en: Figure 3.1 – A successful Jenkins installation
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 成功安装 Jenkins
- en: Now, let's see how to install Jenkins if your deployment environment is a Kubernetes
    cluster.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在 Kubernetes 集群环境中安装 Jenkins。
- en: Installing Jenkins in Kubernetes
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中安装 Jenkins
- en: There are two methods of installing Jenkins in Kubernetes – a Helm chart and
    a Kubernetes operator. Let's look at the simpler option and use the Helm tool.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中安装 Jenkins 有两种方法——使用 Helm 图表或 Kubernetes 操作员。我们先来看一个更简单的选项，即使用
    Helm 工具。
- en: Tip
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: For more details about the Helm tool and its installation procedure, please
    visit [https://helm.sh/](https://helm.sh/).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Helm 工具及其安装过程的更多详细信息，请访问 [https://helm.sh/](https://helm.sh/)。
- en: 'Use the following commands to install Jenkins:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 Jenkins：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After executing the preceding commands, Jenkins is installed. You can check
    its logs with the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，Jenkins 已安装。你可以使用以下命令检查其日志：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'By default, the Jenkins instance is configured with one admin account, secured
    with the randomly generated password. To check this password, execute the following
    command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Jenkins 实例配置了一个管理员账户，并通过随机生成的密码进行保护。要查看此密码，请执行以下命令：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, you''ll be able to log in to Jenkins with the following credentials:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将能够使用以下凭据登录 Jenkins：
- en: '`admin`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`'
- en: '`nn1Pvq7asHPYz7EUHhc4PH`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nn1Pvq7asHPYz7EUHhc4PH`'
- en: 'By default, Jenkins is not exposed outside the Kubernetes cluster. To make
    it accessible from your local machine, run the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Jenkins 不会暴露在 Kubernetes 集群外部。要使其能够从本地计算机访问，请运行以下命令：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After this, you can open your browser at `http://localhost:8080/` and log in
    with the aforementioned credentials.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以在浏览器中打开 `http://localhost:8080/`，并使用前述凭据登录。
- en: Information
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Please visit [https://www.jenkins.io/doc/book/installing/kubernetes/](https://www.jenkins.io/doc/book/installing/kubernetes/)
    for more information about installing Jenkins in Kubernetes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问 [https://www.jenkins.io/doc/book/installing/kubernetes/](https://www.jenkins.io/doc/book/installing/kubernetes/)
    以获取有关在 Kubernetes 中安装 Jenkins 的更多信息。
- en: One of the biggest benefits of installing Jenkins in the Kubernetes cluster
    instead of a single machine is that it provides horizontal scaling out of the
    box. Jenkins agents are automatically provisioned using Jenkins' Kubernetes plugin.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Jenkins 安装在 Kubernetes 集群中的最大好处之一是，它提供了开箱即用的水平扩展功能。Jenkins 代理通过 Jenkins 的
    Kubernetes 插件自动配置。
- en: We will cover scaling Jenkins in the *Jenkins architecture* section and more
    about Kubernetes in [*Chapter 6*](B18223_06_ePub.xhtml#_idTextAnchor152), *Clustering
    with Kubernetes*. Now, let's see how you can use Jenkins in the cloud.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 *Jenkins 架构* 部分中讲解如何扩展 Jenkins，并在 [*第六章*](B18223_06_ePub.xhtml#_idTextAnchor152)
    中讲解更多 Kubernetes 相关内容，*与 Kubernetes 集群协作*。现在，让我们看看如何在云中使用 Jenkins。
- en: Jenkins in the cloud
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云中的 Jenkins
- en: If you don't want to install Jenkins yourself, there are companies that offer
    Jenkins hosted in the cloud. Note, however, that Jenkins was never built with
    a cloud-first approach in mind, so most offerings are, in fact, generic cloud
    solutions that help in installing and managing the Jenkins application for you.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想自己安装 Jenkins，有一些公司提供托管在云中的 Jenkins 服务。不过需要注意的是，Jenkins 从未采用云优先的方法设计，因此大多数提供的服务实际上是通用的云解决方案，旨在帮助你安装和管理
    Jenkins 应用程序。
- en: The solution I recommend is Google Cloud Marketplace, which automatically deploys
    Jenkins in Google Kubernetes Engine. Read more at [https://cloud.google.com/jenkins](https://cloud.google.com/jenkins).
    Other companies that offer hosted Jenkins include Kamatera and Servana.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐的解决方案是 Google Cloud Marketplace，它可以在 Google Kubernetes Engine 中自动部署 Jenkins。详细信息请参见
    [https://cloud.google.com/jenkins](https://cloud.google.com/jenkins)。其他提供托管 Jenkins
    服务的公司包括 Kamatera 和 Servana。
- en: When we finally have Jenkins up and running, we are ready to create our first
    Jenkins pipeline.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们终于启动并运行 Jenkins 后，我们就准备创建我们的第一个 Jenkins 管道。
- en: Jenkins – Hello World
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins – Hello World
- en: 'Everything in the entire IT world starts with the `Hello World` example, to
    show that the basics work fine. Let''s follow this rule and use it to create the
    first Jenkins pipeline:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个 IT 世界中，一切都从 `Hello World` 示例开始，来证明基本功能正常。让我们遵循这一规则，并用它来创建第一个 Jenkins 管道：
- en: 'Click on **New Item**:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **新建项目**：
- en: '![Figure 3.2 – New Item in the Jenkins web interface'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – Jenkins Web 界面中的新项目'
- en: '](img/B18223_03_02.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_02.jpg)'
- en: Figure 3.2 – New Item in the Jenkins web interface
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – Jenkins Web 界面中的新项目
- en: 'Enter `hello world` as the item name, choose **Pipeline**, and click on **OK**:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“项目名称”字段中输入`hello world`，选择**管道**，然后点击**确定**：
- en: '![Figure 3.3 – A new pipeline in the Jenkins web interface'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – Jenkins Web 界面中的新管道'
- en: '](img/B18223_03_03.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_03.jpg)'
- en: Figure 3.3 – A new pipeline in the Jenkins web interface
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – Jenkins Web 界面中的新管道
- en: 'There are a lot of options. We will skip them for now and go directly to the **Pipeline** section:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有很多选项。我们现在先跳过这些，直接进入**管道**部分：
- en: '![Figure 3.4 – Pipeline script in the Jenkins web interface'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – Jenkins Web 界面的管道脚本'
- en: '](img/B18223_03_04.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_04.jpg)'
- en: Figure 3.4 – Pipeline script in the Jenkins web interface
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – Jenkins Web 界面的管道脚本
- en: 'Then, in the **Script** textbox, we can enter the pipeline script:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在**脚本**文本框中，我们可以输入管道脚本：
- en: '[PRE10]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Click on **Save**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**。
- en: 'Click on **Build Now**:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**立即构建**：
- en: '![Figure 3.5 – Build Now in the Jenkins web interface'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – Jenkins Web 界面的立即构建'
- en: '](img/B18223_03_05.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_05.jpg)'
- en: Figure 3.5 – Build Now in the Jenkins web interface
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – Jenkins Web 界面的立即构建
- en: 'We should see **#1** under **Build History**. If we click on it, and then on **Console
    Output**, we will see the log from the pipeline build:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在**构建历史**下看到**#1**。如果点击它，然后点击**控制台输出**，我们将看到管道构建的日志：
- en: '![Figure 3.6 – Console Output in the Jenkins web interface'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – Jenkins Web 界面的控制台输出'
- en: '](img/B18223_03_06.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_06.jpg)'
- en: Figure 3.6 – Console Output in the Jenkins web interface
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – Jenkins Web 界面的控制台输出
- en: The successful output in this first example means that Jenkins is installed
    correctly. Now, let's look at the possible Jenkins architecture.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例中的成功输出意味着 Jenkins 已正确安装。现在，让我们看看可能的 Jenkins 架构。
- en: Information
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: We will describe more about the pipeline syntax in [*Chapter 4*](B18223_04_ePub.xhtml#_idTextAnchor106), *Continuous
    Integration Pipeline*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第 4 章*](B18223_04_ePub.xhtml#_idTextAnchor106)中详细描述更多关于管道语法的内容，*持续集成管道*。
- en: Jenkins architecture
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 架构
- en: Hello World is executed in almost no time at all. However, the pipelines are
    usually more complex, and time is spent on tasks such as downloading files from
    the internet, compiling source code, or running tests. One build can take from
    minutes to hours.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Hello World 几乎立即执行完毕。然而，管道通常更复杂，时间花费在下载文件、编译源代码或运行测试等任务上。一次构建可能需要几分钟到几个小时。
- en: In common scenarios, there are also many concurrent pipelines. Usually, a whole
    team, or even a whole organization, uses the same Jenkins instance. *How can we
    ensure that the builds will run quickly and smoothly?*
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在常见的场景中，也会有许多并发管道。通常，一个团队，甚至一个整个组织，都会使用同一个 Jenkins 实例。*我们如何确保构建能够快速且顺利地运行呢？*
- en: Master and agents
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主服务器和代理
- en: Jenkins becomes overloaded sooner than it seems. Even in the case of a small
    (micro) service, the build can take a few minutes. That means that one team committing
    frequently can easily kill the Jenkins instance.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 的负载很快就会超载。即使是一个小型（微型）服务，构建也可能需要几分钟。这意味着，一个团队频繁提交代码很容易导致 Jenkins 实例崩溃。
- en: For that reason, unless the project is really small, Jenkins should not execute
    builds at all but delegate them to the agent (slave) instances. To be precise,
    the Jenkins server we're currently running is called the **Jenkins master**, and
    it can delegate execution tasks to **Jenkins agents**.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除非项目非常小，否则 Jenkins 不应执行构建任务，而应将它们委派给代理（从）实例。准确来说，我们当前运行的 Jenkins 服务器叫做**Jenkins
    主服务器**，它可以将执行任务委派给**Jenkins 代理**。
- en: 'Let''s look at a diagram presenting the master-agent interaction:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个展示主从交互的图表：
- en: '![Figure 3.7 – The Jenkins master-agent interaction'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.7 – Jenkins 主从交互'
- en: '](img/B18223_03_07.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_07.jpg)'
- en: Figure 3.7 – The Jenkins master-agent interaction
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – Jenkins 主从交互
- en: 'In a distributed build environment, the Jenkins master is responsible for the
    following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式构建环境中，Jenkins 主服务器负责以下任务：
- en: Receiving build triggers (for example, after a commit to GitHub)
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收构建触发（例如，GitHub 提交后）
- en: Sending notifications (for example, email or Slack messages sent after a build
    failure)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送通知（例如，构建失败后发送电子邮件或 Slack 消息）
- en: Handling HTTP requests (interaction with clients)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 HTTP 请求（与客户端的交互）
- en: Managing the build environment (orchestrating the job executions on agents)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理构建环境（协调代理上的作业执行）
- en: The build agent is a machine that takes care of everything that happens after
    the build has started.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 构建代理是负责处理构建启动后所有事务的机器。
- en: 'Since the responsibilities of the master and the agents are different, they
    have different environmental requirements:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由于主节点和代理的职责不同，因此它们有不同的环境要求：
- en: '**Master**: This is usually (unless the project is really small) a dedicated machine
    with RAM ranging from 200 MB for small projects to 70+ GB for huge single-master
    projects.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主节点**：通常这是（除非项目非常小）一台专用机器，内存从小项目的 200 MB 到大型单主节点项目的 70+ GB 不等。'
- en: '**Agent**: There are no general requirements (other than the fact that it should
    be capable of executing a single build; for example, if the project is a huge monolith
    that requires 100 GB of RAM, then the agent machine needs to satisfy these needs).'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理**：没有特别的通用要求（除了它应该能够执行单次构建；例如，如果项目是一个庞大的单体项目，需要 100 GB 的内存，那么代理机器需要满足这些需求）。'
- en: Agents should also be as generic as possible. For instance, if we have different
    projects – one in Java, one in Python, and one in Ruby – then it would be perfect
    if each agent could build any of these projects. In such a case, the agents can
    be interchanged, which helps to optimize the usage of resources.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 代理应尽可能通用。例如，如果我们有不同的项目——一个是 Java 项目，一个是 Python 项目，还有一个是 Ruby 项目——那么最好每个代理都能构建这些项目中的任何一个。这样，代理可以互换，有助于优化资源的使用。
- en: Tip
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If agents cannot be generic enough to match all projects, then it's possible
    to label (tag) agents and projects so that the given build will be executed on
    a given type of agent.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代理无法通用到所有项目，那么可以对代理和项目进行标记（标签），以确保给定的构建会在指定类型的代理上执行。
- en: Scalability
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展性
- en: As with everything in the software world, with growing usage, a Jenkins instance
    can quickly become overloaded and unresponsive. That is why we need to think upfront
    about scaling it up. There are two possible methods – **vertical scaling** and **horizontal
    scaling**.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正如软件世界中的一切一样，随着使用量的增加，Jenkins 实例可能会迅速变得过载并变得无法响应。因此，我们需要提前考虑如何扩展它。有两种可能的方法——**垂直扩展**
    和 **横向扩展**。
- en: Vertical scaling
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 垂直扩展
- en: Vertical scaling means that when the master's load grows, more resources are
    applied to the master's machine. So, when new projects appear in our organization,
    we buy more RAM, add CPU cores, and extend the HDD drives. This may sound like
    a no-go solution; however, it is used often, even by well-known organizations.
    Having a single Jenkins master set on ultra-efficient hardware has one very strong
    advantage – maintenance. Any upgrades, scripts, security settings, role assignments,
    or plugin installations have to be done in one place only.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直扩展意味着，当主节点的负载增加时，会向主节点的机器添加更多资源。所以，当我们的组织中出现新项目时，我们会购买更多的内存、添加更多的 CPU 核心，扩展硬盘驱动器。这可能听起来像是一种不可行的解决方案；然而，许多知名的组织经常使用这种方法。将一个
    Jenkins 主节点设置在超高效的硬件上有一个非常强大的优势——维护。任何升级、脚本、安全设置、角色分配或插件安装都必须在一个地方完成。
- en: Horizontal scaling
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 横向扩展
- en: Horizontal scaling means that when an organization grows, more master instances
    are launched. This requires a smart allocation of instances to teams, and in extreme
    cases, each team can have its own Jenkins master. In that case, it might even
    happen that no agents are needed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 横向扩展意味着，当组织增长时，会启动更多的主实例。这需要智能地将实例分配给团队，在极端情况下，每个团队可以拥有自己的 Jenkins 主节点。这样可能会出现不需要代理的情况。
- en: 'The drawbacks are that it may be difficult to automate cross-project integrations
    and that a part of the team''s development time is spent on the maintenance of
    Jenkins. However, horizontal scaling has some significant advantages:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是，可能很难实现跨项目的集成自动化，而且团队的一部分开发时间会花在 Jenkins 的维护上。然而，横向扩展有一些显著的优势：
- en: Master machines don't need to be special, in terms of hardware.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机硬件不需要特殊。
- en: Different teams can have different Jenkins settings (for example, different
    sets of plugins).
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的团队可以拥有不同的 Jenkins 设置（例如，不同的插件集）。
- en: Teams usually feel better and work with Jenkins more efficiently if the instance
    is their own.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果实例属于自己的团队，团队通常会感觉更好，使用 Jenkins 的效率也更高。
- en: If one master instance is down, it does not impact the whole organization.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个主节点实例宕机，它不会影响整个组织。
- en: The infrastructure can be segregated into standard and mission-critical.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施可以分为标准和关键任务两类。
- en: Test and production instances
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试与生产实例
- en: Apart from the scaling approach, there is one more issue – *how to test the
    Jenkins upgrades, new plugins, or pipeline definitions.* Jenkins is critical to
    the whole company. It guarantees the quality of the software and, in the case
    of continuous delivery, deploys to the production servers. That is why it needs
    to be highly available, and it is definitely not for the purpose of testing. It
    means there should always be two instances of the same Jenkins infrastructure
    – **test** and **production**.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 除了扩展方法外，还有一个问题——*如何测试Jenkins的升级、新插件或管道定义。* Jenkins对整个公司至关重要。它保证软件的质量，并且在持续交付的情况下，将软件部署到生产服务器上。这就是为什么它需要具备高可用性，并且绝对不能用作测试目的。因此，应该始终有两套相同的Jenkins基础设施——**测试**和**生产**。
- en: Sample architecture
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例架构
- en: We already know that there should be agents and (possibly multiple) masters
    and that everything should be duplicated in the test and production environments.
    However, *what would the complete picture look like?*
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道应该有代理和（可能多个）主节点，并且一切都应该在测试和生产环境中进行复制。然而，*完整的架构是什么样的呢？*
- en: Luckily, there are a lot of companies that have published how they used Jenkins
    and what kind of architectures they created. It would be difficult to measure
    whether more of them preferred vertical or horizontal scaling, but it ranged from
    having only one master instance to having one master for each team.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，很多公司已经发布了他们如何使用Jenkins以及他们创建了什么样的架构。虽然很难衡量更多的公司倾向于使用垂直扩展还是水平扩展，但从只有一个主节点实例到每个团队都有一个主节点实例都有涉及。
- en: 'Let''s look at the example of Netflix to get a picture of a complete Jenkins
    infrastructure (Netflix shared it as a **planned infrastructure** at the Jenkins
    User Conference in San Francisco in 2012):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以Netflix为例，了解一个完整的Jenkins基础设施（Netflix在2012年在旧金山的Jenkins用户大会上分享了这个**计划中的基础设施**）：
- en: '![Figure 3.8 – The Jenkins infrastructure from Netflix'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.8 – Netflix的Jenkins基础设施'
- en: '](img/B18223_03_08.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_08.jpg)'
- en: Figure 3.8 – The Jenkins infrastructure from Netflix
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – Netflix的Jenkins基础设施
- en: They have test and production master instances, with each of them owning a pool
    of agents and additional ad hoc agents. Altogether, it serves around 2,000 builds
    per day. Also, note that a part of their infrastructure is hosted on AWS and another
    part is on their own servers.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 他们有测试和生产环境的主节点实例，每个主节点都有一组代理和额外的临时代理。总的来说，它每天处理约2000个构建任务。另外，需要注意的是，他们的部分基础设施托管在AWS上，另一部分则托管在自有服务器上。
- en: You should already have a rough idea of what the Jenkins infrastructure can
    look like, depending on the type of organization.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经对Jenkins基础设施的可能样式有了大致的了解，具体取决于组织的类型。
- en: Now, let's focus on the practical aspects of setting the agents.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们关注设置代理的实际操作部分。
- en: Configuring agents
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置代理
- en: You've seen what the agents are and when they can be used. However, *how do
    we set up an agent and let it communicate with the master?* Let's start with the
    second part of the question and describe the communication protocols between the
    master and the agent.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解了代理是什么以及它们何时可以使用。然而，*我们如何设置一个代理，并使其与主节点进行通信呢？*让我们从问题的第二部分开始，描述主节点和代理之间的通信协议。
- en: Communication protocols
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通信协议
- en: In order for the master and the agent to communicate, a bidirectional connection
    has to be established.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使主节点和代理之间能够通信，必须建立双向连接。
- en: 'There are different options for how it can be initiated:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Jenkins的方式有多种选择：
- en: '**SSH**: The master connects to the agent using the standard SSH protocol.
    Jenkins has an SSH client built in, so the only requirement is the **SSH daemon** (**sshd**)
    server configured on the agents. This is the most convenient and stable method
    because it uses standard Unix mechanisms.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSH**：主节点通过标准的SSH协议连接到代理。Jenkins内置了SSH客户端，因此唯一的要求是代理上需要配置**SSH守护进程**（**sshd**）服务器。这是最方便和稳定的方法，因为它使用了标准的Unix机制。'
- en: '**Java web start**: A Java application is started on each agent machine, and
    the TCP connection is established between the Jenkins agent application and the
    master Java application. This method is often used if the agents are inside the
    firewalled network and the master cannot initiate the connection.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java Web启动**：在每个代理机器上启动一个Java应用程序，并在Jenkins代理应用程序与主节点Java应用程序之间建立TCP连接。如果代理在防火墙内，而主节点无法发起连接，则通常使用此方法。'
- en: Once we know the communication protocols, let's look at how we can use them
    to set the agents.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们了解了通信协议，就可以看看如何使用这些协议来设置代理。
- en: Setting agents
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置代理
- en: 'At a low level, agents always communicate with the Jenkins master using one
    of the protocols described previously. However, at a higher level, we can attach
    agents to the master in various ways. The differences concern two aspects:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在较低级别上，代理总是通过前面描述的协议之一与 Jenkins 主节点通信。然而，在更高级别上，我们可以以不同的方式将代理附加到主节点。差异涉及两个方面：
- en: '**Static versus dynamic**: The simplest option is to add agents permanently
    in the Jenkins master. The drawback of such a solution is that we always need
    to manually change something if we need more (or fewer) agent nodes. A better
    option is to dynamically provision agents as they are needed.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态与动态**：最简单的选项是在 Jenkins 主节点中永久添加代理。此解决方案的缺点是，如果需要更多（或更少）代理节点，我们总是需要手动更改一些内容。一个更好的选择是根据需要动态配置代理。'
- en: '**Specific versus general-purpose**: Agents can be specific (for example, different
    agents for the projects based on Java 8 and Java 11) or general-purpose (an agent
    acts as a Docker host and a pipeline is built inside a Docker container).'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特定用途与通用用途**：代理可以是特定用途的（例如，为基于 Java 8 和 Java 11 的项目提供不同的代理），也可以是通用用途的（代理作为
    Docker 主机，管道在 Docker 容器内构建）。'
- en: 'These differences resulted in four common strategies for how agents are configured:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些差异导致了四种常见的代理配置策略：
- en: Permanent agents
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永久代理
- en: Permanent Docker host agents
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永久 Docker 主机代理
- en: Jenkins Swarm agents
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins Swarm 代理
- en: Dynamically provisioned Docker agents
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态配置的 Docker 代理
- en: Dynamically provisioned Kubernetes agents
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态配置的 Kubernetes 代理
- en: Let's examine each of the solutions.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查每个解决方案。
- en: Permanent agents
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 永久代理
- en: We will start with the simplest option, which is to permanently add specific
    agent nodes. It can be done entirely via the Jenkins web interface.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最简单的选项开始，即永久添加特定的代理节点。可以通过 Jenkins Web 界面完全完成这一操作。
- en: Configuring permanent agents
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置永久代理
- en: 'In the Jenkins master, when we open **Manage Jenkins** and then **Manage Nodes
    and Clouds**, we can view all the attached agents. Then, by clicking on **New
    Node**, giving it a name, setting its type to **Permanent Agent**, and confirming
    with the **Create** button, we should finally see the agent''s setup page:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jenkins 主节点中，当我们打开**管理 Jenkins**，然后点击**管理节点和云**时，可以查看所有连接的代理。接着，通过点击**新建节点**，给它命名，设置其类型为**永久代理**，并点击**创建**按钮，最终我们应该能看到代理的设置页面：
- en: '![Figure 3.9 – Permanent agent configuration'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.9 – 永久代理配置'
- en: '](img/B18223_03_09.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_09.jpg)'
- en: Figure 3.9 – Permanent agent configuration
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 永久代理配置
- en: 'Let''s walk through the parameters we need to fill in:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解需要填写的参数：
- en: '**Name**: This is the unique name of the agent.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：这是代理的唯一名称。'
- en: '**Description**: This is a human-readable description of the agent.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：这是代理的可读描述。'
- en: '**Number of executors**: This is the number of concurrent builds that can be
    run on the agent.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行器数量**：这是可以在代理上并行运行的构建数量。'
- en: '`/var/jenkins`); the most important data is transferred back to the master,
    so the directory is not critical.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/jenkins`）；最重要的数据会传回到主节点，所以该目录并非关键。'
- en: '**Labels**: This includes the tags to match the specific builds (tagged the
    same) – for example, only projects based on Java 8.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：这包括匹配特定构建的标签（标签相同）——例如，仅基于 Java 8 的项目。'
- en: '**Usage**: This is the option to decide whether the agent should only be used
    for matched labels (for example, only for acceptance testing builds), or for any
    builds.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用情况**：这是用来决定代理是否仅用于匹配标签的选项（例如，仅用于验收测试构建），还是用于任何构建。'
- en: '`ssh <agent_hostname> java -jar ~/bin/slave.jar`).'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh <agent_hostname> java -jar ~/bin/slave.jar`）。'
- en: '**Launch agents via SSH**: Here, the master will connect to the agent using
    the SSH protocol.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过 SSH 启动代理**：在这里，主节点将通过 SSH 协议连接到代理。'
- en: '`50000` for communication with the Jenkins master; therefore, if you use the
    Docker-based Jenkins master, you need to publish that port (`-p 50000:50000`).'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`50000` 用于与 Jenkins 主节点通信；因此，如果使用基于 Docker 的 Jenkins 主节点，则需要发布该端口（`-p 50000:50000`）。'
- en: When the agents are set up correctly, it's possible to update the master built-in
    node configuration with `0` so that no builds will be executed on it, and it will
    only serve as the Jenkins UI and the build's coordinator.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理正确设置时，可以通过`0`更新主节点的内置配置，这样就不会在其上执行构建，它将仅作为 Jenkins UI 和构建的协调器。
- en: Information
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: For more details and step-by-step instructions on how to configure permanent
    Jenkins agents, visit [https://www.jenkins.io/doc/book/using/using-agents/](https://www.jenkins.io/doc/book/using/using-agents/).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多详细信息和逐步说明如何配置永久性 Jenkins 代理，请访问 [https://www.jenkins.io/doc/book/using/using-agents/](https://www.jenkins.io/doc/book/using/using-agents/)。
- en: Understanding permanent agents
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 理解永久代理
- en: 'As we''ve already mentioned, the drawback of such a solution is that we need
    to maintain multiple agent types (labels) for different project types. Such a
    situation is presented in the following diagram:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，**缺点**是我们需要为不同的项目类型维护多个代理类型（标签）。下图展示了这种情况：
- en: '![Figure 3.10 – Permanent agents'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.10 – 永久代理'
- en: '](img/B18223_03_10.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_10.jpg)'
- en: Figure 3.10 – Permanent agents
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 永久代理
- en: In our example, if we have three types of projects (**java7**, **java8**, and **ruby**),
    then we need to maintain three separately labeled (sets of) agents. That is the
    same issue we had while maintaining multiple production server types, as described
    in [*Chapter 2*](B18223_02_ePub.xhtml#_idTextAnchor034), *Introducing Docker*.
    We addressed the issue by having Docker Engine installed on the production servers.
    Let's try to do the same with Jenkins agents.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，如果我们有三种类型的项目（**java7**、**java8** 和 **ruby**），那么我们需要维护三个单独标记的（代理集）。这与我们在维护多个生产服务器类型时遇到的问题相同，正如在[*第
    2 章*](B18223_02_ePub.xhtml#_idTextAnchor034)《引入 Docker》中所描述的那样。我们通过在生产服务器上安装 Docker
    引擎来解决了这个问题。让我们尝试用同样的方式来处理 Jenkins 代理。
- en: Permanent Docker host agents
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 永久性 Docker 主机代理
- en: The idea behind this solution is to permanently add general-purpose agents.
    Each agent is identically configured (with Docker Engine installed), and each
    build is defined along with the Docker image, inside of which the build is run.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案背后的想法是**永久**地添加通用代理。每个代理的配置是**相同**的（都安装了 Docker 引擎），并且每次构建都与 Docker 镜像一起定义，构建就在该镜像内运行。
- en: Configuring permanent Docker host agents
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置永久性 Docker 主机代理
- en: 'The configuration is static, so it''s done exactly the same way as we did with
    the permanent agents. The only difference is that we need to install Docker on
    each machine that will be used as an agent. Then, we usually don''t need labels
    because all the agents can be the same. After the agents are configured, we define
    the Docker image in each pipeline script:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 配置是静态的，因此与我们为永久代理所做的完全相同。唯一的区别是，我们需要在每台将用作代理的机器上安装 Docker。然后，通常我们不需要标签，因为所有代理都可以是相同的。代理配置完成后，我们在每个流水线脚本中定义
    Docker 镜像：
- en: '[PRE11]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When the build is started, the Jenkins agent starts a container from the Docker
    image, `openjdk:8-jdk-alpine`, and then executes all the pipeline steps inside
    that container. This way, we always know the execution environment and don't have
    to configure each agent separately, depending on the particular project type.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建开始时，Jenkins 代理从 Docker 镜像 `openjdk:8-jdk-alpine` 启动一个容器，然后在该容器内执行所有的流水线步骤。通过这种方式，我们总是能够知道执行环境，并且不需要根据特定的项目类型单独配置每个代理。
- en: Understanding permanent Docker host agents
  id: totrans-224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 理解永久性 Docker 主机代理
- en: 'Looking at the same scenario we used for the permanent agents, the diagram
    looks like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 看着我们为**永久**代理使用的相同场景，图示如下：
- en: '![Figure 3.11 – Permanent Docker host agents'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.11 – 永久性 Docker 主机代理'
- en: '](img/B18223_03_11.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_11.jpg)'
- en: Figure 3.11 – Permanent Docker host agents
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 永久性 Docker 主机代理
- en: Each agent is exactly the same, and if we want to build a project that depends
    on Java 8, then we would define the appropriate Docker image in the pipeline script
    (instead of specifying the agent label).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 每个代理完全相同，如果我们想构建一个依赖于 Java 8 的项目，那么我们将在流水线脚本中定义适当的 Docker 镜像（而不是指定代理标签）。
- en: Jenkins Swarm agents
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jenkins Swarm 代理
- en: So far, we have always had to permanently define each of the agents in the Jenkins
    master. Such a solution, although good enough in many cases, can be a burden if
    we need to frequently scale the number of agent machines. Jenkins Swarm allows
    you to dynamically add agents without the need to configure them in the Jenkins
    master.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们**总是**需要在 Jenkins 主服务器中永久定义每个代理。这样的解决方案，尽管在许多情况下足够好，但如果我们需要频繁扩展代理机器的数量，可能会成为负担。Jenkins
    Swarm 允许你动态添加代理，而无需在 Jenkins 主服务器中配置它们。
- en: Configuring Jenkins Swarm agents
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置 Jenkins Swarm 代理
- en: The first step to using Jenkins Swarm is to install the **Swarm** plugin in
    Jenkins. We can do it through the Jenkins web UI, under **Manage Jenkins** and **Manage
    Plugins**. After this step, the Jenkins master is prepared for Jenkins agents
    to be dynamically attached.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jenkins Swarm 的第一步是在 Jenkins 中安装 **Swarm** 插件。我们可以通过 Jenkins 网页 UI 完成此操作，进入
    **管理 Jenkins** 和 **管理插件**。完成此步骤后，Jenkins 主节点已准备好动态附加 Jenkins 代理。
- en: The second step is to run the Jenkins Swarm agent application on every machine
    that will act as a Jenkins agent. We can do it using the `swarm-client.jar` application.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是在每台将作为 Jenkins 代理的机器上运行 Jenkins Swarm 代理应用程序。我们可以使用 `swarm-client.jar` 应用程序来完成此操作。
- en: Information
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The `swarm-client.jar` application can be downloaded from the Jenkins Swarm
    plugin page at [https://plugins.jenkins.io/swarm/](https://plugins.jenkins.io/swarm/).
    On that page, you can also find all the possible options for its execution.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`swarm-client.jar` 应用程序可以从 Jenkins Swarm 插件页面下载，网址为 [https://plugins.jenkins.io/swarm/](https://plugins.jenkins.io/swarm/)。在该页面，你还可以找到所有可能的执行选项。'
- en: 'To attach the Jenkins Swarm agent node, run the following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要附加 Jenkins Swarm 代理节点，运行以下命令：
- en: '[PRE12]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After successful execution, we should notice that a new agent has appeared on
    the Jenkins master, and when we run a build, it will be started on this agent.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 执行成功后，我们应该注意到 Jenkins 主节点上出现了一个新代理，当我们运行构建时，它将在该代理上启动。
- en: Understanding Jenkins Swarm agents
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 了解 Jenkins Swarm 代理
- en: 'Let''s look at the following diagram that presents the Jenkins Swarm configuration:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下图示，展示了 Jenkins Swarm 配置：
- en: '![Figure 3.12 – Jenkins Swarm agents'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – Jenkins Swarm 代理'
- en: '](img/B18223_03_12.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_12.jpg)'
- en: Figure 3.12 – Jenkins Swarm agents
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – Jenkins Swarm 代理
- en: Jenkins Swarm allows you to dynamically add agents, but it says nothing about
    whether to use specific or Docker-based agents, so we can use it for both. At
    first glance, Jenkins Swarm may not seem very useful. After all, we have moved
    setting agents from the master to the agent, but we still have to do it manually.
    However, with the use of a clustering system such as Kubernetes or Docker Swarm,
    Jenkins Swarm apparently enables the dynamic scaling of agents on a cluster of
    servers.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins Swarm 允许你动态添加代理，但并未说明是否使用特定的或基于 Docker 的代理，因此我们可以两者都用。乍一看，Jenkins Swarm
    似乎没什么用，毕竟我们已将代理设置从主节点移到代理节点，但仍然需要手动操作。然而，借助 Kubernetes 或 Docker Swarm 等集群系统，Jenkins
    Swarm 显然使得在服务器集群上动态扩展代理成为可能。
- en: Dynamically provisioned Docker agents
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态分配的 Docker 代理
- en: Another option is to set up Jenkins to dynamically create a new agent each time
    a build is started. Such a solution is obviously the most flexible one, since
    the number of agents dynamically adjusts to the number of builds. Let's take a
    look at how to configure Jenkins this way.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是设置 Jenkins，在每次启动构建时动态创建一个新的代理。这种解决方案显然是最灵活的，因为代理的数量会根据构建的数量动态调整。让我们来看看如何以这种方式配置
    Jenkins。
- en: Configuring dynamically provisioned Docker agents
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置动态分配的 Docker 代理
- en: 'First, we need to install the **Docker** plugin. As always, with Jenkins plugins,
    we can do this in **Manage Jenkins** and **Manage Plugins**. After the plugin
    is installed, we can start the following configuration steps:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装 **Docker** 插件。像往常一样，我们可以在 **管理 Jenkins** 和 **管理插件** 中完成此操作。插件安装后，我们可以开始以下配置步骤：
- en: Open the **Manage Jenkins** page.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **管理 Jenkins** 页面。
- en: Click on the **Manage Nodes and Clouds** link.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **管理节点和云** 链接。
- en: Click on the **Configure Clouds** link.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **配置云** 链接。
- en: Click on **Add a new cloud** and choose **Docker**.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加新云** 并选择 **Docker**。
- en: 'Fill in the Docker agent details, as shown in the following screenshot:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写 Docker 代理的详细信息，如下图所示：
- en: '![Figure 3.13 – Docker agent configuration'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – Docker 代理配置'
- en: '](img/B18223_03_13.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_13.jpg)'
- en: Figure 3.13 – Docker agent configuration
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – Docker 代理配置
- en: Most parameters do not need to be changed; however (apart from selecting `docker0` network
    interface. You can do it in a similar way as to what's described in the *Installing
    on a server* section in [*Chapter 2*](B18223_02_ePub.xhtml#_idTextAnchor034),
    *Introducing Docker*, by changing one line in the `/lib/systemd/system/docker.service`
    file to `ExecStart=/usr/bin/dockerd -H 0.0.0.0:2375 -H fd://`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大多数参数无需更改；但是（除了选择 `docker0` 网络接口外，你可以按照在 [*第 2 章*](B18223_02_ePub.xhtml#_idTextAnchor034)
    *介绍 Docker* 部分中描述的方法，修改 `/lib/systemd/system/docker.service` 文件中的一行，将 `ExecStart`
    设置为 `/usr/bin/dockerd -H 0.0.0.0:2375 -H fd://`）。
- en: Click on **Docker Agent templates...** and select **Add Docker Template**.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Docker 代理模板...** 然后选择 **添加 Docker 模板**。
- en: 'Fill in the details about the Docker agent image:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写有关 Docker 代理镜像的详细信息：
- en: '![Figure 3.14 – Docker Agent templates configuration'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14 – Docker 代理模板配置'
- en: '](img/B18223_03_14.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_14.jpg)'
- en: Figure 3.14 – Docker Agent templates configuration
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – Docker 代理模板配置
- en: 'We can use the following parameters:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下参数：
- en: '`jenkins/agent` (used for the default connect method, which is **Attach Docker
    container**).'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jenkins/agent`（用于默认连接方式，即**附加 Docker 容器**）。'
- en: '`10`.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10`。'
- en: Information
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 信息
- en: Instead of `jenkins/agent`, it's possible to build and use your own agent images.
    This may be helpful in the case of specific environment requirements – for example,
    you need Golang installed. Note also that for other agent connect methods (`jenkins/ssh-agent`
    or `jenkins/inbound-agent`). For details, please check [https://plugins.jenkins.io/docker-plugin/](https://plugins.jenkins.io/docker-plugin/).
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了 `jenkins/agent`，还可以构建并使用自己的代理镜像。这在特定环境要求的情况下可能会很有帮助——例如，你需要安装 Golang。还需注意，对于其他代理连接方法（`jenkins/ssh-agent`
    或 `jenkins/inbound-agent`），详情请查看 [https://plugins.jenkins.io/docker-plugin/](https://plugins.jenkins.io/docker-plugin/)。
- en: After saving, everything will be set up. We can run the pipeline to observe
    that the execution really takes place on the Docker agent, but first, let's dig
    a little deeper in order to understand how the Docker agents work.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，所有配置将完成。我们可以运行管道以观察执行是否确实发生在 Docker 代理上，但首先，让我们更深入地了解 Docker 代理是如何工作的。
- en: Understanding dynamically provisioned Docker agents
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 理解动态提供的 Docker 代理
- en: Dynamically provisioned Docker agents can be treated as a layer over the standard
    agent mechanism. It changes neither the communication protocol nor how the agent
    is created. So, *what does Jenkins do with the Docker agent configuration we provided?*
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 动态提供的 Docker 代理可以视为标准代理机制之上的一层。它既不改变通信协议，也不改变代理的创建方式。那么，*Jenkins 对我们提供的 Docker
    代理配置做了什么？*
- en: 'The following diagram presents the Docker master-agent architecture we''ve
    configured:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了我们配置的 Docker 主从架构：
- en: '![Figure 3.15 – Dynamically provisioned Docker agents'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15 – 动态提供的 Docker 代理'
- en: '](img/B18223_03_15.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_15.jpg)'
- en: Figure 3.15 – Dynamically provisioned Docker agents
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 动态提供的 Docker 代理
- en: 'Let''s describe how the Docker agent mechanism is used, step by step:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步描述如何使用 Docker 代理机制：
- en: When the Jenkins job is started, the master runs a new container from the `jenkins/agent`
    image on the agent Docker host.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Jenkins 任务启动时，主节点在代理 Docker 主机上从 `jenkins/agent` 镜像运行一个新容器。
- en: The `jenkins/agent` container starts the Jenkins agent and attaches it to the
    Jenkins master's nodes pool.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`jenkins/agent` 容器启动 Jenkins 代理并将其附加到 Jenkins 主节点的节点池中。'
- en: Jenkins executes the pipeline inside the `jenkins/agent` container.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 在 `jenkins/agent` 容器内执行管道。
- en: After the build, the master stops and removes the agent container.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建完成后，主节点停止并移除代理容器。
- en: Information
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 信息
- en: Running the Jenkins master as a Docker container is independent of running Jenkins
    agents as Docker containers. It's reasonable to do both, but any of them will
    work separately.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 Jenkins 主节点作为 Docker 容器运行与将 Jenkins 代理作为 Docker 容器运行是相互独立的。两者可以同时进行，但它们各自独立工作。
- en: The solution is somehow similar to the permanent Docker agent solution because,
    as a result, we run the build inside a Docker container. The difference, however,
    is in the agent node configuration. Here, the whole agent is dockerized – not
    only the build environment.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案在某种程度上类似于永久 Docker 代理解决方案，因为最终我们是在 Docker 容器内运行构建。然而，区别在于代理节点配置。这里，整个代理都是
    Docker 化的——不仅仅是构建环境。
- en: Tip
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The Jenkins build usually needs to download a lot of project dependencies (for
    example, Gradle/Maven dependencies), which may take a lot of time. If Docker agents
    are automatically provisioned for each build, then it may be worthwhile to set
    up a Docker volume for them to enable caching between the builds.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 构建通常需要下载大量的项目依赖（例如，Gradle/Maven 依赖），这可能需要很长时间。如果为每次构建自动提供 Docker 代理，那么为它们设置
    Docker 卷以便在构建之间启用缓存可能是值得的。
- en: Dynamically provisioned Kubernetes agents
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态提供的 Kubernetes 代理
- en: We can dynamically provision agents on Kubernetes similar to how we did with
    the Docker host. The benefit of such an approach is that Kubernetes is a cluster
    of multiple physical machines that can easily scale up or down, according to needs.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Kubernetes中动态配置代理，类似于在Docker主机上所做的那样。这种方法的好处是，Kubernetes是一个由多台物理机器组成的集群，可以根据需求轻松扩展或缩减。
- en: Configuring dynamically provisioned Kubernetes agents
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置动态配置的Kubernetes代理
- en: 'Firstly, we need to install the **Kubernetes** plugin. Then, we can follow
    the same steps when we installed the Docker agents. The difference starts when
    we click on **Add a new cloud**. This time, we need to select **Kubernetes** instead
    of **Docker** and fill in all the details about the Kubernetes cluster:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装**Kubernetes**插件。然后，我们可以按照安装Docker代理时的相同步骤进行操作。区别在于，当我们点击**添加一个新云**时，选择的是**Kubernetes**而不是**Docker**，并填写有关Kubernetes集群的所有详细信息：
- en: '![Figure 3.16 – Kubernetes agent configuration'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.16 – Kubernetes代理配置'
- en: '](img/B18223_03_16.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_16.jpg)'
- en: Figure 3.16 – Kubernetes agent configuration
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16 – Kubernetes代理配置
- en: You need to fill in **Kubernetes URL**, which is the address of your Kubernetes
    cluster. Usually, you will also need to enter the credentials of your Kubernetes
    cluster. Then, you must click on **Add Pod Template** and fill in **Pod Template**
    analogously to what you did for **Docker Template** in the case of the **Docker**
    plugin.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要填写**Kubernetes URL**，即Kubernetes集群的地址。通常，你还需要输入Kubernetes集群的凭据。然后，你必须点击**添加Pod模板**，并按类似于为**Docker**插件中的**Docker模板**所做的方式填写**Pod模板**。
- en: Information
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: For more detailed instructions on how to set up the Jenkins Kubernetes plugin,
    visit [https://plugins.jenkins.io/kubernetes/](https://plugins.jenkins.io/kubernetes/).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何设置Jenkins Kubernetes插件的更多详细说明，请访问[https://plugins.jenkins.io/kubernetes/](https://plugins.jenkins.io/kubernetes/)。
- en: After successful configuration, when you start a new build, Jenkins automatically
    provisions a new agent in Kubernetes and uses it for the pipeline execution.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 配置成功后，当你开始一个新的构建时，Jenkins会自动在Kubernetes中配置一个新的代理，并用于管道执行。
- en: Tip
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you install Jenkins in Kubernetes using Helm, as described at the beginning
    of this chapter, it is automatically configured with the Kubernetes plugin and
    automatically provisions Jenkins agents in the same Kubernetes cluster where the
    Jenkins master is deployed. This way, with one Helm command, we install a fully
    functional and scalable Jenkins ecosystem!
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照本章开始时所述的方式使用Helm在Kubernetes中安装Jenkins，它会自动配置Kubernetes插件，并自动在与Jenkins主服务器部署相同的Kubernetes集群中配置Jenkins代理。通过一个Helm命令，我们就能安装一个功能齐全且可扩展的Jenkins生态系统！
- en: Understanding dynamically provisioned Kubernetes agents
  id: totrans-299
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 了解动态配置的Kubernetes代理
- en: 'Dynamically provisioning an agent in Kubernetes works very similarly to provisioning
    an agent in the Docker host. The difference is that now we interact with a cluster
    of machines, not just a single Docker host. This approach is presented in the
    following diagram:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中动态配置代理的方式与在Docker主机中配置代理非常相似。不同之处在于，现在我们与一群机器交互，而不仅仅是与单个Docker主机交互。这种方法在下图中有所展示：
- en: '![Figure 3.17 – Dynamically provisioned Kubernetes agents'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.17 – 动态配置的Kubernetes代理'
- en: '](img/B18223_03_17.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_17.jpg)'
- en: Figure 3.17 – Dynamically provisioned Kubernetes agents
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17 – 动态配置的Kubernetes代理
- en: Kubernetes nodes can be dynamically added and removed, which makes the whole
    master-agent architecture very flexible in terms of needed resources. When we
    experience too many Jenkins builds, we can easily add a new machine to the Kubernetes
    cluster and, therefore, improve the Jenkins capacity.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes节点可以动态添加和移除，这使得整个主机-代理架构在所需资源方面非常灵活。当Jenkins构建任务过多时，我们可以轻松向Kubernetes集群中添加一台新机器，从而提高Jenkins的容量。
- en: We have covered a lot of different strategies on how to configure Jenkins agents.
    Let's move on and test our configuration.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了许多不同的策略来配置Jenkins代理。接下来，让我们进行配置测试。
- en: Testing agents
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试代理
- en: No matter which agent configuration you have chosen, you can now check whether
    everything works correctly.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择了哪种代理配置，现在都可以检查是否一切正常工作。
- en: 'Let''s go back to the Hello World pipeline. Usually, the builds last longer
    than the Hello World example, so we can simulate it by adding `sleeping` to the
    pipeline script:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到Hello World管道。通常，构建过程会比Hello World示例持续更长时间，因此我们可以通过在管道脚本中添加`sleeping`来进行模拟：
- en: '[PRE13]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After clicking on **Build Now** and going to the Jenkins main page, we should
    see that the build is executed on an agent. Now, if we click on the build many
    times, multiple builds should be started in parallel (as shown in the following
    screenshot):'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **立即构建** 后，进入 Jenkins 主页面，我们应该能看到构建在代理上执行。如果我们多次点击构建，应该会并行启动多个构建（如下图所示）：
- en: '![Figure 3.18 – Jenkins running multiple builds on Jenkins agents'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.18 – Jenkins 在 Jenkins 代理上运行多个构建'
- en: '](img/B18223_03_18.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_18.jpg)'
- en: Figure 3.18 – Jenkins running multiple builds on Jenkins agents
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – Jenkins 在 Jenkins 代理上运行多个构建
- en: Tip
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: To prevent job executions on the master, remember to set `0` for the master
    node in the **Manage Nodes** configuration.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止在主节点上执行作业，请记得在 **管理节点** 配置中将主节点的设置为 `0`。
- en: Having seen that the agents are executing our builds, we have confirmed that
    they are configured correctly. Before we move on and see how to create our own
    Jenkins images, let's clarify one nuance, the difference between Docker agents
    and the Docker pipeline build.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到代理在执行我们的构建，确认它们已经正确配置。接下来，在我们学习如何创建自己的 Jenkins 镜像之前，让我们先澄清一个细节，即 Docker
    代理和 Docker 管道构建之间的区别。
- en: Comparing Docker pipeline builds and Docker agents
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 Docker 管道构建和 Docker 代理
- en: The Jenkins pipeline build executes inside a Docker container in two cases –
    permanent Docker host agents and dynamically provisioned Docker/Kubernetes agents.
    However, there is a subtle difference between both solutions, which requires a
    few words of clarification.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 管道构建在两种情况下会在 Docker 容器中执行——永久的 Docker 主机代理和动态配置的 Docker/Kubernetes 代理。然而，这两种解决方案之间有一个微妙的区别，值得澄清一下。
- en: Docker pipeline builds
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 管道构建
- en: 'If your agent is a Docker host, then you can specify your pipeline runtime
    from the Jenkins user perspective. In other words, if your project has some special
    build runtime requirements, you can dockerize them and describe your pipeline
    script as follows:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代理是 Docker 主机，那么你可以从 Jenkins 用户的角度指定管道的运行时。换句话说，如果你的项目有一些特殊的构建运行时要求，你可以将它们
    Docker 化，并按如下方式描述你的管道脚本：
- en: '[PRE14]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Such an approach means that from the user's perspective, you are free to choose
    the Docker image used for your build. What's more, you can even decide to execute
    the build directly on the host, not inside the Docker container, which may be
    especially useful when the steps in your pipeline need a Docker host that may
    not be accessible from inside the container. We will see an example of such a
    requirement in the later chapters of this book.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式意味着从用户的角度来看，你可以自由选择用于构建的 Docker 镜像。而且，你甚至可以决定直接在主机上执行构建，而不是在 Docker 容器中执行，这在管道中的步骤需要
    Docker 主机而主机在容器内无法访问时尤为有用。我们将在本书的后续章节中看到这种需求的例子。
- en: Docker agents
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 代理
- en: 'If your agent itself is a Docker container, then you specify the Docker image
    used from the Jenkins admin perspective. In such a situation, if your project
    has some specific build runtime requirements, then you need to do the following:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代理本身是一个 Docker 容器，那么你需要从 Jenkins 管理员的角度指定使用的 Docker 镜像。在这种情况下，如果你的项目有一些特定的构建运行时要求，你需要做如下操作：
- en: Create a custom Docker image that uses `jenkins/agent` as the base image.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义的 Docker 镜像，使用 `jenkins/agent` 作为基础镜像。
- en: Ask a Jenkins admin to include it in the Docker/Kubernetes plugin configuration
    and assign a special label to the given agent.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请让 Jenkins 管理员将其包含在 Docker/Kubernetes 插件配置中，并为该代理分配一个特殊标签。
- en: Use the specific agent label inside your pipeline script.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在管道脚本中使用特定的代理标签。
- en: This means that for a project with custom requirements, the setup is slightly
    more complex.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，对于具有自定义要求的项目，设置稍微复杂一些。
- en: 'There is one more open question: what about a scenario when your pipeline requires
    access to the Docker host – for example, to build Docker images? Is there a way
    to use Docker inside a Docker container? Docker-in-Docker comes to the rescue.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个开放问题：如果你的管道需要访问 Docker 主机，比如构建 Docker 镜像，该怎么办？是否有办法在 Docker 容器内使用 Docker？Docker-in-Docker
    就可以解决这个问题。
- en: Docker-in-Docker
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker-in-Docker
- en: There is a solution called **Docker-in-Docker** (**DIND**), which allows you
    to use Docker inside a Docker container. Technically, it requires granting **privileged**
    permissions to the Docker container, and there is a related configuration field
    inside the Jenkins Docker plugin. Note, however, that allowing a container to
    access the Docker host is a potential security hole, so you should always take
    extra precautions before applying such a configuration.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个解决方案叫做 **Docker-in-Docker** (**DIND**)，它允许你在 Docker 容器内使用 Docker。技术上，它要求为
    Docker 容器授予**特权**权限，并且 Jenkins Docker 插件中有一个相关的配置字段。请注意，允许容器访问 Docker 主机可能会成为潜在的安全隐患，因此在应用此配置之前，务必采取额外的安全措施。
- en: We have finally covered everything about the Jenkins agent configuration. Now,
    let's move on and look at how, and for what reasons, we can create our own Jenkins
    images.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了关于 Jenkins 代理配置的所有内容。现在，让我们继续看一下，为什么以及如何创建我们自己的 Jenkins 镜像。
- en: Custom Jenkins images
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 Jenkins 镜像
- en: So far, we have used Jenkins images pulled from the internet. We used `jenkins/jenkins`
    for the master container and `jenkins/agent` (or `jenkins/inbound-agent` or `jenkins/ssh-agent`)
    for the agent container. However, you may want to build your own images to satisfy
    the specific build environment requirements. In this section, we will cover how
    to do it.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用的是从互联网拉取的 Jenkins 镜像。我们使用了`jenkins/jenkins`作为主容器镜像，`jenkins/agent`（或`jenkins/inbound-agent`或`jenkins/ssh-agent`）作为代理容器镜像。然而，你可能想要构建自己的镜像，以满足特定构建环境的要求。在本节中，我们将介绍如何操作。
- en: Building the Jenkins agent
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Jenkins 代理
- en: Let's start with the agent image because it's more frequently customized. The
    build execution is performed on the agent, so it's the agent that needs to have
    the environment adjusted to the project we want to build – for example, it may
    require the Python interpreter if our project is written in Python. The same applies
    to any library, tool, or testing framework, or anything that is needed by the
    project.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从代理镜像开始，因为它是最常定制的。构建执行发生在代理上，因此需要根据我们想要构建的项目调整代理环境——例如，如果我们的项目是用 Python 编写的，它可能需要
    Python 解释器。同样，任何库、工具、测试框架或项目所需的其他任何东西也适用。
- en: 'There are four steps to building and using the custom image:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和使用自定义镜像的步骤有四个：
- en: Create a Docker file.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Docker 文件。
- en: Build the image.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建镜像。
- en: Push the image into a registry.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将镜像推送到注册表。
- en: Change the agent configuration on the master.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改主机上的代理配置。
- en: 'As an example, let''s create an agent that serves the Python project. We can
    build it on top of the `jenkins/agent` image, for the sake of simplicity. Let''s
    do it using the following four steps:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个示例，假设我们要创建一个用于 Python 项目的代理。为了简化操作，我们可以在`jenkins/agent`镜像的基础上进行构建。我们可以通过以下四个步骤来实现：
- en: '`Dockerfile`, with the following content:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Dockerfile`，内容如下：'
- en: '[PRE15]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Build the image**: We can build the image by executing the following command:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建镜像**：我们可以通过执行以下命令来构建镜像：'
- en: '[PRE16]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`leszko` to your Docker Hub name) and that you have already executed `docker
    login`. We''ll cover more on Docker registries in [*Chapter 5*](B18223_05_ePub.xhtml#_idTextAnchor133), *Automated
    Acceptance Testing*.'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （将`leszko`替换为你的 Docker Hub 名称）并确保你已执行过`docker login`。我们将在[*第5章*](B18223_05_ePub.xhtml#_idTextAnchor133)中更详细地讨论
    Docker 注册表，*自动化验收测试*。
- en: '`leszko/jenkins-agent-python` instead of `jenkins/agent` in the Jenkins master''s
    configuration (as described in the *Dynamically provisioned Docker agents* section).'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 主机的配置中使用`leszko/jenkins-agent-python`，而不是`jenkins/agent`（如*动态分配 Docker
    代理*部分所描述）。
- en: Tip
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: If you have pushed your image to the Docker Hub registry and the registry is
    private, then you'll also need to configure the appropriate credentials in the
    Jenkins master configuration.
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你已将镜像推送到 Docker Hub 并且该注册表是私有的，那么你还需要在 Jenkins 主机配置中配置相应的凭证。
- en: '*What if we need Jenkins to build two different kinds of projects – for example,
    one based on Python and another based on Ruby?* In that case, we can prepare an
    agent that''s generic enough to support both – Python and Ruby. However, in the
    case of Docker, it''s recommended to create a second agent image (`leszko/jenkins-agent-ruby`
    by analogy). Then, in the Jenkins configuration, we need to create two Docker
    templates and label them accordingly.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果我们需要 Jenkins 构建两种不同类型的项目——例如，一个基于 Python，另一个基于 Ruby，怎么办？* 在这种情况下，我们可以准备一个通用的代理，支持这两种语言——Python
    和 Ruby。然而，在 Docker 的情况下，建议创建第二个代理镜像（例如`leszko/jenkins-agent-ruby`）。然后，在 Jenkins
    配置中，我们需要创建两个 Docker 模板，并相应地标记它们。'
- en: Information
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: We used `jenkins/agent` as the base image, but we can use `jenkins/inbound-agent`
    and `jenkins/ssh-agent` in exactly the same manner.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `jenkins/agent` 作为基础镜像，但我们也可以以完全相同的方式使用 `jenkins/inbound-agent` 和 `jenkins/ssh-agent`。
- en: Building the Jenkins master
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Jenkins 主机
- en: We already have a custom agent image. *Why would we also want to build our own
    master image?* One of the reasons might be that we don't want to use agents at
    all, and since the execution will be done on the master, its environment has to
    be adjusted to the project's needs. That is, however, a very rare case. More often,
    we will want to configure the master itself.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一个自定义代理镜像。 *为什么我们还要构建自己的主镜像呢？* 其中一个原因可能是我们完全不想使用代理，并且由于执行将由主机完成，其环境必须根据项目需求进行调整。然而，这种情况非常少见。更常见的是，我们会希望配置主机本身。
- en: 'Imagine the following scenario: your organization scales Jenkins horizontally,
    and each team has its own instance. There is, however, some common configuration
    – for example, a set of base plugins, backup strategies, or the company logo.
    Then, repeating the same configuration for each of the teams is a waste of time.
    So, we can prepare the shared master image and let the teams use it.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 想象以下场景：您的组织在水平扩展 Jenkins，每个团队都有自己的实例。然而，某些配置是共享的——例如，一组基础插件、备份策略或公司标志。那么，为每个团队重复相同的配置就是一种时间浪费。因此，我们可以准备一个共享的主镜像，让各团队使用。
- en: Jenkins is natively configured using XML files, and it provides the Groovy-based
    DSL language to manipulate them. That is why we can add the Groovy script to the
    Dockerfile in order to manipulate the Jenkins configuration. Furthermore, there
    are special scripts to help with the Jenkins configuration if it requires something
    more than XML changes – for instance, plugin installation.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 本身是通过 XML 文件进行配置的，并且提供了基于 Groovy 的 DSL 语言来操作这些文件。这就是为什么我们可以将 Groovy
    脚本添加到 Dockerfile 中，以便操作 Jenkins 配置。此外，如果 Jenkins 配置需要更复杂的操作（如插件安装），也有专门的脚本可以帮助完成这些任务。
- en: Information
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: All possibilities of the Dockerfile instructions are well described on the GitHub
    page at [https://github.com/jenkinsci/docker](https://github.com/jenkinsci/docker).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile 指令的所有可能性在 GitHub 页面 [https://github.com/jenkinsci/docker](https://github.com/jenkinsci/docker)
    上有详细描述。
- en: 'As an example, let''s create a master image with `docker-plugin` already installed
    and a number of executors set to `5`. In order to do it, we need to perform the
    following:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以创建一个已安装 `docker-plugin` 并将执行器数量设置为 `5` 的主镜像。为此，我们需要执行以下操作：
- en: Create the Groovy script to manipulate `config.xml`, and set the number of executors
    to `5`.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Groovy 脚本以操作 `config.xml`，并将执行器数量设置为 `5`。
- en: Create the Dockerfile to install `docker-plugin`, and execute the Groovy script.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Dockerfile 以安装 `docker-plugin` 并执行 Groovy 脚本。
- en: Build the image.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建镜像。
- en: 'Let''s use the three steps mentioned and build the Jenkins master image:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照之前提到的三步来构建 Jenkins 主机镜像：
- en: '`executors.groovy` file with the following content:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`executors.groovy` 文件，内容如下：'
- en: '[PRE17]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: The complete Jenkins API can be found on the official page at [http://javadoc.jenkins.io/](http://javadoc.jenkins.io/).
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完整的 Jenkins API 可以在官方页面 [http://javadoc.jenkins.io/](http://javadoc.jenkins.io/)
    上找到。
- en: '**Dockerfile**: In the same directory, create a Docker file:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Dockerfile**：在同一目录下创建一个 Docker 文件：'
- en: '[PRE18]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Build the image**: We can finally build the image:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建镜像**：我们可以最终构建镜像：'
- en: '[PRE19]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: After the image is created, each team in the organization can use it to launch
    their own Jenkins instance.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像创建后，组织中的每个团队都可以使用它来启动自己的 Jenkins 实例。
- en: Tip
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Similar to the Jenkins agent image, you can build the master image as `leszko/jenkins-master` and
    push it into your Docker Hub account.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Jenkins 代理镜像，您可以构建名为 `leszko/jenkins-master` 的主镜像，并将其推送到您的 Docker Hub 账户中。
- en: Having our own master and agent images lets us provide the configuration and
    build environment for the teams in our organization. In the next section, you'll
    see what else is worth being configured in Jenkins.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有我们自己的主镜像和代理镜像，可以为我们组织中的团队提供配置和构建环境。在下一节中，您将看到在 Jenkins 中值得配置的其他内容。
- en: Information
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: You can also configure Jenkins master as well as Jenkins pipelines using the
    YAML-based configuration with the Configuration as Code plugin. Read more at [https://www.jenkins.io/projects/jcasc/](https://www.jenkins.io/projects/jcasc/).
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用基于 YAML 的配置和 Configuration as Code 插件来配置 Jenkins 主机以及 Jenkins 管道。详细信息请参见
    [https://www.jenkins.io/projects/jcasc/](https://www.jenkins.io/projects/jcasc/)。
- en: Configuration and management
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置与管理
- en: We have already covered the most crucial part of the Jenkins configuration –
    **agent provisioning**. Since Jenkins is highly configurable, you can expect many
    more possibilities to adjust it to your needs. The good news is that the configuration
    is intuitive and accessible via the web interface, so it does not require a detailed
    description. Everything can be changed under the **Manage Jenkins** sub-page.
    In this section, we will focus on only a few aspects that are most likely to be
    changed – plugins, security, and backup.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经覆盖了Jenkins配置中最关键的部分 - **代理配置**。由于Jenkins具有高度可配置性，您可以期望有更多的可能性来根据您的需求进行调整。好消息是，配置直观且可通过Web界面访问，因此不需要详细描述。所有内容都可以在
    **管理Jenkins** 子页面下更改。在本节中，我们将仅关注可能需要更改的几个方面 - 插件、安全性和备份。
- en: Plugins
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件
- en: Jenkins is highly plugin-oriented, which means that a lot of features are delivered
    by the use of plugins. They can extend Jenkins in an almost unlimited way, which,
    taking into consideration the large community, is one of the reasons why Jenkins
    is such a successful tool. With Jenkins' openness comes risk, and it's better
    to download only plugins from a reliable source or check their source code.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins高度依赖插件，这意味着许多功能通过插件提供。它们几乎可以无限扩展Jenkins，考虑到庞大的社区，这是Jenkins成功的原因之一。Jenkins的开放性带来了风险，最好只从可靠来源下载插件或检查其源代码。
- en: There are literally tons of plugins to choose from. Some of them were already
    installed automatically, during the initial configuration. Others (Docker and
    Kubernetes plugins) were installed when setting the Docker agents. There are plugins
    for cloud integration, source control tools, code coverage, and much more. You
    can also write your own plugin, but it's better to check whether the one you need
    is already available.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量插件可供选择。其中一些在初始配置期间已自动安装。其他插件（如Docker和Kubernetes插件）是在设置Docker代理时安装的。有用于云集成、源代码控制工具、代码覆盖等的插件。您也可以编写自己的插件，但最好先检查您需要的插件是否已经存在。
- en: Information
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: There is an official Jenkins page to browse plugins at [https://plugins.jenkins.io/](https://plugins.jenkins.io/).
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个官方的Jenkins页面可以浏览插件，网址为 [https://plugins.jenkins.io/](https://plugins.jenkins.io/)。
- en: Security
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性
- en: The way you should approach Jenkins security depends on the Jenkins architecture
    you have chosen within your organization. If you have a Jenkins master for every
    small team, then you may not need it at all (under the assumption that the corporate
    network is firewalled). However, if you have a single Jenkins master instance
    for the whole organization, then you'd better be sure you've secured it well.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该如何处理Jenkins的安全性取决于您在组织中选择的Jenkins架构。如果您为每个小团队都有一个Jenkins主节点，那么您可能根本不需要它（假设企业网络已设置防火墙）。然而，如果您为整个组织只有一个Jenkins主节点，那么最好确保已经充分保护了它。
- en: Jenkins comes with its own user database; we already created a user during the
    initial configuration process. You can create, delete, and modify users by opening
    the **Manage Users** setting page. The built-in database can be a solution in
    the case of small organizations; however, for a large group of users, you will
    probably want to use the **Lightweight Directory Access Protocol (LDAP**) instead.
    You can choose it on the **Configure Global Security** page. There, you can also
    assign roles, groups, and users. By default, the **Logged-in users can do anything** option
    is set, but in a large-scale organization, you should probably consider using
    more detailed permission granularity.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins带有自己的用户数据库；我们在初始配置过程中已经创建了一个用户。您可以通过打开 **管理用户** 设置页面来创建、删除和修改用户。内置数据库可以是小型组织的解决方案；但对于大量用户组，您可能希望使用
    **轻量级目录访问协议（LDAP）**。您可以在 **配置全局安全** 页面上进行选择。在那里，您还可以分配角色、组和用户。默认情况下，设置了 **已登录用户可以执行任何操作**
    的选项，但在大型组织中，您可能应考虑使用更详细的权限粒度。
- en: Backup
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 备份
- en: 'As the old saying goes, *there are two types of people: those who back up,
    and those who will back up*. Believe it or not, the backup is something you probably
    want to configure. *What files should be backed up, and from which machines?* Luckily,
    agents automatically send all the relevant data back to the master, so we don''t
    need to bother with them. If you run Jenkins in a container, then the container
    itself is also not of interest, since it does not hold a persistent state. The
    only place we are interested in is the Jenkins home directory.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 正如老话所说，*有两种人：那些做备份的人，和那些将会做备份的人*。信不信由你，备份是你可能想要配置的东西。*应该备份哪些文件，来自哪些机器？* 幸运的是，代理会自动将所有相关数据发送回主节点，所以我们不需要操心这些。如果你在容器中运行Jenkins，那么容器本身也不重要，因为它不持久保存状态。我们唯一关心的地方是Jenkins主目录。
- en: We can either install a Jenkins plugin (which will help us to set periodic backups)
    or simply set a cron job to archive the directory in a safe place. To reduce the
    size, we can exclude the subfolders that are not of interest (that will depend
    on your needs; however, almost certainly, you don't need to copy the following: *war*, *cache*, *tools*,
    and *workspace*).
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以安装一个Jenkins插件（它将帮助我们设置定期备份），或者简单地设置一个定时任务，将目录归档到安全的位置。为了减小大小，我们可以排除那些不感兴趣的子文件夹（这取决于你的需求；然而，几乎可以肯定的是，你不需要复制以下内容：*war*、*cache*、*tools*
    和 *workspace*）。
- en: Information
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: If you automate your Jenkins master setup (by building a custom Docker image
    or using the Jenkins Configuration as Code plugin), then you may consider skipping
    the Jenkins backup configuration.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您自动化了Jenkins主节点的设置（通过构建自定义Docker镜像或使用Jenkins配置即代码插件），那么您可能会考虑跳过Jenkins备份配置。
- en: Jenkins Blue Ocean UI
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jenkins蓝海用户界面
- en: 'The first version of Hudson (the former Jenkins) was released in 2005\. It''s
    been on the market for more than 15 years now. However, its look and feel haven''t
    changed much. We''ve used it for quite a while, and it''s hard to deny that it
    looks outdated. Blue Ocean is the plugin that has redefined the user experience
    of Jenkins. If Jenkins is aesthetically displeasing to you or its workflow does
    not feel intuitive enough, then it''s definitely worth giving Blue Ocean a try
    (as shown in the following screenshot):'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: Hudson的第一个版本（前身为Jenkins）发布于2005年。至今已经有超过15年的历史。然而，它的外观和感觉变化不大。我们已经使用它一段时间，难以否认它看起来有些过时。蓝海是重新定义Jenkins用户体验的插件。如果Jenkins在美学上令你不满意，或者它的工作流感觉不够直观，那么绝对值得尝试一下蓝海插件（如下图所示）：
- en: '![Figure 3.19 – The Jenkins Blue Ocean UI'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.19 – Jenkins蓝海用户界面'
- en: '](img/B18223_03_19.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18223_03_19.jpg)'
- en: Figure 3.19 – The Jenkins Blue Ocean UI
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19 – Jenkins蓝海用户界面
- en: Information
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: You can read more on the Blue Ocean page at [https://www.jenkins.io/doc/book/blueocean/](https://www.jenkins.io/doc/book/blueocean/).
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在蓝海页面阅读更多内容，链接地址为[https://www.jenkins.io/doc/book/blueocean/](https://www.jenkins.io/doc/book/blueocean/)。
- en: Summary
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we covered the Jenkins environment and its configuration.
    The knowledge we have gained is sufficient to set up the complete Docker-based
    Jenkins infrastructure. The key takeaway points from the chapter are as follows:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们介绍了Jenkins环境及其配置。我们所获得的知识足以设置完整的基于Docker的Jenkins基础设施。本章的关键要点如下：
- en: Jenkins is a general-purpose automation tool that can be used with any language
    or framework.
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins是一个通用的自动化工具，可以与任何语言或框架一起使用。
- en: Jenkins is highly extensible by plugins, which can be written or found on the
    internet.
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins通过插件具有很强的扩展性，这些插件可以自己编写，也可以在互联网上找到。
- en: Jenkins is written in Java, so it can be installed on any operating system.
    It's also officially delivered as a Docker image.
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins是用Java编写的，因此可以安装在任何操作系统上。它也以Docker镜像的形式正式提供。
- en: Jenkins can be scaled using the master-agent architecture. The master instances
    can be scaled horizontally or vertically, depending on an organization's needs.
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins可以通过主从架构进行扩展。主节点实例可以根据组织的需求进行水平或垂直扩展。
- en: Jenkins agents can be implemented with the use of Docker, which helps in automatic
    configuration and dynamic agent allocation.
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins代理可以通过Docker实现，这有助于自动配置和动态分配代理。
- en: Custom Docker images can be created for both the Jenkins master and Jenkins
    agent.
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以为Jenkins主节点和Jenkins代理创建自定义Docker镜像。
- en: Jenkins is highly configurable, and some aspects that should always be considered
    are security and backups.
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins是高度可配置的，应该始终考虑的一些方面包括安全性和备份。
- en: In the next chapter, we will focus on something that we already touched on with
    the Hello World example – pipelines. We will describe the idea behind and the
    method for building a complete continuous integration pipeline.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重点介绍我们已经在 Hello World 示例中触及过的内容——管道。我们将描述构建一个完整的持续集成管道的理念和方法。
- en: Exercises
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'You learned a lot about Jenkins configuration throughout this chapter. To consolidate
    your knowledge, we recommend the following exercises on preparing Jenkins images
    and testing the Jenkins environment:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学到了很多关于 Jenkins 配置的知识。为了巩固你的知识，我们推荐以下关于准备 Jenkins 镜像和测试 Jenkins 环境的练习：
- en: 'Create Jenkins master and agent Docker images and use them to run a Jenkins
    infrastructure capable of building Ruby projects:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Jenkins 主机和代理 Docker 镜像，并使用它们运行一个能够构建 Ruby 项目的 Jenkins 基础设施：
- en: Create the Jenkins master Dockerfile, which automatically installs the Docker
    plugin.
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Jenkins 主机 Dockerfile，该文件会自动安装 Docker 插件。
- en: Build the master image and run the Jenkins instance.
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建主机镜像并运行 Jenkins 实例。
- en: Create the agent Dockerfile (suitable for the dynamic agent provisioning), which
    installs the Ruby interpreter.
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建代理 Dockerfile（适用于动态代理配置），该文件安装 Ruby 解释器。
- en: Build the agent image.
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建代理镜像。
- en: Change the configuration in the Jenkins instance to use the agent image.
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改 Jenkins 实例的配置，使用代理镜像。
- en: 'Create a pipeline that runs a Ruby script printing `Hello World from Ruby`:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个管道，运行一个 Ruby 脚本，打印 `Hello World from Ruby`：
- en: Create a new pipeline.
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新管道。
- en: 'Use the following shell command to create the `hello.rb` script on the fly:'
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 shell 命令动态创建 `hello.rb` 脚本：
- en: '**sh "echo \"puts ''Hello World from Ruby''\" > hello.rb"**'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**sh "echo \"puts ''Hello World from Ruby''\" > hello.rb"**'
- en: Add the command to run `hello.rb`, using the Ruby interpreter.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加命令以使用 Ruby 解释器运行 `hello.rb`。
- en: Run the build and observe the console's output.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行构建并观察控制台输出。
- en: Questions
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To verify your knowledge from this chapter, please answer the following questions:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证你在本章中的知识，请回答以下问题：
- en: Is Jenkins provided in the form of a Docker image?
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 是否以 Docker 镜像的形式提供？
- en: What is the difference between a Jenkins master and a Jenkins agent (slave)?
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 主机和 Jenkins 代理（从属）有什么区别？
- en: What is the difference between vertical and horizontal scaling?
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垂直扩展和水平扩展有什么区别？
- en: What are the two main options for master-agent communication when starting a
    Jenkins agent?
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Jenkins 代理时，主机与代理之间的两种主要通信方式是什么？
- en: What is the difference between setting up a permanent agent and a permanent
    Docker agent?
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置永久代理和永久 Docker 代理有什么区别？
- en: When would you need to build a custom Docker image for a Jenkins agent?
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时需要为 Jenkins 代理构建自定义 Docker 镜像？
- en: When would you need to build a custom Docker image for a Jenkins master?
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时需要为 Jenkins 主机构建自定义 Docker 镜像？
- en: What is Jenkins Blue Ocean?
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Jenkins Blue Ocean？
- en: Further reading
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To read more about Jenkins, please refer to the following resources:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Jenkins 的信息，请参考以下资源：
- en: '*Jenkins Handbook*: [https://www.jenkins.io/doc/book/](https://www.jenkins.io/doc/book/)'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Jenkins 手册*：[https://www.jenkins.io/doc/book/](https://www.jenkins.io/doc/book/)'
- en: '*Jenkins Essentials*, *Mitesh Soni*: [https://www.packtpub.com/virtualization-and-cloud/jenkins-essentials-second-edition](https://www.packtpub.com/virtualization-and-cloud/jenkins-essentials-second-edition)'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Jenkins 基础知识*，*Mitesh Soni*：[https://www.packtpub.com/virtualization-and-cloud/jenkins-essentials-second-edition](https://www.packtpub.com/virtualization-and-cloud/jenkins-essentials-second-edition)'
- en: '*Jenkins: The Definitive Guide*, *John Ferguson Smart*: [https://www.oreilly.com/library/view/jenkins-the-definitive/9781449311155/](https://www.oreilly.com/library/view/jenkins-the-definitive/9781449311155/)'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Jenkins: The Definitive Guide*，*John Ferguson Smart*：[https://www.oreilly.com/library/view/jenkins-the-definitive/9781449311155/](https://www.oreilly.com/library/view/jenkins-the-definitive/9781449311155/)'
