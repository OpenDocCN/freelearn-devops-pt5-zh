- en: Monitoring and Optimizing Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application monitoring is the simple process of keeping track of various aspects
    of an application and how they are performing. It is very important for consistent
    quality checks and improvement, and it is important for finding out problems in
    an application before it gets to users.
  prefs: []
  type: TYPE_NORMAL
- en: Application monitoring will not only let us know the performance of an application
    and issues within it, but will also keep records of the status of its related
    databases and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll be discussing various methods for application monitoring.
    Here are the high-level topics that we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: API level monitoring and various tools for API monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the application with Test Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the application using Android monitoring tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API level monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Application Programming Interfaces** (**APIs**) are an integral part of today''s
    integrated development environments. They can also be understood through the client-server
    relationship, where the mobile app is the client requesting a resource and the
    API is at the server side and has a URL for any application that wants to make
    a request.'
  prefs: []
  type: TYPE_NORMAL
- en: Most applications share common APIs between web and mobile. APIs are a great
    way of providing consistent operating behavior across different platforms. It
    also helps share the same business and data layer operations between different
    mobile application platforms, so you can use the same APIs for iOS, Android, and
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: APIs are so important in the development of a mobile application that it becomes
    equally critical to monitor APIs to ensure high availability. If an API goes down,
    the entire application can stop working and the user might not be able to perform
    any operation that requires the API to be available, which usually is any server
    operation, though not offline.
  prefs: []
  type: TYPE_NORMAL
- en: Why API monitoring is critical
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: APIs are a very important part of any kind of app, be it a mobile or web application.
    APIs are used extensively in projects nowadays to provide more flexibility in
    the way the client (mobile app or web app) interacts with the server-side business
    logic and data access layers. Because applications are so dependent on APIs to
    perform operations for the user, it is critical to have API monitoring in place
    to avoid any kind of downtime or bad user experience. When proper API monitoring
    is not in place, it can compromise the quality of the application and response
    times, and sometimes even result in application downtime.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is very important to monitor APIs not only that you are developing,
    but also third-party ones that you might be using in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Important factors in API monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When monitoring APIs, there are some key points or areas that need to be covered
    to ensure availability:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API availability**: We need to make sure the API is available; sometimes
    the server might be down for some reason or the connection can be interrupted
    based on location and server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quality of response**: When we call an API, what is the quality of the response
    returned from the APIâ€”is it according to the agreement or not?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response time**: What is the response time to get a result when calling the
    API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developer's role in handling API unavailability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is also a good idea for an application developer to keep in mind that APIs
    might not be available some of the time, and write code in a way that handles
    these kinds of situations gracefully. Even when the application is not able to
    perform some API operations, if it informs the user in a nice way, it can help
    the user experience much more than facing runtime exceptions. Write code to handle
    API exceptions and scenarios where the API does not respond.
  prefs: []
  type: TYPE_NORMAL
- en: Various tools for API monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many tools available in the market for API monitoring and testing.
    What to choose totally depends on what you want to achieve through those tools.
    Some tools provide great support for performance monitoring, and other tools are
    better suited for quality testing and recognizing erroneous data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some popular tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Postman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karate DSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SoapUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HttpMaster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST Assured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RestSharp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mockbin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more about the benefits of, and support for, these tools on their
    respective sites and choose the tools best suited to the project's needs.
  prefs: []
  type: TYPE_NORMAL
- en: Using Test Cloud for monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You learned about Xamarin Test Cloud in previous chapters and how to use it
    for continuous testing in the continuous integration life cycle. Here, we will
    discuss in more detail how to use Xamarin Test Cloud and the analytics it provides
    after running an application on different sets of devices.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using two different applications here to see the monitoring analytics
    and compare them, to get a better understanding of how this helps us identify
    various performance and functionality-related issues in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the applications we will be using for the walkthrough:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PhoneCallApp** (the application we developed in previous chapters)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xamarin Store** (a sample Android application provided by Test Cloud)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xamarin Test Cloud can help us identify applications' functionality-related
    issues on real devices.
  prefs: []
  type: TYPE_NORMAL
- en: It is a great source of application monitoring in terms of testing on different
    mobile devices and with different versions of operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a detailed analysis of various applications' functions is very important
    to make sure our application is running as expected on our target devices.
  prefs: []
  type: TYPE_NORMAL
- en: With that being said, it is also critical to the application to be able to run
    on different operating system versions, and to analyze how it performs and how
    much memory usage it has.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of monitoring with Test Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test Cloud not only provides monitoring capabilities, but also relieves us from
    testing the same application's functionality on different devices manually, thus
    giving us a true continuous integration process.
  prefs: []
  type: TYPE_NORMAL
- en: It provides continuous testing capabilities to our CI process with automated
    test runs and detailed reports with notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing an application on different OS versions is critical to the success of
    a mobile application, and Test Cloud serves that purpose very well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing an application on different devices from its huge device list is available
    on the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Cloud analyzes the performance of applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Cloud analyzes memory usage on different devices with different hardware
    configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PhoneCallApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go through some steps to see how to monitor our PhoneCallApp:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://testcloud.xamarin.com/](https://testcloud.xamarin.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the PhoneCallApp icon to get to the details of the test runs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7af0ddef-9673-47aa-9ce5-b4f23efde184.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next page, you''ll see a list of tests run for the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d00e4410-6401-486a-90b9-7088ed53e33b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, because we have only run one test so far, Test Cloud does not provide us
    with the graphical metrics shown in the preceding screenshot. In other examples
    we'll see next, you'll be able to see a more detailed comparison of different
    test runs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the test run from the list to see its results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc91bc25-de3b-420a-9d21-10deb16c90c4.png)'
  prefs: []
  type: TYPE_IMG
- en: The test run listed is the one we ran earlier in previous chapters and uploaded
    from our machine to Xamarin Test Cloud using the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get an idea of this interface, let's have a look at different parts of Xamarin
    Test Cloud's interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, this is an overview screen that shows a summary of all the tests run for
    this application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3cb504b0-354c-4246-bc16-8d417ff58e2d.png)'
  prefs: []
  type: TYPE_IMG
- en: This screen shows summary details, such as how many tests failed from the total
    number of tests run, how many times the app ran on a device, how many devices
    these tests were run on, and much more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This screen is very useful to get a brief idea when you want to get a report
    on how your application is doing on different devices and OS versions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next thing you''ll see in the left pane is the list of UITests included
    in the test run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12f70ec9-801f-4316-9d10-4ac48ed63369.png)'
  prefs: []
  type: TYPE_IMG
- en: This screen basically has a list of all the Xamarin.UITests that you included
    in your project. You can click on these different tests to see their respective
    results on the right side of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's click on the test from the list in the preceding screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will take us to the next screen, which has detailed reports for the test
    run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ff71190-2f28-4bc3-9cf0-a868ec489fc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Have a close look at the left pane on this screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It gives us some steps of the test run on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These steps are only what we had written previously in the code to take a screenshot
    of every activity the test does.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The steps are as mentioned (we are using the screens of the test code written
    in previous chapters here):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**App started**: Take a screenshot when the app starts; this was written in
    the `BeforeEachTest()` method in the `Tests.cs` file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/40ffa47c-6c21-4365-b517-da845e3154f1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Call button pressed**: This step is when the Xamarin.UITest presses the call
    button to make a call:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3c471fbd-416e-4ebe-acee-b33bbb630929.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Failed step (the assert)**: This is the last step and is shown to provide
    proof of the failed step, so you can see the outcome that we received and compare
    it with what was expected. This was the final assert that decides whether the
    test passes or not, based on the outcome in the `Assert.IsTrue()` condition.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: You can click on each of these steps in the left pane and analyze the screenshots
    taken to see exactly what went on during the test. This is a great way to see
    exactly what went wrong when the test failed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, sometimes the screenshots are not enough to identify the issue. For a
    more detailed analysis, Test Cloud also provides us with Device Log, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0160c05a-790b-47bf-a920-b3ffacf242b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Device logs are a great way to see what's going on under the hood and get more
    detailed information about the application's behavior and how the device itself
    behaves when the application is run on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This can help pinpoint the issues when a test fails on the device; logs are
    always a savior in that sort of scenario.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Device Log and you can see step-by-step logs for each screenshot
    on the same screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8c9768c-b5fd-4e70-ab7b-7a8a1df6d81c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When a test fails, Test Cloud provides us with one more option, to see the
    Test Failures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbca5074-34c6-407d-b9ae-5cee3d2cef5a.png)'
  prefs: []
  type: TYPE_IMG
- en: It's very useful for automated test developers to see the exception information
    when a test fails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Last but not least, there is also a Test Log option, which can be used to get
    a consolidated log of the entire test run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6ec785d-bb9f-492a-a77d-0175e7665e62.png)'
  prefs: []
  type: TYPE_IMG
- en: Xamarin Store app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen different options provided by Test Cloud to monitor our
    application and its functionality using test runs, let's see how the dashboard
    and tests look when we have multiple test runs on various physical devices with
    different OS versions.
  prefs: []
  type: TYPE_NORMAL
- en: This will give us a better idea of how comparative monitoring can be done on
    Test Cloud to analyze an application's behavior on different devices, and compare
    them with one another.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Xamarin Store application is a sample application provided by Test Cloud
    on its platform to help understand the platform and get an idea of the dashboard.
    Let''s go through the steps to understand how to monitor your application running
    on multiple devices, and how to compare different test runs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Test Cloud home page, just like in the previous example, and click
    on the Xamarin Store icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c7e51c4c-3afe-45d6-9b8a-cb1b097bff93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, you''ll see a graphical representation of different test
    runs and brief information about how many tests failed of the total tests run,
    what the application size is, and its peak memory usage information during different
    test runs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2300f86f-8098-4308-917d-913c0efa42b1.png)'
  prefs: []
  type: TYPE_IMG
- en: This gives us a nice comparative look at how our application is performing on
    different test runs. It is possible that the application was performing fine during
    the first run, and then some code changes made some functionality fail. So, this
    graph is very useful to monitor a timeline of changes that affected application
    functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can further click on the graph or the test run to see an overview of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, this screen gives us a great view of how an application running on different
    devices can be monitored. It''s a very nice way to keep track of the application
    on different devices and OS versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a47bfb69-897c-4c4f-87cf-e5ab5384b745.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s click on one of the steps to see the results of the step on multiple
    devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2694589-ee52-4d21-8271-cc7a438848de.png)'
  prefs: []
  type: TYPE_IMG
- en: The red icon shows failed tests. This page shows all the devices you chose to
    run the test on; it shows all the devices the test passed on, and shows a red
    flag on failed devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can further click on each device to get device-specific screens and logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Android monitoring tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Android app''s performance is equally important for a great user experience
    and a fast-responsive application. **Android Device Monitor** (**ADM**) is a great
    tool to identify performance issues and build reports upon them, for profiling
    and to ensure good application performance when it comes to Android apps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Visual Studio, and from the toolbar, run Android Device Monitor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/529b04a9-ea50-46c7-8872-988ec04a5669.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A new application, Android Device Manager, should open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9bfebfd6-5c81-4645-9631-0fe6c5982901.png)'
  prefs: []
  type: TYPE_IMG
- en: Go back to Visual Studio and run PhoneCallApp to get the device listed in Android
    Device Monitor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can run the application on an emulator or a physical device connected to
    the computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the application has started, come back to Android Device Monitor and you
    should be able to see the device running in the left pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the device name, you should be able to see all the processes running on
    the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In that list, select your application and you should be able to see related
    info:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d1c48096-4716-4dac-8fb3-3bd1f2317637.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To monitor different threads running in your application, click on the Update
    Threads button on the left pane''s toolbar, and then you should be able to see
    different threads running by your application on the right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd279fb3-50ca-4d82-b302-22193d618aed.png)'
  prefs: []
  type: TYPE_IMG
- en: Being able to monitor threads run by your application can be very helpful in
    finding any unwanted background threads that might be causing extra battery usage
    or slowing down your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sometimes, a thread might get deadlocked and it is very difficult to identify
    issues in such scenarios. This feature of ADM helps in a big way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, monitoring the memory usage of your application is a great tool to
    optimize your app and support low-memory devices, and sometimes improve the performance
    by reducing memory consumption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Cause **garbage collection** (**GC**) from the toolbar in the left
    pane and then select Heap on the right side to see the heap memory allocation
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb3f2998-3930-48c0-a631-35a8ed557e5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can get more detailed allocation monitoring in the Allocation Tracker tab.
    Click on Start Tracking and then the Get Allocations button to get allocation
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38984534-077b-4c70-b88a-833ab204f6a7.png)'
  prefs: []
  type: TYPE_IMG
- en: There are also options to monitor network-related usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A very important feature of Android Device Monitor is profiling, which helps
    in profiling time taken and other details, based on methods in your application
    code. It is a great tool to identify method-level performance and latency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To use this feature, click on the Start Method Profiling button on the toolbar
    in the left pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b18866c-bc47-4d38-a927-33e9ed0df9b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the next step, select whether you want Sample based profiling or Trace
    based profiling and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f31cd02-a59d-4aa3-8c2f-01076a648e1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Do your tasks on the application, come back to ADM, and click on the Stop Method
    Profiling button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A trace file is generated, containing the trace information you want to analyze:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A timeline panel**: It describes when each thread and method started and
    stopped. We can go to a specific timespan and check what each thread did at that
    moment.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A profile panel**: This provides a summary of what happened inside a method.
    We can see which one took the most CPU time, or how many calls it made.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/894fe773-bc48-4e9c-91e4-4eb34a08a49c.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods are at the Android level, and you might need to compare to see which
    method might have called these Android methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about different types of monitoring techniques,
    such as API monitoring, performance monitoring, and functional monitoring. We
    also discussed different tools for API level monitoring. We learned in detail
    about functional monitoring on multiple devices using Xamarin Test Cloud and performance
    monitoring using Android Device Monitor. In the next chapter, we'll discuss debugging
    and troubleshooting during different phases of development.
  prefs: []
  type: TYPE_NORMAL
