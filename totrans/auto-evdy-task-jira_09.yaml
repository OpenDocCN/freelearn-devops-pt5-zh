- en: '*Chapter 6*: Automating Jira Service Management'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, Jira Service Management is used by many organizations to provide customer
    support portals, **human resources** (**HR**) services, and **information technology**
    (**IT**) service desks, among others.
  prefs: []
  type: TYPE_NORMAL
- en: The most common use case for Jira Service Management, however, is as an **IT
    Service Management** (**ITSM**) solution to enable the efficient provision of
    IT services within an organization.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best ways to improve efficiency and drive down the cost per ticket
    in an IT service desk request is to automate mundane tasks and processes wherever
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the most common tasks wherein automation provides immediate benefits
    are the categorization and routing of tickets, keeping customers updated as to
    the status of their requests, maintaining **service-level agreement** (**SLA**)
    compliance, freeing up support staff from repetitive tasks, and closing out older
    requests to ensure they are not clogging up your request queues.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Processing incoming requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring SLA compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating common and repetitive tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a better understanding of how you
    can use automation rules in Jira Service Management to improve the efficiency
    of your service desks. In addition, reducing the amount of human intervention
    necessary to complete common tasks will also reduce the cost per ticket of service
    desk requests.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira Cloud environment**: If you don''t already have access to Jira, you
    can create a free Jira Cloud account at [https://www.atlassian.com/software/jira/free](https://www.atlassian.com/software/jira/free)
    and ensure that you have both **Jira Software** and **Jira Service Management**
    selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jira Server environment**: If you are using Jira Server (available from [https://www.atlassian.com/software/jira/download](https://www.atlassian.com/software/jira/download)),
    ensure you have licenses for both Jira Software and Jira Service Management. In
    addition, you will also need to ensure that you install the *Automation for Jira*
    app available from the Atlassian Marketplace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Azure Active Directory (Azure AD)**: Azure AD is Microsoft''s cloud-based
    identity service. You can sign up for a free Azure account at [https://azure.microsoft.com/free](https://azure.microsoft.com/free).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both instances, you will need to have at least **Project Administrator**
    access to a Service Management project and a Scrum Software project to be able
    to follow the examples in this chapter. For the examples in this chapter, we have
    used the *IT Service project template* to create the Service Management project
    and the *Scrum Software project template* to create the software project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the latest code samples for this chapter from this book''s
    official GitHub repository at [https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira](https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira).
    Please visit the following link to check the CiA videos: [https://bit.ly/2NhMFp9](https://bit.ly/2NhMFp9)'
  prefs: []
  type: TYPE_NORMAL
- en: Processing incoming requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the more time-consuming tasks in a service desk is the categorization
    and routing of incoming requests to the correct teams.
  prefs: []
  type: TYPE_NORMAL
- en: Having a mature service request catalog and using this as a basis to create
    relevant request types in the Jira Service Management portal solves the initial
    categorization issue when customers create requests; however, in many organizations
    requests are still received via email, and these generally require human intervention
    to categorize and route to the relevant team.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at automation rules to automatically triage incoming
    requests and then route them to the correct teams for processing.
  prefs: []
  type: TYPE_NORMAL
- en: In our first example, we will look at how we can use automation rules to triage
    requests originating from incoming emails.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to triage email requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the benefits of having a well-structured customer portal is that you
    can make use of your organization's service request catalog to drive the correct
    selection of service requests using request types, and at the same time using
    pre-selected components in each service request to narrow down the categorization
    of the request.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: To pre-define a value for any field in a request type, add that field to the
    request form as a hidden field. Doing this will force you to supply the field
    with a default value that you can then rely on in later automations.
  prefs: []
  type: TYPE_NORMAL
- en: This approach ensures that tickets reaching your service desk queues have already
    been categorized with the correct components, which we can use to drive the automations.
  prefs: []
  type: TYPE_NORMAL
- en: However, email requests are still widely used to create service desk requests,
    and these typically end up in a service queue that requires human intervention
    to triage and correctly categorize.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we'll use an automation rule to triage and categorize incoming
    emails with the correct components based on the presence of specific keywords
    in the email. To keep things simple, we'll only examine the issue summary, which
    is set from the email subject.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the rule, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Service Management project, navigate to **Project settings**, click
    on the **Automation** link in the **Project Settings** menu, and then click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Issue created** trigger and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select `Request Type`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Emailed request`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, select `Summary`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`contains`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`vpn`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select `Components` field from the `VPN Server` component and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Summary`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`contains`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`password`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, select `Components` field from the `Active Directory` component and click
    **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The rule should now look similar to the one shown in the following screenshot:![Figure
    6.1 – Triaging incoming email requests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.1.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.1 – Triaging incoming email requests
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You could continue to add else-if blocks for as many components as you need;
    however, for this example, we'll stop here and name the rule `Triage email requests`,
    and then click **Turn it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've learned how to categorize incoming requests that we've received
    via email, let's see how we can extend this to route and assign requests to the
    correct teams.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to automatically route requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using automation rules to automatically categorize incoming requests will help
    shorten the response time for ticket handling. However, we can take this one step
    further and automatically route and assign the request to the correct team, further
    shortening the response and resolution times.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are going to make use of the ability to pre-define components
    for each request type and use these to assign incoming requests to the correct
    team. In addition, we will ensure that the automatic categorization rule we created
    previously can feed into this rule.
  prefs: []
  type: TYPE_NORMAL
- en: We will be referring to the *Network Team* and *System Administrator Team* user
    groups, so you will need to create these user groups in your instance for this
    rule to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with the rule, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Service Management project, navigate to **Project settings**, click
    on the **Automation** link in the **Project Settings** menu, and then click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Issue Created` and `Issue Updated`, then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select `Components`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`contains any of`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`VPN Server`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, select `User in a group`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Balanced workload`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Network Team`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on `Components`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`contains any of`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Active Directory`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on `Summary`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`does not contain`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`password`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, select `User in a group`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Balanced workload`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`System Administrator Team`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can continue to add further Else-If blocks to route more requests; however,
    for this example, we'll only create these two conditions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we save this rule, we need to ensure that it can be triggered by the
    rule that categorizes incoming emails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Route incoming requests`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Allow rule trigger**: Ensure the checkbox is selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should now look similar to the one shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Routing incoming requests'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.2.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.2 – Routing incoming requests
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click **Save** and then click **Turn it on** to save and enable the
    rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have learned how to use automation rules to process incoming
    requests to Jira Service Management by firstly categorizing them where appropriate,
    and then routing them to the correct teams for resolution.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how to use automation rules to monitor
    SLA compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring SLA compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SLAs are important metrics that are set to ensure that IT services are delivered
    within an agreed time period with respect to their priority and nature.
  prefs: []
  type: TYPE_NORMAL
- en: To maintain the agreed SLA compliance ratio of requests, we need to ensure that
    where possible, their priority is automatically increased when they are about
    to breach their SLA so that they gain a higher chance of their SLAs being met.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this should be accompanied by appropriate notifications to the
    assigned agent, the service desk team, and the service desk manager, allowing
    for the appropriate response should the agent not be able to deliver a resolution
    with the SLA.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at how to use automation rules to keep abreast
    of SLAs and how to manage requests when these are breached.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at an example by creating a rule to monitor the *Time to first response*
    SLA and notify the appropriate persons as applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to monitor SLA breaches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To maintain the SLA success rate, we want to avoid requests breaching their
    SLAs in the first instance.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are going to monitor the *Time to first response* SLA for
    high-priority requests and either notify a Slack channel if the request is unassigned
    or send a message to the assigned agent if the request has been automatically
    assigned. In addition, we will also send a notification to the service desk manager
    to alert them of the fact that the SLA is about to be breached so that they can
    take the appropriate action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with the rule, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Service Management project, navigate to **Project settings**, click
    on the **Automation** link in the **Project Settings** menu, and then click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Time to first response`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`will breach in the next 30 minutes`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, select `Priority`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`is one of`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Highest`, `High`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The service desk manager needs to be notified irrespective of whether we send
    a general Slack notification or notify the request's assignee, so we'll send this
    notification first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Manager`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{issue.key}} is about to breach its SLA`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`An unassigned high-priority issue, {{issue.key}} - {{issue.summary}} is about
    to breach its "Time to first response" SLA in 30 minutes.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`A notification has also been sent to the #service-desk Slack channel.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Regards,`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Your friendly SLA bot.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, select `Assignee`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`is empty`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, select `:fire: <{{issue.toUrl}}|{{issue.key}} - {{issue.summary}}> is
    currently unassigned and will breach its ''Time to first response'' SLA in 30
    minutes.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`#service-desk`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, click **Add else** in the rule-chain view on the left, and then click
    **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Assignee`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{{issue.key}} is about to breach its Time to first response SLA`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Hi {{issue.assignee.displayName.split(" ").first}},` `You have been assigned
    {{issue.key}} - {{issue.summary}} which is about to breach its Time to first response
    SLA in 30 minutes.` `Please take appropriate action to ensure we meet our SLA
    targets.` `Thanks,` `Your friendly SLA bot.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that you have configured the **Send email** action, your rule should look
    similar to the one shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Monitoring SLA breaches'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.3.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.3 – Monitoring SLA breaches
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name your rule `Time to first response monitor` and click **Turn it
    on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we learned how to monitor requests whose SLAs are about breach
    or that have already breached, and how to automatically prioritize and escalate
    these requests.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how to improve service desk efficiency by automating common
    and repetitive tasks using automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: Automating common and repetitive tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of requests received daily by IT service desks that are repetitive
    and mundane, and that are prime candidates for automation.
  prefs: []
  type: TYPE_NORMAL
- en: By automating tasks, not only are you reducing the need for human intervention
    and potential errors during the completion of these tasks, but you are also enabling
    increased productivity for the end user by reducing the time taken to fulfill
    their request.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will take a look at using automation to handle password
    resets, which is quite possibly one of the most common requests handled by service
    desks.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at an automation rule that will automatically reset a user password
    when the user raises a password reset request in the service desk.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to automatically reset passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Probably one of the more frequent and time-consuming tasks faced by IT service
    desks is the request to reset a user's password, making it a prime candidate for
    automation.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate how we could achieve this with automation rules in Jira Service
    Management, we are going to make use of **Microsoft's Azure AD** service, which
    has a well-defined **REpresentational State Transfer** **application programming
    interface** (**REST API**).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We are going to assume that the only common information between users in Jira
    Cloud (or Jira Server) and Azure AD are the users' email addresses, as Jira Cloud
    does not allow access to user account names.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, we first need to ensure that Jira is registered as an app with Azure
    AD and has the appropriate permissions assigned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by completing the configuration we require in Azure AD, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Azure Active Directory** component in your Azure portal and
    select **App registrations**, and then click on **New registration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your new app `Service Desk Autobot` and click **Register**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now be presented with a screen similar to the one shown in the following
    screenshot. You will need to copy the **Application (client) ID (1)** and **Directory
    (tenant) ID (2)** IDs to use later in our rule:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Registering Jira as an app with Azure AD'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.4.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.4 – Registering Jira as an app with Azure AD
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step is to create a client secret that we can use to authenticate with
    from our automation rule. To do this, navigate to **Certificates & secrets** in
    the menu and click on **New client secret** in the **Client secrets** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an optional description and select the length of time you want this secret
    to be valid for, and click **Add**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your screen should now look similar to the one shown in the following screenshot.
    Copy the newly added **client secret (1)** ID to a safe place for use later in
    our automation rule:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Creating a client secret in Azure AD for Jira'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.5.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.5 – Creating a client secret in Azure AD for Jira
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We now need to give our new app the correct permissions in order to be able
    to reset passwords in Azure AD.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **API permissions** menu item and then click **Add a permission**.
    Then, select **Microsoft Graph**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select `Directory`, and check the **Directory.ReadWrite.All** permission.
    Finally, click **Add permissions**, as shown in the following screenshot:![Figure
    6.6 – Adding the correct Azure AD permissions for Jira
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.6.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.6 – Adding the correct Azure AD permissions for Jira
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To simplify the interaction with our automation rule, we want to pre-authorize
    the permissions we just granted, so click on `<tenant>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The status for both **Microsoft Graph** API permissions should now have a green
    check next to them indicating they have been granted **Admin** consent, as can
    be seen in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Granting Admin consent to the API permissions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.7.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.7 – Granting Admin consent to the API permissions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final step in the Azure portal is to grant the **Company Administrator**
    role to your app. To do this, click on the Cloud Shell icon immediately to the
    right of the search bar and copy the following commands to the PowerShell terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your screen should now look similar to the one shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Granting the Company Administrator role to Jira'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – Granting the Company Administrator role to Jira
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have configured our app in Azure AD and you have a couple of users
    configured with email addresses that match their Jira email addresses, we can
    create our automation rule to automatically reset user passwords when a request
    is received in Jira Service Management. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Service Management project, navigate to **Project settings**, click
    on the **Automation** link in the **Project Settings** menu, and then click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Issue Created` and `Issue Updated`, then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select `Components`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`contains any of`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Active Directory`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select `Summary`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`contains`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`password`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we'll use the [https://www.passwordrandom.com](https://www.passwordrandom.com)
    external web service to generate a random, temporary password for the user, so
    we'll select `GET`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Empty`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Wait for response**: Ensure this is selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you validate your webhook configuration, you should receive a response,
    similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Save** to move on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next step, we need to log in to Microsoft Azure and retrieve an authentication
    token. To complete this step, we will need the `resource`, `client_id`, `client_secret`,
    and `grant_type`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To URL-encode the data, the field and the value are separated by `=` and each
    field-value pair is then separated using `&`; and finally, the entire text string
    needs to be URL-encoded, which you can do by pasting the complete string into
    a service such as [https://www.urlencoder.org](https://www.urlencoder.org).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select `https://login.windows.net/<Directory (tenant) ID>/oauth2/token`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Content-Type`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`application/x-www-form-urlencoded`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`POST`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Custom data`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<Application (client) ID>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<Client secret>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`client_credentials`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At this point, your rule should look similar to the one shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Configuring the login web request to Azure AD'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.9.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.9 – Configuring the login web request to Azure AD
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A successful login request to Microsoft Azure will return the `token_type`
    and `access_token` you will need to complete the password reset request in the
    following `{{webhookResponse.body.token_type}}` and `{{webhookResponse.body.access_token}}`
    smart values respectively, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have successfully logged in to Microsoft Azure, we can use the authentication
    response and the reporter's email address to look up the ID of the user in the
    Azure AD. To do this, we need to select `https://graph.microsoft.com/v1.0/users?$filter=startsWith(mail,'{{reporter.emailAddress.urlEncode}}')`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Authorization`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{webhookResponses.get(1).body.token_type}} {{webhookResponses.get(1).body.access_token}}`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`GET`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Empty`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{webhookResponse.body.value.id}}` smart value, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When receiving responses multiple web requests in an automation rule, each response
    is added to the `{{webhookResponses}}` smart value list in the order it was called
    in the rule, starting at position zero (`0`). We can therefore use the smart value
    list functions to retrieve the individual webhook responses when we need to reference
    them later in the rule. For example, `{{webhookResponses.get(1).body}}` will retrieve
    the JSON response from the *second* web request, while `{{webhookResponses.first.body}}`
    will retrieve the response from the first request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have our authentication data, the ID of the user in Azure AD, and
    a temporary password from our first web request, we can combine these to actually
    perform the password reset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `https://graph.microsoft.com/v1.0/users/{{webhookResponse.body.value.id}}`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First `Authorization`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{webhookResponses.get(1).body.token_type}} {{webhookResponses.get(1).body.access_token}}`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Second `Content-Type`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`application/json`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`POST`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Custom data`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Custom data**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Wait for response**: Ensure this option is selected so that we only continue
    with the rule if the response is successful.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The custom data in this example makes use of the Azure AD password profile structure
    of the user REST API defined in Microsoft's Graph API, available at [https://docs.microsoft.com/en-us/graph/api/resources/passwordprofile?view=graph-rest-1.0](https://docs.microsoft.com/en-us/graph/api/resources/passwordprofile?view=graph-rest-1.0).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should look similar to the one shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Configuring the reset password request'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_6.10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.10 – Configuring the reset password request
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To complete the rule, we need to inform the user that their password has been
    reset, as well as what the new temporary password is for them to be able sign
    in again and change the password to one of their choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Reporter`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Your request to reset your password has been completed.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Dear {{issue.reporter.displayName.split(" ").first}},`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Your request to reset your password has been completed.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`The new temporary password which has been generated for you is:`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{webhookResponses.first.body.char}}`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`You will be prompted to change this when you next log in.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Thank you,`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`The Service Desk Team.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, select `Password reset bot`, and ensure the **Allow rule trigger**
    checkbox is selected. Click **Save** and then click **Turn it on** to enable the
    rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have learned how we can use automation rules to automate
    common and repetitive tasks faced by service desk teams by looking at one of the
    most common repetitive tasks—namely, resetting passwords.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, using automation rules to automate these types of repetitive
    and time-consuming tasks will lead to improved overall efficiency of your service
    desk, reducing the cost per ticket and also improving end-user satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how adding automations to Jira Service Management
    can improve the efficiency of your IT service desks, reducing the cost per ticket
    and improving overall user satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how categorizing and processing incoming requests early in the request
    life cycle can increase the response and resolution times of requests as human
    intervention is no longer required for triage, and we now understand how monitoring
    SLA compliance with appropriate escalations can help to stay on top of important
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how using automation bots to perform common and repetitive
    tasks such as resetting a user's password can drastically improve both the time
    to resolve a request and the end user's productivity, as they no longer have to
    wait for a service agent to manually perform the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: By using the skills learned in this chapter and applying them to more processes
    within your service desk, you will not only enable your service agents to focus
    on more meaningful and urgent tasks but will also improve overall user satisfaction
    with IT services throughout the organization.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how we can use automations to effectively
    manage Jira Software projects.
  prefs: []
  type: TYPE_NORMAL
