- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with Simple Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you start your automation journey, start with simple use cases instead
    of automating complex workflows. Find three small use cases that you can use to
    learn automation faster and implement it in your environment. Ansible has a smooth
    learning curve but it is also important to choose the right use cases for your
    first automation project. Three great examples for initial use cases for automation
    are simple tasks such as application deployment, asset information collection,
    and simple file manipulation such as copy operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying manual tasks to be automated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the Ansible modules to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring your text editor for Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to remote nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will start by creating basic automation tasks by finding suitable modules
    before learning how to use credentials and other parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine for the Ansible control node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more Linux machines with Red Hat repositories configured (if you are
    using other Linux operating systems instead of **Red Hat Enterprise Linux** (**RHEL**),
    then make sure you have the appropriate repositories configured to get packages
    and updates)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible code and the Ansible playbooks, commands, and snippets for this
    chapter can be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-02](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-02).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying manual tasks to be automated
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to use Ansible ad hoc commands to manually
    execute tasks on remotely managed nodes using Ansible modules. Now, you will learn
    how to start with simple Ansible playbooks and tasks. Remember, you need to add
    your managed node details to your inventory file before you can execute any Ansible
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with a simple automation job to understand the basics of the Ansible
    playbook. For this example, we are assuming you have installed and configured
    the `chronyd` application. The `chrony` application is an implementation of the
    `chronyd` is the default NTP client and server in Red Hat Enterprise Linux 8 and
    SUSE Linux Enterprise Server 15 and is available in many Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example Ansible playbook, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the `chrony` package on all nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the `chrony` configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `chronyd` service and enable it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram shows the Ansible to `node1` connection for deploying
    and configuring the `chrony` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Configurations for Ansible to automate chrony ](img/B18383_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Configurations for Ansible to automate chrony
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create Ansible artifacts for the `chronyd` installation,
    including `ansible.cfg`, `hosts`, and the Ansible playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new directory called `Chapter-02` and create the `ansible.cfg`
    file inside the directory, as you did in the previous chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Ansible configuration file (ansible.cfg) ](img/B18383_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Ansible configuration file (ansible.cfg)
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create the `hosts` file in the same directory as the `node1` managed
    node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Ansible inventory file with node1 ](img/B18383_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Ansible inventory file with node1
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a playbook file called `install-package.yaml` in the same directory
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Ansible playbook for installing chrony ](img/B18383_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Ansible playbook for installing chrony
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding playbook, you only have one *play* called `Install Chrony
    Package` and only one task called `Ensure Chronry package is installed`. Also,
    note the `hosts: node1` line as you are installing the package on your managed
    node – that is, `node1`.'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Fully Qualified Collection Name (FQCN)
  prefs: []
  type: TYPE_NORMAL
- en: 'As we learned in [*Chapter 1*](B18383_01.xhtml#_idTextAnchor014), *Ansible
    Automation – Introduction,* in the *Ansible Content Collections* *section*, many
    plugins and modules were moved to content collections in Ansible 2.10\. The playbooks
    will work without any issues but it is best practice to use `ansible.builtin.dnf`
    is an FQCN in which `dnf` is the module name and part of `ansible-core`. As another
    example, there’s `google.cloud.gcp_compute_disk`, where `google` is the author
    of the collection, `cloud` is the collection name, and `gcp_compute_disk` is the
    module name to create a Google Cloud disk. Read more about collections here: [https://docs.ansible.com/ansible/latest/user_guide/collections_using.xhtml](https://docs.ansible.com/ansible/latest/user_guide/collections_using.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook using the `ansible-playbook` command; you will see the
    following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The chrony package installation playbook ](img/B18383_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – The chrony package installation playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'With that, the playbook has been executed successfully. The following screenshot
    shows the success status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The chrony package installation message ](img/B18383_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – The chrony package installation message
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, log in to the target machine, `node1`, and verify the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – The chrony package installed on node1 ](img/B18383_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – The chrony package installed on node1
  prefs: []
  type: TYPE_NORMAL
- en: Now, you need to create a `chrony` configuration that you can use for all of
    your servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Chapter-02/chrony.conf.sample` file in the same directory (`Chapter-02`).
    Add more details to the `chrony` configuration as per your organization’s standards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Sample chrony configuration ](img/B18383_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Sample chrony configuration
  prefs: []
  type: TYPE_NORMAL
- en: Add a task called `Copy chrony configuration to node` to the playbook to copy
    the sample `chrony` configuration to the node using the `template` module. Then,
    start the `chronyd` service using the `service` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The completed playbook will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Playbook for installing and configuring chrony ](img/B18383_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Playbook for installing and configuring chrony
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook again and verify it, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Expanded playbook with chrony configuration ](img/B18383_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Expanded playbook with chrony configuration
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the status of the `Ensure chrony package is installed`
    task is `ok`. This means that the desired state has already been reached and that
    you do not need to install the `chrony` package again. Therefore, Ansible will
    not take any action for that task.
  prefs: []
  type: TYPE_NORMAL
- en: In Ansible, this feature is called **idempotency**, which means that if the
    result of performing an action is the same as the current state, then no further
    action is required for that task. Most of the Ansible modules are idempotent,
    which will help you run the same playbook multiple times on managed nodes, without
    any impact ([https://docs.ansible.com/ansible/latest/reference_appendices/glossary.xhtml#term-Idempotency](https://docs.ansible.com/ansible/latest/reference_appendices/glossary.xhtml#term-Idempotency)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, verify the details on the target node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – The chrony configuration and service status on node1 ](img/B18383_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – The chrony configuration and service status on node1
  prefs: []
  type: TYPE_NORMAL
- en: The preceding playbook can be used to automate your `chrony` configuration for
    thousands of servers and it will only take a few minutes to complete the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Module References
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following documentation for the modules you have used in the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dnf_module.xhtml](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dnf_module.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.xhtml](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_module.xhtml](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_module.xhtml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the Ansible modules to use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to find suitable modules and documentation
    to use inside the Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the available modules and details using the `ansible-doc` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Ansible module list ](img/B18383_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Ansible module list
  prefs: []
  type: TYPE_NORMAL
- en: 'It will be a long or short list, depending on your type of Ansible installation.
    (Recall the difference between `ansible`, `ansible-base`, and `ansible-core`,
    which was explained in the previous chapter.) You can check the total module count
    that’s available as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the module details by calling the module name with the `-s` (`--snippet`)
    argument, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Ansible module snippet for the dnf module ](img/B18383_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Ansible module snippet for the dnf module
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, Check the full details of the module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Ansible module details for the dnf module ](img/B18383_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Ansible module details for the dnf module
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding output shows the example usages and all the arguments for the
    module. This is like an offline copy of the module documentation. If you want
    to search for a specific module interactively inside the module list, execute
    the `ansible-doc -l` command, then press the */* key and type the module’s name
    to search, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Searching for the module in ansible-doc ](img/B18383_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Searching for the module in ansible-doc
  prefs: []
  type: TYPE_NORMAL
- en: 'When you hit the *Enter* key, the searched item will be highlighted if available.
    This can be seen in the following screenshot. Press the *N* key to find the next
    item with the same text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Finding modules in the ansible-doc list ](img/B18383_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Finding modules in the ansible-doc list
  prefs: []
  type: TYPE_NORMAL
- en: Use `ansible-doc` to list all the other plugins, including the `connection`
    plugins, `become` plugins, `lookup`, `filters`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the available `become` plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Ansible become plugins ](img/B18383_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Ansible become plugins
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the available `connection` plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Ansible connection plugins ](img/B18383_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Ansible connection plugins
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned how to use the `ansible-doc` command to find the
    necessary modules and module documentation. Next, you will learn how to configure
    your text editor for editing Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your text editor for Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since **YAML** is highly sensitive to indentation, you need to take extra care
    while developing and editing playbooks using your text editor. You can use any
    text editor of your choice to edit Ansible playbooks and configure the editor
    as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you can use a GUI editor such as Visual Studio Code or Atom, skip this section
    as GUI editors can easily be configured with multiple plugins to perform Ansible
    content development more efficiently. Please refer to [https://docs.ansible.com/ansible/latest/community/other_tools_and_programs.xhtml](https://docs.ansible.com/ansible/latest/community/other_tools_and_programs.xhtml)
    to find details about tools and programs for Ansible content development. Now,
    let’s learn how to configure the **Vim** editor for Ansible YAML files. Use Vim
    variables to enable or disable the features in the Vim editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, press *Esc* followed by *:* and type `set nu` to enable line numbers,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Configuring the Vim editor with line numbers ](img/B18383_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Configuring the Vim editor with line numbers
  prefs: []
  type: TYPE_NORMAL
- en: You will see the line numbers visible on the left-hand side of your editor.
    But when you close the Vim editor session and reopen it, all these variables will
    be reset. Instead of enabling the features one by one, you can configure these
    Vim variables in a file called `.vimrc` under your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `~/.vimrc` file and add the following content to configure Vim for
    YAML files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Configuring the ~/.vimrc file ](img/B18383_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Configuring the ~/.vimrc file
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists some of the available Vim variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 2.1 – List of Vim variables ](img/B18383_02_Table1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Table 2.1 – List of Vim variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed the `~/.vimrc` file, check the Vim editor by editing
    any YAML files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see line numbers and other syntax highlighted. Try to edit the file;
    the indentation will be created automatically when you edit lines. You can still
    use *Tab* as Vim will replace *Tab* with two spaces based on your `vimrc` configuration.
    The following screenshot shows a sample Vim editor screen after enabling the `vimrc`
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – The Vim editor configured for YAML files ](img/B18383_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – The Vim editor configured for YAML files
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to *Setup Your Vim editor for Ansible Playbook* at [https://www.techbeatly.com/setup-your-vim-editor-for-ansible-playbook/](https://www.techbeatly.com/setup-your-vim-editor-for-ansible-playbook/)
    to learn more about Vim editor configuration for YAML.
  prefs: []
  type: TYPE_NORMAL
- en: What is Vim editor?
  prefs: []
  type: TYPE_NORMAL
- en: Vim is a well-known text editor available for Linux platforms. The Vim editor
    is highly configurable and useful for developing and editing any complex files
    in Linux. Refer to [https://www.vim.org](https://www.vim.org) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to remote nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is the best practice to use dynamic inventories to avoid frequent changes
    in static inventory files. However, this depends on your environment. It is also
    a best practice to separate inventory files based on environment, criticality,
    or other parameters. The following screenshot shows sample inventory files based
    on the workload environment. As you can see, there are different directories and
    files for production, development, and staging devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Ansible inventory separation based on environment ](img/B18383_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Ansible inventory separation based on environment
  prefs: []
  type: TYPE_NORMAL
- en: You need to ensure that the Ansible control node to managed nodes connection
    is safe and secure. For Linux/Unix managed nodes, use the `ssh` connection (which
    is the default connection method) with key-based authentication, as explained
    in [*Chapter 1*](B18383_01.xhtml#_idTextAnchor014)*'s*, *Configuring Your Managed
    Nodes* section. There might be cases where you cannot use SSH keys. In that case,
    you can use encrypted passwords with a username for authentication; this will
    be explained in [*Chapter 13*](B18383_13.xhtml#_idTextAnchor241), *Using Ansible
    for Secret Management*.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows machines, use the `WinRM` protocol, which Ansible can use to connect
    to and execute tasks on Windows machines. However, you need to configure a few
    items on the Windows machine, such as enabling a WinRM listener, opening the port
    for WinRM, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'View the `WinRM` connection plugin using the `ansible-doc` command, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Ansible WinRM connection plugin ](img/B18383_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Ansible WinRM connection plugin
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to configure the connection method for the managed host
    in your inventory or playbook. You can also do this while executing the playbook.
    The following screenshot shows the `ansible_connection=winrm` method for the `win2019`
    inventory group. All the hosts under that group will use `winrm` as the connection
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – WinRM configured in the Ansible inventory ](img/B18383_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – WinRM configured in the Ansible inventory
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also mention the connection type in your Ansible playbook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25 – WinRM configured in the Ansible playbook ](img/B18383_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – WinRM configured in the Ansible playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to dynamically provide the connection method, pass this information
    while executing the `ansible-playbook` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Passing the WinRM connection while executing the Ansible playbook
    ](img/B18383_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – Passing the WinRM connection while executing the Ansible playbook
  prefs: []
  type: TYPE_NORMAL
- en: For network and firewall devices, use the supported connection protocols based
    on the device’s type and compatibility. You will learn more about this in [*Chapter
    6*](B18383_06.xhtml#_idTextAnchor105), *Automating Microsoft Windows and Network
    Devices.*
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the Ansible connection plugin documentation at [https://docs.ansible.com/ansible/latest/plugins/connection.xhtml](https://docs.ansible.com/ansible/latest/plugins/connection.xhtml)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to develop a simple playbook to automate the
    `chrony` package’s deployment and service management. You learned how to use the
    `ansible-doc` command to find the modules and details, including module examples
    and arguments to use. You also explored how to use the `ansible-doc` command to
    find the connection plugins and become plugins. After that, you learned how to
    configure your Vim editor to edit Ansible YAML files easily. Finally, you learned
    how to configure managed node connection methods.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to automate your daily tasks using Ansible,
    develop real use cases, and apply them to your workplace.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on the topics covered in this chapter, please visit the
    following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Tools and programs for Ansible*: [https://docs.ansible.com/ansible/latest/community/other_tools_and_programs.xhtml](https://docs.ansible.com/ansible/latest/community/other_tools_and_programs.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible idempotency*: [https://docs.ansible.com/ansible/latest/reference_appendices/glossary.xhtml#term-Idempotency](https://docs.ansible.com/ansible/latest/reference_appendices/glossary.xhtml#term-Idempotency)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible Automation for Windows*: [https://www.techbeatly.com/ansible-windows/](https://www.techbeatly.com/ansible-windows/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to Ansible modules*: [https://docs.ansible.com/ansible/latest/user_guide/modules_intro.xhtml](https://docs.ansible.com/ansible/latest/user_guide/modules_intro.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible connection plugins*: [https://docs.ansible.com/ansible/latest/plugins/connection.xhtml](https://docs.ansible.com/ansible/latest/plugins/connection.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
