- en: Azure Storage, Backup, and Site Recovery - Moving your Data to Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on migrating data to Azure. We'll start with
    Azure Storage as one of the most important services in Azure. Everything begins
    with Storage and it's important to understand how it's used. We'll discuss how
    to use Azure Storage for backup and how to migrate your workloads to the cloud.
    Further, we'll discuss how to use Azure Backup and **Azure Site Recovery** (**ASR**)
    to speed up your journey and migrate data to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Site Recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating highly available Azure SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating SQL Server high availability solutions can be complicated, hard to
    configure, and even harder to maintain and manage. Azure SQL Database high availability
    is much easier to create and requires almost no maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The option we need to start with is Geo-Replication. The geo-replication blade
    shows the world map with marks showing data centers in which databases are currently
    located and all data centers available for replication. The current data center,
    in which the database is located, is marked in blue. The data center recommended
    for replication is marked in purple (this will be the data center closest to the
    current data center) and all other available data centers are marked green. On
    the map, you can see information about the current database that will be our primary
    database. An image of a geo-replication blade is shown in following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c93ac8ca-fe2c-4f7c-8af5-551e6693a9ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a new database replica, we can select any data center on the map
    to start a new blade. The Create secondary blade will open, in which we need to
    provide a target SQL Server (create a new server if it doesn''t exist in location
    selected). The Database name will be the same as the original one, and the database the
    will be in read-only mode. The Pricing tier will be same as the original, but
    you can change the tier to another value. An example of the settings needed to
    create a secondary database is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/340f7479-a3f4-4806-a6a2-a16c9269642c.png)'
  prefs: []
  type: TYPE_IMG
- en: After deployment is finished, the map will change, showing the connection between the
    primary and secondary database. Deployment time depends on the database size.
  prefs: []
  type: TYPE_NORMAL
- en: 'During deployment, the empty database is created in the secondary data center,
    and then the data is copied from primary to secondary. A map with the replication
    in place is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60a73975-f797-4724-ad58-aa8afd933587.png)'
  prefs: []
  type: TYPE_IMG
- en: However, notice that this is only creating a readable copy of the primary database.
    In the case of disaster or if the primary database is unavailable, the secondary
    database must be manually changed from read-only to read/write and all connection
    strings to the database must be changed manually. This doesn't really represent
    a high availability solution, so we need to take an additional step by creating
    a failover group.
  prefs: []
  type: TYPE_NORMAL
- en: In the Failover group blade, we need to provide a Primary server, Secondary
    server, Failover group name, Read/Write failover policy, and Read/Write grace
    period (hours). The failover group name must be unique, and this will be the new
    endpoint for the connection to our database. Connecting to the failover group
    name will automatically point us to the primary server whenever the primary server
    is available.
  prefs: []
  type: TYPE_NORMAL
- en: 'If that primary server isn''t available, all connections to the failover group
    name will be pointed to the secondary server. All failover and failback happens
    automatically and requires no user action. A screenshot of the Failover group
    options is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bfd5a959-3b77-45bd-bee3-a41d1b1b6928.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, creating the Azure SQL Database high availability solution is
    simple and fast. It requires no user action once it's created, and failover and
    failback happen automatically. If you have ever created a similar solution in
    an on-premises environment, you probably know how complicated a failback process
    can be.
  prefs: []
  type: TYPE_NORMAL
- en: Azure SQL Database security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to data, security is very important (not that other resources
    should be left unsecured). Under the Azure SQL Database blade, we have a set of
    options related to security. SECURITY options include Advanced Threat Protection,
    Auditing, Dynamic Data Masking, and Transparent data encryption. Advanced Threat
    Protection and Auditing can be applied on the server level (for all databases
    on the server) or for a single database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced Threat Protection contains three subsections:'
  prefs: []
  type: TYPE_NORMAL
- en: Data Discovery & Classification (preview)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability Assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat Detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Data Discovery & Classification (preview) feature is still in beta but can
    be very useful. A scan of the database will be performed, and recommendations
    will be provided on which columns in your database should be marked as classified.
    This can be especially useful when considering data that should be considered
    regarding the **general data protection regulation** (**GDPR**).
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability Assessment will perform a security scan and provide security recommendations
    for your database. Examples of recommendations would be to to track firewall rules
    or to classify sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Threat Detection applies machine learning to your security. This feature analyzes
    normal behavior and alerts you to any action that is out of the ordinary. For
    example, if one of the SQL logins always accesses the database in work hours and
    suddenly tries to log in during other periods, you will be alerted. Or, if one
    of the logins is always coming from a specific IP address and tries to access the
    database from the other side of the world, action will be detected and you will
    be alerted.
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of advanced threat protection is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/440c4355-54e5-414d-a55a-4f3bf0064292.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Auditing allows us to track events and log them to the storage account. We
    can define the log retention period, and whether events are logged on the database
    or server level. As auditing is often a requirement for many organizations, especially
    in order to be compliant to different standards, this option allows you to fulfill
    that requirement. A screenshot for audit logs is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5275f29e-39f1-4433-b8e0-d2afcd17c0af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we proceed to dynamic data masking, let''s run a simple query. Selecting the
    top 100 rows on the table `SalesLT.Customers` will return all information on the
    first 100 customers from the table. Here we have various types of data, and we
    may not want everyone with access to the database to see everything. Let''s take
    a phone number, for example. Note that in the following screenshot, we can see
    that running the query will return the phone column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87a9fc9d-514c-408d-8108-b8690090f305.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The dynamic data masking blade will provide information on all the masking
    rules currently applied and recommendations for rules that you also may want to
    consider for masking. Note that the SQL administrator is excluded from data masking,
    and that you can add additional users to be excluded. A screenshot of dynamic
    data masking is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9f37723-53f1-410d-b5b9-8a951053f9a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add a new rule, we need to provide the Schema, Table, Column, and Masking
    field format. The Masking field format will allow you to control what masked data
    looks like in a query result. An example of how to add the phone column for data
    masking is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe815f65-080c-4b9f-8102-7fa3ace29ece.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the data masking rule is applied, we can run the query again. As you can
    see in the following screenshot, the result will be different when the masking
    rule is applied, and the phone column will then return `xxx` for all values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb8ddac7-a86c-4ce6-a8c2-30a1399e0dbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Using dynamic data masking, we can control user access to data and prevent them
    seeing confidential information. For example, if we have billing information and
    contact information in the same table, we may want to provide access to the table
    to different users but allow them to see different information. We can allow our
    sales department to see an email or phone number, but want to prevent them from
    seeing credit card information. On the other hand, we don't want to prevent everyone
    from seeing credit card information and want to allow this information to be accessed
    by the finance department. Dynamic data masking is ideal for this scenario, wherein
    users can have access to the same table but see different sets of information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Transparent data encryption** (**TDE**) is used for encrypting databases
    in rest mode. This feature is available for on-premises versions of SQL Server
    but requires an implementation that isn''t so simple. For Azure SQL Databases,
    this feature is turned on automatically for newly created databases. This wasn''t
    always the case, and for older databases you can turn it on simply by switching
    the TDE option on. As simple as that, databases (and all backups) are encrypted
    at rest. Transparent database encryption is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5128e67-618b-4dbb-95c6-9a918ee6da68.png)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring and troubleshooting Azure SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MONITORING options for Azure SQL Databases is very similar to options for other
    Azure resources. Options available for MONITORING are Alerts (Classic), Metrics
    (preview), and Diagnostic settings. All of these features are available for Azure
    Virtual Machines and Azure Web Apps, and these were covered in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: SUPPORT + TROUBLESHOOTING options bring us a few features that are specific
    to Azure SQL Databases. Features such as Resource health and New support request
    are present, as for other Azure resources. New features are Performance overview,
    Performance recommendations, Query Performance Insight, and Automatic tuning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Performance overview gives us an overview of query performance. Here we can
    find information on resource consumption by queries. Overview gives us insight
    into aggregated consumption for queries per resource type. Resource type can be
    DTU, CPU, and IOPS. This aggregation will show queries which create the biggest
    resource cost, but as this is aggregated consumption, it can be the result of the
    query being executed often and not of the query spending resources in a single
    run. A list of queries which take more time to execute can be found under the
    Long running queries tab. This information can help us improve performance, as
    queries that are often executed and queries that take a long time to execute are
    spending lot of resources. Editing these queries can improve performance and save
    money in the long run as well. A graph showing CPU consumption in the Performance
    overview category is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/907d6721-f6e7-4809-af86-bda292f18c72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under performance list, we can see Recommendations based on performance history
    for our database. It will give us a list of Recommendations, along with the options
    to automatically apply these recommendations. In the Performance recommendation
    blade, we can see both new Recommendations and recommendations already applied,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b68c4a19-0c70-4cd0-93a7-841ef3264c98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Query Performance Insight gives us very similar options to performance overview.
    The difference is that you can customize and edit graphs and dashboards in Query
    Performance Insight. You can change different metrics and time periods that will
    be displayed, helping you to observe performance over longer periods of time.
    The default blade for Query Performance Insight is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57123b54-39fb-4ba3-b86e-b7ff5092d7e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Automatic tuning options is a dream come true for all database administrators.
    This option will use built-in intelligence, observing performance over time and
    applying machine learning to solutions to improve the performance of the database.
    The option can be automatically enabled on a server or subscription level. Further,
    it can be set on and off for individual databases. Settings available for automatic
    tuning are FORCE PLAN, CREATE INDEX, and DROP INDEX. If enabled, automatic tuning
    will analyze the performance and automatically apply changes that will improve
    performance. Examples of automatic tuning settings are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b8b29b9-59f0-4d19-97b7-9fd461cf549d.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure SQL Database backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very important task for any database administrator is backup. This option
    is automatically enabled in Azure SQL Database. When a new database is created,
    geo-redundant storage is created in the process and backups are performed in this
    storage. This feature is provided automatically and free of charge. For Azure
    SQL Database, SQL Server backup technology is used to create full, differential,
    and transaction backups. Transaction backups are performed every 12 hours and
    differential backups every 5–10 minutes, depending on database size and activity.
    This allows us to have a point-in-time restore by restoring the last full backup
    before the point selected, all differential backups between the full backup and the
    point selected, and, finally, all transnational backups between the last differential
    backup and the point selected.
  prefs: []
  type: TYPE_NORMAL
- en: The retention period for the backup depends on the database tier and can be
    from 7–35 days. There is also the option to enable **long-term retention backup**
    (**LTRB**) and keep backups for up to 10 years. The default backup is the option
    provided with no additional charge, but LTRB uses additional storage that is charged
    extra. However, there are situations in which we are required to keep a backup
    for a longer period of time and this option can be useful. Also, the price of
    storage is low, so this doesn't create a big addition to your bill.
  prefs: []
  type: TYPE_NORMAL
- en: Another option directly connected to backups is database export. This allows
    you to keep an additional copy of your database in separate storage. This backup
    can be used to restore a database on a new server or another subscription. Export
    will create a BACPAC file that contains schema and data.
  prefs: []
  type: TYPE_NORMAL
- en: Other data services in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL Server in VM and Azure SQL Database are just a fraction of the Azure data
    platform offering.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we talk about RDBMS in IaaS, we really don''t have any restrictions. We
    can create any type of VM with a number of different operating systems and install
    anything we want, such as Oracle, MySQL, PostgreSQL, and so on. There are also
    a number of images that include this software pre-installed. The same thing goes
    for NoSQL databases: we can install anything on our VM, or we can even choose
    an image that includes MongoDB, CouchDB, and many others.'
  prefs: []
  type: TYPE_NORMAL
- en: When talking about RDBMS in the PaaS model, we have also different options such
    as MySQL, PostgreSQL, SQL data warehouses, and others. Running NoSQL as PaaS also
    offers different options, including Azure Cosmos DB or MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Azure data platform is extended with analytic services in Azure that also have
    multiple options for both IaaS or PaaS models.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, Microsoft Azure offers different options for data and analytics, whether
    you're migrating existing solutions or building a new cloud solution. You can
    choose between different IaaS and PaaS services and combine them for specific
    scenarios to get the best possible results.
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot showing some of the database and analytics options in Azure follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/588a1e6a-1dde-4b33-a85c-923c104236ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Azure data platform offers multiple options when deciding to use both IaaS and
    PaaS. Running databases in IaaS offers more control, but requires more maintenance
    and administration as well. DaaS has many features which make a database administrator's
    life easier, but it lacks support to run certain features and legacy applications.
    The bottom line is that we need to decide how we want to proceed and assess the
    ideal option for our scenario based on the options required by our solution and
    offered by different data services.
  prefs: []
  type: TYPE_NORMAL
- en: Once data is in the cloud, Azure offers many analytics options which can help
    us to extend our solution. Again, we can choose between different IaaS and PaaS
    services to select the best fit for us.
  prefs: []
  type: TYPE_NORMAL
- en: In previous chapters, we discussed how to set up applications and data in Azure. Creating
    and designing new applications is great, but not always an option. In most cases, the journey
    starts with moving existing solutions from on-premises to the cloud. In the next
    chapter, we are going to explain options available for migrating our existing
    applications and databases to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Database in Azure can be run as...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure Virtual Machine with SQL is different from VM without SQL because of...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SQL server configuration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amount of memory and CPU
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Its name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure SQL Database is also called...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Database as a Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SQL as a Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Data as a Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Azure SQL Database tier can be measured in...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DTUs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: vCores
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can run a query on Azure SQL Database with...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SQL Server Management Studio
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Query Editor in Azure Portal
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To connect to Azure SQL Database, you need to...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an IP address to a firewall rule
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow an IP in VNet
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow an IP in the master database
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To create an Azure SQL Database replica, you can use...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Database backup
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Database export
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Geo-replication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a highly available Azure SQL Database, you need to create a...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Failover group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Failover cluster
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Always-On
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To mask columns in Azure SQL Database, you use...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transparent data encryption
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamic data masking
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Data classification
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To detect potential threats to your database, you use...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vulnerability assessment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Advanced threat protection
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you''ll need:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local server running Windows Server 2012 R2 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Hyper-V Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local instance of SQL Server 2012 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Storage is a service that plays a very important part in Microsoft Azure.
    Almost all Azure services use storage in one form or another. In some cases, it's
    obvious that storage is used, in others it's a service in the background we don't
    realize even exists.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we create a new VM, virtual disks are created in the process.
    These disks are stored in Azure Storage. If managed disks are used, storage is
    created in the background and not visible. If we don't use managed disks, storage
    created in the process is shown among resources, since managing storage is our
    responsibility when managed disks are not used.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to this, when any PaaS resource is created, storage is created in the
    background. In most PaaS cases, storage is not directly visible, but we can see
    the amount of storage available and used in the resource blade. For example, Azure
    SQL database or Azure App Service plan have a certain amount of resources available
    depending on the tier. We don't have direct access to storage management but we
    can see information about storage space.
  prefs: []
  type: TYPE_NORMAL
- en: But Azure Storage can be used as stand alone service and managed independently.
    In order to explain this service, let's start with creating a new Azure Storage
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Recovery Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another service to help migration to the cloud is the Azure Recovery Service.
    This service contains features that can help us move data to the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Site Recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both services aren't only used to move data to the cloud but to protect both
    Azure and on-premises resources. Their primary purpose is in fact to protect resources
    but once we have data in the cloud, this data can be used to perform migration.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a recovery service vault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to start using the Azure recovery service, we must create a Recovery
    Services vault. All usual parameters are needed: Name, Subscription, Resource
    group, and Location. Note that Location is very important if you want to protect
    Azure resources. You will not be able to protect resources that are in the same
    location as the recovery services vault. A screenshot showing an example of parameters
    for recovery services vault is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fbcd0b0-2b4d-4556-998e-128e5ea3d712.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an Azure Storage account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create an Azure storage account, we need to provide a Name, Deployment
    model, Account kind, Location, Replication policy, Performance, Secure transfer
    required, Subscription, and Resource group. Subscription, Location, and Resource
    group are the usual settings needed for all Azure resources.
  prefs: []
  type: TYPE_NORMAL
- en: The name must be unique within Azure as it's used to form an URL for your storage
    account. The URL is formed by adding the storage account name in front of the
    standard DNS suffix. For example, naming the storage account `packtdemo` would
    create the URL `packtdemo.core.windows.net` and therefore the storage account
    name must be unique.
  prefs: []
  type: TYPE_NORMAL
- en: The Deployment model allows us to choose between Resource manager and Classic
    model. As the Classic model is outdated and using Resource manager is recommended,
    I advise you choose Resource manager whenever creating a new resource.
  prefs: []
  type: TYPE_NORMAL
- en: Performance allows us to choose between Standard and Premium storage. This is
    basically choosing between HDD and SSD, but will also impact the price of your
    storage. Premium storage comes with SSD and significantly better performance,
    but the price increase is equally significant.
  prefs: []
  type: TYPE_NORMAL
- en: Secure transfer required allows us to choose between enabling and disabling
    this option. Enabling will require all incoming requests to our storage to be
    done over HTTPS and automatically blocking any requests coming over HTTP. The
    feature is very similar to Allow only HTTPS in Azure web apps. As this feature
    is security related, I recommend enabling this option.
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot with Azure Storage account options is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b486daf-03f1-4bb9-8f7d-43336238d8d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we come to a couple of settings that are related only to the Azure Storage
    account. Even through the performance option is also related directly to storage,
    we can see the option to choose storage performance in other services too, such
    as VMs or even some PaaS resources. Options unique to the Storage account are
    account kind and replication.
  prefs: []
  type: TYPE_NORMAL
- en: '**Account kind** allows us to choose between three options:'
  prefs: []
  type: TYPE_NORMAL
- en: Storage (general purpose v1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StorageV2 (general purpose v2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blob storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General purpose v2 storage supports all features that are supported by general
    purpose v1, and brings some newer features. It's recommended you use general purpose
    v2, especially if you want to use the latest APIs and features such as access
    tier, that allows you to use hot and cold storage.
  prefs: []
  type: TYPE_NORMAL
- en: Hot and cold storage allows you to choose what kind of access tier you want
    to use based on the data you are storing. Hot costs more per GB stored but transactions
    to storage are lower. Cold costs less per GB stored but transactions to storage
    come with higher prices. This makes the cold access tier more suitable for archive
    and the hot access tier for active storage. What's great about this feature is
    that you can switch between access tiers and change from one to another at any
    time.
  prefs: []
  type: TYPE_NORMAL
- en: An upgrade from general purpose v1 to general purpose v2 can be made at any
    time (but not the other way around) in case you already have a storage account
    in v1 and want to benefit from features of v2\. However, there are some cases
    in which you need to use v1 as the only option. For example, when classic deployment
    is needed (general purpose v2 is only supported in resource manager), or where
    you need to use an older storage service REST API.
  prefs: []
  type: TYPE_NORMAL
- en: A Blob storage account supports the same features as general purpose v2 when
    it comes to block blobs, but are limited only to block blobs; they don't support
    page blobs. As the price is very similar, it's recommended you use general purpose
    v2 storage as this comes with the same price but more options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Options for account kind are shown in the screenshot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b43a14f0-8006-4e4e-8e45-e2f7eebc95ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Replication comes with three options, which are the same as account kind. We
    can choose between:'
  prefs: []
  type: TYPE_NORMAL
- en: Locally-redundant storage (LRS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geo-redundant storage (GRS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read-access geo-redundant storage (RA-GRS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LRS is based on a strategy similar to availability set and availability zones
    for VMs. Additional copies of data are kept across the Azure Datacenter to provide
    durability and redundancy in case of hardware faults or updates. It's designed
    to provide SLA of 99.999999999% (11 9s). All data is kept inside a single Datacenter,
    and possible failover is triggered automatically.
  prefs: []
  type: TYPE_NORMAL
- en: GRS is designed in a very similar fashion, with the difference being that copies
    are in different Azure Datacenters which are, thousands of miles away from the
    original Datacenter. Because of this, additional durability is in place with an
    SLA of 99.99999999999999% (16 9s) . Redundant copy is available for access only
    when automatic failover is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: RA-GRS is designed in the same way as GRS, but with the difference that redundant
    copy is available for read, even when failover isn't activated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replication options are shown in following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4677b4e-8e30-47a8-a602-e5fa6542ad67.png)'
  prefs: []
  type: TYPE_IMG
- en: Additional options for the Azure Storage account are virtual networks and data
    lake storage v2.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we enable Virtual networks, we can select an existing VNet (or create a
    new one) and select a Subnets. This will join our storage to the selected subnet
    on the selected VNet and assign a private IP address to our storage, allowing
    us to access storage over a private network rather then over the internet. Data
    lake storage v2 is in preview, and can be enabled only if a few requirements are
    met. We need to choose general purpose v2 storage, it''s available only in a limited
    number of Azure Datacenters, and preview must be pre-approved. These options are
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22cae5ae-c5c6-4d17-85ff-3efa72bfc3a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that account kind, replication, and performance will impact the price of
    Azure Storage. Location is also a factor as not all resources cost the same in
    all Azure Datacenters, but this doesn't have as much impact as the other three
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment of the Azure Storage account is fast and is usually done in under
    one minute.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Storage settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Azure Storage account is created, we can use different options to manage
    it. Some of the options are similar to the options available to other Azure resources,
    so let's focus on the Azure Storage account unique options.
  prefs: []
  type: TYPE_NORMAL
- en: The first option under Settings is Access keys. Access keys are used to authenticate
    access to your Azure Storage account. They are usually used to enable access from
    applications, so you can find connection strings here along with access keys.
    There are two access keys available, and you can regenerate them if you think
    the original keys have been stolen or compromised.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-origin resource sharing** (**CORS**) allows you to define trusted domains.
    Web browsers implement security restrictions that prevent applications from calling
    APIs in a different domain. CORS provides ways for the original domain to securely
    access an API from another domain.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration allows us to change some of the settings that are available when
    creating the Storage account. Under this option, we can upgrade storage from general
    purpose v1 to v2, we can change performance, and replication settings, and enable
    or disable secure transfer requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Storage is automatically encrypted and protects data at rest. Automatic
    encryption is done using using Microsoft Managed Keys for Azure blobs, tables,
    files and queues. However, the encryption option allows us to bring our own key
    and encrypt storage with that key instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shared access signature** (**SAS**) provides an access key that lasts a limited
    time. We can use this key to provide temporary access to our storage and can define
    how long this access is going to last. After the key expires, it can''t be used
    again.'
  prefs: []
  type: TYPE_NORMAL
- en: Under Firewall and Virtual network settings, we can change networking and access
    settings for our storage. We can attach storage to VNet (and subnet) or change
    the VNet storage it's associated with. Using firewall, we can block access to
    our storage to anyone who isn't coming from a trusted IP address. We can white
    list our on-premises IP addresses or other trusted IP addresses to allow Azure
    Storage access only from these addresses and to prevent anyone else from gaining
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Properties, Locks, and Automation scripts are options available to all Azure
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: The next set of options is related to blob service. Here we have Blobs, Custom
    domains, Soft delete, Azure CDN, and Azure search.
  prefs: []
  type: TYPE_NORMAL
- en: Blobs allow you to see the current list of blobs in the storage account and
    perform actions such as creating a new blob or deleting an existing one. Further,
    you can access a blob and see the list of files inside the blob and perform actions
    on files such as download or delete.
  prefs: []
  type: TYPE_NORMAL
- en: Custom domain allows you to use a custom domain with your storage account. Instead
    of using the provided DNS, you can set up CNAME on your custom domain and point
    it to your storage to start using the custom domain.
  prefs: []
  type: TYPE_NORMAL
- en: Soft delete allows you to set up a retention policy for your storage. If enabled,
    the default retention policy is seven days but this can be change to up to 365
    days. Soft delete will give you ability to recover any deleted blobs. This extends
    to blobs that are deleted as result of overwrite, so you can recover deleted blobs
    or older versions of blobs.
  prefs: []
  type: TYPE_NORMAL
- en: Azure CDN and Azure search are options to link these Azure services to your
    storage account. Azure CDN is used to cache storage content in order to increase
    performance and minimize latency. Azure search is a fully managed cloud search
    service that provides a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: The following options allow us to manage the file service, table service, and
    queue service. For each of these services, we can see a list of existing file
    services in the storage account and we can perform different operations such as
    Delete existing service, Create a new one or Set up access policies.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating a database to the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have our Storage account, we can start loading data. This can be any
    type of file, we can use storage as a staging phase in which we prepare uploaded
    files before they are actually used, or we can upload files that are directly
    used by our applications.
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, I've seen many organizations using Azure Storage as a backup
    location for on-premises SQL databases. This is a convenient way to start our
    cloud journey as we get relatively cheap storage that is offsite and encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: Once databases are stored to cloud, the next step would be to use backups to
    restore a database in Azure and start using them either as IaaS or PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can back up our database directly to Azure Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up a database to storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to back up the database to Azure Storage, first we need to open **SQL
    Server Management Studio** (**SSMS**), select the database we want to back up,
    and then select Tasks | Back Up.... The first step is shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9eefea3-b389-4148-a63f-26924e56016c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'New windows will open with options to select the Database (this will already
    be selected if we selected a proper database in the first step, but can be changed
    or we can select multiple databases), Backup type (usually a full backup is recommended)
    and finally, Destination. The default option is Disk, and we need to change this
    to an URL. A screenshot of these options is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9995ab5d-15c7-4611-8060-78b475a5ab27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the URL as the destination, we must select add in order to
    provide the path. This will open a new window in which we need to provide our
    Azure account information in order to access our Azure subscription. After this
    is done, we have access to our Azure subscription from SSMS and can select our
    storage account and blob where the backup will be stored. As **Shared Access Signature**
    (**SAS**) is used to perform the backup, we must create a new SAS and provide
    a date of expiration. Setting up a destination for the backup is shown in this
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98b57bbd-f4e2-4650-8d0e-3d93fac23a11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we click OK and the backup is performed. Time to perform the backup
    depends on bandwidth, database size, and storage type. In this case, the storage
    type is usually standard, as storing backups to premium storage is overkill and
    we would be paying a premium service for an archive. After the backup is completed,
    we can see the file information in the Azure portal under the storage account
    in the blob we selected. An example of the file information in the Azure portal
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83af4d50-b3e9-4079-a430-e56c1c18c7a7.png)'
  prefs: []
  type: TYPE_IMG
- en: After the backup is performed, we can use this backup to restore the database
    in Azure. However, full backup can be only restored on an SQL Server running on
    an Azure Virtual Machine (IaaS). In order to restore a backup in the Azure SQL
    Database (PaaS), we must use BACPAC. BACPAC contains data and metadata of the
    SQL database. The process to backup BACPAC to Azure Storage is similar to the
    process of creating a full backup of the database.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating a database to Azure SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating backup and restoring it is not the only option on how to migrate the
    database to Azure. This process can be done without using a backup, directly migrating
    the database to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, the first step is to select the database, click on bold
    Tasks and select the option to Deploy Database to Microsoft Azure SQL Database
    in SSMS. The first step is shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52ecb141-3a47-4719-89ee-c7365bc0d09e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second step is to connect to your Azure SQL Server. In order to do this,
    we select Connect... in the new window that opened after selecting the options
    in the first step. This window is shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35609ae5-65e1-4bcc-b09e-1e0d0fea3e4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to connect to the Azure SQL database, we need to provide the server
    URL, username, and password. Make sure that the public IP address of your server
    is added to the firewall rule of your Azure SQL Server, otherwise you will not
    be able to connect. An example of connection options is shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f7bd223-ce50-45de-a8c4-7f3121012cd9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After a connection is established, we are back to the window from the previous
    step. Finally, we must provide the database tier for the Azure SQL database that
    will be used for migration (a new database is created). An example of the database
    size option is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/009235ab-f735-4eec-96c2-8b0de161f6d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the process is completed, we will receive a message about successful
    tasks. the time needed to complete migration can depend on many factors such as
    database size, bandwidth, and Azure SQL database tier. Note that selecting too
    small a tier (if we are migrating a large database) will result in an error as
    the performance of the target database can be insufficient to handle the workload
    needed to perform the migration of a large database. A screenshot of a successful
    migration is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3507786-b1ff-4943-a8a9-22e83f8b8fb8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After migration is completed, we can connect to the Azure SQL server with SSMS
    and find the database that is migrated, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc67a728-c737-4957-84ca-72bf9841628f.png)'
  prefs: []
  type: TYPE_IMG
- en: In some cases, migration will fail even when the proper Azure SQL database tier
    is selected. This is due to database incompatibility with Azure SQL database.
    For example, when using Azure SQL database, a clustered index is required (recommended
    for on-premises). If the database that is migrated, doesn't contain clustered
    indexes, migration will fail. Luckily, there is a tool that can help us perform
    assessment that will tell us about possible issues and problems on our database.
  prefs: []
  type: TYPE_NORMAL
- en: Database assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create an assessment of our database and make sure it's ready for migration,
    we can use Microsoft Data Migration Assistant. This is tool is free and can be
    downloaded from the Microsoft Download Center.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you install this tool, you can start a new project. Select Assessment,
    provide the Project name, and Source server type, and Target server type,. For
    source, select SQL Server and for target, select Azure SQL Database. An example
    for a new project is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05db4e83-f1e9-419d-b45f-c650c00b5313.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second step is to select assessment options. You can select to check compatibility
    and feature parity. Compatibility will check your database features and provide
    if there are any blocking issues or deprecated features preventing migration.
    Feature parity will check if there are any features or functions that are not
    supported. For example, an Azure SQL database doesn''t support SQL Server Reporting
    Service (SSRS), so if your application is using SSRS, this can cause an issue.
    I recommend selecting both options, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8a1c420-8f6b-4f9d-8458-ed261506b21a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting what to check, we need to provide a source that will be checked.
    In order to make an assessment, this tool needs access to the database, so we
    must provide the SQL Server, credentials, and database. Selected databases will
    be shown in the list along with the SQL Server version, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ae4cf50-0733-41b6-b16a-ec061a737d8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The time needed to perform assessment depends on database size and complexity,
    and it can take from a couple of minutes to a couple of hours. After assessment
    is completed, we''ll receive two reports. The first report is on feature parity,
    and an example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1c4bdd2-6266-4600-9a4a-61b1455d0347.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second report is on database compatibility. With a little luck, and if
    the maintenance of the database was performed regularly, you will get a report
    shown in the following example, showing there are no compatibility issues preventing
    you from migrating your database to Azure SQL Database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d6ec5d4-ec57-4d47-a44d-5ee94c706459.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the possible compatibility issues is a clustered index. It was recommended
    you have a clustered index for each table in the database but with an Azure SQL
    database, this is a requirement. Another example are CLR functions that are not
    supported in an Azure SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: An assessment tool can be used to make an assessment, not only for migration
    to Azure SQL Database but to other versions of SQL Server. So, if you are planning
    on migrating a database to a newer version of SQL Server (in Azure or on-premises),
    this tool can make assessment for these migrations as well.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Data Migration Assistant can be used to perform the migration of database
    as well. Note that the difference between this migration and migration through
    SSMS is that here the Azure SQL database must be created (empty Azure SQL database)
    prior to migration.
  prefs: []
  type: TYPE_NORMAL
- en: As a third option for migration, there is the Azure Database Migration Service.
    This migration is in fact a data sync option as a database and schema must exist
    before running this service. Azure Database Migration Service allows you to link
    source and target database and copy data from the source to the target for a complete
    database or for selected tables.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Azure Backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the recovery services vault is created, we can start configuring. As mentioned,
    we have two different services and both services can be used to protect resources
    in Azure and on-premises.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with enabling Azure Backup on Azure resources. If we select that
    we want to protect workloads in Azure under the Azure Backup configuration, options
    for protections are Virtual machine, Azure FileShare (Preview), and SQL Server
    in Azure VM (Preview). Let''s select Virtual machine and continue. An example
    of Azure resources for Azure Backup is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44920fcc-ead0-42db-829d-6bc3b124dfe1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A list of resources available will be automatically provided. As Virtual machine are
    selected, this will be a list of Azure VMs. If Azure FileShare (Preview) was selected,
    this would be a list of Azure Storage accounts containing FileShare. We select
    the Virtual machine that we want to back up, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d908565-88ab-4eb7-b750-52654e90979e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After backup is enabled, we can see a list of protected VMs under backup items.
    The list will also show the STATUS, the TYPE of protected resources, and other
    useful information as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1730b578-9e66-4205-966a-506b885e006b.png)'
  prefs: []
  type: TYPE_IMG
- en: Backing up on-premises resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Azure Backup to protect on-premises resources requires a little more work.
    After selecting on-premises resources in the Azure Backup configuration, we get
    a different list from the one when we selected Azure resources. We can choose
    between Files and folders, Hyper-V Virtual Machines, VMware Virtual Machines,
    Microsoft SQL Server, Microsoft SharePoint, Microsoft Exchange, System state,
    and Bare Metal Recovery.
  prefs: []
  type: TYPE_NORMAL
- en: 'After configuration in the Azure portal, we need to install the Recovery Service
    Agent, which will allow us to register on-premises resources in the recovery services
    vault. A screenshot of the Recovery Service Agent is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16efa466-b625-47ad-9cbc-ce68a428a75a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To proceed with registration, we must provide Vault Credentials. Vault Credentials
    are provided in the form of a file that can be downloaded from the recovery services
    vault. After the Vault Credentials are provided, the Recovery Service Agent will
    automatically load backup vault information, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91e1795b-ee63-4376-a665-d57b01d38857.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following step is to provide a passphrase that will be used to encrypt
    and decrypt the backup. A passphrase must be a minimum of 16 characters and will
    be stored in the location of your choice. Make sure that you know where your passphrase
    is located. Otherwise, you will not be able to restore any of your backups, if
    needed. The process to create a passphrase is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9c91152-0e73-4897-8492-4f899e17eb2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the server is registered in the recovery service vault, we can use Microsoft
    Azure Backup software on the target server (this can be installed on the client
    OS as well) to configure what and when we are going to back up. We can see the
    status of current jobs and perform other actions as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28998e28-745b-4dc4-be83-dcacac6c036e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To configure the backup job, we need to provide what we are going to back up.
    We can select an entire drive, or select specific files and folders as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b82ee9a1-7080-4113-a039-2626cf0813c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting what to back up, we need to define when and the schedule when
    backup is going to be performed. We can select a weekly or daily backup (maximum
    is three times a day). An example of a schedule is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f243b6cf-18b3-427a-bea9-034c4a9b6c26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the schedule, we need to provide a retention policy. A retention policy
    defines how long our backups are going to be available and can be configured on
    a weekly, monthly and yearly basis. A default retention policy is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a211d42-430c-4efe-b932-9fe9cfc439a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last option is to configure how the initial backup is going to be performed.
    As an initial backup usually means that a large amount of data is going to be
    backed up, we need to define if this is going to be performed directly over the
    network (possibly creating overload), or in stages by copying parts of data to
    Azure Storage and then copying data to the recovery vault. An example of options
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcf0764c-b8b5-4f0b-845e-bd41e5a1f969.png)'
  prefs: []
  type: TYPE_IMG
- en: Time to perform the initial backup depends on the size of data and the network
    bandwidth. After the initial backup, backups are performed as delta (copying only
    changes) and should not take long to complete. Note again that keeping the passphrase
    is very important, backups are encrypted and you will not be able to restore any
    data without the passphrase used to encrypt.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Site Recovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASR is not a backup solution but a **disaster recovery** (**DR**) site in the
    cloud. Having a DR site was never easier and never cheaper than having one in
    Azure. Most traditional DR sites involve equipment identical (or at least very
    similar) to the site that is protected, and cost around 80% of price of the original
    site. On the other hand, ASR is charged per protected node and for storage where
    data is stored, so comes very cheap. If recovery is activated in Azure, then compute
    prices is added for VMs. This way you are paying only for protection and compute
    prices only when failover occurs. If we create an on-premises DR site, we must
    pay for the hardware needed to run DR even when failover isn't in place but only
    used as protection.
  prefs: []
  type: TYPE_NORMAL
- en: ASR can also be used to perform the migration of VMs from on-premises to the
    cloud. As protecting Azure VMs is fairly simple, we will skip to protecting on-premises
    VMs and show how to protect local resources and use ASR to perform migration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ASR for on-premises resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start creating disaster recovery in Azure, we must start by configuring
    ASR in the recovery services vault. Three steps are involved:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare infrastructure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replicate application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manage recovery plans
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we select to Prepare infrastructure, a new blade will open. Here we have
    couple of options that we need to define. First, we need to select if we want
    to protect Azure or On-premises resources. As I want to demonstrate how to use
    ASR for migration, I'll select On-premises. The next option is to define where
    we want to replicate our resources, and the options available are Azure or another
    site.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to define if the infrastructure that we want to protect is virtualized,
    and if it is, we select between Hyper-V and VMware. If we are using Hyper-V, we
    need to define whether we are using SC VMM or not. A screenshot of the protection
    goal blade is show here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be7be700-c31f-47c8-a93e-1511979b1928.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second step will lead you to Deployment planning. Here we can download
    a tool to estimate requirements for ASR in our on-premises infrastructure. This
    step isn''t required but it''s recommended as insufficient capacity can lead to
    replication issues. A deployment planner can be downloaded directly from the Azure
    portal as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a41579e-2f10-423e-b27c-4725e1d3de0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the capacity is in order, we can proceed to Source preparation. We need
    to create a Hyper-V site and register a Hyper-V server that should be included
    in the replication, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26662ad6-dccc-485e-9557-44a1e77d2882.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we create a new site, we need to download and install agents on all Hyper-V
    hosts that we want to protect on that site. Installation of this agent is similar
    to the backup agent (we need the vault credentials that can be downloaded from
    the recovery services vault) and after we have finished, we will have Hyper-V
    hosts available under our site. Note that after installation, it can take 15 to
    30 minutes before Hyper-V hosts are visible in the Azure portal. A successfully
    registered site and host are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/baa0b991-3339-4d43-a287-09221fe3f580.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we set up the Source environment, we need to prepare the Target as well.
    We need to select the Azure Subscription, and deployment model, and prepare Azure
    infrastructure. Under infrastructure, we need to provide at least one storage
    account and one VNet for the target environment. The storage account must be provided
    for the VM disks and VNet is used in case DR is triggered and VMs must be restored
    to Azure (VM must be connected to VNet). The Target configuration is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27a6d21f-0ebb-4592-b0e0-55bbca920b60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step in infrastructure preparation is to create a replication policy.
    We need to define rules for frequency, recovery points retention, and some other
    settings. I recommend leaving everything on default settings except Copy frequency
    that may be changed based on the roles of the servers that are protected. You
    can also create multiple policies and apply them according to your requirements.
    You probably don''t need to replicate a web server as often as a database or file
    server and can use a different replication policy based on the roles of the protected
    server. An example of a default replication policy is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bab7f3b8-41da-4ab9-bd4e-514b4655fabe.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the previous steps, we can add multiple sources to a single key vault.
    In the same key vault, we can have registered Azure resources, multiple Hyper-V
    sites, VMware sites, or physical servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we prepare the infrastructure for ASR, we need to define what we are
    going to replicate and when. We need to select a source (Azure or On-premises)
    and select an appropriate location registered in recovery services vault. An example
    of Source selection is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a23ab1c-71a9-4179-b74d-f89c5d090cd1.png)'
  prefs: []
  type: TYPE_IMG
- en: After we select Source, we need to select the Target as well. Required parameters
    are the Azure Subscription, resource group, deployment model, storage, and network
    settings. The resource group will be used as the location where the VMs will be
    created in case of failover.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same goes for the virtual network, it will be used only if failover is
    in place and VMs need to be created in Azure. Storage is used to place VM disks
    (VHDs) but it will be used even when failover isn''t in place, as data must be
    stored even when VM is not running. An example of Target settings is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cd3b0a9-1798-4583-96db-6b79cd92d8be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Source and Target are in place and now we need to select what will be protected.
    This is done in two steps. The first will be to select Virtual machines in the
    previously selected site that we want to protect, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97984e4e-8642-40a1-9261-e2135f8a980e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the Virtual machines that will be protected are selected, we must provide
    additional settings for these VMs. Settings that are required are the operating
    system for our VM, and disks that we want to replicate. An example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e2ade1b-3c86-4bc0-8928-35bc887d6af6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the last steps is to select a replication policy that will be applied.
    As we can have multiple policies created, we can assign one that best fits the
    roles and settings of the VMs that are protected. An example of Replication settings
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cda4cccc-a1ad-432f-a891-a009d3455e9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, everything is in place and by clicking OK, we can enable replication
    and start the protection of our VMs. The last step is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d984e09-3748-4b4e-bc2c-bb24f2c8224d.png)'
  prefs: []
  type: TYPE_IMG
- en: Using ASR as a migration tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After replication is completed, you can see the status of replicated VMs under
    the protected items in the recovery services vault. You can use the same blade
    to monitor the replication process and see the percentage of replicated items.
    Time needed to complete initial replication depends on network bandwidth, storage
    settings, and the size of data that will be replicated. An example of a successful
    replication is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fd7d082-0bac-4221-8fa2-4eabfeaff8d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we select any of the VMs under replicated items, we can find additional
    information on health, events, and options for failover (planned failover, failover,
    and test failover) as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff9ee32f-44c3-4be5-92f2-3e9bfbfdeb22.png)'
  prefs: []
  type: TYPE_IMG
- en: There is a difference on different failovers and how they affect the primary
    VM. For example, a test failover will create a VM instance in Azure but will not
    affect the on-premises (primary) VM in any way. On the other hand, a planned failover
    and failover will create a new VM instance in Azure, declare it primary, and can
    even turn off the on-premises VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing that can be found in this blade is a diagram of the infrastructure
    involved, showing you how all components involved in the process are connected.
    A diagram for the Hyper-V site is shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/122fd4de-4495-41fe-aea8-377251f5692a.png)'
  prefs: []
  type: TYPE_IMG
- en: Failover and migrating the VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the purpose of our replicating our VM is to migrate it to the cloud, let's
    move on and show how to perform this task.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to perform the failover of our VM. Here we need to select
    a Recovery Point we want to use, as we have multiple recovery points. Time needed
    for failover to complete depends on the size of the VM that will be created, amount
    of disks, and the size of data on these disks. An example for failover settings
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92dd61e0-a9b3-42fc-8c09-193704ad1659.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After failover completes, the VM will be running, and Azure and you can manage
    it as any other Azure VM. Note that this VM will not be using managed disks. This
    is because ASR replicates disks to storage and creates copies of on-premises VHD.
    When failover occurs, VHDs are used for our VM and attach to it but as result
    disks are not managed. However, you can perform migration to managed disks when
    needed. If you plan to migrate this VM completely, I strongly recommend performing
    migration to managed disks. The VM after failover is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b90e521-6ac7-414c-8229-f8ed8be1c4b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we complete failover, the VM is running in Azure but it''s still connected
    to the on-premises VM. We can perform failback at any time and the VM is listed
    under the replicated items in the recovery services vault. To complete migration
    and have the VM running only as an Azure VM, we need to perform a complete migration
    step. This will remove the association of our VM from the on-premises VM and the
    recovery service vault, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67fb56a4-ff03-42f7-a35a-7f0ed8b61103.png)'
  prefs: []
  type: TYPE_IMG
- en: Other options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, our VM is migrated to the cloud and running in Azure. Migrating with
    ASR allows us to minimize the downtime of our services but isn't the only option.
  prefs: []
  type: TYPE_NORMAL
- en: AzCopy allows us to copy data from on-premises to the cloud as well, and can
    be used as a migration tool for all sorts of files. Another option is to use PowerShell
    to upload VHDs to Azure and use them to deploy the Azure VM.
  prefs: []
  type: TYPE_NORMAL
- en: Azure import/export job is used to transfer a large amount of data to Azure.
    Imagine you have disks with 4 TB of data. Copying that over internet would take
    a lot of time. With Azure import/export job, you can create a job in Azure, copy
    that to physical disks and ship them to the Azure Datacenter. Disks will be then
    available to you in the Azure portal and you can use this data in the cloud. The
    process can go in the other direction as well and you can export data from Azure
    and ship it to yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we introduced basic Azure services, both IaaS and PaaS, we explained the
    process of moving data to Azure. Microsoft offers extended options on how to assess
    if our data is cloud-ready, and also offers multiple tools to move data from on-premises
    to Azure. As the cost of inbound traffic is `0` and only outbound traffic from
    Azure is charged, we can see where Microsoft wants data to go.
  prefs: []
  type: TYPE_NORMAL
- en: The next step in the Azure journey is a hybrid cloud that will help us use on-premises
    resources we already have, and extend them with all the benefits the cloud has
    to offer. This scenario is the reality for most companies as most of them are
    already invested in local resources. Ignoring existing resources is not an option
    and we can leverage the Azure offering by extending existing resources with a
    hybrid cloud. In [Chapter 7](a17b3c61-feb1-4c60-be4d-cd18694088ca.xhtml), *Hybrid
    Cloud with Azure – Extending Local Workloads to the Cloud*, we'll discuss how
    to create a secure connection between Azure and local infrastructure, and use
    Azure as a hybrid cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Azure Storage account can be deployed as...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resource manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Classic
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To have maximum SLA, the Storage account should be...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locally redundant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Geo-redundant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Storage account tier can be...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standard
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Premium
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can a local database be backed up to the Azure Storage account?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can a local database be deployed directly to Azure SQL database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To use ASR, you need to create...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure Storage account
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Recovery services vault
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure Backup
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With Azure Backup, you can protect...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On-premises resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With ASR, you can protect...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure Virtual Machines
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On-premises virtual machines
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To migrate a VM protected with ASR to the cloud, you must...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replicate the VM
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform failover
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the VM in Azure
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To migrate a large amount of data to Azure, we must use...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AzCopy
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PowerShell
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure import/export job
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
