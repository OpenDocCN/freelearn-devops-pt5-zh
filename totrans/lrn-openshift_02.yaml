- en: Kubernetes Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 概述
- en: 'In the previous chapter, we discussed container architecture, worked with Docker
    images and containers, took a look at different Docker registries, learned how
    to manage persistent storage for containers, and finally, learned how to build
    our own Docker image with Dockerfile. All these skills will be required in [Chapter
    3](part0093.html#2OM4A0-78aafb146b304cdeb9b3261a70edabde), *CRI-O Overview*, where
    we start working with Kubernetes. Kubernetes is an essential and critical OpenShift
    component. It all works like a snowball: Docker skills are required by Kubernetes,
    and Kubernetes skills are required by OpenShift.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了容器架构，使用了 Docker 镜像和容器，查看了不同的 Docker 注册表，学习了如何管理容器的持久存储，最后，学习了如何使用
    Dockerfile 构建自己的 Docker 镜像。所有这些技能将在 [第3章](part0093.html#2OM4A0-78aafb146b304cdeb9b3261a70edabde)，“*CRI-O
    概述*”中使用到，届时我们将开始使用 Kubernetes。Kubernetes 是 OpenShift 中的一个关键组件。一切就像滚雪球一样：Kubernetes
    需要 Docker 技能，OpenShift 需要 Kubernetes 技能。
- en: Container management in a distributed environment is difficult, but not with
    Kubernetes. This brief introduction to Kubernetes will give you an idea of what
    Kubernetes is and how it works. In this chapter, you will learn how to install
    and configure a Kubernetes cluster using a simplified method. We will also explain
    the container management basics, including some theories regarding pods, services,
    and routes. We will show you how to deploy an application in a Kubernetes cluster.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式环境中进行容器管理是困难的，但 Kubernetes 使其变得容易。这篇简短的 Kubernetes 介绍将让你了解 Kubernetes 是什么，以及它是如何工作的。在本章中，你将学习如何使用简化的方法安装和配置
    Kubernetes 集群。我们还将解释容器管理的基础知识，包括一些关于 pods、services 和 routes 的理论。我们将向你展示如何在 Kubernetes
    集群中部署应用程序。
- en: Since, in our lab environment, we have only one Kubernetes node, we are going
    to use the Kubernetes cluster and Minikube VM terms interchangeably in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在我们的实验环境中只有一个 Kubernetes 节点，因此我们将在本章中交替使用 Kubernetes 集群和 Minikube 虚拟机的术语。
- en: 'In this chapter, we will look at the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注以下内容：
- en: Container management systems overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器管理系统概述
- en: The difference between Kubernetes and Docker Swarm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 与 Docker Swarm 的区别
- en: Kubernetes key concepts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 关键概念
- en: Kubernetes installation and configuration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 安装与配置
- en: Working with kubectl
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 kubectl
- en: Clearing the virtual environment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理虚拟环境
- en: Kubernetes limitations
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 限制
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we are going to use the following technologies and software:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下技术和软件：
- en: Minikube
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Minikube
- en: Bash Shell
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bash Shell
- en: GitHub
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: Kubernetes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Docker
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Firefox
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox
- en: You will be required to install Minikube on your laptop or any other virtual
    environment you are going to use. All the instructions for installing Minikube can
    be found at [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在笔记本电脑或任何其他虚拟环境中安装 Minikube。所有关于安装 Minikube 的指令可以在 [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)
    找到。
- en: All the code for this chapter is located on GitHub at [https://github.com/PacktPublishing/Learn-OpenShift](https://github.com/PacktPublishing/Learn-OpenShift).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码都可以在 GitHub 上找到：[https://github.com/PacktPublishing/Learn-OpenShift](https://github.com/PacktPublishing/Learn-OpenShift)。
- en: Bash Shell will be used as a part of your virtual environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Bash Shell 将作为虚拟环境的一部分使用。
- en: Firefox or any other browser can be used to navigate through Docker Hub.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 Firefox 或任何其他浏览器来浏览 Docker Hub。
- en: Container management systems overview
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器管理系统概述
- en: Containers offer unmatched benefits in terms of density, deployment speed, and
    scalability in comparison to virtualization. But containers by themselves are
    not enough to match all the requirements of today's business, which expects the
    infrastructure to be adaptable to dynamic challenges. It is quite simple to start
    and manage a couple dozen containers, but things get complicated when the number
    climbs to hundreds, which is very common for large workloads. This is where **Container
    Orchestration Engines** (**COE**) come in. They bring true power to containers,
    offering various mechanisms to deploy, destroy, and scale multiple containers
    rapidly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与虚拟化相比，容器在密度、部署速度和可扩展性方面提供了无与伦比的优势。但仅凭容器本身并不足以满足现代业务的所有需求，今天的业务期望基础设施能够适应动态挑战。启动和管理几十个容器相对简单，但当容器数量增加到数百个时，问题就变得复杂起来，这在大型工作负载中非常常见。这就是**容器编排引擎**（**COE**）发挥作用的地方。它们为容器带来了真正的力量，提供了多种机制来快速部署、销毁和扩展多个容器。
- en: 'There are multiple container management solutions available, with the most
    popular being Kubernetes and Docker Swarm:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有多种容器管理解决方案，其中最流行的是Kubernetes和Docker Swarm：
- en: '**Kubernetes**: First released in July 2015, Kubernetes comes directly from
    Borg—a cluster management and job scheduling system developed by Google. Kubernetes
    was also developed by Google engineers; in fact, many developers who previously
    worked on Borg later moved to working on Kubernetes. Like Docker, it is written
    in Go, the language also designed and implemented by Google in 2007\. It''s built
    around the concept of resources—complex API entities that serve as an interface
    to the underlying mechanisms and serialized in YAML or JSON. All software components
    run on two types of machine: masters and nodes. Masters perform management, dispatching,
    and synchronization functions, while nodes provide a runtime environment for running
    containers.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**：Kubernetes于2015年7月首次发布，源自Google开发的集群管理和作业调度系统Borg。Kubernetes也是由Google工程师开发的；实际上，许多曾在Borg项目中工作的开发人员后来转而参与Kubernetes的开发。与Docker一样，Kubernetes是用Go语言编写的，而Go语言也是Google于2007年设计和实现的。它围绕资源的概念构建——复杂的API实体，作为底层机制的接口，并以YAML或JSON格式序列化。所有软件组件都运行在两种类型的机器上：主节点和工作节点。主节点负责管理、调度和同步功能，而工作节点为容器的运行提供运行环境。'
- en: '**Docker Swarm**: Docker Swarm is a native container orchestration solution
    provided by the Docker project. It has many features that Kubernetes provides,
    but does this using different mechanisms and can be used to quickly deploy a single
    service or even a stack of services on worker nodes. Swarm Cluster consists of
    two types of node: managers and workers. Managers control the placement of containers,
    which are referred to as *tasks* in Swarm terminology, and workers do the heavy
    lifting of running containers.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Swarm**：Docker Swarm是由Docker项目提供的原生容器编排解决方案。它具备Kubernetes提供的许多功能，但使用不同的机制，并可用于快速部署单个服务或甚至一组服务到工作节点上。Swarm集群由两种类型的节点组成：管理节点和工作节点。管理节点控制容器的位置，在Swarm术语中称为*任务*，工作节点负责容器的实际运行。'
- en: Kubernetes versus Docker Swarm
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes与Docker Swarm
- en: Kubernetes and Docker Swarm are the most commonly used orchestration frameworks.
    They provide a similar set of capabilities and essentially solve the same problem—management
    containers in an unsafe and highly dynamic environment. While some of their features
    overlap, there are also significant differences and the choice of system depends
    on many factors, such as the number of containers, availability requirements,
    and team expertise, to name a few.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes和Docker Swarm是最常用的编排框架。它们提供了一套相似的功能，基本上解决了相同的问题——在不安全且高度动态的环境中管理容器。虽然它们的一些功能有重叠，但也存在显著差异，系统的选择取决于许多因素，例如容器数量、可用性要求和团队专业知识等。
- en: 'The table provides an insight into the most important differences:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 表格展示了最重要的差异：
- en: '| **Kubernetes** | **Docker Swarm** |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **Kubernetes** | **Docker Swarm** |'
- en: '| A separate modular design project that has its own dependencies. | Native
    container orchestration solution available out of the box. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 一个具有独立依赖关系的单独模块化设计项目。 | 开箱即用的原生容器编排解决方案。 |'
- en: '| Relatively steep learning curve due to new concepts and complex architecture.
    | Easy to get started; uses familiar terminology; more lightweight. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 学习曲线较陡峭，因为涉及新的概念和复杂的架构。 | 容易上手；使用熟悉的术语；更轻量。 |'
- en: '| A pod is a minimal unit of deployment which represents a group of containers.
    Integration with other applications is accomplished via services that in this
    case represent a consistent `IP:port` pair. | Application deployed in containers
    as services across an entire cluster or a subset of workers using labels. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Pod是一个最小的部署单元，表示一组容器。与其他应用程序的集成通过服务完成，在此情况下，服务表示一个一致的`IP:port`对。 | 应用程序以容器作为服务的形式，在整个集群或一部分工作节点中使用标签进行部署。
    |'
- en: '| Auto-scaling is supported via deployments/replication controllers by specifying
    a desired number of pods. Dynamic auto-scaling that takes CPU utilization into
    account is provided by the `HorizontalPodAutoscaler` resource. | Auto-scaling
    is not supported out of the box; manual scaling is still possible. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 通过部署/复制控制器支持自动扩展，方法是指定所需的Pod数量。`HorizontalPodAutoscaler`资源提供考虑CPU利用率的动态自动扩展。
    | 系统本身不支持自动扩展，但仍然可以进行手动扩展。 |'
- en: '| A persistence storage layer is separated into two components, PVs and PVCs,
    which are dynamically bound together on request and can be used to implement shared
    storage. | Storage volumes are mounted directly into containers. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 持久存储层分为两个组件，PVs和PVCs，它们根据请求动态绑定在一起，可以用于实现共享存储。 | 存储卷直接挂载到容器中。 |'
- en: '| New masters can join an existing cluster, but promotion/demotion of a node
    is not supported. | Worker nodes can be easily promoted to managers and vice versa.
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 新的主节点可以加入现有的集群，但不支持节点的提升/降级。 | 工作节点可以轻松地提升为管理节点，反之亦然。 |'
- en: '| Services are assigned unique DNS names based on the projects they were created
    in and their names, so each service can reach any other in the same namespace
    by using its name without domains. | Each service is registered in an internal
    DNS with the name based solely on the name of the service itself. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 服务根据它们所创建的项目和名称被分配唯一的DNS名称，因此每个服务可以通过其名称而无需域名来访问同一命名空间中的其他服务。 | 每个服务都会在内部DNS中注册，名称仅基于服务本身的名称。
    |'
- en: Kubernetes key concepts
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes核心概念
- en: 'Like any complex system, a Kubernetes cluster can be viewed from multiple perspectives.
    From the infrastructure perspective, it comprises two sets of nodes; they can
    be bare-metal servers as well as VMs:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何复杂的系统一样，Kubernetes集群可以从多个角度进行观察。从基础设施的角度来看，它由两组节点组成；这些节点可以是裸金属服务器，也可以是虚拟机：
- en: '**Masters**:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主节点**：'
- en: This type of node is responsible for cluster management, network allocation,
    quota enforcement, synchronization, and communication. Master nodes act as the
    main point of contact for clients—be it actual people or some external system.
    In the simplest setup, there can be only one master, but highly available clusters
    require at least two to prevent common fail situations. The most important service
    that masters run is the API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的节点负责集群管理、网络分配、配额执行、同步和通信。主节点作为客户的主要联系点——无论是实际的用户还是外部系统。在最简单的设置中，集群中只有一个主节点，但高可用集群需要至少两个主节点，以防止常见的故障情况。主节点运行的最重要的服务是API。
- en: '**Nodes**:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点**：'
- en: 'Nodes do the actual work of hosting Docker containers. More specifically, nodes
    provide a runtime environment for running pods, which are described later in this
    book. These servers run the kubelet service to manage pods:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 节点实际执行托管Docker容器的工作。更具体地说，节点为运行Pod提供运行时环境，Pod将在本书后面进行描述。这些服务器运行kubelet服务以管理Pod：
- en: '![](img/00027.gif)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.gif)'
- en: Kubernetes architecture
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes架构
- en: 'Logically, the Kubernetes API provides a number of resources that allow you
    to use various mechanisms provided by Kubernetes while abstracting some low-level
    implementation details. These resources can be defined in either YAML or JSON
    format. Here are some of them:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上讲，Kubernetes API提供了许多资源，允许你使用Kubernetes提供的各种机制，同时抽象一些底层实现细节。这些资源可以使用YAML或JSON格式定义。以下是其中的一些：
- en: '**Namespaces**: These resources serve the purpose of separating organizational
    units of users and their projects in a multitenant environment. Moreover, they
    are used for more fine-grained access control and quota enforcement. Almost all
    Kubernetes resources, except Volumes and Namespaces themselves, are namespaced,
    which means their names must be unique in any given namespace.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间**：这些资源的目的是在多租户环境中分隔用户和其项目的组织单元。此外，它们还用于更细粒度的访问控制和配额执行。几乎所有Kubernetes资源，除了卷和命名空间本身，都是基于命名空间的，这意味着它们的名称在任何给定的命名空间中必须是唯一的。'
- en: '**Pods**: Pods represent a collection of containers and each pod serves as
    a basic management unit in Kubernetes. All containers in a pod share the same
    storage volumes and network.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod**：Pod代表一组容器，每个Pod是Kubernetes中的基本管理单元。Pod中的所有容器共享相同的存储卷和网络。'
- en: '**Services**: They represent an interface between clients and the actual application
    running in pods. A service is an `IP:port` pair which forwards traffic to backend
    pods in a round-robin fashion. Having a consistent address and port saves clients
    having to keep up with any transient changes in the cluster.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：它们代表客户端与运行在Pod中的实际应用之间的接口。一个服务是一个`IP:端口`对，它将流量以轮询的方式转发到后端Pod。拥有一个一致的地址和端口可以避免客户端需要跟随集群中任何瞬时的变化。'
- en: '**Replication Controllers** (**RC**): In a nutshell, these resources define
    how many pods must be replicated. Their definitions include pod templates that
    describe pods to be launched, and one of the parameters each RC contains is the
    number of replicas to be maintained. If for some reason one or more of the pods
    go down, Kubernetes will launch new ones to satisfy this number.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制控制器**（**RC**）：简而言之，这些资源定义了必须复制的Pod数量。它们的定义包括描述要启动的Pod的Pod模板，每个RC包含的一个参数是要维护的副本数。如果由于某种原因一个或多个Pod宕机，Kubernetes将启动新的Pod以满足这个数量。'
- en: '**Persistent Volumes** (**PV**): These resources abstract actual physical storage
    systems, be it NFS, iSCSI, or something else. Typically, they are created by a
    cluster administrator and can be mounted inside a pod using the PVC binding mechanism,
    which is mentioned later.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久卷**（**PV**）：这些资源抽象了实际的物理存储系统，无论是NFS、iSCSI还是其他什么。通常，它们由集群管理员创建，并可以通过PVC绑定机制挂载到Pod内，后者将在后文中提到。'
- en: '**Persistent Volume Claims** (**PVC**): PVC represents a request for storage
    resources. Pod definitions don''t use PVs directly; instead, they rely on binding
    PVs to PVCs, performed by Kubernetes.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久卷声明**（**PVC**）：PVC代表对存储资源的请求。Pod定义不会直接使用PV，而是通过Kubernetes将PV与PVC绑定来实现。'
- en: '**Secrets**: Used for passing sensitive data such as keys, tokens, and passwords
    inside pods.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Secrets（机密）**：用于在Pod内部传递敏感数据，如密钥、令牌和密码。'
- en: '**Labels**: Labels provide a mechanism for scoping a set of resources using
    selectors. For example, services use selectors to specify what pods to forward
    incoming traffic to. When new pods are started with the same label, they are dynamically
    associated with the service that has their label specified as a selector in its
    definition.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：标签提供了一种通过选择器作用于一组资源的机制。例如，服务使用选择器来指定将流量转发到哪些Pod。当使用相同标签启动新的Pod时，它们会动态地与在其定义中指定该标签作为选择器的服务关联。'
- en: 'Here is a sample scenario with two teams residing in Denver and Phoenix, with
    separate namespaces. Selectors, labels, and a number of replicas are specified
    using the same notation as in actual YAML definitions of services, pods, and replication
    controllers, respectively:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例场景，其中有两个团队分别位于丹佛和凤凰城，并且拥有独立的命名空间。选择器、标签和副本数使用与实际YAML定义中的服务、Pod和复制控制器相同的表示法来指定：
- en: '![](img/00028.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: Kubernetes resources
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes资源
- en: 'From a service point of view, Kubernetes can be represented as a set of interacting
    services:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务的角度来看，Kubernetes可以表示为一组相互作用的服务：
- en: 'These services typically run on masters:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些服务通常运行在主节点上：
- en: '`etcd`: This is a distributed key-value configuration store that holds all
    metadata and  cluster resources. Due to its quorum model, you are advised to run
    an uneven number of etcd nodes, starting from three in a highly available setup.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd`：这是一个分布式的键值配置存储，用于存储所有元数据和集群资源。由于其仲裁模型，建议您运行一个奇数数量的etcd节点，最少从三个节点开始，以确保高可用性。'
- en: '`kube-apiserver`: Service that exposes the Kubernetes API to clients. Its stateless
    nature enables it to be deployed in a highly available configuration by scaling
    horizontally.'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`：暴露Kubernetes API给客户端的服务。由于其无状态特性，它可以通过水平扩展的方式部署为高可用配置。'
- en: '`kube-scheduler`: Component that governs the placement of newly created pods
    on nodes. This procedure takes into account such factors as hardware/policy limitations,
    data locality, and affinity rules. It is worth noting that from the cluster point
    of view, masters are no different from any other node and thus can be eligible
    for running pods, although best practices suggest not putting additional strain
    on master nodes and dedicating them only to management functions.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scheduler`：控制新创建Pod在节点上的分配的组件。此过程考虑了硬件/策略限制、数据本地性和亲和性规则等因素。值得注意的是，从集群的角度来看，主节点与其他节点没有区别，因此可以有资格运行Pod，尽管最佳实践建议不要给主节点增加额外的负担，而应将它们仅用于管理功能。'
- en: '`kube-controller-manager`: The component that runs various controllers—some
    of them are replication controllers that maintain the required number of running
    pods, node controllers for discovering nodes that went down, a volume controller
    for binding PVs to PVCs, and an endpoints controller that binds services and pods
    together.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-controller-manager`：运行各种控制器的组件——其中一些是副本控制器，用于保持所需数量的运行中Pod，节点控制器用于发现已下线的节点，卷控制器用于将PV与PVC绑定，以及一个端点控制器，用于将服务和Pod绑定在一起。'
- en: '`cloud-controller-manager`: Service that provides integration with underlying
    cloud providers, such as DigitalOcean and Oracle Cloud Infrastructure.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud-controller-manager`：提供与底层云提供商（如DigitalOcean和Oracle Cloud Infrastructure）集成的服务。'
- en: 'These services typically run on nodes:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些服务通常在节点上运行：
- en: '**kubelet**: This service uses a pod specification to manage its pods and conduct
    periodic health checks.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubelet**：该服务使用Pod规范来管理其Pod，并进行定期的健康检查。'
- en: '**kubeproxy**: This component implements service abstraction by providing TCP
    and UDP forwarding capabilities across a set of backend pods.'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubeproxy**：该组件通过提供TCP和UDP转发能力，在一组后端Pod之间实现服务抽象。'
- en: '**Container runtime environment**: This component is represented in Kubernetes
    by an underlying container technology. At the time of writing, Kubernetes supports
    docker and rkt as runtimes:'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器运行时环境**：该组件在Kubernetes中由底层容器技术表示。写本文时，Kubernetes支持docker和rkt作为运行时：'
- en: '![](img/00029.gif)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.gif)'
- en: Kubernetes services
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes服务
- en: Kubernetes installation and configuration
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes安装与配置
- en: In this chapter, you will install Minikube—a simple single-node Kubernetes cluster.
    While not suitable for any production-grade workload, it is a useful tool to learn
    the basics of cluster management quickly. Although it supports several drivers
    for VM providers, in this tutorial we will use the KVM2 driver since KVM virtualization
    is available even in a base Linux environment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将安装Minikube——一个简单的单节点Kubernetes集群。虽然它不适用于生产环境工作负载，但它是一个快速学习集群管理基础的有用工具。虽然它支持多种虚拟机提供商的驱动程序，但在本教程中我们将使用KVM2驱动程序，因为KVM虚拟化甚至可以在基础的Linux环境中使用。
- en: 'The easiest method is to go to [https://kubernetes.io/docs/getting-started-guides/minikube/](https://kubernetes.io/docs/getting-started-guides/minikube/) and
    install Minikube on your favorite OS. Then go to [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)
    and install `kubectl`. `kubectl` is a CLI command to manage Kubernetes. Once you
    are done, it is time to start Minikube:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是访问[https://kubernetes.io/docs/getting-started-guides/minikube/](https://kubernetes.io/docs/getting-started-guides/minikube/)，并在你喜欢的操作系统上安装Minikube。然后访问[https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)，安装`kubectl`。`kubectl`是管理Kubernetes的CLI命令。完成后，到了启动Minikube的时候：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once download and setup stages are complete, check your Kubernetes cluster
    status with the `minikube` command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下载和设置阶段完成后，使用`minikube`命令检查你的Kubernetes集群状态：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Check the Kubernetes cluster status with the `kubectl` command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl`命令检查Kubernetes集群状态：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can also open a browser or use the curl command to verify the Kubernetes
    API:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以打开浏览器或使用curl命令来验证Kubernetes API：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There is a nice dashboard that comes with Kubernetes''s nice-looking GUI, available
    on port `30000` via HTTP (for example, `http://192.168.99.100:30000/`). You can
    open your browser using the same IP we used for cluster verification:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes附带了一个漂亮的仪表盘，提供美观的图形用户界面，可以通过HTTP在`30000`端口访问（例如，`http://192.168.99.100:30000/`）。你可以使用我们用于集群验证的相同IP打开浏览器：
- en: '![](img/00030.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: Kubernetes GUI
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes图形用户界面
- en: At this moment, there is not much to look at, as our simple cluster has only
    one node, one service, and three default namespaces. This is one way to manage
    Kubernetes, but to be able to effectively use all its features and troubleshoot
    issues, you need to get comfortable with using CLI, which is what the next section
    is about.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 目前没有太多可以查看的内容，因为我们简单的集群只有一个节点、一个服务和三个默认的命名空间。这是管理Kubernetes的一种方式，但为了有效使用其所有功能并排除问题，你需要熟悉使用CLI，这也是下一节的内容。
- en: Working with kubectl
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubectl
- en: Kubectl is a command-line interface for managing a Kubernetes cluster and its
    resources. In this section, you will learn about the most common commands and
    their use cases.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Kubectl是一个用于管理Kubernetes集群及其资源的命令行接口。在本节中，你将学习到最常用的命令及其使用场景。
- en: 'The syntax for all the commands follows this convention:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有命令的语法遵循以下约定：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Commands in angle brackets `<>` mean the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的命令`<>`表示以下内容：
- en: '`COMMAND`: An action to be executed against one or more resources.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COMMAND`：要对一个或多个资源执行的操作。'
- en: '`RESOURCE_TYPE`: The type of resource to be acted upon, for example, a pod
    or service.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESOURCE_TYPE`：要操作的资源类型，例如Pod或服务。'
- en: '`RESOURCE_NAME`: The name of the resource(s) to manage.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESOURCE_NAME`：要管理的资源名称。'
- en: '`OPTIONS`: Various flags used to modify the behavior of kubectl commands. They
    have higher priority than default values and environment variables, thus overriding
    them.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`：用于修改kubectl命令行为的各种标志。它们的优先级高于默认值和环境变量，因此会覆盖它们。'
- en: Getting help
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取帮助
- en: 'kubectl has hundreds of different subcommands, options, and arguments. Luckily,
    kubectl has really good help options. The first one is man pages. If you are using
    macOS or Linux, you can run the `man-f kubectl` command to check kubectl-related
    man pages:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: kubectl有数百个不同的子命令、选项和参数。幸运的是，kubectl有非常好的帮助选项。第一个是手册页。如果你使用的是macOS或Linux，可以运行`man-f
    kubectl`命令查看与kubectl相关的手册页：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If for some reason you do not have man pages available on your system, you
    can just run the `kubectl` command without any options or arguments. It will show
    you a list of available subcommands:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某些原因你无法在系统上使用手册页，可以直接运行`kubectl`命令而不带任何选项或参数。它会显示可用子命令的列表：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The next step is to check the list of available resources by running `kubectl <command>` or `kubectl <command>
    --help` commands, for example, `kubectl get`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是通过运行`kubectl <command>`或`kubectl <command> --help`命令来检查可用资源的列表，例如，`kubectl
    get`：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, you can also get `kubectl get` command examples by running `kubectl
    get -h` and a detailed resource explanation by running `kubectl explain pods`.
    The `kubectl` command is very easy to navigate and work with.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你还可以通过运行`kubectl get -h`来获取`kubectl get`命令的示例，并通过运行`kubectl explain pods`来获取详细的资源解释。`kubectl`命令非常易于操作和使用。
- en: Using the kubectl get command
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubectl get命令
- en: 'The first essential command to run is `kubectl get nodes`. It gives us the
    number of Kubernetes nodes available:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个必不可少的命令是`kubectl get nodes`。它会告诉我们可用的Kubernetes节点数量：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In our case, the number of nodes will be equal to one, since we are using one
    VM for our practice. As we mentioned already, in order for different projects
    to coexist on the same or different nodes, namespaces are used. You may guess
    that the command we should use is `kubectl get namespaces`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，节点数将等于1，因为我们使用的是一个虚拟机进行实践。正如我们之前提到的，为了让不同的项目能够在同一或不同的节点上共存，使用了命名空间。你可能会猜到，我们应该使用的命令是`kubectl
    get namespaces`：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It shows you that three default namespaces are available when you install Kubernetes
    with Minikube:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 它会告诉你，在使用Minikube安装Kubernetes时，默认有三个命名空间可用：
- en: '| **Name       **                           | **Description** |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **名称       **                           | **描述** |'
- en: '| `default` | The namespace where all resources without other namespaces are
    placed. It is used when the name of a namespace is not specified. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `default` | 所有没有指定命名空间的资源所在的命名空间。当没有指定命名空间时，使用此命名空间。 |'
- en: '| `kube-public` | Used for resources that must be publicly available even to
    unauthenticated users. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `kube-public` | 用于必须对未认证用户公开的资源。 |'
- en: '| `kube-system` | As the name implies, it is used internally by Kubernetes
    itself for all system resources. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `kube-system` | 顾名思义，它是Kubernetes内部使用的，处理所有系统资源。 |'
- en: 'The last main missing component here is pods; as previously mentioned, pods
    represent a collection of containers and a pod is a basic management unit in Kubernetes.
    In our case, pods are Docker containers. We do not have any running pods yet,
    which can be easily verified by `kubectl get pods`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最后一个主要缺失的组件是 pods；如前所述，pods 代表一组容器，pod 是 Kubernetes 中的基本管理单元。在我们的案例中，pods
    是 Docker 容器。目前我们还没有任何正在运行的 pods，可以通过运行 `kubectl get pods` 来轻松验证：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It says `No resources found`, all because the pod is a Kubernetes resource,
    similar to other resources we are going to cover in this book.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示 `No resources found`，这是因为 pod 是 Kubernetes 资源，类似于我们在本书中将要介绍的其他资源。
- en: Similarly to `kubectl get pods`, you can get the status of any other Kubernetes
    resource. We will discuss other Kubernetes resources later in this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `kubectl get pods` 类似，您可以获取任何其他 Kubernetes 资源的状态。我们将在本章稍后讨论其他 Kubernetes 资源。
- en: Running Kubernetes pods
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Kubernetes pods
- en: 'As with Docker, we can run a Kubernetes pod with the `kubectl run` command.
    Let''s start with a simple web server example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Docker 一样，我们可以使用 `kubectl run` 命令来运行一个 Kubernetes pod。让我们从一个简单的 Web 服务器示例开始：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can verify the result by getting a list of Kubernetes pods, by running the
    `kubectl get pods` command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行 `kubectl get pods` 命令来验证结果，获取 Kubernetes pods 的列表：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first time you run this command, you will probably see that the Kubernetes
    pod status shows up as `ContainerCreating`. What is happening behind the scenes
    is that the Docker httpd image is being downloaded to Minikube VM. Be patient
    and give it some time to download the image. A few minutes later you should be
    able to see the container status is `Running`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次运行此命令时，您可能会看到 Kubernetes pod 状态显示为 `ContainerCreating`。发生的情况是 Docker httpd
    镜像正在下载到 Minikube VM 上。请耐心等待，给它一些时间下载镜像。几分钟后，您应该能看到容器状态为 `Running`。
- en: The `kubectl run` command does more than just download an image and run a container
    out of it. We are going to cover this later in this chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl run` 命令不仅仅是下载一个镜像并从中运行一个容器。我们将在本章后面讲解这个。'
- en: The `8576c89d7-qjd62` part is generated automatically. We are going to discuss
    this later in this chapter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`8576c89d7-qjd62` 部分是自动生成的。我们将在本章后面讨论这个。'
- en: 'Essentially, this pod is a Docker container inside our Minikube VM, and we
    can easily verify this. First, we need to ssh into Minikube VM with `minikube
    ssh`, and then run the `docker ps` command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个 pod 是 Minikube VM 中的一个 Docker 容器，我们可以轻松验证这一点。首先，我们需要使用 `minikube ssh`
    登录到 Minikube VM，然后运行 `docker ps` 命令：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can try to kill this httpd Docker container, but Kubernetes will automatically
    spawn the new one:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试杀掉这个 httpd Docker 容器，但 Kubernetes 会自动启动一个新的容器：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Check the container status one more time:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查容器状态：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note that the httpd container is still up, but with another ID. The initial
    ID was `c52c95f4d241` and it became `5e5460e360b6` (you will have other IDs).
    That is one of the benefits of Kubernetes: if one container dies, Kubernetes will
    bring in a new one automatically. We are going to discuss this in detail later
    in this chapter.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，httpd 容器仍然在运行，但具有另一个 ID。初始的 ID 是 `c52c95f4d241`，现在变成了 `5e5460e360b6`（您将看到其他
    ID）。这就是 Kubernetes 的一个优点：如果一个容器挂掉，Kubernetes 会自动启动一个新的。我们将在本章稍后详细讨论这个问题。
- en: Describing Kubernetes resources
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述 Kubernetes 资源
- en: 'We can quickly take a look at the internals of this pod by running the `kubectl
    describe` command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行 `kubectl describe` 命令快速查看该 pod 的内部信息：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It gives us enough information to efficiently locate the pod and do the proper
    troubleshooting when necessary. In our case, we can ssh to Minikube VM and run
    the curl command to check if the pod is running the web server properly.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 它为我们提供了足够的信息，以便在必要时高效地定位 pod 并进行适当的故障排除。在我们的案例中，我们可以 ssh 登录到 Minikube VM 并运行
    curl 命令，检查 pod 是否正确运行 Web 服务器。
- en: You may need to use another IP address for the `curl` command; in our case it
    is `172.17.0.4`, derived from the `kubectl describe` command output.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要为 `curl` 命令使用另一个 IP 地址；在我们的案例中，它是 `172.17.0.4`，这是从 `kubectl describe` 命令的输出中获取的。
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that this pod is accessible only inside the Kubernetes cluster. That is
    the reason why we need to log in to Minikube VM. If we try to access this address
    from our local PC, it will not work. We are going to discuss this in the following
    sections.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个 pod 仅在 Kubernetes 集群内可访问。这就是为什么我们需要登录到 Minikube VM 的原因。如果我们尝试从本地 PC 访问这个地址，它将无法工作。我们将在接下来的部分中讨论这个问题。
- en: Editing Kubernetes resources
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑 Kubernetes 资源
- en: We can also edit the properties of a running container with `kubectl edit pod
    httpd-8576c89d7-qjd62`. We are not going to change anything at this point, but
    you can try to change something before we delete the container. We are going to
    work with the edit command while working with OpenShift in further chapters.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `kubectl edit pod httpd-8576c89d7-qjd62` 编辑正在运行的容器的属性。此时我们不会更改任何内容，但你可以尝试在我们删除容器之前更改某些内容。我们将在后续章节中与
    OpenShift 一起使用编辑命令。
- en: The `kubectl edit` command by default uses the vi editor. Learn how to use vi
    first if you are not familiar with this text editor, otherwise you might get into
    trouble.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl edit` 命令默认使用 vi 编辑器。如果你不熟悉这个文本编辑器，建议先学习如何使用 vi，否则可能会遇到麻烦。'
- en: Another trick that you can do is to change the editor by running `export EDITOR=nano`,
    where nano is your favorite text editor.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个小技巧是，通过运行 `export EDITOR=nano` 来更改编辑器，其中 nano 是你喜欢的文本编辑器。
- en: Similarly, you can edit any other Kubernetes resources. We will discuss other
    Kubernetes resources later in this chapter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以编辑其他任何 Kubernetes 资源。我们将在本章后面讨论其他 Kubernetes 资源。
- en: Exposing Kubernetes services
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴露 Kubernetes 服务
- en: 'When we run a pod using the `kubectl run` command, this pod is accessible only
    inside Kubernetes. In most of cases, we would want this pod to be accessible from
    the outside as well. This is where the `kubectl expose` command comes in handy.
    Let''s create the httpd pod one more time and then expose it to the outside world:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `kubectl run` 命令运行一个 Pod 时，这个 Pod 只对 Kubernetes 内部可访问。在大多数情况下，我们希望这个 Pod
    也能从外部访问。这时 `kubectl expose` 命令就派上用场了。让我们再创建一次 httpd Pod，然后将其暴露到外部：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now let''s use the `kubectl expose` command and expose the httpd web server
    to the outside of Kubernetes:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `kubectl expose` 命令，将 httpd Web 服务器暴露到 Kubernetes 外部：
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'While using the `kubectl expose` command, we specify several options:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl expose` 命令时，我们指定了几个选项：
- en: '`port`: Pod (Docker container) port that we are going to expose to the outside
    of the Kubernetes cluster.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：我们将要暴露到 Kubernetes 集群外部的 Pod（Docker 容器）端口。'
- en: '`name`: Kubernetes service name.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：Kubernetes 服务名称。'
- en: '`type`: Kubernetes service type. NodePort uses Kubernetes Node IP.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：Kubernetes 服务类型。NodePort 使用 Kubernetes 节点 IP。'
- en: 'The command to get a list of exposed Kubernetes services is `kubectl get services`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 获取暴露的 Kubernetes 服务列表的命令是 `kubectl get services`：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that port `80` was mapped to dynamic port `31395` on the Minikube VM. The
    port is dynamically chosen in the range `30000–32767`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，端口 `80` 映射到了 Minikube 虚拟机上的动态端口 `31395`。该端口在 `30000–32767` 范围内动态选择。
- en: Also, there is a `ClusterIP` field with the IP address `10.110.40.149` allocated
    for the `httpd-expose` service. Do not pay attention to this at the moment; we
    are going to discuss this later in the book.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个 `ClusterIP` 字段，IP 地址为 `10.110.40.149`，这是为 `httpd-expose` 服务分配的。暂时不用关注这个内容，我们将在本书后面讨论这个问题。
- en: 'Finally, use `curl` to check if the httpd server is available from the outside
    of the Kubernetes cluster:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 `curl` 检查 httpd 服务器是否可以从 Kubernetes 集群外部访问：
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you open this link in your web browser, you should see `It works!` on the
    web page.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在网页浏览器中打开这个链接，你应该能在网页上看到`It works!`。
- en: Using Kubernetes labels
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 标签
- en: 'When you have an application that consists of one pod and one service, there
    is no problem operating these resources. But when your application grows, or you
    have tens or hundreds of projects, pods, services and other Kubernetes resources,
    it will get harder to operate and effectively troubleshoot Kubernetes. This is
    where we can use the Kubernetes labels we mentioned earlier in this chapter. We
    are going to run a couple more Kubernetes pods using labels:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用程序由一个 Pod 和一个服务组成时，操作这些资源没有问题。但当应用程序规模扩大，或者你有数十个甚至数百个项目、Pods、服务和其他 Kubernetes
    资源时，操作和有效地排查问题就会变得更加困难。此时，我们可以使用本章前面提到的 Kubernetes 标签。我们将使用标签再运行几个 Kubernetes
    Pods：
- en: '[PRE22]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Check the Kubernetes pods we have at the moment:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 检查我们目前的 Kubernetes Pods：
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, imagine you have at least 10 or more pods. In order to efficiently filter
    out this output, we can use the `-l` option:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你有至少 10 个或更多 Pods。为了高效地筛选输出结果，我们可以使用 `-l` 选项：
- en: '[PRE24]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Filtering out output with Kubernetes labels is not the only use case. Labels
    are also used alongside selectors. You can get more information on both topics
    using the Kubernetes official documentation at [https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kubernetes标签筛选输出并非唯一的应用场景。标签还与选择器一起使用。您可以通过Kubernetes官方文档了解这两个话题，文档地址：[https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)。
- en: Deleting Kubernetes resources
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除Kubernetes资源
- en: 'If we''ve done something wrong with the pod, or it may have broken for some
    reason, there is a simple way to delete a pod using the `kubectl delete pod` command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对pod做错了什么，或者它可能因为某种原因崩溃了，可以通过`kubectl delete pod`命令轻松删除该pod：
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can delete all pods using the `--all` option:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`--all`选项删除所有pod：
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that if you run `kubectl get pods`, you will see all the containers running
    again. The reason for this is that, when we run the `kubectl run` command, it
    creates several different Kubernetes resources, which we are going to discuss
    in the following section.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你运行`kubectl get pods`，你会看到所有的容器再次运行。原因在于，当我们运行`kubectl run`命令时，它会创建多个不同的Kubernetes资源，这些资源将在接下来的部分中讨论。
- en: 'We can delete Kubernetes resources by running `kubectl delete all` with the `-l`
    option:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行`kubectl delete all`命令并加上`-l`选项来删除Kubernetes资源：
- en: '[PRE27]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This command will delete all Kubernetes with a `httpd-demo1` label only. The
    other two pods will be still available.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将只删除带有`httpd-demo1`标签的所有Kubernetes资源。其他两个pod仍然可用。
- en: 'Alternatively, we can delete all Kubernetes resources we have created so far
    by running the `kubectl delete all --all` command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过运行`kubectl delete all --all`命令删除所有已创建的Kubernetes资源：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Kubernetes advanced resources
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes高级资源
- en: 'When we create an application with the `kubectl run` command, it takes care
    of several things. Let''s create an httpd pod by running this command one more
    time and take a deeper look at what actually happens behind the scenes:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`kubectl run`命令创建应用程序时，它会处理多个任务。让我们再运行一次这个命令来创建一个httpd pod，并深入了解背后实际发生了什么：
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can take a look at the series of events that took place during this process
    by running the `kubectl get events` command. It shows you what Kubernetes did
    behind the scenes to launch this application. You will see quite a long list,
    which may seem confusing at first glance, but we can narrow it down by using the
    following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行`kubectl get events`命令来查看在此过程中发生的一系列事件。它会展示Kubernetes在幕后启动应用程序时所做的所有操作。你会看到一个相当长的列表，乍一看可能会让人困惑，但我们可以通过以下命令缩小范围：
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We are using the `kubectl get events` command with the `--sort-by=.metadata.creationTimestamp`
    option to sort our events by timestamp. If you execute this command without this
    option, events will be out of order.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`kubectl get events`命令并加上`--sort-by=.metadata.creationTimestamp`选项来按时间戳排序事件。如果没有使用此选项，事件将会乱序。
- en: 'We are mostly interested in the last two fields on every line. They are `SOURCE`
    and `MESSAGE` respectively. If we read from top to bottom in the series of events,
    we will see that one Kubernetes component tells the other component to create
    a pod with the name `httpd1-6d8bb9cdf9-thlkg` on Minikube VM, which finally happens.
    Let''s describe some of those components:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要关注每一行的最后两个字段，它们分别是`SOURCE`和`MESSAGE`。如果我们从上到下阅读事件序列，会看到一个Kubernetes组件告诉另一个组件在Minikube
    VM上创建名为`httpd1-6d8bb9cdf9-thlkg`的pod，并且这一过程最终发生了。让我们来描述一下这些组件：
- en: '`replicaset-controller`: Sometimes we need more than one `httpd` pod up and
    running to handle all the load for the application. ReplicaSet makes sure that
    a certain number of pods are up and available. ReplicaSet is controlled by the
    Deployment controller.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replicaset-controller`：有时候我们需要多个`httpd` pod来处理应用程序的所有负载。ReplicaSet确保一定数量的pod正在运行并可用。ReplicaSet由Deployment控制器管理。'
- en: '`default-scheduler`: Decides which node to run a specific pod on. In our case
    it is Minikube VM.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default-scheduler`：决定将特定的pod运行在哪个节点上。在我们的例子中，它是Minikube VM。'
- en: '`deployment-controller`: Defines the desired state for a Kubernetes resource.
    In our case, it is a state of `httpd` pod. The Deployment controller also instructs
    ReplicaSet to make sure that certain pods are running.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deployment-controller`：定义Kubernetes资源的期望状态。在我们的例子中，它是`httpd` pod的状态。Deployment控制器还会指示ReplicaSet确保某些pod正在运行。'
- en: 'As already mentioned, the `kubectl run` command creates other Kubernetes resources
    including ReplicaSet and Deployment. We can verify that by running `kubectl get
    replicaset` and `kubectl get deployment` respectively:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`kubectl run` 命令会创建其他 Kubernetes 资源，包括 ReplicaSet 和 Deployment。我们可以通过分别运行
    `kubectl get replicaset` 和 `kubectl get deployment` 来验证这一点：
- en: '[PRE31]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We mentioned that Deployment controller defines how many instances of `httpd`
    pods run. By default, this number is `1`. We can easily change this behavior and
    edit Deployment config with the `kubectl edit deploy httpd1` command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到过，Deployment 控制器定义了多少个 `httpd` Pods 运行。默认情况下，这个数量是 `1`。我们可以轻松改变这个行为，并使用
    `kubectl edit deploy httpd1` 命令编辑 Deployment 配置：
- en: '[PRE32]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once you have changed the replica value to `3`, save the changes and exit edit
    mode. The Deployment controller will detect the changes in the config and instruct ReplicaSet
    to bring up two more `httpd` pods. Let''s verify that:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将副本值更改为 `3`，保存更改并退出编辑模式。Deployment 控制器将检测到配置中的变化，并指示 ReplicaSet 启动两个新的 `httpd`
    Pods。让我们验证一下：
- en: '[PRE33]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If we try to delete all the pods, ReplicaSet will run a new set of pods automatically.
    Let''s see how it works one more time:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试删除所有的 Pods，ReplicaSet 会自动启动一组新的 Pods。让我们再看一遍它是如何工作的：
- en: '[PRE34]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Delete all Kubernetes resources before we move on to the next section:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一章节之前，删除所有 Kubernetes 资源：
- en: '[PRE35]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Creating kubernetes services using YAML and JSON files
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 YAML 和 JSON 文件创建 Kubernetes 服务
- en: 'You can also create Kubernetes resources manually using YAML and JSON files.
    Let''s go ahead and create a simple pod running a httpd web server using the `kubectl
    create` command. We will have to create a YAML-formatted file:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 YAML 和 JSON 文件手动创建 Kubernetes 资源。我们来创建一个简单的运行 httpd Web 服务器的 Pod，使用 `kubectl
    create` 命令。我们需要创建一个 YAML 格式的文件：
- en: '[PRE36]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Reading YAML and JSON-formatted files is critical for Kubernetes and for later,
    in the OpenShift chapter. If you feel uncomfortable reading YAML or JSON files,
    read up on these subjects. Check the *Further reading* section for more information.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读 YAML 和 JSON 格式的文件对 Kubernetes 和后续的 OpenShift 章节至关重要。如果你不熟悉 YAML 或 JSON 文件，建议学习相关内容。请查阅
    *进一步阅读* 部分获取更多信息。
- en: It may look a bit complicated and hard to understand, but as we move on in this
    book, you will see a lot of similarities between these YAML and JSON files.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能有点复杂，难以理解，但随着我们在本书中继续前进，你会发现这些 YAML 和 JSON 文件之间有很多相似之处。
- en: YAML configuration files are very structured and each resource is a set of keys
    and values. You can use the Kuberentes API documentation to find out what every
    parameter does: [https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 配置文件结构非常明确，每个资源都是一组键值对。你可以使用 Kubernetes API 文档来了解每个参数的作用：[https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/)。
- en: 'Create a pod using the `httpd-pod.yaml` file:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `httpd-pod.yaml` 文件创建一个 Pod：
- en: '[PRE37]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This command creates a pod named `httpd`; it does not create anything else.
    In larger deployments with heavy automation involved, this is the way to deploy
    Kubernetes resources, but this, of course, requires better Kubernetes skills.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令创建了一个名为 `httpd` 的 Pod；它不会创建其他任何内容。在涉及大量自动化的更大部署中，这是部署 Kubernetes 资源的方式，但这当然需要更好的
    Kubernetes 技能。
- en: Similarly, we can create other Kubernetes resources, including ReplicaSet, Deployment,
    and others.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以创建其他 Kubernetes 资源，包括 ReplicaSet、Deployment 等。
- en: Clearing the virtual environment
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理虚拟环境
- en: 'Once you are done working with Kubernetes, you can easily stop the Minikube
    cluster by running the `minikube stop` command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了 Kubernetes 的工作，你可以通过运行 `minikube stop` 命令轻松停止 Minikube 集群：
- en: '[PRE38]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After that, you can delete the Minikube VM if you want by running the `minikube
    delete` command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，如果你想删除 Minikube 虚拟机，可以运行 `minikube delete` 命令：
- en: '[PRE39]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Verify that the Minikube cluster no longer exists:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 验证 Minikube 集群是否已不再存在：
- en: '[PRE40]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Kubernetes limitations
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 的限制
- en: 'Although it is a powerful orchestration engine, Kubernetes doesn''t have the
    features that are commonly required by PaaS solutions such as OpenShift and others:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Kubernetes 是一个强大的编排引擎，但它没有像 OpenShift 等 PaaS 解决方案所常见的那些功能：
- en: '**Security**:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：'
- en: Kubernetes namespaces are provided mainly for the purpose of resource quota
    enforcement for different groups of users, but they do not provide any security
    constraints or authentication. For example, every user from every namespace can
    see all other namespaces and their resources.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes命名空间主要用于不同用户组的资源配额强制执行，但它们不提供任何安全约束或身份验证。例如，每个命名空间中的每个用户都可以看到所有其他命名空间及其资源。
- en: '**Deployments**:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：'
- en: Kubernetes provides the means to create a deployment from an image with a single
    command, but doesn't create a service for external clients.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes提供通过单个命令从镜像创建部署的方式，但不会为外部客户端创建服务。
- en: '**SCM integration**:'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCM集成**：'
- en: Kubernetes doesn't support integration with SCM via webhooks to facilitate deployment.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes不支持通过webhook与SCM集成来促进部署。
- en: '**Builds**:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：'
- en: Kubernetes doesn't provide advanced build modes such as **Source-to-Image**
    (**S2I**) and Custom Builder.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes不提供高级构建模式，如**源到镜像**（**S2I**）和自定义构建器。
- en: '**Authentication**:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：'
- en: Support for advanced authentication schemes such as LDAP, Google, GitHub, Keystone,
    or Kerberos is achieved only through a webhook or authenticating proxy.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对于LDAP、Google、GitHub、Keystone或Kerberos等高级身份验证方案的支持，只有通过webhook或身份验证代理才能实现。
- en: '**CI/CD**:'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD**：'
- en: Kubernetes has no integrated application life cycle support, which makes it
    difficult to integrate it into a corporate software delivery framework.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes没有集成的应用生命周期支持，这使得它难以集成到企业软件交付框架中。
- en: All these limitations will be addressed in the OpenShift sections in subsequent
    chapters.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些限制将在后续章节的OpenShift部分中得到解决。
- en: Summary
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have briefly discussed Kubernetes concepts and the Kubernetes
    architecture, and the main difference between Kubernetes and Docker Swarm. We
    installed Kubernetes using Minikube, which is a very easy-to-use CLI tool with
    which to set up a Kubernetes lab environment. Then we used the `kubectl` command
    to perform various tasks such as running, editing, describing, and deleting Kubernetes
    pods and other Kubernetes resources. Finally, we finished by listing the main
    Kubernetes limitations, which we are going to address later in this book.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要讨论了Kubernetes的概念、Kubernetes架构以及Kubernetes和Docker Swarm之间的主要区别。我们使用Minikube安装了Kubernetes，这是一个非常易于使用的CLI工具，可以用来搭建Kubernetes实验环境。然后，我们使用`kubectl`命令执行了各种任务，如运行、编辑、描述和删除Kubernetes的Pod以及其他Kubernetes资源。最后，我们列出了Kubernetes的主要限制，后续章节中我们将对此进行讨论。
- en: In the next chapter, we are going to work with CRI-O, which is a universal container
    runtime interface that allows Kubernetes to provide support for different container
    platforms.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何使用CRI-O，它是一个通用容器运行时接口，允许Kubernetes为不同的容器平台提供支持。
- en: Questions
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'What are the two Node types used by Kubernetes?:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes使用了哪两种节点类型？：
- en: Node
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节点
- en: Minikube
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Minikube
- en: Vagrant
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vagrant
- en: Master
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主节点
- en: 'Which container platforms are supported by Kuberntes? choose two:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes支持哪些容器平台？选择两个：
- en: Docker
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker
- en: OpenShift
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenShift
- en: Rkt
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Rkt
- en: Minishift
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Minishift
- en: 'In Kubernetes, a pod is a minimal unit of deployment which represents a group
    of containers:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kubernetes中，Pod是最小的部署单位，表示一组容器：
- en: 'True'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: 'What are the main two Kubernetes services running on a Kubernetes Node? choose
    two:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes节点上运行的主要两个服务是什么？选择两个：
- en: etcd
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: etcd
- en: kubelet
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: kubelet
- en: kube-proxy
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: kube-proxy
- en: kube-node
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: kube-node
- en: kube-apiserver
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: kube-apiserver
- en: 'What are acceptable file formats for creating Kubernetes resources with the
    `kubectl create -f` command? choose two:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl create -f`命令创建Kubernetes资源时，接受哪些文件格式？选择两个：
- en: JSON
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSON
- en: Jinja2
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jinja2
- en: CSV
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSV
- en: YANG
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: YANG
- en: YAML
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: YAML
- en: 'Kubernetes has a built-in CI/CD toolset to improve corporate software delivery
    frameworks:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes拥有内置的CI/CD工具集，以改善企业软件交付框架：
- en: 'True'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Further reading
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Since we are covering the very basics of Docker containers, you may be interested
    in diving into specific topics. Here''s a list of links that may be helpful to
    look through to learn more about Docker and containers in general:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只涉及Docker容器的基础知识，您可能会有兴趣深入研究特定主题。以下是一些链接，您可以通过它们进一步了解Docker和容器的一般知识：
- en: '**Kubernetes concepts**: [https://kubernetes.io/docs/concepts/](https://kubernetes.io/docs/concepts/)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes概念**：[https://kubernetes.io/docs/concepts/](https://kubernetes.io/docs/concepts/)'
- en: '**Kubernetes CLI**: [https://kubernetes.io/docs/reference/generated/kubectl/kubectl/](https://kubernetes.io/docs/reference/generated/kubectl/kubectl/)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes CLI**：[https://kubernetes.io/docs/reference/generated/kubectl/kubectl/](https://kubernetes.io/docs/reference/generated/kubectl/kubectl/)'
- en: '**Kubernetes installation**:[ https://kubernetes.io/docs/setup/pick-right-solution/](https://kubernetes.io/docs/setup/pick-right-solution/)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes 安装**：[https://kubernetes.io/docs/setup/pick-right-solution/](https://kubernetes.io/docs/setup/pick-right-solution/)'
- en: '**Kubernetes cheat sheet**: [https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes 备忘单**：[https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)'
- en: '**Kubernetes API overview**: [https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/](https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes API 概述**：[https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/](https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/)'
- en: '**YAML wiki page**:[ https://en.wikipedia.org/wiki/YAML](https://en.wikipedia.org/wiki/YAML)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YAML 维基页面**：[https://en.wikipedia.org/wiki/YAML](https://en.wikipedia.org/wiki/YAML)'
- en: '**YAML syntax check**: [http://www.yamllint.com/](http://www.yamllint.com/)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YAML 语法检查**：[http://www.yamllint.com/](http://www.yamllint.com/)'
- en: '**JSON Wiki page**:[ https://en.wikipedia.org/wiki/JSON](https://en.wikipedia.org/wiki/JSON)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON 维基页面**：[https://en.wikipedia.org/wiki/JSON](https://en.wikipedia.org/wiki/JSON)'
- en: '**JSON syntax check**: [https://jsonlint.com/](https://jsonlint.com/)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON 语法检查**：[https://jsonlint.com/](https://jsonlint.com/)'
