- en: Collaboration Using the GitHub Workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](part0066.html#1UU540-184576c1044a4350bd24f18b869c0732), *Managing
    Organizations and Teams*, we explored how you can create and manage organizations
    and teams that will further help you in collaborating with others.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub is a great tool for collaboration and, as such, it has come up with a
    workflow based on the features it provides and the power of Git. It has named
    it the GitHub workflow ([https://guides.github.com/introduction/flow](https://guides.github.com/introduction/flow)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to work with branches and pull requests,
    which are the most powerful features of GitHub. Here''s what we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning about pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peer review and inline comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging the pull request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about pull requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pull request is the number one feature in GitHub that made it what it is today.
    It was introduced in early 2008 and has been used extensively among projects since
    then.
  prefs: []
  type: TYPE_NORMAL
- en: While everything else can be pretty much disabled in a project's settings (such
    as issues and the wiki), pull requests are always enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Why pull requests are a powerful asset to work with
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you are working on a personal project where you are the sole contributor,
    or on a big open source project with contributors from all over the globe, working
    with pull requests will certainly make your life easier.
  prefs: []
  type: TYPE_NORMAL
- en: Think of pull requests like chunks of commits, and the GitHub UI helps you clearly
    visualize what is about to be merged in the default branch or the branch of your
    choice. Pull requests are reviewable with an enhanced different view. You can
    easily revert them with a simple button on GitHub and they can be tested before
    merging, provided a CI service is enabled in the repository.
  prefs: []
  type: TYPE_NORMAL
- en: '**CI** stands for **continuous integration**. For more details, you can refer
    to the applications that GitHub integrates at [https://github.com/marketplace/category/continuous-integration](https://github.com/marketplace/category/continuous-integration).'
  prefs: []
  type: TYPE_NORMAL
- en: The connection between branches and pull requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a special connection between branches and pull requests. In this connection,
    GitHub will automatically show you a button to create a new pull request if you
    push a new branch in your repository. As we will explore in the following sections,
    this is tightly coupled to the GitHub workflow, and GitHub uses some special words
    to describe the *from* and *to* branches. As per GitHub''s documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The base branch is where you think changes should be applied, the head branch
    is what you would like to be applied.*'
  prefs: []
  type: TYPE_NORMAL
- en: So, in GitHub terms, head is your branch, and base is the branch you would like
    to merge into.
  prefs: []
  type: TYPE_NORMAL
- en: Creating branches directly in a project – the shared repository model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The shared repository model, as GitHub aptly calls it, is when you push new
    branches directly to the source repository. From there, you can create a new pull
    request by comparing between branches, as we will see in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, in order to be able to push to a repository, you either have to be
    the owner or a collaborator; in other words, you must have write access.
  prefs: []
  type: TYPE_NORMAL
- en: Creating branches in your fork – the fork and pull model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forked repositories are related to their parent in a way that GitHub uses in
    order to compare their branches. The fork and pull model is usually used in projects
    when you do not have write access, but are willing to contribute.
  prefs: []
  type: TYPE_NORMAL
- en: After forking a repository, you push a branch to your fork and then create a
    pull request in the parent repository, asking its maintainer to merge the changes.
    This is common practice for contributing to open source projects hosted on GitHub.
    You will not have access to their repository, but, being open source, you can
    fork the public repository and work on your own copy.
  prefs: []
  type: TYPE_NORMAL
- en: How to create and submit a pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are quite a few ways to initiate the creation of a pull request, as we
    will see in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The most common one is to push a branch to your repository and let GitHub's
    UI guide you. Let's explore this option first.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Compare & pull request button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever a new branch is pushed to a repository, GitHub shows a quick button
    to create a pull request. In reality, you are taken to the compare page, as we
    will explore in the next section, but some values are already filled out for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create, for example, a new branch named `add-gitignore` where we will
    add a `.gitignore` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, head over to your repository''s main page and you will notice the Compare
    & pull request button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here on, if you hit this button, you will be taken to the compare page.
    Note that I am pushing to my repository following the shared repository model,
    so this is how GitHub greets me:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: What would happen if I used the fork and pull repository model? For this purpose,
    I created another user to fork my repository and followed the same instructions
    to add a new branch named `add-gitignore-2` with the same changes. From here on,
    when you push the branch to your fork, the Compare & pull request button appears
    whether you are on your fork's page or on the parent repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how it looks if you visit your fork:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot will appear if you visit the parent repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the last case, you can see from which user this branch came from (axil42:add-gitignore-2).
  prefs: []
  type: TYPE_NORMAL
- en: 'In either case, when using the fork and pull model, hitting the Compare & pull
    request button will take you to the compare page with slightly different options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Since you are comparing across forks, there are more details. In particular,
    you can see the base fork and branch as well as the head fork and branch that
    you are the owner of.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub considers the default branch set in your repository to be the one you
    want to merge into (base) when the Create pull request button appears.
  prefs: []
  type: TYPE_NORMAL
- en: Before submitting it, let's explore the other two options that you can use to
    create a pull request. You can jump to the *Submitting a pull request* section
    if you like.
  prefs: []
  type: TYPE_NORMAL
- en: Using the compare function directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous section, the Compare & pull request button takes
    you to the compare page with some predefined values. The button appears right
    after you push a new branch and is there only for a few moments. In this section,
    we will see how to use the compare function directly in order to create a pull
    request.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the compare function by clicking on the New pull request button
    next to the branch drop-down list on a repository''s main page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is pretty powerful as you can compare across forks or, in the same repository,
    pretty much everything—branches, tags, single commits, and time ranges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default page when you land on the compare page is as follows; you start
    by comparing your default branch with GitHub, proposing a list of recently created
    branches to choose from and compare:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In order to have something to compare to, the commits of the base branch must
    be older than what you are comparing to.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, if I choose the `add-gitignore` branch, GitHub compares it to a
    master and shows the differences along with the message that it is able to be
    merged into the base branch without any conflicts. Finally, you can create the
    pull request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that I am using the compare function while I'm at my own repository.
    When comparing in a repository that is a fork of another, the compare function
    slightly changes and automatically includes more options, as we have seen in the
    previous section.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, the New pull request quick button is just a shortcut
    for using the compare function manually. If you want to have more fine-grained
    control on the repositories and the branches compared, use the compare feature
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: Using the GitHub web editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have seen the two most well-known method for initiating a pull request.
    There is a third way as well: using the web editor that GitHub provides in its
    entirety. This can prove useful for people who are not too familiar with Git and
    the Terminal, and can also be used by more advanced Git users who want to propose
    a quick change.'
  prefs: []
  type: TYPE_NORMAL
- en: As always, according to the model you are using (shared repository or fork and
    pull), the process is a little different. Let's first explore the shared repository
    model flow using the web editor, which means editing files in a repository that
    you own.
  prefs: []
  type: TYPE_NORMAL
- en: The shared repository model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, make sure that you are on the branch that you wish to branch off;
    then, head over to a file that you wish to change and press the edit button with
    the pencil icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make the change you want to that file, add a proper commit message, and choose
    Create a new branch, giving the name of the branch you wish to create. By default,
    the branch name is `username-patch-i`, where `username` is your username and `i`
    is an increasing integer starting from `1`. Consecutive edits on files will create
    branches such as `username-patch-1`, `username-patch-2`, and so on. In our example,
    I decided to give the branch a name of my own:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When ready, press the Propose file change button. From this moment on, the branch
    is created with the file edits you made. Even if you close the next page, your
    changes will not be lost. Let's skip the pull request submission for the time
    being and see how the fork and pull model works.
  prefs: []
  type: TYPE_NORMAL
- en: The fork and pull model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the fork and pull model, you fork a repository and submit a pull request
    from the changes you make in your fork. In the case of using the web editor, there
    is a caveat. In order to get GitHub to automatically recognize that you wish to
    perform a pull request in the parent repository, you have to start the web editor
    from the parent repository and not your fork. In the following screenshot, you
    can see what happens in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'GitHub informs you that a new branch will be created in your repository (fork)
    with the new changes in order to submit a pull request. Hitting the Propose file
    change button will take you to the form to submit the pull request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Contrary to the shared repository model, you can now see the base/head repositories
    and branches that are compared. Also, notice that the default name for the new
    branch is `patch-i`, where `i` is an increasing integer number. In our case, this
    was the first branch created that way, so it was named `patch-1`.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to have the ability to name the branch the way you like, you
    should follow the shared repository model instructions, as explained in the preceding
    section. Following that route, edit the file in your fork where you have write
    access, add your own branch name, hit the Propose file change button for the branch
    to be created, and then abort when asked to create the pull request. You can then
    use the New pull request quick button or use the compare function directly to
    propose a pull request to the parent repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing to consider when using the web editor is the limitation of editing
    one file at a time. If you wish to include more changes in the same branch that
    GitHub created for you when you first edited a file, you must first change to
    that branch and then make any subsequent changes. How to change the branch? Simply
    choose it from the drop-down menu, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Submitting a pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have explored the various ways to initiate a pull request. In this
    section, we will finally submit it.
  prefs: []
  type: TYPE_NORMAL
- en: The pull request form is identical to the form when creating a new issue. For
    more details, refer to [Chapter 1](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732),
    *Brief Repository Overview and Usage of the Issue Tracker*, the *Learning how
    to use the powerful benefits of the issue tracker* section.
  prefs: []
  type: TYPE_NORMAL
- en: If you have write access to the repository that you are making the pull request
    to, then you are able to set labels, milestones, and assignees.
  prefs: []
  type: TYPE_NORMAL
- en: 'The title of the pull request is automatically filled by the last commit message
    that the branch has or, if there are multiple commits, it will just fill in the
    branch name. In either case, you can change it as you see fit. In the following
    screenshot, you can see that the title is taken from the branch name after GitHub
    has stripped the special characters. In a sense, the title gets humanized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can add an optional description and images if you want. Whenever ready,
    hit the Create pull request button. In the following sections, we will explore
    how the peer review works and eventually merge the pull request.
  prefs: []
  type: TYPE_NORMAL
- en: Peer review and inline comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The cool thing about pull requests is that you have a nice and clear view of
    what is about to get merged. You can see only the changes that matter, and the
    best part is that you can fire up a discussion concerning those changes.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, we submitted the pull request so that it can be reviewed
    and eventually get merged. Suppose that we are collaborating with a team and they
    chime in to discuss the changes. Let's first check the layout of a pull request.
  prefs: []
  type: TYPE_NORMAL
- en: The layout of a pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every pull request pretty much looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the previous screenshot, you can tell what the specific number of the
    pull request is. It is like an identifier within the repository and it is not
    separated from the issues count. Issues and pull requests share the same ID counter.
    So, in the preceding example, you can see that although this is our first pull
    request, it is numbered #6; the previous five were issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, there is the information that the pull request is Open and who wants
    to merge how many commits into which branch from which other branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Right below the information we just described, there are four tabs: Conversation,
    Commits, Checks, and Files changed. In Conversation, except for the comments that
    we will see in the following screenshots, GitHub also adds information about the
    events concerning the particular pull request. You can see the action and the
    time it occurred. For example, take a look at the following screenshot; even little
    changes such as adding a label are being recorded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Conversation tab is also where the final call takes place. This is where
    the button to merge the pull request resides, and you can see its status. The
    button is green, which means there are no conflicts between the changed files
    and the ones that are in the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, there is the comment form that is the same as in the issue tracker
    that we explored in [Chapter 1](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732),
    *Brief Repository Overview and Usage of the Issue Tracker*. You can leave any
    comments concerning the pull request here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Commits tab shows the commits made in this branch and the commits that
    are not yet in the branch you are merging into. For example, the `update-readme`
    branch has two commits that do not exist in `master`. GitHub shows the commits
    in chronological order along with other information, such as who the author is,
    and links to the commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Checks tab is reserved for external services that talk to GitHub's API and
    can perform checks on the pull request. That can be a continuous integration service
    that tests the code, or one that checks if the pull request conforms to some guidelines.
    We won't get into any details since this is a very broad area outside the scope
    of this book, but you're free to read more on GitHub's documentation at [https://help.github.com/articles/about-status-checks/#checks.](https://help.github.com/articles/about-status-checks/#checks)
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the Files changed tab shows the files that are changed in this pull
    request. There are two ways to see the differences in the commits. The default
    one is to see the changes in a unified way, with additions and deletions on the
    same page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that for each addition, GitHub marks a line with a green background color.
    On the contrary, if you were to remove some lines, they would show in pink. I
    will leave that to you as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other way is to choose Split, and GitHub will show the differences in a
    side-by-side view. Under the Diff settings drop-down menu, there''s the option
    to see the changes in Split mode. Choose it and hit Apply and reload for the changes
    to take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will further explore the Files changed tab since this
    is where the review process takes place.
  prefs: []
  type: TYPE_NORMAL
- en: The review process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make the review process a bit easier to follow, there are a couple of features
    that are useful when dealing with a lot of commits and changed files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Changes from drop-down menu is helpful if you want to see the changes introduced
    by a single commit or a range of commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next to it, the Jump to dropdown provides a list of all changed files that
    you can choose and jump to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This might seem redundant when there's only two files, but it's powerful if
    there's a dozen of them as you don't have to manually scroll down the page and
    find what you're looking for.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, this menu will become sticky as you scroll down a long page of
    changes so that you don''t have to scroll all the way back up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'GitHub supports inline comments, so you can leave a comment under every changed
    line, as seen in the Files changed tab. When hovering over a line, you will notice
    the cross image, as shown in the following screenshot; click on it and the comment
    form will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When writing a comment, you can either submit it right away as a single comment
    or start a review. When starting a review, the comment is submitted, but it doesn''t
    notify the repository members. That way, you can submit comments in batches and
    notify the submitter of the pull request in one go. In the following example,
    there are two comments on the proposed changed files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that they are in pending status and they wait to be finally submitted
    for review. Once you're ready to finish your review, hit the Finish your review
    button under your comments or use the Review changes drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From there on, you have three options. The first one is just to Comment and
    ask nothing else from the submitter. The second option is to Approve the changes
    while leaving your feedback. Finally, the last one is to Request changes, usually
    in the lines where you commented on. Optionally, leave a review summary and click
    **Submit review**.
  prefs: []
  type: TYPE_NORMAL
- en: 'With a few comments on the diff and a request for changes, we can see a couple
    of things. First of all, inline comments count towards the overall conversation,
    so the Conversation tab should pick that number. Furthermore, since changes were
    requested, that is shown in the pull request widget at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As the submitter of the pull request, you can click on the **See review** link
    and be taken to the review comments or hit **Dismiss review** if you think you
    have addressed all the comments. In the latter case, you will need to add a comment
    justifying your action.
  prefs: []
  type: TYPE_NORMAL
- en: Correcting mistakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen how conversations begin, but what happens when the changes
    you made need some tweaking to be considered as ready to merge?
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, you can push new commits to the branch associated with the pull
    request and GitHub will pick up those changes and amend it. The new changes will
    show up and further feedback can be given. In *The review process* section, my
    evil twin, user `axil42`, raised a concern about a wrong line being committed.
    We will now make a new commit and push it to the `update-readme` branch and see
    what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in GitHub, three changes occurred. Firstly, there was another commit added
    to the Commits tab. Then, in the Files changed tab, since the line on which the
    comments were relying on was removed, the comments no longer appeared. Instead,
    you can see that in the Conversation tab, this particular discussion was marked
    as outdated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you were by, any chance, in the Files changed tab while the last commit
    was pushed, GitHub would inform you about the changes and would urge you to refresh
    the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Merging the pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the conversation took place, changes were made, and the peer review worked
    as expected, so it's now time to finally merge the pull request.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have access to merge the pull request, you should see the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the other hand, owners or collaborators with write access can also merge
    pull requests. In this case, you should see the Merge pull request green button.
    From the arrow next to it, you can optionally choose the merge method before merging
    it. There are three options, with the default one being the creation of a merge
    commit. Pick the one you want and hit merge:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Pressing this button will not merge it immediately, but you will have another
    chance to confirm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The commit message of this merge is the one in bold, and the one below that
    can be edited is the extended commit message, which, by default, grabs the pull
    request title. In the extended commit message, you can reference issue numbers
    with a special meaning. Read more in the *Tips and tricks* section of this chapter
    to learn how to automatically close issues from pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: Once merged, you can see the green icons turning to purple. This indicates a
    merged pull request.
  prefs: []
  type: TYPE_NORMAL
- en: Removing/restoring a branch after the pull request is merged
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to have everything cleaned up and tidy, GitHub offers removing the
    merged branch with a simple button right after the pull request is merged:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the deletion is completed, GitHub makes this an action event. If you
    changed your mind, you can always restore the removed branch again using the Restore
    branch button, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Reverting a pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are cases where you might want to revert a pull request, and GitHub makes
    this extremely easy. Right after the merge happens, there will be a Revert button
    next to the merge action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Pressing this button will create a new pull request with opposite commits to
    the ones the previous pull request included.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have explored most of the functionality of pull requests. Let's see
    a couple of things that leverage their power even more.
  prefs: []
  type: TYPE_NORMAL
- en: Closing issues via commit messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732), *Brief
    Repository Overview and Usage of the Issue Tracker*, in the *Tips and tricks*
    section, you learned how to reference issues inside the issue tracker. Extending
    this ability, you can reference issue numbers in commit messages in order to close
    some issues when the commit is merged to the default branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this action to be triggered, you have to use some keywords. For example,
    `Closes #42` in the commit message will close issue 42 when that commit is merged
    with the default branch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As per the GitHub documentation, the following keywords will close an issue
    via a commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: close
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: closes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: closed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fixed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take, for example, an open issue such as the following one and note
    down its number, which in this case is 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, make a commit, which, in its message, has one of the preceding keywords,
    referencing the preceding issue number. We will follow the GitHub flow that we
    learned in this chapter, so first create a new branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For the sake of our example, I modified one file in the repository and then
    committed it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then, open a new pull request to merge the branch we just created, and merge
    it like you learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the issue tracker, you will no longer see issue `#2` among the
    open issues. Instead, go to the closed ones and you will see that issue `#2` is
    closed. GitHub provides all the necessary information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For more information on closing issues via commit messages, check out GitHub's
    documentation at [https://help.github.com/articles/closing-issues-using-keywords/](https://help.github.com/articles/closing-issues-using-keywords/).
  prefs: []
  type: TYPE_NORMAL
- en: Task lists in pull requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A nice feature when submitting a pull request, which is a work in progress,
    is the task lists. A work in progress pull request would mean that you work on
    a specific feature/bug, and so on, but there are many changes that cannot be committed
    in one go and you also need someone to peer review your progress while working
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, you will find task lists quite handy. Let''s create a pull request
    and, in the description box, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be a list with checkboxes where you can manually check/uncheck
    the items whenever you complete a task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you head over to the pull request tracker for an overview, you will see
    the task list showing the following pull request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This works for cross references as well, and since we referenced issue 2 in
    the task list, this will be recorded in the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Task lists can also exist in issues.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the diff of pull requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the hardcore fans of patch and diff files, GitHub has this nice feature
    where you can view and download the changes that a pull request introduces in
    the format of a patch. Simply append `.patch` to the URL of a pull request. For
    example, [https://github.com/github-essentials/github-essentials-v2/pull/6](https://github.com/github-essentials/github-essentials-v2/pull/6)
    becomes [https://github.com/github-essentials/github-essentials-v2/pull/6.patch](https://github.com/github-essentials/github-essentials-v2/pull/6.patch).
    The content of this file includes all the commits of a pull request.
  prefs: []
  type: TYPE_NORMAL
- en: A global list of your open pull requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right next to the search bar at the top, there is a link named Pull requests
    that takes you to a page where you can find all your pull requests that are open.
    Go to [https://github.com/pulls](https://github.com/pulls) directly to visit this
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a LICENSE file using the web editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Much like you can edit the already existing files, you can also create new
    ones. In this case, we want to add a license file, and GitHub provides a way of
    choosing among a variety of them. On your repository''s initial page, under the
    Code tab, click the Create new file button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next page, type `LICENSE` so that the Choose a license template button
    appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on it and choose a license from the ones GitHub provides. Once done,
    hit Review and submit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next step, you are called to commit your changes straight to the default
    branch or create a pull request. Once the changes are merged, if you navigate
    to the repository''s main page, you will see a link to the license file that you
    just committed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here is an easter egg. You can type `LICENCE` the British way or type `LICENSE`
    the American way. GitHub is smart enough to respect this language quirk and, in
    fact, it doesn't even care about the case of the letters. For what it's worth,
    typing `LiCENce` or `liCEnSe` is still considered the same! Lastly, the word `copying`
    is also considered to be a synonym to license, so the previous examples apply
    to this word as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new directories using the web editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from creating new files, you can also create new directories via the web
    editor. Just click on the Create new file button, like we demonstrated in the
    previous trick of choosing a license, and type the name of the directory ending
    with a slash (`/`). You can repeat this process as many times as you like.
  prefs: []
  type: TYPE_NORMAL
- en: The only caveat is that empty directories are not being picked up by Git and,
    by extension, by GitHub, so you will have to provide a file at the end if you
    want to commit this change.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the GitHub workflow and the various ways to perform
    a pull request, as well as the many features that GitHub provides to make that
    workflow even smoother. This is how the majority of open source projects work
    when there are dozens of contributors involved.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to make pretty, static web pages that are
    hosted solely on GitHub and how to read the analytics that GitHub provides for
    each project.
  prefs: []
  type: TYPE_NORMAL
