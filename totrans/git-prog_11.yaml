- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finding a Broken Commit: Bisect and Blame'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sooner or later, you are likely to find that you have a bug in your program
    that was introduced sometime in the past. You can go searching through all your
    prior commits, but that is time consuming and inefficient. Git provides a command,
    bisect, to take care of all the hard work for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how it works: bisect asks you for a known "bad" commit. Most often
    this is the last commit. It then asks for a known "good" commit – that is, a commit
    that is known to work. You do not have to try out a variety of commits to find
    this; just far back enough that you can be sure it was working back then.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are cautious, you may want to check out the good commit and run it just
    to make sure.
  prefs: []
  type: TYPE_NORMAL
- en: Bisect will then do a series of binary searches looking to find the first bad
    commit. If you have good unit tests, bisect can do this on its own; otherwise
    you must test each commit it finds and report whether it is good or bad.
  prefs: []
  type: TYPE_NORMAL
- en: You begin by entering `git bisect start`. This enters the bisect state, not
    unlike the way we might enter the rebase state.
  prefs: []
  type: TYPE_NORMAL
- en: Your second command is to tell bisect that the current commit is broken (not
    working, or in bisect's terminology, *bad*). You indicate this by entering `git
    bisect bad`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You now need to tell bisect a good checkout. You can do this in one of two
    ways: either give it the ID of a good commit, or tell it how many commits to go
    back from the current, for example `git checkout HEAD~12`, indicating that we
    know that things were working twelve commits ago.'
  prefs: []
  type: TYPE_NORMAL
- en: Git will divide the remaining commits roughly in half, and check out a commit.
    Let's say that this is the commit made six commits prior to the current one. You
    then test that commit and tell bisect if it is good or bad.
  prefs: []
  type: TYPE_NORMAL
- en: If you say it is good, that means that every commit before it is good. If you
    say it is bad, that means that every commit after it is bad. Let's assume commit
    6 is good. Bisect will now consider its range to be 6 to 12 and might check out
    commit 9\.
  prefs: []
  type: TYPE_NORMAL
- en: 'You test commit 9 and find that it is bad. That means that every commit after
    9 is bad. Bisect now has a range of 6 to 9 and checks out 7\. If 7 is good then
    the bad commit is either 8 or 9\. We test 8 and get the answer: if it is good
    then 9 is the first bad commit, otherwise it is 8.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All of this is much easier to see with an example. Let''s create a new repository
    called `BisectTest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11.png)![](img/B17441_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: The repo to demonstrate bisect'
  prefs: []
  type: TYPE_NORMAL
- en: Now, clone that repository to your local disk as we've done before. To demonstrate
    how this works, we're going to create 12 commits, with one in the middle that
    has an error that will propagate until someone notices that the program is broken
    after checking in commit 12\. "Oh no," we can hear that programmer cry, "this
    could have been broken for a long time, with no one noticing. I need to use bisect
    to find out which commit was bad and fix it."
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use our tried-and-true `Calculator` class to create 12 commits. The
    first will just create the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: The beginning of our program'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll save and commit that as our first commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: Save and commit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we''ll create the `Calculator` class and commit that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'That makes three commits: the initial commit created when you cloned it, the
    commit after creating the program, and this commit after creating the `Calculator`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: The three commits'
  prefs: []
  type: TYPE_NORMAL
- en: Now we'll add the four functions (add, subtract, multiply, and integer division)
    and commit after each one. After doing so, we have seven commits.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add the modulus operator, real division, and square root, committing after
    each one.
  prefs: []
  type: TYPE_NORMAL
- en: That gives us ten commits. Next, we'll go back to the program and use the calculator
    to print out the value of 23/4 using integer division, which gives us the value
    5\. Let's check that in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll use the modulus operator on the same division:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll divide using doubles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, we''re ready to show off our results at the next code review. We run
    the program and we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: That result can't be right. Now, in this case, the problem is obvious; our modulus
    operator is off. But in the real world, the answer will be far less obvious, let
    alone where it was introduced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use bisect to find the commit where we went wrong. We start up bisect,
    and then we tell it that the current commit is bad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: Starting bisect'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to tell it a good commit. Let''s look at the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Looking for the good commit'
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that the second commit was good because all we did was create the project.
    Let''s tell that to bisect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: A known good commit'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may get a lot of warnings about having a detached head (ouch). You can
    safely ignore those warnings. For form''s sake, we''ll test the currently checked-out
    commit and of course, it is fine. So we tell bisect that the current checkout
    is good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: Telling Bisect this commit is good'
  prefs: []
  type: TYPE_NORMAL
- en: It comes back with some interesting information. It tells you that if the original
    commit was bad, and this one is good, then it has five revisions left to test,
    which will take roughly three steps. It also tells you that it checked out the
    commit whose message is "Add the divide function." Let's inspect the (now) current
    program and see if it is right. (Normally, here, you'd run the program to see
    if you get the expected result. Even better, you might run your suite of unit
    tests to see if it passes.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking in Visual Studio we see that the working directory looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Looks good. Note that some functions are missing, and that is because bisect
    checked out an earlier commit. We can tell bisect that this commit is good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: Another good commit'
  prefs: []
  type: TYPE_NORMAL
- en: 'It comes back and says that we''ve really narrowed things down. There are only
    two revisions left to test. Look at the original log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: The repo to demonstrate bisect'
  prefs: []
  type: TYPE_NORMAL
- en: We told it that the latest is bad and the second is good. We then were offered
    the commit whose message is "Add the divide function." That is, bisect cut our
    list of commits roughly in half and checked out a commit for us to test. We told
    bisect that the commit it had us try was good. So, Bisect thinks, "Hmm. Divide
    is good, and real division is bad, so let's cut it in half (giving us "Add square
    root") and see if that is good or bad. Either way, we only have one more test
    to get the final answer."
  prefs: []
  type: TYPE_NORMAL
- en: 'When we try the code, it is bad; it does not work in the expected way. So,
    let''s tell Bisect that square root is bad. In response, it checks out "Add real
    division." Look again at the log. Either this one is bad or the one below it is
    bad. We''ve already told it that "Add the divide function" is good, and we''ve
    already told it that the square root commit is bad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: Honing in on the problem'
  prefs: []
  type: TYPE_NORMAL
- en: It has checked out "Add the divide function" so let's test that.
  prefs: []
  type: TYPE_NORMAL
- en: 'That one is bad, so we''ll tell bisect that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_11_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.12: We have found the problem'
  prefs: []
  type: TYPE_NORMAL
- en: 'It comes back and tells us that "Add modulus operator" must be the culprit
    and that there is nothing more to test. We''ve got it. Let''s look – sure enough,
    the modulus operator is using the divide operator instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Even though we had to use a simple and fake example, you can see how bisect
    narrows down the commits to find the first one that went bad. Now that we know
    what is wrong, we can fix it.
  prefs: []
  type: TYPE_NORMAL
- en: Blame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This unfortunately-named command can be a great help in tracking down who made
    changes to your code, line by line. From there you can talk with the programmer
    and discover their intention, or provide an opportunity for correction.
  prefs: []
  type: TYPE_NORMAL
- en: To open Blame in Visual Studio, right-click on a file and choose **Git** and
    then **Blame**. The file will open with a section on the left that will list who
    made the edit to that line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a program with twenty commits. Put an error in one of the early commits
    that won't break the working program (so that it can be hidden). Use bisect to
    find the error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create a program with 20 commits. I decided to create
    a program that holds information about a book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have a program that interacts with our book class and displays the
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the program and examine the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'That is clearly not what we intended. Both the discount and the discontinued
    prices are 0, where they should be a fraction of 15\. Oh! We forgot to call the
    method to compute the prices. When we do, and we display them all, we get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Better, but still not right. Why is `Discontinued` coming out to zero? To find
    this, we''ll use bisect. To start we''ll enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to tell Bisect that the current (most recent) commit is bad by
    entering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the log, I see that the first commit has the ID `7259bb3`. So we''ll
    enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It checks out a version for me to test, and tells me that there are 11 revisions
    to test after this (assuming this is bad) and that it will take roughly 4 steps.
    We continue bisecting until we find the first instance of the broken code, as
    we saw above.
  prefs: []
  type: TYPE_NORMAL
