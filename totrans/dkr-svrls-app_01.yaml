- en: Serverless and Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器与 Docker
- en: 'When talking about containers, most of us already know how to pack an application
    into a container as a deployment unit. Docker allows us to deploy applications
    in its *de facto* standard format to virtually everywhere, ranging from our laptop,
    a QA cluster, a customer site, or a public cloud, as shown in the following diagram:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 说到容器，大多数人已经知道如何将应用程序打包成容器作为部署单元。Docker 允许我们以其 *事实标准* 格式将应用程序部署到几乎所有地方，从我们的笔记本电脑、QA
    集群、客户站点，甚至是公共云，如下图所示：
- en: '![](img/023c08e0-5303-4300-99cd-de698df158d5.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/023c08e0-5303-4300-99cd-de698df158d5.png)'
- en: 'Figure 1.1: Deploying a Docker container to various infrastructures and platforms'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：将 Docker 容器部署到各种基础设施和平台
- en: Running Docker containers on public clouds is considered normal these days.
    We have already gained benefits such as starting cloud instances on demand with
    pay-as-you-go billing. Without the need to wait for hardware purchase, we can
    also move faster using an Agile method with a continuous delivery pipeline to
    optimize our resources.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，在公共云上运行 Docker 容器已被视为常态。我们已经从按需启动云实例、按需付费的账单中受益。无需等待硬件购买，我们还可以通过敏捷方法并使用持续交付管道来更快地优化资源。
- en: According to a Docker report, the **total cost of ownership** (**TCO**) of one
    of their customers was cut by 66% when using Docker to migrate existing applications
    to the cloud. Not only can the TCO be dramatically reduced, the companies using
    Docker can also accelerate the time to market from months to days. This is a huge
    win.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Docker 的一份报告，**总拥有成本**（**TCO**）在其客户使用 Docker 将现有应用程序迁移到云端时减少了 66%。不仅可以大幅降低
    TCO，使用 Docker 的公司还可以将上市时间从几个月缩短为几天。这是一个巨大的胜利。
- en: Deploying containers to cloud infrastructures, such as AWS, Google Cloud, or
    Microsoft Azure, already makes things simpler. Cloud infrastructures eliminate
    the need for organizations to buy their own hardware and to have a dedicated team
    for maintaining it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 将容器部署到云基础设施，如 AWS、Google Cloud 或 Microsoft Azure，已经简化了许多事情。云基础设施使组织无需购买自己的硬件，也不需要专门的团队来维护这些硬件。
- en: However, organizations still require the role, such as that of the architect,
    to take care of site reliability and scalability even when they use the public
    cloud infrastructure. Some of these people are known as **SREs**, the **site reliability
    engineers**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使在使用公共云基础设施时，组织仍然需要某些角色，例如架构师，来负责站点可靠性和可扩展性。一些人被称为 **SRE**，即 **站点可靠性工程师**。
- en: In addition, organizations also need to take care of system-level packages and
    dependencies. They need to perform patching for application security and the OS
    kernel on their own because the software stack will be constantly changing. In
    many scenarios, the team in these organizations must scale the size of their clusters
    to unexpectedly serve requests when loads are peaking. Also, the engineers need
    to do their best to scale the clusters down, when possible, so as to reduce the
    cloud costs as it is a pay-as-you-go model.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，组织还需要处理系统级的软件包和依赖项。由于软件堆栈会不断变化，他们需要自己进行应用程序安全性和操作系统内核的修补。在许多场景中，这些组织中的团队必须根据负载峰值的需求，意外地扩展集群的规模。此外，工程师还需要尽可能地将集群缩小，以减少云计算费用，因为这是一种按需付费的模式。
- en: Developers and engineering teams always work hard to deliver great user experience
    and site availability. While doing that, over provisioning on-demand instances
    or under utilizing them, can be costly. According to an AWS white paper, [https://d0.awsstatic.com/whitepapers/optimizing-enterprise-economics-serverless-architectures.pdf](https://d0.awsstatic.com/whitepapers/optimizing-enterprise-economics-serverless-architectures.pdf),
    the amount of underutilized instances is as much as 85% of the provisioned machines.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员和工程团队总是努力提供出色的用户体验和站点可用性。在此过程中，按需实例的过度配置或低效利用可能会带来高昂的成本。根据 AWS 的一份白皮书，[https://d0.awsstatic.com/whitepapers/optimizing-enterprise-economics-serverless-architectures.pdf](https://d0.awsstatic.com/whitepapers/optimizing-enterprise-economics-serverless-architectures.pdf)，低效利用的实例多达已配置机器的
    85%。
- en: Serverless computing platforms, such as AWS Lambda, Google Cloud Functions,
    Azure Functions, and IBM Cloud Functions, are designed to address these overprovisioning
    and underutilization problems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算平台，如 AWS Lambda、Google Cloud Functions、Azure Functions 和 IBM Cloud Functions，旨在解决这些过度配置和低效利用的问题。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Serverless
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器
- en: The common architecture of a serverless FaaS
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器 FaaS 的常见架构
- en: Serverless/FaaS use cases
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器/FaaS 使用案例
- en: Hello world, the FaaS/Docker way
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hello world，FaaS/Docker 方式
- en: What is serverless?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是无服务器？
- en: Try to imagine that we live in a world fully driven by software with a kind
    of intelligence.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 试着想象我们生活在一个完全由智能软件驱动的世界。
- en: It would be a world where we could develop software without doing anything.
    Just say what kind of software we would like to run, and minutes later, it would
    be there somewhere on the internet serving many users. And we would only pay for
    the number of requests made by our users. Well, that kind of world is too unreal.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那将是一个我们可以在不做任何事情的情况下开发软件的世界。只需要说出我们希望运行什么样的软件，几分钟后，它就会出现在互联网上，为许多用户提供服务。我们只需要为用户发出的请求付费。嗯，那样的世界太不真实了。
- en: Now, let's be more realistic and think of the world where we still need to develop
    software by ourselves. At least for now, we do not need to take care of any server
    provisioning and management. This is actually, at least, the best world for developers,
    where we can deploy our applications to reach millions of users without taking
    care of any server, or even not needing to know where these servers are. The only
    thing we actually want is to create an application that addresses the needs of
    the business at scale, at an affordable price. The serverless platforms have been
    created to address these problems.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更加现实一点，想象一个我们仍然需要自己开发软件的世界。至少目前，我们不需要关心任何服务器的配置和管理。实际上，这至少是一个对开发者来说最好的世界，我们可以将应用部署到数百万用户面前，而无需担心任何服务器，甚至不需要知道这些服务器在哪里。我们唯一真正想要的，是创建一个能够按规模解决业务需求、价格合理的应用。无服务器平台就是为了解决这些问题而创建的。
- en: As a response to developers and fast-growing businesses, serverless platforms
    seem to be a very huge win. But what exactly are they?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对开发者和快速增长企业的回应，无服务器平台似乎是一个巨大的胜利。但它们究竟是什么？
- en: The relationship between serverless and FaaS
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器与 FaaS 之间的关系
- en: 'The following diagram illustrates the position of event-driven programming,
    FaaS, and serverless FaaS, where serverless FaaS is the intersection area between
    FaaS and serverless:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了事件驱动编程、FaaS 和无服务器 FaaS 的位置关系，其中无服务器 FaaS 是 FaaS 和无服务器之间的交集区域：
- en: '![](img/35aa27a2-bea2-4520-ade3-fc0df2fb8736.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35aa27a2-bea2-4520-ade3-fc0df2fb8736.png)'
- en: 'Figure 1.2: A Venn diagram illustrating the relationship between serverless
    and FaaS'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：展示无服务器与 FaaS 之间关系的维恩图
- en: Serverless is a paradigm shift that enables developers to not worry about server
    provisioning and operations. Billing would be pay-per-request. Also, many useful
    services are there on the public cloud for us to choose, connecting them together
    and use them to solve the business problems to get the job done.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器是一种范式转变，使得开发者不再需要担心服务器的配置和运营。计费方式是按请求计费。此外，公共云上有许多有用的服务供我们选择，我们可以将它们连接起来并用来解决业务问题，从而完成任务。
- en: Applications in the serverless architecture typically use third-party services
    to do other jobs such as authentication, database systems, or file storage. It
    is not necessary for serverless applications to use these third-party services,
    but architecting the application this way takes full advantage of the cloud-based
    serverless platforms. The frontend applications in this kind of architecture are
    usually a thick, fat, and powerful frontend, such as single-page applications
    or mobile applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构中的应用通常使用第三方服务来完成其他任务，如身份验证、数据库系统或文件存储。虽然无服务器应用不一定需要使用这些第三方服务，但以这种方式架构应用能够充分利用基于云的无服务器平台。这种架构中的前端应用通常是一个厚重、强大的前端，例如单页面应用或移动应用。
- en: The execution engine for this serverless computing shift is a **Function as
    a Service** or **FaaS** platform. A FaaS platform is a computing engine, that
    allows us to write a simple, self-contained, single-purpose function to process
    or compute a task. A compute unit of a FaaS platform is a function that is recommended
    to be stateless. This stateless property makes functions fully manageable and
    scalable by the platform.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这一无服务器计算转变的执行引擎是 **Function as a Service** 或 **FaaS** 平台。FaaS 平台是一种计算引擎，允许我们编写一个简单、自包含、单一目的的函数来处理或计算任务。FaaS
    平台的计算单元是一个推荐无状态的函数。这个无状态属性使得函数可以被平台完全管理和扩展。
- en: A FaaS platform does not necessarily run on a serverless environment, such as
    AWS Lambda, but there are many FaaS implementations, such as OpenFaaS, the Fn
    Project, and OpenWhisk, that allow us to deploy and run FaaS on our own hardware.
    If a FaaS platform runs in the serverless environment, it would be called **serverless
    FaaS**. For example, we have OpenWhisk running locally, so it is our FaaS platform.
    But when it is running on IBM Cloud as IBM Cloud Functions, it is a serverless
    FaaS.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: FaaS 平台不一定要运行在无服务器环境中，比如 AWS Lambda，但也有许多 FaaS 实现，比如 OpenFaaS、Fn 项目和 OpenWhisk，允许我们在自己的硬件上部署和运行
    FaaS。如果 FaaS 平台运行在无服务器环境中，它将被称为**无服务器 FaaS**。例如，我们在本地运行 OpenWhisk，那么它就是我们的 FaaS
    平台。但当它在 IBM Cloud 上运行作为 IBM Cloud Functions 时，它就是一个无服务器 FaaS。
- en: Every FaaS platform has been designed to use the event-driven programming model,
    to be able to connect efficiently to other services on the public cloud. With
    the asynchronous event model and the stateless property of functions, this environment
    makes serverless FaaS an ideal model for next-generation computing.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 FaaS 平台都被设计为使用事件驱动的编程模型，以便能够高效地连接到公共云上的其他服务。通过异步事件模型和函数的无状态特性，这种环境使得无服务器
    FaaS 成为下一代计算的理想模型。
- en: The disadvantages of serverless FaaS
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器 FaaS 的缺点
- en: 'But what are the drawbacks of this approach? They are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这种方法的缺点是什么呢？它们如下：
- en: We basically do not own the servers. The serverless model is not suitable when
    we need fine-grained control over our infrastructure.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们基本上不拥有服务器。 当我们需要对基础设施进行细粒度控制时，无服务器模型并不适用。
- en: Serverless FaaS has a lot of limitations, notably the time limits of function
    execution, and memory limits for each function instance. It also introduces a
    fixed and specific way to develop applications. Maybe it is a bit hard to migrate
    the existing systems directly to FaaS.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器 FaaS 有很多限制，尤其是函数执行的时间限制，以及每个函数实例的内存限制。它还引入了一种固定且特定的应用程序开发方式。可能直接将现有系统迁移到
    FaaS 会有些困难。
- en: It is impossible to fully use serverless platforms with private or hybrid infrastructure,
    if we are not allowed to migrate all workload out of the organization. One of
    the real benefits of serverless architectures is the existence of convenient public
    services on the cloud.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不允许将所有工作负载迁移出组织，那么在私有或混合基础设施上完全使用无服务器平台是不可能的。无服务器架构的一个真正好处是云上存在便捷的公共服务。
- en: Docker to the rescue
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 来救援
- en: This book discusses the balance between FaaS on our own infrastructure and serverless
    FaaS. We try to simplify and unify the deployment model of FaaS by choosing three
    major FaaS platforms that allow us to deploy Docker containers as functions, which
    we discuss in this book.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本书讨论了我们自己的基础设施上的 FaaS 与无服务器 FaaS 之间的平衡。我们尝试通过选择三个主要的 FaaS 平台来简化和统一 FaaS 的部署模型，这些平台允许我们将
    Docker 容器作为函数部署，且我们在本书中会详细讨论这些平台。
- en: With Docker containers as deployment units (functions), Docker as a development
    tool, and Docker as the orchestration engine and networking layer, we can develop
    serverless applications and deploy them on our available hardware, on our own
    private cloud infrastructure, or a hybrid cloud that mixes our hardware together
    with the public cloud's hardware.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以 Docker 容器作为部署单元（函数），Docker 作为开发工具，Docker 作为编排引擎和网络层，我们可以开发无服务器应用程序，并将其部署在我们可用的硬件上，部署在我们自己的私有云基础设施上，或是一个混合云，将我们的硬件与公共云的硬件混合在一起。
- en: One of the most important points is that it is easy enough to take care of this
    kind of infrastructure using a small team of developers with Docker skills.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个最重要的点是，使用具备 Docker 技能的小型开发团队足够轻松地管理这种基础设施。
- en: Looking back the previous *Figure 1.2*. If you're getting the clue after reading
    this chapter up to here, let's guess a bit that what would be the contents to
    be discussed in this book. Where should we be in this diagram? The answer is at
    the end of this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下前面的*图 1.2*。如果你在阅读完本章后有所启发，让我们猜测一下这本书将讨论的内容。我们应该处于这个图中的哪个位置呢？答案将在本章结束时揭晓。
- en: Common architecture of a serverless FaaS
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器 FaaS 的常见架构
- en: 'Before getting into other technical chapters, the common architecture of at
    least six serverless FaaS platforms surveyed and studied during the writing of
    this book is presented in the following diagram. It is a distilled overview of
    the existing FaaS platforms and a recommended architecture, if you want to create
    a new one:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入其他技术章节之前，本书在撰写过程中对至少六个无服务器 FaaS 平台的常见架构进行了调查和研究，结果如图所示。这是现有 FaaS 平台的提炼概述，如果你想创建一个新的平台，它是一个推荐的架构：
- en: '![](img/495bcdc1-7e11-45cd-8fe6-8a1a75c8a7ce.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/495bcdc1-7e11-45cd-8fe6-8a1a75c8a7ce.png)'
- en: 'Figure 1.3: A block diagram describing the common architecture for FaaS platforms'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：描述 FaaS 平台常见架构的框图
- en: System layers
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统层
- en: 'A description of the architecture from bottom to top is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从下到上的架构描述如下：
- en: We have some physical or virtual machines. These machines could be on a public
    or private cloud. Some of them may be a physical box running inside a firewall
    or an organization. They may be mixed together as a hybrid infrastructure.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一些物理或虚拟机器。这些机器可以位于公有云或私有云中。有些可能是位于防火墙内的物理设备，或者位于组织内部。它们可以混合在一起，作为混合基础设施。
- en: The next layer is the **Operating System** and, of course, the kernels. We need
    an OS with a modern kernel that supports container isolation, such as Linux, or
    that is at least compatible with runC. Windows or Windows Server 2016 has its
    own Hyper-V based isolation that is compatible with Docker.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一层是 **操作系统**，当然还有内核。我们需要一个支持容器隔离的现代内核操作系统，例如 Linux，或者至少兼容 runC。Windows 或 Windows
    Server 2016 拥有基于 Hyper-V 的隔离，兼容 Docker。
- en: The next layer in the architecture is the **Container Runtime (System-Level)**.
    We emphasize that it is the system-level container runtime as it is not for running
    FaaS functions directly. This layer is responsible for provisioning the cluster.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构中的下一层是 **容器运行时（系统级）**。我们强调它是系统级容器运行时，因为它并不是用来直接运行 FaaS 函数的。这个层级负责为集群提供服务。
- en: Next is the optional container orchestration engine, or **Container Orchestrator**,
    layer. This layer is Docker Swarm or Kubernetes. We use Docker Swarm in this book,
    but you may find that some FaaS platforms presented in this book do not use any
    kind of orchestration. Basically, just Docker alone with container networking
    is enough for a FaaS platform to get up and running effectively.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是可选的容器编排引擎，或 **容器编排器** 层。这个层级包括 Docker Swarm 或 Kubernetes。本书中我们使用 Docker
    Swarm，但你可能会发现本书介绍的一些 FaaS 平台并未使用任何编排工具。基本上，只有 Docker 和容器网络就足够让 FaaS 平台有效启动和运行。
- en: FaaS layers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FaaS 层
- en: 'Now, we will discuss the actual FaaS layers. We will go from left to right:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论实际的 FaaS 层。我们将从左到右展开讨论：
- en: The frontier component of the whole architecture is the FaaS **Gateway**. The
    gateway in some implementations is optional, but in many implementations, this
    component helps serve HTTPS and cache some static content, such as UI parts, of
    the platform. Gateway instances help for making better throughput. It is usually
    a stateless HTTP-based reverse proxy. So this component is easy to scale-out.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个架构的前沿组件是 FaaS **网关**。在一些实现中，网关是可选的，但在许多实现中，这个组件有助于提供 HTTPS 服务并缓存一些静态内容，例如平台的
    UI 部分。网关实例有助于提高吞吐量。它通常是一个无状态的基于 HTTP 的反向代理。因此，这个组件易于扩展。
- en: The **Initiator** is one of the most important components of FaaS. An initiator
    is responsible for imitating the real invocation request to the rest of the platform.
    In OpenWhisk, this component is called the **controller,** for example. In Fn,
    the part inside its Fn server acts as the **Initiator**.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动器** 是 FaaS 最重要的组件之一。启动器负责模拟实际的调用请求给平台的其他部分。在 OpenWhisk 中，这个组件被称为 **控制器**，例如。在
    Fn 中，其 Fn 服务器内部的部分充当 **启动器**。'
- en: The **Message Bus** is the message backbone of a FaaS platform. Some architectures
    that do not have this component will have a difficulty to properly implement asynchronous
    calls, or the retry pattern to make the platform robust. The message bus decouples
    initiators out of executors.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息总线** 是 FaaS 平台的消息骨干。一些没有此组件的架构在实现异步调用或重试模式时会遇到困难，进而影响平台的鲁棒性。消息总线将启动器与执行器解耦。'
- en: The **Executor** is the component that does the real function invocation. It
    connects to its own container runtime (application-level) to start the real sequence
    of function execution. All results and logging will be written to the central
    log storage.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行器**是执行真正函数调用的组件。它连接到自己的容器运行时（应用级别），启动真正的函数执行顺序。所有结果和日志将被写入中央日志存储。'
- en: '**Log Storage** is the platform''s single source of truth. It should be designed
    to store almost everything, ranging from the function activities to the error
    logs of each invocation.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志存储**是平台的唯一真相来源。它应该设计成存储几乎所有内容，从函数活动到每次调用的错误日志。'
- en: '**Container Runtime** (application level) is a component responsible for starting
    the function container. We simply use Docker and its underlying engine as the
    runtime component in this book.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器运行时**（应用级别）是负责启动函数容器的组件。在本书中，我们简单地使用Docker及其底层引擎作为运行时组件。'
- en: Serverless/FaaS use cases
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Serverless/FaaS的使用案例
- en: 'Serverless/FaaS is a generic computing model. Therefore, it would be possible
    to implement virtually any kind of workloads using this programming paradigm.
    The use cases of serverless/FaaS could range from an API for normal web applications,
    a RESTful backend for mobile applications, a function for log or video processing,
    a backend for WebHook-based systems, to a stream data processing program:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Serverless/FaaS是一种通用的计算模型。因此，几乎可以使用这种编程范式实现任何类型的工作负载。Serverless/FaaS的使用案例可以从常规Web应用的API、移动应用的RESTful后台、日志或视频处理的函数、WebHook系统的后台，到流数据处理程序等。
- en: '![](img/81afe5d1-7a25-464d-88fb-f5ca29d4d136.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81afe5d1-7a25-464d-88fb-f5ca29d4d136.png)'
- en: 'Figure 1.4: The block diagram of the demo project'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：演示项目的框图
- en: 'In [Chapter 8](0d30ef75-34b4-4a72-9b0a-71a8e335d494.xhtml), *Putting Them all
    Together*, we will discuss a system, as shown in the previous diagram, with the
    following use cases:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](0d30ef75-34b4-4a72-9b0a-71a8e335d494.xhtml)，*将它们整合在一起*，我们将讨论一个如前图所示的系统，并涵盖以下使用案例：
- en: 'APIs for a WebHook-based system: In the previous diagram, you may have spotted
    the **Backend for UI**. This system allows us to define a WebHook and it will
    be implemented as a FaaS function using one of the frameworks discussed in a later
    chapter.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebHook系统的API：在前图中，你可能看到**UI的后台**。该系统允许我们定义一个WebHook，并将其实现为FaaS函数，使用本书后面章节中讨论的某个框架。
- en: 'APIs to wrap around a legacy system: In the upper right-hand corner of the
    previous diagram, we will find a set of functions connecting to a **Chrome Headless**
    (a fully-functional running Google Chrome instance). The function there wraps
    around a set of commands to instruct Google Chrome to work on a legacy system
    for us.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于封装遗留系统的API：在前图的右上角，我们会看到一组函数连接到**Chrome Headless**（一个功能完备的运行中的Google Chrome实例）。该函数将一组命令封装起来，指示Google
    Chrome为我们操作遗留系统。
- en: 'APIs as abstractions for other services: In the lower right-hand corner there
    are two simple blocks. The first one is a function running on a FaaS platform
    connecting to the second one, **Mock Core Bank System**, which is a more complex
    REST API. This part of the system demonstrates how a FaaS function could be used
    as an abstraction to simplify the interface of a complex system.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APIs作为其他服务的抽象：在右下角有两个简单的模块，第一个是运行在FaaS平台上的函数，连接到第二个模块，**Mock Core Bank System**，它是一个更复杂的REST
    API。这个系统部分展示了如何使用FaaS函数作为抽象层，简化复杂系统的接口。
- en: 'Stream data processing: We will also implement a data processing agent, an event
    listener, which listens to an event source—you may find the *Ethereum logo* there
    with a circle that connects from the left. This agent will listen to the data
    stream from the source and then call a function running on a FaaS platform.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流数据处理：我们还将实现一个数据处理代理，一个事件监听器，它监听一个事件源——你可能会看到*以太坊的标志*，旁边有一个从左侧连接过来的圆圈。这个代理会监听来自源的数据流，然后调用运行在FaaS平台上的函数。
- en: Hello world, the FaaS/Docker way
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello world，FaaS/Docker方式
- en: This book covers all three major frameworks of FaaS on Docker. So it would not
    be fair, if I were the one to choose a specific framework for the *hello world*
    program in this first chapter. I will let you choose one from your very own preference.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖了FaaS在Docker上的三大主要框架。因此，如果我选择一个特定框架用于第一章的*hello world*程序，那就不太公平了。我会让你根据自己的喜好选择一个。
- en: 'The following is the common setup on a Linux machine. For Mac or Windows users,
    please skip this step and download Docker for Mac, or Docker for Windows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Linux 机器上的常见设置。对于 Mac 或 Windows 用户，请跳过此步骤并下载 Docker for Mac 或 Docker for
    Windows：
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you choose to go with OpenFaaS in this chapter, you can simplify this setup
    process by using *Play with Docker* ([https://labs.play-with-docker.com/](https://labs.play-with-docker.com/)),
    which automatically installs OpenFaaS on a single-node Docker Swarm.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择在本章中使用 OpenFaaS，可以通过使用 *Play with Docker* ([https://labs.play-with-docker.com/](https://labs.play-with-docker.com/))
    来简化此设置过程，该平台会自动在单节点 Docker Swarm 上安装 OpenFaaS。
- en: 'When we get Docker installed, just initialize Swarm to make our single-node
    cluster ready to run:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们安装好 Docker 后，只需初始化 Swarm，以使我们的单节点集群准备好运行：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the previous command failed, try changing the network interface name to match
    yours. But if it still fails, just put one of the machine's IP addresses there.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果之前的命令失败，尝试将网络接口名称更改为与你的名称匹配。但如果仍然失败，只需输入机器的其中一个 IP 地址即可。
- en: If everything is set up successfully, let's start the series of hello world
    programs on various FaaS platforms.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切设置成功，让我们开始在各个 FaaS 平台上运行一系列的 hello world 程序。
- en: Hello OpenFaas
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello OpenFaas
- en: 'We will try the `echoit` function to `hello world` with OpenFaaS. First, clone
    the project from [https://github.com/openfaas/faas](https://github.com/openfaas/faas)
    with one level of depth to just make the clone process quicker:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试使用 OpenFaaS 运行 `echoit` 函数进行 `hello world`。首先，从 [https://github.com/openfaas/faas](https://github.com/openfaas/faas)
    克隆项目，并只进行一层深度克隆，以加快克隆过程：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, change the directory into `faas`, and simply deploy the OpenFaaS default
    stack, using the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进入 `faas` 目录，并使用以下命令简单地部署 OpenFaaS 默认堆栈：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Wait until the stack is going up. Then, we do `hello world` with the `curl`
    command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 等待堆栈启动完成。然后，我们用 `curl` 命令进行 `hello world`：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After playing around it, we could also use `docker stack rm` to remove all
    running services:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 玩了一会儿后，我们也可以使用 `docker stack rm` 来移除所有正在运行的服务：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Hello OpenWhisk
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello OpenWhisk
- en: Let's quickly move to OpenWhisk. To `hello world` with OpenWhisk, we also need
    a `docker-compose` binary. Please visit [https://github.com/docker/compose/releases](https://github.com/docker/compose/releases)
    and follow instructions there to install it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速进入 OpenWhisk。要使用 OpenWhisk 进行 `hello world`，我们还需要一个 `docker-compose` 二进制文件。请访问
    [https://github.com/docker/compose/releases](https://github.com/docker/compose/releases)
    并按照那里的说明进行安装。
- en: With OpenWhisk, the whole stack would be a bit longer to get up and running
    than with OpenFaaS. But the overall command will be simpler as the `hello world`
    is already built in.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenWhisk 时，整个堆栈的启动时间可能会比 OpenFaaS 稍长。但是，由于 `hello world` 已经内置，整体命令会更简洁。
- en: 'First, clone the OpenWhisk development tool from its GitHub repository:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从其 GitHub 仓库克隆 OpenWhisk 开发工具：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then change the directory into `devtools/docker-compose`, and manually do image
    pulling, using the following commands:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进入 `devtools/docker-compose` 目录，并使用以下命令手动拉取镜像：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After that, just call `make quick-start` to perform the setup:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，只需调用 `make quick-start` 来执行设置：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Wait until the OpenWhisk cluster has started. This could take up to 10 minutes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 等待 OpenWhisk 集群启动。这可能需要最多 10 分钟。
- en: 'After that, run the following command, `make hello-world`, to register and
    invoke the `hello world` action:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，运行以下命令 `make hello-world` 来注册并调用 `hello world` 操作：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Make sure that you're on a fast internet connection. The slowness associated
    with OpenWhisk pulling the invoke and controller often causes `make quick-start` to
    fail.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你处于一个快速的网络环境中。OpenWhisk 拉取 invoke 和 controller 时的慢速往往会导致 `make quick-start`
    失败。
- en: 'To clean up, just use the `make destroy` command to terminate the target:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要清理环境，只需使用 `make destroy` 命令来终止目标：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Say hello to the Fn project
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 Fn 项目问好
- en: This is another FaaS project covered by this book. We quickly do `hello world`
    by installing the Fn CLI. Then use it to start a local Fn server, create an app,
    and then create a route that links to a pre-built `Go` function under the app.
    After that, we will use the `curl` command to test the deployed `hello world`
    function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书中覆盖的另一个 FaaS 项目。我们通过安装 Fn CLI 快速完成 `hello world`。然后使用它启动一个本地 Fn 服务器，创建一个应用程序，并创建一个路由，将其链接到应用程序下的一个预构建的
    `Go` 函数。之后，我们将使用 `curl` 命令测试部署的 `hello world` 函数。
- en: 'Here''s the standard command to install the Fn client:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是安装 Fn 客户端的标准命令：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After that, we can use the `fn` command. Let''s start an Fn server. Use `--detach`
    to make it run in the background:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以使用 `fn` 命令。让我们启动一个 Fn 服务器。使用 `--detach` 使其在后台运行：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Well, if we see a container ID, it is good to go. Next, quickly create an Fn
    app and call it `goapp`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，如果我们看到一个容器 ID，就可以开始了。接下来，快速创建一个 Fn 应用程序，并将其命名为 `goapp`：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we already have a pre-built image called `chanwit/fn_ch1:0.0.2` on the
    Docker Hub. Just use it. We use the `fn routes create` command to link the new
    route to the image. The purpose of this step is to actually define a function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们已经在 Docker Hub 上有一个预构建的镜像，名为`chanwit/fn_ch1:0.0.2`。只需使用它即可。我们使用`fn routes
    create`命令将新路由与镜像连接。此步骤的目的是实际定义一个函数：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'OK, the route is ready. Now, we can use the `curl` command to just call our
    `hello world` program on Fn:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，路由已准备好。现在，我们可以使用 `curl` 命令直接调用我们在 Fn 上的 `hello world` 程序：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'OK, it seems all things are working as well as expected for Fn. Let''s remove
    the server after it has finished:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看起来 Fn 一切都按照预期正常工作。让我们在它完成后移除服务器：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Exercise
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'At the end of every chapter, there will be a set of questions to help us review
    the content of the current chapter. Let''s try to answer each of them without
    going back to the chapter''s contents:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 每章末尾都会有一组问题，帮助我们复习当前章节的内容。让我们尝试不翻回章节内容，直接回答每个问题：
- en: What is the definition of serverless?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无服务器架构的定义是什么？
- en: What is the definition of FaaS?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: FaaS 的定义是什么？
- en: Describe the difference between FaaS and serverless?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述 FaaS 和无服务器之间的区别？
- en: What are the roles of Docker in the world of serverless applications?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker 在无服务器应用程序世界中的角色是什么？
- en: What does the common architecture of FaaS look like?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: FaaS 的常见架构是什么样的？
- en: 'Try to explain why we are in the shaded area in the following diagram:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试解释为什么我们处于下图中的阴影区域：
- en: '![](img/83e245d8-09ed-4c9f-b53e-da4d37b1f5b2.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83e245d8-09ed-4c9f-b53e-da4d37b1f5b2.png)'
- en: 'Figure 1.5: Scope of FaaS and serverless area covered by this book'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：FaaS 和本书涵盖的无服务器区域的范围
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has introduced serverless and Docker, the definition of serverless,
    and the definition of FaaS. We learned the benefits of serverless, when to use
    it, and when to avoid it. A serverless FaaS is a FaaS platform run by a vendor
    on a public cloud, while a FaaS may be required to run on a private, a hybrid,
    or an on-premises environment. This is where we can use Docker. Docker will help
    us build FaaS applications, and prepare container infrastructure to run container-based
    functions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了无服务器架构和 Docker，定义了无服务器架构和 FaaS。我们了解了无服务器的优势、何时使用它以及何时避免使用它。无服务器 FaaS 是由供应商在公共云上运行的
    FaaS 平台，而 FaaS 可能需要在私有、混合或本地环境中运行。这时，我们可以使用 Docker。Docker 将帮助我们构建 FaaS 应用程序，并为运行基于容器的函数准备容器基础设施。
- en: We previewed the demo project that will be built step by step in later chapters.
    We then quickly did `hello world` with all three leading FaaS platforms for Docker
    to demonstrate how easy it is to run FaaS platforms on our own Docker cluster.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们预览了将在后续章节中一步步构建的演示项目。然后，我们快速地在三个领先的 FaaS 平台上完成了 Docker 的 `hello world` 示例，展示了在我们自己的
    Docker 集群上运行 FaaS 平台是多么简单。
- en: In the next chapter, we will review the concepts of the container, and the technologies
    behind it. We will also introduce Docker and its workflow, then we will learn
    the concept of the Docker Swarm cluster and how to prepare it. And finally, we
    will discuss how Docker fits into the world of serverless.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾容器的概念以及它背后的技术。我们还将介绍 Docker 及其工作流程，接着我们将学习 Docker Swarm 集群的概念以及如何准备它。最后，我们将讨论
    Docker 如何适应无服务器的世界。
