["```\nusing System;\nusing System.Collections.Generic;\n\nnamespace PacktCustomerVisionAPI\n{\n    static class Extensions\n    {\n        public static void ForEach<T>(this IEnumerable<T> ie, Action<T> action)\n        {\n            foreach (var i in ie)\n            {\n                action(i);\n            }\n        }\n    }\n}\n```", "```\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\n```", "```\n// Fill in the subscription Key\n    const string subscriptionKey = \"7c98f3e0aa3a4a729f69b20583a0bc18\";\n\n    //API Url in West Central US Region\n    const string uriBase = \"https://westcentralus.api.cognitive.microsoft.com/vision/v1.0/models/celebrities/analyze\";\n```", "```\nstatic void Main(string[] args)\n   {\n      Console.Write(\"Enter the path to an celebrity image: \");\n      string imageFilePath = Console.ReadLine();\n\n       MakeAnalysisRequest(imageFilePath);\n\n       Console.WriteLine(\"\\nPlease wait a moment for the results to appear. Then, press Enter to exit ...\\n\");\n        Console.ReadLine();\n    }\n```", "```\nstatic async void MakeAnalysisRequest(string imageFilePath)\n{\n   HttpClient client = new HttpClient();\n\n   client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\n        string requestParameters = \"model=celebrities\";\n        string uri = uriBase + \"?\" + requestParameters;\n        HttpResponseMessage response;\n        byte[] byteData = GetImageAsByteArray(imageFilePath);\n        using (ByteArrayContent content = new ByteArrayContent(byteData))\n         {\n             content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");\n             response = await client.PostAsync(uri, content);\n             string contentString = await response.Content.ReadAsStringAsync();\n               Console.WriteLine(\"\\nResponse:\\n\");\n               Console.WriteLine(JsonPrettyPrint(contentString));\n          }\n}\n```", "```\nstatic byte[] GetImageAsByteArray(string imageFilePath)\n{\n    FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);\n    BinaryReader binaryReader = new BinaryReader(fileStream);\n    return binaryReader.ReadBytes((int)fileStream.Length);\n}\n```", "```\n static string JsonPrettyPrint(string json)\n        {\n            if (string.IsNullOrEmpty(json))\n                return string.Empty;\n\n            json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");\n\n            string INDENT_STRING = \" \";\n            var indent = 0;\n            var quoted = false;\n            var sb = new StringBuilder();\n            for (var i = 0; i < json.Length; i++)\n            {\n                var ch = json[i];\n                switch (ch)\n                {\n                    case '{':\n                    case '[':\n                        sb.Append(ch);\n                        if (!quoted)\n                        {\n                            sb.AppendLine();\n                            Enumerable.Range(0, ++indent).ForEach(item => sb.Append(INDENT_STRING));\n                        }\n                        break;\n                    case '}':\n                    case ']':\n                        if (!quoted)\n                        {\n                            sb.AppendLine();\n                            Enumerable.Range(0, --indent).ForEach(item => sb.Append(INDENT_STRING));\n                        }\n                        sb.Append(ch);\n                        break;\n                    case '\"':\n                        sb.Append(ch);\n                        bool escaped = false;\n                        var index = i;\n                        while (index > 0 && json[--index] == '\\\\')\n                            escaped = !escaped;\n                        if (!escaped)\n                            quoted = !quoted;\n                        break;\n                    case ',':\n                        sb.Append(ch);\n                        if (!quoted)\n                        {\n                            sb.AppendLine();\n                            Enumerable.Range(0, indent).ForEach(item => sb.Append(INDENT_STRING));\n                        }\n                        break;\n                    case ':':\n                        sb.Append(ch);\n                        if (!quoted)\n                            sb.Append(\" \");\n                        break;\n                    default:\n                        sb.Append(ch);\n                        break;\n                }\n            }\n            return sb.ToString();\n        }\n```", "```\nvar tokenCredentials = new AzureAdTokenCredentials(\"{YOUR Azure AD TENANT DOMAIN HERE}\", new AzureAdClientSymmetricKey(\"{YOUR CLIENT ID HERE}\", \"{YOUR CLIENT SECRET}\"), AzureEnvironments.AzureCloudEnvironment);\n\n            var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\n```", "```\n_context = new CloudMediaContext(new Uri(\"https://packtmediaservices.restv2.westeurope.media.azure.net/api/\"), tokenProvider);\n\n            var video = @\"C:\\PacktIndexer\\InputFiles\\BigBuckBunny.mp4\";\n            var config = @\"C:\\PacktIndexer\\InputFiles\\config.json\";\n            var asset = RunIndexingJob(video, config);\n\n            DownloadAsset(asset, @\"C:\\PacktIndexer\\OutputFiles\");\n```", "```\nstatic IAsset RunIndexingJob(string inputMediaFilePath, string configurationFile)\n        {\n            IAsset asset = CreateAssetAndUploadSingleFile(inputMediaFilePath,\n                \"Packt Indexing Input Asset\",\n                AssetCreationOptions.None);\n\n            IJob job = _context.Jobs.Create(\"Packt Indexing Job\");\n\n            string MediaProcessorName = \"Azure Media Indexer 2 Preview\";\n\n            var processor = GetLatestMediaProcessorByName(MediaProcessorName);\n            string configuration = File.ReadAllText(configurationFile);\n\n            ITask task = job.Tasks.AddNew(\"Packt Indexing Task\",\n                processor,\n                configuration,\n                TaskOptions.None);\n\n            task.InputAssets.Add(asset);\n            task.OutputAssets.AddNew(\"Packt Indexing Output Asset\", AssetCreationOptions.None);\n\n            job.StateChanged += new EventHandler<JobStateChangedEventArgs>(StateChanged);\n            job.Submit();\n\n            Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\n\n            progressJobTask.Wait();\n\n            if (job.State == JobState.Error)\n            {\n                ErrorDetail error = job.Tasks.First().ErrorDetails.First();\n                Console.WriteLine(string.Format(\"Error: {0}. {1}\",\n                                                error.Code,\n                                                error.Message));\n                return null;\n            }\n\n            return job.OutputMediaAssets[0];\n        }\n```", "```\nstatic IAsset CreateAssetAndUploadSingleFile(string filePath, string assetName, AssetCreationOptions options)\n        {\n            IAsset asset = _context.Assets.Create(assetName, options);\n\n            var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\n            assetFile.Upload(filePath);\n\n            return asset;\n        }\n```", "```\nstatic void DownloadAsset(IAsset asset, string outputDirectory)\n   {\n     foreach (IAssetFile file in asset.AssetFiles)\n      {\n        file.Download(Path.Combine(outputDirectory, file.Name));\n       }\n    }\n```", "```\nstatic IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n        {\n           var processor = _context.MediaProcessors\n              .Where(p => p.Name == mediaProcessorName)\n              .ToList()\n              .OrderBy(p => new Version(p.Version))\n              .LastOrDefault();\n            if (processor == null)\n            throw new ArgumentException(string.Format(\"Unknown media processor\",                                               mediaProcessorName));\n            return processor;\n        }\n```", "```\n static private void StateChanged(object sender, JobStateChangedEventArgs e)\n    {\n         Console.WriteLine(\"Job state changed event:\");\n         Console.WriteLine(\" Previous state: \" + e.PreviousState);\n         Console.WriteLine(\" Current state: \" + e.CurrentState);\n           switch (e.CurrentState)\n           {\n               case JobState.Finished:                       \nConsole.WriteLine();\n               Console.WriteLine(\"Job is finished.\");\n               Console.WriteLine();\n               break;\n                case JobState.Canceling:\n                case JobState.Queued:\n                case JobState.Scheduled:\n                case JobState.Processing:\n                   Console.WriteLine(\"Please wait...\\n\");\n                   break;\n               case JobState.Canceled:\n               case JobState.Error:\n                   IJob job = (IJob)sender;\n                   break;\n               default:\n                   break;\n           }\n       }\n```"]