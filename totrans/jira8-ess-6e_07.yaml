- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflow and Business Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned some of the basics of Jira and how to customize
    its data collection and presentation with custom fields and screens. In this chapter,
    we will dive in and take a look at workflows, one of the core and most powerful
    features of Jira.
  prefs: []
  type: TYPE_NORMAL
- en: A workflow controls how issues in Jira move from one status to another as they
    are being worked on, often passing from one assignee to another. Unlike many other
    systems, Jira allows you to create your own workflows to resemble your processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will have learned the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What a workflow is and what it consists of
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The relationship between workflows and screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What statuses, transitions, conditions, validators, and post functions are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create your own workflow with the workflow designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to associate a workflow with projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Specifically, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Mapping business processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the workflow designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authoring a workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating an existing workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding workflow schemes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying a workflow scheme to projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delegated workflow management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending a workflow with workflow add-ons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **human resources** (**HR**) project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping business processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is often said that a good software system is one that adapts to your business
    and not one that requires your business to adapt to the software. Jira is an excellent
    example of the former. The power of Jira is that you can easily configure it to
    model your existing business processes through the use of workflows.
  prefs: []
  type: TYPE_NORMAL
- en: A business process flow can often be represented as a flow chart. For example,
    a typical approval flow may include tasks such as approval submission, approval
    review, and—finally—approval or rejection of the request, where the user needs
    to follow these tasks in sequential order. You can easily implement this as a
    Jira workflow. Each task will be represented as a workflow status, with transitions
    guiding you on how you can move from one status to the next. In fact, when working
    with workflows, it is often a good approach to first draft the logical flow of
    the process as a flow chart and then implement it as a workflow. As we will see,
    Jira provides many tools to help you visualize your workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have briefly seen how you can map a normal business process to a
    Jira workflow, it is time to take a closer look at the components of a workflow
    and how you can create your own workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A workflow is what Jira uses to model business processes. It is a flow of statuses
    (steps) that issues go through one by one, with paths between the statuses (transitions).
    All issues in Jira have a workflow applied, based on their issue type and project.
    Issues move through workflows from one status (for example, **Open**) to another
    (for example, **Closed**). Jira allows you to visualize and design workflows as
    a diagram, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Jira workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.01_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Jira workflow
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram shows a simple workflow in Jira. The rectangles represent
    the statuses, and the arrow lines represent transitions that link statuses together.
    As you can see, this looks a lot like a normal flow chart depicting the flow of
    a process.
  prefs: []
  type: TYPE_NORMAL
- en: Also, notice that statuses have different colors. The color of a status is determined
    by the category it belongs to. There are three categories—**To Do** (gray), **In
    Progress** (blue), and **Done** (green). Categories help you to easily identify
    where along the workflow an issue is by using color as an indicator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Issues in Jira, starting from when they are created, go through a series of
    steps identified as issue statuses, such as **In Progress** and **Closed**. These
    movements are often triggered by user interactions. For example, when a user clicks
    on the **Start Progress** link, the issue is transitioned to the **In Progress**
    status, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Transition options for issue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.02_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Transition options for issue
  prefs: []
  type: TYPE_NORMAL
- en: There is a definitive start of a workflow, which is when an issue is first created,
    but the end of a workflow can sometimes be ambiguous. For example, in the default
    workflow, issues can go from **OPEN** to **CLOSED** to **REOPENED** and back to
    **CLOSED**. By convention, when people talk about the end of a workflow, they
    are usually referring to a status named **CLOSED** or the status where issues
    are given a resolution. Once a resolution is given, the issue comes to a logical
    end. Several built-in features of Jira follow this convention; for example, issues
    with resolutions set will not be displayed on the **Assigned to Me** list on the
    home page.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, when you close an issue, you should either prompt the user
    to select a resolution value by having it on a screen or automatically set the
    resolution value via a post function (post functions are covered later in this
    chapter). When you reopen an issue, you should also clear the resolution value
    from the issue, and this is usually done automatically via a post function as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When work for an issue is completed, it should be given a resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Managing workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Workflows are controlled and managed centrally from the Jira administration
    console, so you need to be an administrator to create and configure workflows.
    To manage workflows, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Jira as a Jira administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Issues** tab and then the **Workflows** option. This will bring
    up the **View Workflows** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Workflow list page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.03_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Workflow list page
  prefs: []
  type: TYPE_NORMAL
- en: From the **View Workflows** page, you will be able to manage all the available
    workflows and create new workflows. The page is divided into two sections, **Active**
    and **Inactive**. Active workflows are being used by projects, and inactive ones
    are not. By default, the **Inactive** section is collapsed, so the page will only
    display active workflows. The preceding screenshot shows both the sections being
    expanded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira comes with a default read-only workflow called `jira`, mostly used to
    remain backward compatible with existing projects, and this is applied to projects
    that do not have any specific workflow applied. For this reason, you cannot edit
    or delete this workflow. New projects will have their own workflows created based
    on the template selected. These project-specific workflows will have their names
    start with the project key, followed by the project’s template, such as `HR: Task
    Management Workflow`.'
  prefs: []
  type: TYPE_NORMAL
- en: Issue statuses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a Jira workflow, an issue status represents a state in the workflow for an
    issue. It describes the current status of the issue. If we compare it to a flow
    chart, the highlighted rectangle indicates the current status of the issue along
    the process. Just as a task can only be in one stage of a business process, an
    issue can be in only one status at any given time; for example, an issue cannot
    be both open and closed at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a term called **step**, which is the workflow term for statuses.
    Since Jira has simplified its workflow administration, step and status can be
    used interchangeably. For consistency, we will be using the term **status** in
    this book, unless a separation needs to be made in special cases.
  prefs: []
  type: TYPE_NORMAL
- en: Transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Statuses represent stages in a workflow, and the path that takes an issue from
    one status to the next is known as a **transition**. A transition links two statuses
    together. A transition cannot exist on its own, meaning it must have a start and
    finish status and can only have one of each. This means that a transition cannot
    conditionally split off to different destination statuses. Transitions are also
    one-way only. This means that if a transition takes an issue from status *A* to
    status *B*, you must create a new transition if you want to go back from status
    *B* to status *A*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Transitions have several components. These are set out here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Conditions**: Criteria must be met before a transition is available (visible)
    for users to execute. These are usually used to control permissions around how
    users can execute a transition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validators**: These are the verifications that must pass before a transition
    can be executed. They are usually used together with transition screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post functions**: These are additional functions to be performed as part
    of the transition process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transition screen**: This is an optional screen to be displayed when a user
    is executing a transition. It is usually used to capture additional information
    as a part of the transition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Triggers**: If you have integrated Jira with other development tools such
    as Bitbucket or GitHub, triggers can automatically execute a transition when an
    event happens, such as the creation of a new branch or when someone makes a code
    commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A common trick is to create a transition that links back to itself. Since a
    transition can have its own screen and execute some business logic via post functions,
    you can use this kind of transition as a trigger in the **user interface** (**UI**)
    to show a screen or run a post function without having to create complex customizations.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the first three components defines the behavior of transitions, allowing
    you to perform pre- and post-validations, as well as post-execution processing
    on transition execution. We will discuss these components in depth in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Triggers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As described earlier, Jira needs to be integrated with one of the following
    systems before you can start using triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: Atlassian Bitbucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atlassian FishEye/Crucible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggers will listen for changes from the integrated development tools, such
    as code commits, and when these happen, the trigger will automatically execute
    the workflow transition. Note that all permissions are ignored when this happens.
  prefs: []
  type: TYPE_NORMAL
- en: Conditions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, you might want to have control over who can execute a transition
    or when a transition can be executed. For example, a transition to authorize an
    issue should be restricted to users in the managers group so that normal employees
    will not be able to authorize their own requests. This is where conditions come
    in.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conditions** are criteria that must be fulfilled before the user is allowed
    to execute a transition. If the conditions on transitions are not met, the transition
    will not be available to the user when viewing the issue. The following table
    shows a list of conditions that are shipped with Jira; other conditions can be
    added via third-party add-ons:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Condition** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Code Committed Condition** | This allows a transition to execute only if
    the code has/has not (depending on configuration) been committed against this
    issue. |'
  prefs: []
  type: TYPE_TB
- en: '| **Hide Transition from User** | This will hide the transition from all users,
    and it can only be triggered by post functions. This is useful in situations where
    a transition will be triggered as part of an automated process rather than manually
    by a user. |'
  prefs: []
  type: TYPE_TB
- en: '| **No Open Reviews Condition** | This allows a transition to execute only
    if there are no related open Crucible reviews. |'
  prefs: []
  type: TYPE_TB
- en: '| **Only Assignee Condition** | This only allows the issue’s current assignee
    to execute the transition. |'
  prefs: []
  type: TYPE_TB
- en: '| **Only Reporter Condition** | This only allows the issue’s reporter to execute
    the transition. |'
  prefs: []
  type: TYPE_TB
- en: '| **Permission Condition** | This only allows users with the given permission
    to execute the transition. |'
  prefs: []
  type: TYPE_TB
- en: '| **Condition** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Sub-Task Blocking Condition** | This blocks the parent issue transition
    depending on all its subtasks’ statuses. |'
  prefs: []
  type: TYPE_TB
- en: '| **Unreviewed Code Condition** | This allows a transition to execute only
    if there are no unviewed changesets related to this issue. |'
  prefs: []
  type: TYPE_TB
- en: '| **User Is In Group** | This only allows users in a given group to execute
    the transition. |'
  prefs: []
  type: TYPE_TB
- en: '| **User Is In Group Custom Field** | This only allows users in a given group
    custom field to execute a transition. |'
  prefs: []
  type: TYPE_TB
- en: '| **User Is In Project Role** | This only allows users in a given project role
    to execute a transition. |'
  prefs: []
  type: TYPE_TB
- en: Table 7.1 – Workflow conditions
  prefs: []
  type: TYPE_NORMAL
- en: Validators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Validators are similar to conditions, but they validate certain criteria before
    allowing a transition to complete. While conditions will hide a workflow transition
    from the user if its criteria are not met, validators will allow the user to see
    the transition but not allow the transition to execute if its criteria are not
    met.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common use case for validators is to validate the user input during
    a transition. For example, you can validate if the user has entered data for all
    fields presented on the workflow screen. The following table shows a list of validators
    that come shipped with Jira; other validators can be added via third-party add-ons:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Validator** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Permission Validator** | This validates that the user has the selected
    permission. This is useful when checking whether the person who has executed a
    transition has the required permissions. |'
  prefs: []
  type: TYPE_TB
- en: '| **User Permission Validator** | This validates that the user has the selected
    permission where the `OSWorkflow` variable holding the username is configurable.
    This is obsolete. |'
  prefs: []
  type: TYPE_TB
- en: Table 7.2 – Workflow validators
  prefs: []
  type: TYPE_NORMAL
- en: Post functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the name suggests, post functions are functions that occur after (post) a
    transition has been executed. This allows you to perform additional processes
    once you have executed a transition. Jira makes heavy use of post functions internally
    to perform a lot of its functions. For example, when you transition an issue,
    Jira uses post functions to update its search indexes so that your search results
    will reflect the change in issue status.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a transition has failed to execute (for example, failing validation from
    validators), post functions attached to the transition will not be triggered.
    The following table shows a list of post functions that come shipped with Jira,
    and other post functions can be added via third-party add-ons:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Post function** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Assign to Current User** | This assigns the issue to the current user if
    the current user has the assignable user permission. |'
  prefs: []
  type: TYPE_TB
- en: '| **Assign to Lead Developer** | This assigns the issue to the project/component
    lead developer. |'
  prefs: []
  type: TYPE_TB
- en: '| **Assign to Reporter** | This assigns the issue to the reporter. |'
  prefs: []
  type: TYPE_TB
- en: '| **Create Perforce Job Function** | This creates a Perforce job (if required)
    after completing the workflow transition. |'
  prefs: []
  type: TYPE_TB
- en: '| **Notify HipChat** | This sends a notification to one or more HipChat rooms.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Trigger a Webhook** | If this post function is executed, Jira will post
    the issue content in **JavaScript Object Notation** (**JSON**) format to the **Uniform
    Resource Locator** (**URL**) specified. |'
  prefs: []
  type: TYPE_TB
- en: '| **Update Issue Field** | This updates a system field such as **Summary**
    to a given value. |'
  prefs: []
  type: TYPE_TB
- en: Table 7.3 – Workflow post functions
  prefs: []
  type: TYPE_NORMAL
- en: We have looked at all the main components in a workflow. In the next section,
    we will look at how to design a workflow using the workflow designer tool.
  prefs: []
  type: TYPE_NORMAL
- en: Using the workflow designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira comes with a simple-to-use drag and drop tool called the **workflow designer**.
    This helps you create and configure workflows. If you are familiar with diagramming
    tools such as Microsoft Visio, you will feel right at home. There is also another
    older option, called **text mode**, available. However, since the designer is
    easier and has more features, we will focus on using the designer in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As your workflow becomes more complicated, text mode can be a better option
    to manage statuses and transitions in the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow designer is shown in the following screenshot. You have the workflow
    layout in the main panel and a few controls on top, namely the **Add status**
    and **Add transition** buttons. Note that the **Diagram** option is selected.
    If you click on the **Text** option, Jira will change to the old authoring tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Workflow designer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.04_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Workflow designer
  prefs: []
  type: TYPE_NORMAL
- en: 'From the workflow designer, you can drag and rearrange statuses and transitions.
    Clicking on each will open up its property window, as shown in the following screenshot,
    where the **Resolve Issue** transition is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Editing a workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.05_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Editing a workflow
  prefs: []
  type: TYPE_NORMAL
- en: From here, we can view and update its properties, such as conditions and validators.
    If you have a complex workflow and the property window covers part of your workflow,
    you can either zoom out to reduce the size of the workflow diagram or drag the
    diagram around the page.
  prefs: []
  type: TYPE_NORMAL
- en: Authoring a workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, let’s take a look at how to create and set up a new workflow in Jira. To
    create a new workflow, all you need is a name and description, so let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Workflows** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Workflow** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and description for the new workflow in the **Add Workflow** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to create the workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The newly created workflow will only contain the default **Create** and **Open**
    statuses, so you will need to configure it by adding new statuses and transitions
    to make it useful. Let’s start by adding new statuses to the workflow using the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add status** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an existing status from the drop-down list. If the status you need does
    not exist, you can create a new status by entering its name and pressing the *Enter*
    key on your keyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Allow all statuses to transition to this one** option if you want
    users to be able to move the issue into this status regardless of its current
    status. This will create a global transition, which is a convenient option, so
    you do not have to manually create multiple transitions for the status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If the global status is not representing a **Done** or **Closed** status, it
    is often a good idea to add a **Clear Resolution** post function to make sure
    the resolution field is always cleared when the issue is transitioned into the
    status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add** button to add the status to your workflow, as illustrated
    in the following screenshot. You can repeat these steps to add as many statuses
    as you want to your workflow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Adding a status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.06_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Adding a status
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Try to reuse existing statuses, if possible, so that you do not end up with
    many similar statuses to manage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the statuses are added to the workflow, they need to be linked with
    transitions so that issues can move from one status to the next. There are two
    ways to create a transition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add transition** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the originating status and then click and drag the arrow to the destination
    status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both options will bring up the **Add Transition** dialog, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Add Transition dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.07_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – Add Transition dialog
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding screenshot, you can choose to either create a new transition
    with the **New Transition** tab or use an existing transition with the **Reuse
    a transition** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a new transition, you will need to configure the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**From status**: This is the originating status. The transition will be available
    when the issue is in the selected status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**To status**: This is the destination status. Once the transition is executed,
    the issue will be put into the selected status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Close Issue`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: This is an optional text description showing the purpose of
    this transition. This will not be displayed to users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen**: This is an optional intermediate screen to be displayed when users
    execute the transition. For example, you display a screen to capture additional
    data as part of the transition. If you do not select a screen, the transition
    will be executed immediately. The following screenshot shows a workflow screen:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Transition screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.08_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – Transition screen
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to reuse an existing transition, simply click on the **Reuse a
    transition** tab, **From status** and **To status**, and **Transition to reuse**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Reuse a transition tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.09_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – Reuse a transition tab
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Note that Jira will only list valid transitions based on the **To status** selection.
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering when you should create a new transition and when you
    should reuse an existing transition. The big difference between the two is that
    when you reuse a transition, all instances of the reused transition (also known
    as the `Close Issue`; instead of creating separate transitions each time, you
    can create one transition and reuse it whenever you need a transition to close
    an issue. Later on, if you need to add a new validator to the transition to validate
    additional user input, you will only need to make the change once, rather than
    multiple times for each `Close Issue` transition.
  prefs: []
  type: TYPE_NORMAL
- en: Another good practice to keep in mind is to not have a *dead-end* state in your
    workflow—for example, by allowing closed issues to be reopened. This will prevent
    users from accidentally closing an issue and not being able to correct the mistake.
  prefs: []
  type: TYPE_NORMAL
- en: One thing people often overlook is that you can change the status an issue is
    transitioned to when it is first created. By default, an issue is placed in the
    `Create Issue` transition. By doing so, you can influence the issue creation process.
    For example, you can add a validator to it for additional checking before an issue
    is allowed to be created, or add a post function to perform additional tasks as
    soon as an issue is created.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to add new statuses and transitions to a workflow,
    let’s look at adding triggers, conditions, validators, and post functions to a
    transition.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a trigger to transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can only add triggers to transitions if Jira is integrated with at least
    one of the supported development tools. With triggers, you can automate some of
    your **development-operations** (**DevOps**) flow, such as automatically transitioning
    an issue into an **In Review** status when a **pull request** (**PR**) is created.
    To add triggers, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a transition you want to add triggers to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Triggers** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add trigger** button. If you do not have any integrated development
    tools, this button will be disabled, as indicated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Add trigger button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – Add trigger button
  prefs: []
  type: TYPE_NORMAL
- en: Select a trigger you want to add and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the trigger source is detected and click on the **Add trigger** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a condition to transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'New transitions do not have any conditions by default. This means that anyone
    who has access to the issue will be able to execute the transition. Jira allows
    you to add any number of conditions to the transition. Here’s how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a transition you want to add conditions to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Conditions** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add condition** link, as shown in the following screenshot.
    This will bring you to the **Add Condition To Transition** page, which lists all
    the available conditions you can add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Add condition link'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.11_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.11 – Add condition link
  prefs: []
  type: TYPE_NORMAL
- en: Select a condition you want to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to add the condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on the condition, you may be presented with the **Add Parameters
    To Condition** page where you can specify configuration options for the condition.
    For example, the **User Is In Group** condition will ask you to select a group
    to check against, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Configuring a condition'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.12_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.12 – Configuring a condition
  prefs: []
  type: TYPE_NORMAL
- en: Newly added conditions are appended to the end of the existing list of conditions,
    creating a `AND` operator is used to group the conditions. This means that all
    conditions must pass for the entire condition group to pass. If one condition
    fails, the entire group fails, and the user will not be able to execute the transition.
    You can switch to using a logical `OR` operator, which means only one of the conditions
    in the group needs to pass for the entire group to pass. This is a very useful
    feature as it allows you to combine multiple conditions to form a more complex
    logical unit.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `AND` operator, you can add multiple `OR` operator, then the
    user will only need to belong to one of the listed groups. The only restriction
    to this is that you cannot use both operators for the same condition group.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: One transition can only have one condition group, and each conditional group
    can only have one logical operator.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a validator to transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with conditions, transitions by default do not have any validators associated.
    This means that transitions are completed as soon as they are executed. You can
    add validators to transitions to make sure that executions are only allowed to
    be complete when certain criteria are met. Use the following steps to add a validator
    to a transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a transition you want to add conditions to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Validators** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add validator** link, as shown in the following screenshot.
    This will bring you to the **Add Validator To Transition** page, which lists all
    the available validators you can add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Add validator link'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.13_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – Add validator link
  prefs: []
  type: TYPE_NORMAL
- en: Select a validator you want to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to add the validator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on the validator, you may be presented with the **Add Parameters
    To Validator** page where you can specify configuration options for the validator.
    The following screenshot shows an example from the **Fields required** validator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Configuring validators'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.14_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.14 – Configuring validators
  prefs: []
  type: TYPE_NORMAL
- en: Similar to conditions, when there are multiple validators added to a transition,
    they form a validator group. Unlike conditions, you can only use a logical `AND`
    condition for the group. This means that in order to complete a transition, every
    validator added to the transition must pass its validation criteria. Transitions
    cannot selectively pass validations using a logical `OR` condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a validator (the **Fields required** validator
    from **Suite Utilities for Jira** (**JSU**); refer to the *Extending a workflow
    with workflow add-ons* section) being placed on the transition, which validates
    whether the user has entered a value for the **Resolution Details** field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Issue Fields required validator'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.15_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.15 – Issue Fields required validator
  prefs: []
  type: TYPE_NORMAL
- en: Adding a post function to transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Transitions, by default, are created with several post functions. These post
    functions provide key services to Jira internal operations, so they cannot be
    deleted from the transition. These post functions perform the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the issue status to the linked status of the destination workflow step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a comment to an issue if one is entered during a transition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the change history for an issue and store the issue in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-index an issue to keep indexes in sync with the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fire an event that can be processed by the listeners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see, these post functions provide some of the basic functions such
    as updating a search index and setting an issue’s status after transition execution,
    which is essential in Jira. Therefore, instead of letting users manually add them
    in and risk the possibility of leaving one or more out, Jira adds them for you
    automatically when you create a new transition, as described in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a transition you want to add post functions to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Post Functions** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add post function** link, as illustrated in the following screenshot,
    and select a post function you want to add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.16 – Add post function link'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.16_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.16 – Add post function link
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add** button to add the post function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on the post function, you may be presented with an **Add Parameters
    To Function** page where you can specify configuration options for the post function.
    The following screenshot shows an example from the **Update Issue Field** post
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Configuring post function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.17_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.17 – Configuring post function
  prefs: []
  type: TYPE_NORMAL
- en: When a transition is executed, each post function is executed sequentially as
    it appears in the list, from top to bottom. If any post function in the list encounters
    an error during processing, you will receive an error, and the remaining post
    functions will not be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Since post functions are executed sequentially and some of them possess the
    ability to modify values and perform other tasks, their sequence of execution
    often becomes very important. For example, if you have a post function that changes
    the issue’s assignee to the current user and another post function that updates
    an issue field’s value with the issue’s assignee, obviously the update assignee
    post function needs to occur first, so you need to make sure that it is above
    the other post function.
  prefs: []
  type: TYPE_NORMAL
- en: You can move the position of post functions up and down along the list by clicking
    on the **Move Up** and **Move Down** links. Note that not all post functions can
    be repositioned, such as the **Re-index issue** and **Fire event issue** post
    functions. They are locked in their positions to ensure data integrity is maintained
    in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Updating an existing workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira lets you make changes to both active and inactive workflows. However,
    with active workflows, there are several restrictions, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: Existing workflow steps cannot be deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The associated status for an existing step cannot be edited
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an existing step has no outgoing transitions, it cannot have any new outgoing
    transitions added
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to make these changes, you will have to either deactivate the workflow
    by removing the associations of the workflow with all projects or create a copy
    of the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can always make a copy of the active workflow, make your changes, and then
    swap the original with the copied workflow in your workflow scheme.
  prefs: []
  type: TYPE_NORMAL
- en: When editing an active workflow, you are actually making changes to a draft
    copy of the workflow created by Jira. None of the changes you make will be applied
    until you publish your draft.
  prefs: []
  type: TYPE_NORMAL
- en: 'Publishing a draft is a very simple process. All you have to do is this:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Publish Draft** button. You will be prompted if you would like
    to first create a backup of the original workflow. It is recommended that you
    create a backup in case you need to undo your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select either `Sales Workflow 1.0`) to keep track of the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Publish** button to publish the draft workflow and apply changes,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Publish workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.18_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.18 – Publish workflow
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to publish your draft after you have made your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered how to create a workflow, we will look at how to map
    a workflow to an issue type next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding workflow schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While workflows define and model business processes, there still needs to be
    a way to tell Jira the situations in which to apply the workflows. As with other
    configurations in Jira, this is achieved through the use of schemes. As we have
    seen in the previous chapters, schemes act as self-contained, reusable configuration
    units that associate specific configuration options with projects and, optionally,
    issue types.
  prefs: []
  type: TYPE_NORMAL
- en: A workflow scheme establishes the association between workflows and issue types.
    The scheme can then be applied to multiple projects. Once applied, the workflows
    within the scheme become active.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view and manage workflow schemes, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Jira as a Jira administrator user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Issues** tab and then the **Workflow schemes** option. This will
    bring up the **Workflow schemes** page, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Workflow schemes page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.19_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.19 – Workflow schemes page
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Workflow schemes** page shows each scheme’s workflow association. For
    example, in the preceding screenshot, we can see that for **ISM: Insight ITSM
    Workflow Scheme**, the **Incident** issue type is assigned to **ISM: Insight ITSM
    Incident Workflow**, while the **Change** issue type is assigned to **ISM: Insight
    ITSM Change Workflow**.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a workflow scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a new project is created, a new workflow scheme will be created automatically
    for the project, so normally, you will not need to create new workflow schemes.
    However, there might be times—such as when experimenting with changes to the workflow—when
    you still want to keep existing configurations untouched as a backup. To create
    a new workflow scheme, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Workflow schemes** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add workflow scheme** button. This will take you to the **Add
    Workflow Scheme** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and description for the new workflow scheme. For example, you can
    choose to name your workflow after the project/issue type it will be applied to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to create the workflow scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be taken back to the **Workflow schemes** page once the new scheme
    has been created, and it will be listed in the table of available workflow schemes.
  prefs: []
  type: TYPE_NORMAL
- en: When you first create a new workflow scheme, the scheme is empty. This means
    it contains no associations of workflows and issue types, except the default association
    called `jira`). What you need to do next is configure the associations by assigning
    workflows to issue types.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can delete the default `jira`) association after you have added an association
    yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a workflow scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Workflow schemes contain associations between issue types and workflows. After
    you have created a workflow scheme, you need to configure and maintain the associations
    as your requirements change. For example, when a new issue type is added to the
    projects using the workflow scheme, you may need to add an explicit association
    for the new issue type.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure a workflow scheme, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Workflow schemes** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Edit** link for the workflow scheme you want to configure. This
    will take you to the workflow’s details page, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Configuring a workflow scheme'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.20_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.20 – Configuring a workflow scheme
  prefs: []
  type: TYPE_NORMAL
- en: From this page, you will be able to see a list of existing associations, create
    new associations for issue types, and delete associations that are no longer relevant.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning an issue type to a workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Issue types and workflows have a many-to-one relationship. This means each issue
    type can be associated with one and only one workflow. One workflow can be associated
    with multiple issue types. This rule is applied on a per-workflow scheme basis,
    so you can have a different association of the same issue type in a different
    workflow scheme.
  prefs: []
  type: TYPE_NORMAL
- en: When you add a new association, Jira will list all the issue types and all available
    workflows. Once you have assigned a workflow to the issue type, it will not appear
    in the list again until you remove the original association.
  prefs: []
  type: TYPE_NORMAL
- en: Among the list of issue types, there is an option called `jira` workflow. As
    with normal issue types, you can have only one catch-all association.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If all issue types will be using the same workflow, use the **All Unassigned
    Issue Types** option.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to assign a workflow to an issue type. If you want to add
    an issue type to one of the existing associations, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the workflow scheme’s details page for the workflow scheme you want
    to configure by clicking on its **Edit** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Assign** link for the association you want to add an issue type
    to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select issue types to add from the **Assign Issue Type to Workflow** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to create a new association from scratch, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the workflow scheme’s details page for the workflow scheme you want
    to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Add Existing** option from the **Add Workflow** menu. This will
    bring up the **Add Existing Workflow** dialog, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.21 – Adding a workflow to the workflow scheme'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.21_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.21 – Adding a workflow to the workflow scheme
  prefs: []
  type: TYPE_NORMAL
- en: Select a workflow to use and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select issue types to associate with the workflow and click on the **Finish**
    button, as illustrated in the following screenshot. If you select an issue type
    that is already assigned, it will be removed from the old assignment and added
    to the currently selected workflow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.22 – Assigning a workflow to an issue type'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.22_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.22 – Assigning a workflow to an issue type
  prefs: []
  type: TYPE_NORMAL
- en: Editing or deleting an association
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have associated an issue type with a workflow in a scheme, you cannot
    add a new association for the same issue type. There is also a **No edit** option
    to change the association. What you need to do is to delete the existing association
    and create a new one using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the workflow scheme’s details page for the workflow scheme you want
    to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Remove** link for the association you want to remove.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once an association is deleted, you will be able to create a new one for the
    issue type. If you do not assign a new workflow to the issue type, the workflow
    with the **All Unassigned Issue Types** option will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a workflow scheme to projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflow schemes are inactive by default after they are created. This means
    there are no projects in Jira using the workflow scheme. To activate a workflow
    scheme, you need to select a scheme and apply it to the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'When assigning a workflow scheme to a project, you need to follow four basic
    steps, as outlined next:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project administration page for the project you want to apply
    the workflow scheme to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Workflows** option from the left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Switch Scheme** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a new workflow scheme to use and click on the **Associate** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the confirmation page, depending on the differences between the current
    and new workflow, you will be prompted to make migration decisions for existing
    issues. For example, if the current workflow has a status called **Resolved**
    and the new workflow does not (or it has something equivalent but with a different
    **identifier** (**ID**)), you need to specify the new status to place issues that
    are currently in the **Resolved** status. Once mapped, Jira will start migrating
    existing issues to the new status, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.23 – Mapping workflow statuses'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.23_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.23 – Mapping workflow statuses
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are set out here:'
  prefs: []
  type: TYPE_NORMAL
- en: Select new workflow statuses for existing issues that are in statuses that do
    not exist in the new workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Associate** button to start the migration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the migration starts, Jira will display a progress bar showing you the
    progress. Depending on the number of issues that need to be migrated, this process
    may take some time. It is recommended to allocate a time frame to perform this
    task as it can be quite resource-intensive for large instances.
  prefs: []
  type: TYPE_NORMAL
- en: Delegated workflow management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as we saw in [*Chapter 6*](B18644_06.xhtml#_idTextAnchor154), *Screen Management*,
    project administrators have also been empowered to make changes to workflows that
    are used only by their own projects, instead of having to rely entirely on the
    Jira administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are, however, some restrictions to this, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: Only existing statuses can be used in the workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the status is already used by an issue in the project, the status cannot
    be deleted from the workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition properties, conditions, validators, and post functions cannot be
    updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The workflow must not be shared with any other projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workflows can only be updated in diagram mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This allows you to make changes such as adjusting statuses and transition flow
    to workflows that are dedicated to a single project, which would normally be the
    case since new workflows are automatically created with each new project. To make
    changes to workflows for your project as a project administrator, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the target project’s administration page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Issue types** option from the left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a workflow for the issue type you want to edit and click on the **Edit**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Publish** button once you are done with your changes. You can
    see an overview of this in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.24 – Delegated workflow administration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.24_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.24 – Delegated workflow administration
  prefs: []
  type: TYPE_NORMAL
- en: Now we have covered all the out-of-the-box workflow features in Jira, let’s
    take a look at some of the third-party apps you can use to extend what you can
    do with workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Extending a workflow with workflow add-ons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of very useful add-ons that will provide additional components
    such as conditions, validators, and post functions. The following sections present
    some of the most popular workflow-related plugins.
  prefs: []
  type: TYPE_NORMAL
- en: JSU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find a number of very useful conditions, validators, and post functions
    with this add-on. For example, the **Update Issue Field** post function that ships
    with Jira allows you to update any issue fields such as priority and assignee
    when a workflow transition completes. The JSU add-on complements this by providing
    a very similar **Update Any Issue Field** post function that handles custom fields.
    There are many other useful components such as the **Copy Value From Other Field**
    post function, which will allow you to implement some amazing logic with your
    workflow. It is a must-have add-on for any Jira instance. You can find out more
    at [https://marketplace.atlassian.com/apps/5048/jsu-suite-utilities-for-jira](https://marketplace.atlassian.com/apps/5048/jsu-suite-utilities-for-jira).
  prefs: []
  type: TYPE_NORMAL
- en: Jira Workflow Toolbox (JWT)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the name suggests, this is a workflow toolbox with a rich set of workflow
    conditions, validators, and post functions intended to fill many gaps when developing
    complex workflows. For example, it provides a condition and validator that allows
    you to specify checking rules with **regular expressions** (**regexes**). You
    can find out more at [https://marketplace.atlassian.com/apps/29496/jira-workflow-toolbox](https://marketplace.atlassian.com/apps/29496/jira-workflow-toolbox).
  prefs: []
  type: TYPE_NORMAL
- en: Jira Misc Workflow Extensions (JMWE)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another plugin with an assortment of conditions, validators, and post
    functions. Normal post functions let you alter the current issue’s field values.
    This plugin provides post functions that will allow you to set a parent issue’s
    field values from subtasks, along with many other features. You can find out more
    at [https://marketplace.atlassian.com/apps/292/jira-misc-workflow-extensions](https://marketplace.atlassian.com/apps/292/jira-misc-workflow-extensions).
  prefs: []
  type: TYPE_NORMAL
- en: Workflow Enhancer for Jira
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This contains a variety of validators and conditions around comparisons of the
    value of a field with another field, and lets you set up validation logic to compare
    dates, numeric, and Boolean values; you can find out more at [https://marketplace.atlassian.com/apps/575829/workflow-enhancer-for-jira](https://marketplace.atlassian.com/apps/575829/workflow-enhancer-for-jira).
  prefs: []
  type: TYPE_NORMAL
- en: ScriptRunner for Jira
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a very useful and powerful add-on that allows you to create your own
    custom conditions, validators, and post functions by writing scripts. This does
    require you to have some programming knowledge and a good understanding of Jira’s
    **application programming interface** (**API**). You can find out more at [https://marketplace.atlassian.com/apps/6820/scriptrunner-for-jira](https://marketplace.atlassian.com/apps/6820/scriptrunner-for-jira).
  prefs: []
  type: TYPE_NORMAL
- en: The HR project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen the power of workflows and how we can enhance the usefulness of
    Jira by adapting to everyday business processes. With our HR project, we have
    already defined two issue types to represent the onboarding and dismissal of an
    employee; both of these use the same default workflow with two steps: **To Do**
    and **Done**. So, we will now customize the workflow to represent a real-world
    HR process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our requirements for the business process would then include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The **New Employee** and **Termination** issue types will use a customized workflow,
    while the **Task** issue type will continue to use the existing one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the **Termination** issue type, we will add two additional steps: one to
    conduct an exit interview, and one to ensure that all necessary company assets
    are returned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that only authorized personnel can transition the issue through the various
    statuses of the workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The easiest way to implement these requirements would be to create a new workflow
    and add the extra process steps as new statuses. We will first do this to get
    our workflow structure in place. Later on, we will also look at how we can use
    other features in Jira and incorporate them into our workflow to make it more
    robust.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up workflows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to create a new workflow for our **Termination** issue type
    since we still want to keep the existing workflow for the **Task** issue type.
    The easiest way to get started is to clone the current workflow to save us some
    time. Follow the next steps to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Workflows** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `HR: Task Management Workflow` workflow.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the new workflow `HR: Termination Workflow`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Copy** button to create our workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to add in the extra status we need. Make sure that you are
    in the workflow designer by selecting the **Diagram** option, then proceed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add status** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name for our new status as **In Exit Review**, set the **Category**
    type to **In Progress**, and click on **Add**. You will need to hit the *Enter*
    key on your keyboard since we are creating a new status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button to create the workflow status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 2* and *3* to create a new status called **Collecting Assets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have our statuses added to our workflow, we need to connect them
    in the workflow with transitions. For now, we will make the workflow go in a sequence
    in the order of **To Do** | **In Exit Review** | **Collecting Assets** | **Done**.
    Let’s start by creating a transition going from **To Do** | **In Exit Review**,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add transition** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **To Do** as the **From** status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **In Exit Review** as the **To** status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new transition **Conduct Exit Review**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Workflow Screen** for **Screen**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to create the transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 1* to *6* to create two more transitions, linking **In Exit Review**
    to **Collecting Assets**, and **Collecting Assets** to **Done**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the new transitions in place, we will also want to remove the existing
    transitions between **To Do** and **Done** so that people cannot skip the process
    steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your workflow will look something like the one shown in the following screenshot.
    You can rearrange the elements in the workflow to make the diagram flow more naturally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25 – HR workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.25_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.25 – HR workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'The next customization we will do is to make sure that only authorized personnel
    can transition the issue along the workflow. For now, we will set it so only members
    of the `jira-administrators` group can transition an issue after it is created.
    Once we cover [*Chapter 9*](B18644_09.xhtml#_idTextAnchor256), *Securing Jira*,
    we can change this security setting. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Conduct Exit Review** transition and click on **Conditions**
    from the **Transition property** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add condition** button to bring up the **Add Condition To Transition**
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **User Is In Group** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `jira-administrator` group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add** to add the condition to the transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 1* to *5* on the remaining transitions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `jira-administrator` in this case—will see the transition with the
    condition applied to it.
  prefs: []
  type: TYPE_NORMAL
- en: Applying the workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With our workflow in place and set up, we need to let Jira know the issue types
    that will be using our new workflow. Since we already have a workflow scheme in
    place for our project, we just need to associate the appropriate issue type with
    the workflow. Here’s how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Workflow schemes** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `HR: Task Management Workflow Scheme`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Workflow** menu and select the **Add Existing** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our new `HR: Termination Workflow` option and click on the **Next**
    button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a **Termination** issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish** to create an association.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Publish** button to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This associates our new workflow with the **Termination** issue type specifically
    created for our HR project and leaves the default workflow for the others.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With our new workflow in place, we can now create a new **Termination** issue
    and start testing our implementation. Since we need to simulate a scenario where
    an unauthorized user cannot transition an issue after it is created, we need to
    create a new user. We will look at user management and security in [*Chapter 9*](B18644_09.xhtml#_idTextAnchor256),
    *Securing Jira*. For now, we will simply add a new user to our system, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Users management** tab and click on the **Users** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create user** button to bring up the **Create New User** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new user `john.doe` (John Doe).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a password and email address for this new user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Send Notification Email** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Jira Software** option for **Application access**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button to create the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, log in to Jira as a new business user, `john.doe`, and create a new `john.doe`)
    are not in the `jira-administrators` group. The administrator user we created
    in [*Chapter 1*](B18644_01.xhtml#_idTextAnchor014), *Getting Started with Jira
    Data Center*, is in the `jira-administrators` group, so let’s log in as the administrator.
    Once logged in as the administrator, you will see our new transition, **Conduct
    Exit Review**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.26 – HR workflow transition 1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.26_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.26 – HR workflow transition 1
  prefs: []
  type: TYPE_NORMAL
- en: You will also see that, if you create a new task in the HR project, the task
    issue will continue to use the default workflow.
  prefs: []
  type: TYPE_NORMAL
- en: With the current workflow set up, everything happens in sequential order. However,
    sometimes, you might need things to happen in parallel. For example, in the collecting
    assets step, there might be multiple assets to be collected for various teams,
    such as a laptop for IT and a key card for security. It will be a lot more efficient
    if you can perform them at the same time and be able to track them individually.
    One way you can do this is by creating subtasks for each asset under the issue
    (remember—an issue can only be assigned to one person), and then assigning the
    subtasks to the relevant team such as IT and security so that they can chase up
    with the employee to retrieve the asset. You can then set a condition on the **Done**
    transition to make sure that all subtasks are completed before they can be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be expanded upon to have the asset collection and exit interview as
    subtasks so that both can happen at the same time, and you can create different
    subtask issue types to differentiate them, as covered in [*Chapter 4*](B18644_04.xhtml#_idTextAnchor083),
    *Working with Issues*. Your **Termination** issue may look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.27 – HR workflow transition 2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.27_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.27 – HR workflow transition 2
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the **Done** transition will only be available when all subtasks
    are completed. This can be achieved by adding the **Sub-Task Blocking Condition**
    type to the **Done** issue transition.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how Jira can be customized to adapt to your organization.
    At the heart of this powerful feature is a robust workflow system that allows
    you to model Jira workflows based on existing business processes. We also looked
    at the various components within a workflow, how to perform validations, and how
    postprocessing provides a level of process automation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how we can combine the power of a workflow
    and its event-driven systems to facilitate communication through Jira notifications
    and the email system.
  prefs: []
  type: TYPE_NORMAL
