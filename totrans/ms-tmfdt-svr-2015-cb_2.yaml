- en: Chapter 2. Setting Up and Managing Code Repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Quality is never an accident; it is always the result of intelligent
    effort".* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*John Ruskin* |'
  prefs: []
  type: TYPE_TB
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Git repository in an existing TFVC Team Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling code analysis check-in policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing a baseless merge between sibling branches in TFVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reparenting a branch in TFVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlocking files checked out by someone else
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unshelving a shelveset created in one branch to another branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignoring file types from check-in using .tfignore and .gitignore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conducting code reviews in TFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up policies for branches in Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conducting Pull requests in TFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing code churn with TFS analysis services cube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Code repositories enable developers to write code more confidently. More developers
    are using source control than ever before. The most obvious benefits of a code
    repository can be seen when multiple developers are collaborating on code. Many
    hands in the pot means there is a greater need to manage and understand revisions.
    If you ever have to make an argument to support source control, then the questions
    to ask would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever made a change to code, realized it was a mistake and wanted to
    revert back?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever lost code or had a backup that was too old?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever had to maintain multiple versions of a product?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever wanted to see the difference between two (or more) versions of
    your code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever wanted to prove that a particular change broke or fixed a piece
    of code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever wanted to review the history of some code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever wanted to submit a change to someone else's code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever wanted to share your code or let other people work on your code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever wanted to see how much work is being done, and where, when, and
    by whom?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you ever wanted to experiment with a new feature without interfering with
    working code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Managing code is an essential part of **Application Lifecycle Management**,
    which spans indiscriminately across programming languages and frameworks. Source
    control systems can broadly be distinguished as centralized or distributed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00351.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Centralized Version Control Systems** (**CVCS**) maintain a single "central"
    copy of your source code on a server repository. When working with a centralized
    version control system, developers download the code from the repository to a
    local workspace. Once changes to the code have been made locally, they are committed
    to the centralized copy. Additional functions against the repository (branching,
    merging, shelving, and so on) also take place on the server and require a connection
    to the server.'
  prefs: []
  type: TYPE_NORMAL
- en: TFVC is a Centralized Version Control System. When working with TFVC using Visual
    Studio or Eclipse, the IDE is in frequent communication with the server. Most
    common operations cannot be performed in the absence of an active connection to
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: '**Distributed Version Control Systems** (**DVCS**) does not necessarily rely
    on a central server to store all the versions of a project''s files. Instead,
    developers "clone" a copy of a repository and have the full history of the project
    on their own hard drive. This copy (clone) contains all of the data in the repository
    – all of the branches and the commit history.'
  prefs: []
  type: TYPE_NORMAL
- en: Git is a Distributed Version Control System. Most operations (except pushing
    and pulling) can be performed without an active connection to the server.
  prefs: []
  type: TYPE_NORMAL
- en: TFS is the only platform to support both centralized (TFVC) and distributed
    (Git) source control systems. The following table should help you decide when
    centralized is a better option than distributed. More details on the differences
    between the two can be found at [https://msdn.microsoft.com/en-us/Library/vs/alm/code/overview](https://msdn.microsoft.com/en-us/Library/vs/alm/code/overview).
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Centralized Version Control | DistributedVersion Control |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Check-inCheck-out | EditCommit |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Strengths |'
  prefs: []
  type: TYPE_TB
- en: Scales to very large codebases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine level permission control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows usage monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Offline editing support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to edit files outside Visual Studio or Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Full offline experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete repository with portable history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified branching model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Best for |'
  prefs: []
  type: TYPE_TB
- en: Large Integrated codebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control and auditability over source code down to the file level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Medium-sized integrated codebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A balance of fine-grained control with reduced fiction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Modular codebases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated with open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highly distributed Teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Until TFS 2015, the selection for source control type needed to be made at the
    time of Team Project creation. In Update 1, a new capability was introduced that
    allows Teams to create Git repositories within TFVC Team Projects. This is great
    for Teams that have large investments in TFVC projects but would like to try out
    Git. This capability and its advantages are discussed at length in the *Creating
    a Git repository in an existing TFVC Team Project* recipe. The Git for TFVC users
    is a very useful guide ([http://bit.ly/1RgboRk](http://bit.ly/1RgboRk)) for anyone
    coming from a TFVC background interested in learning Git.
  prefs: []
  type: TYPE_NORMAL
- en: Today, the marketplace and business demands are changing more than ever before.
    Development Teams are constantly under pressure to deliver better quality software
    faster. This is not sustainable unless the underlying codebase is of good quality
    and backed by unit tests. A good source control repository can significantly contribute
    to the quality of the software, but it requires much more than just a good source
    control repository to drive quality.
  prefs: []
  type: TYPE_NORMAL
- en: Talking of quality, no code reviews, poor DevOps practices, lack of unit tests,
    too many tactical implementations, and not addressing underlying issues are major
    contributors to technical debt. Technical debt doesn't hit you overnight, it's
    a slow and gradual process. Unlike financial debt, technical debt is very hard
    to recognize. Technical debt will slow your ability to deliver value. Are you
    seeing any of these signs?
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00352.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The goal of this chapter is to introduce you to various source control operations
    in Web Portal and Team Explorer, learn about features that help build quality
    into the code, and last but not least, understand the code metrics available in
    the TFS Warehouse. In this chapter, we'll be using the Fabrikam Fiber codebase
    available on CodePlex ([https://fabrikam.codeplex.com](https://fabrikam.codeplex.com)).
    Follow the following instructions to set up the code in the FabrikamTFVC and FabrikamGit
    Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Fabrikam solution in FabrikamTFVC Team Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open Visual Studio, and in Team Explorer connect to FabrikamTFVC project. Click
    on the hyperlink to configure your workspace. Accept the default name and location,
    and click on **Map & Get**. A success notification is shown when the operation
    is completed:![Setting up the Fabrikam solution in FabrikamTFVC Team Project](img/image00353.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the workspace location, in this case, `C:\Users\Tarun\Source\Workspaces\FabrikamTFVC`.
    Create a new folder `Main`; in `Main`, create a folder `Source` and copy the content
    of Fabrikam codebase downloaded from CodePlex:![Setting up the Fabrikam solution
    in FabrikamTFVC Team Project](img/image00354.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Source Control Explorer in Visual Studio and from the menu bar, select
    **Add items to folder** icon. In the **Add to Source Control** window, click on
    the `Main` folder and then click on **Next**. Following this, click on **Excluded
    items**, select all the items, and then click on the **include item(s)** icon.
    There should be no excluded items now. Click on **Finish**, and then click on
    the **FabrikamTFVC** project and choose **Check in pending changes** from the
    context menu:![Setting up the Fabrikam solution in FabrikamTFVC Team Project](img/image00355.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Source Control Explorer, right-click on the `Main` folder and select **Convert
    to Branch...** from under the branching and merging submenu in the context menu:![Setting
    up the Fabrikam solution in FabrikamTFVC Team Project](img/image00356.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `FabrikamFiber.CallCenter.sln` from `$/FabrikamTFVC/Main/Source/FabrikamFiber.CallCenter`.
    Right-click on the **Solution** in Solution Explorer and select **Add Solution
    to Source Control...** from the context menu:![Setting up the Fabrikam solution
    in FabrikamTFVC Team Project](img/image00357.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept warnings and check in the changes from the pending page in Team Explorer.
    The Fabrikam solution is now successfully set up in the main branch in the FabrikamTFVC
    Team Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the Fabrikam solution in FabrikamGit Team Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open Visual Studio and in Team Explorer, connect to the FabrikamTFVC project.
    Click on the hyperlink to clone this repository. Accept the default name and location
    and clone. A success notification is shown when the operation is complete:![Setting
    up the Fabrikam solution in FabrikamGit Team Project](img/image00358.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the local working directory, in this case, `C:\Users\Tarun\Source\Repos\FabrikamGit`.
    Create a new folder `src` and copy the content of the Fabrikam codebase downloaded
    from CodePlex:![Setting up the Fabrikam solution in FabrikamGit Team Project](img/image00359.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Team Explorer, navigate to the changes page. From the untracked files section,
    click on the **Add All** hyperlink to include all files recently copied into the
    working folder. Click on the **Commit** button to commit these changes to the
    repo:![Setting up the Fabrikam solution in FabrikamGit Team Project](img/image00360.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A prompt to sync the changes is raised when the commit operation has been successfully
    completed. Click on **Sync** and then on **Push** from the **Outgoing Commits
    (1)** section to push the changes to the remote server:![Setting up the Fabrikam
    solution in FabrikamGit Team Project](img/image00361.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the branches page in Team Explorer. The **master** branch shows
    up as well as the **remotes/origin** branch:![Setting up the Fabrikam solution
    in FabrikamGit Team Project](img/image00362.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Fabrikam solution is now successfully set up in the **Master** branch in
    the FabrikamGit Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Git repository in an existing TFVC Team Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, it has only been possible to have TFVC as a source control repository.
    TFS started supporting Git as a source control from TFS 2013 onwards. Git offers
    many benefits for distributed Teams collaborating across the same codebase; you
    can read more about the benefits here at [https://git-scm.com/about](https://git-scm.com/about).
    TFVC Teams that are keen to try out Git, but cannot because of the rework involved
    in migrating their existing investments now have a solution. TFS now supports
    hybrid Team Projects. In this recipe, you'll learn how to set up a Git repository
    within an existing TFVC-based Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Team Foundation Server 2015 Update 1, you need to be a member of the project
    administrator group to make an existing TFVC or Git project into a hybrid project,
    a project that hosts both a TFVC repository and multiple Git repositories. Users
    will need Visual Studio 2015 Update 1 to work with the hybrid project. Older versions
    of Visual Studio, including 2015 RTM, will see the project as the type it was
    originally created as.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your TFVC project was created prior to TFS 2015 Update 1, a project administrator
    will need to apply some project-level permissions once the first repository has
    been created. Go to the version control administration page and select the **Git
    repositories** node in the tree. To set up the same group permissions as any of
    the default process templates (Agile, Scrum, and CMMI), add the following TFS
    groups and grant the following permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProjectName]\Readers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Allow**: Read'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Not set**: All others'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ProjectName]\Contributors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Allow**: Branch creation, Contribute, Note management, Read, and Tag creation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Not set**: All others'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ProjectName]\Build Administrators'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Allow**: Branch creation, Contribute, Note management, Read, and Tag creation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Not set**: All others'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, when creating a TFVC repository with in a Git Team Project that was
    created before TFS 2015 Update 1, the following folder level permissions need
    to be amended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the version control administration page and select the `$/_ProjectName_`
    node in the tree. To set up the same groups as any of the default process templates
    (Agile, Scrum, and CMMI), add the following TFS groups and grant the following
    permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProjectName]\Readers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Allow**: Read'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Not set**: All others'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ProjectName]\Contributors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Allow**: Check in, Check out, Label, Lock, Merge, and Read'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Not set**: All others'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ProjectName]\Build Administrators'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Allow**: Check in, Check out, Label, Lock, Merge, and Read'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- Not set**: All others'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If your Team Project was created after TFS 2015 Update 1, these permissions
    will have already been applied for you, and no action is necessary except creating
    the repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the code hub in FabrikamTFVC Web Portal by browsing to `http://TFS2015:8080/DefaultCollection/FabrikamTFVC/_versionControl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As illustrated in the following screenshot, click on **FabrikamTFVC** to pull
    down the **Options** menu. To create a new Git repository, click on **New repository...**
    from the **Options** menu. Name the repository `FabrikamFeature1` and click on
    **Create**:![How to do it...](img/image00363.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that there is no support for creating multiple TFVC repositories within
    the same Team Project. There is support for creating multiple Git repositories.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The create operation will redirect you to a Git getting started page. The getting
    started page allows you to generate a clone of the repository and command-line
    credentials, create a README file to describe your repository and provide commands
    to set up the Git repository to work with Xcode, Eclipse, and Visual Studio. Click
    on **Clone in Visual Studio** to start working on the new repository in Visual
    Studio:![How to do it...](img/image00364.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result of this action, the repository is cloned in Visual Studio:![How
    to do it...](img/image00365.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many customers are actively using TFVC repositories and have a rich Work Item
    history and customization in their Team Project. To make it easy for these Teams
    to start using Git, the Team Project model in TFS has been modified to support
    multiple source control repositories. Hybrid projects allow creating as many Git
    repositories as you need in your TFVC project. This model now also supports creating
    a TFVC repository in a Git project.
  prefs: []
  type: TYPE_NORMAL
- en: Team Explorer has been enhanced in TFS Update 1 to provide support for operating
    the hybrid Team Project. As illustrated in the following image, the manage connections
    page in Team Explorer lists all source control repositories in the Team Project.
    The workflows in Team Explorer are adjusted based on the repository type you are
    connected to.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00366.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Web Portal also allows context switching between the TFVC and Git source
    control in the code hub. The workflows associated to the source control are made
    available based on the selection. For example, on selecting Git, you can see the
    option for Pull requests, while in the context of TFVC, you see the option for
    shelvesets.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A recent roadmap of investments in Git experiences for Team Foundation Server
    and Visual Studio Online talks about support for Pull requests within Team Explorer
    and support for Git Large File Storage and GitFlow; you can read more about this
    at [http://bit.ly/1RXQRS1](http://bit.ly/1RXQRS1).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling code analysis check-in policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many organizations recommend certain checks be done before committing code into
    source control. The cost of fixing bad code increases overtime. There is incentive
    in identifying and fixing issues in code early. We discussed the definition of
    done in the previous chapter; think of this as the definition of check-in. In
    TFS, a check-in policy is a rule that is executed during the check-in operation
    to ensure that the selected change set is okay to commit. The check-in policies
    are stored on the server and executed on the client machines at the time of check-in.
    Check-in policies are only supported in TFVC projects. While TFS has some preconfigured
    check-in policies, several other check-in policies are added by TFS Power Tools.
    In this recipe, you'll learn how to configure the code analysis check-in policy.
    The code analysis check-in policy requires that code analysis is run before check-in.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, you''ll need:'
  prefs: []
  type: TYPE_NORMAL
- en: A TFVC Team Project called FabrikamTFVC. Refer to the *Creating a Team Project
    using the Scrum Template* recipe in [Chapter 1](part0016.xhtml#aid-F8901 "Chapter 1. Team
    Project Setup"), *Team Project Setup*, for instructions on how to create a TFVC
    Team Project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to configure check-in policies, you need to have the edit project-level
    information permission set to **Allow** for your account. Add yourself. If you
    are part of the Project Administrators or Project Collection Administrators group,
    you'll already have this permission.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Check-in policies that are defined using Team Explorer everywhere only apply
    when you check in using the Team Foundation Server plugin for Eclipse or the cross-platform
    command-line client for Team Foundation Server. If another client such as Team
    Portal or Team Explorer in Visual Studio is used, these policies do not apply.
    Similarly, policies that are defined using Team Portal or Team Explorer in Visual
    Studio are not applied when you check in using the Team Foundation Server plugin
    for Eclipse or the cross-platform command-line client for Team Foundation Server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Visual Studio, open Team Explorer and click on **Settings**. Once navigated
    into the **Settings** view, click on the **Source Control** hyperlink. From the
    **Source Control Settings** window, select the **Check-in Policy** Tab. Click
    on the **Add** button and select **Code Analysis**, then click on **OK**.![How
    to do it...](img/image00367.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Code Analysis Policy Editor** window, from the rule set dropdown, select
    **Microsoft Managed Recommended Rules** and click on **OK**:![How to do it...](img/image00368.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **Enforce check-in to only contain files that are part of current solution**.
    This option allows you to stop the check-in of any file that is not part of the
    current solution. This is a good option to enable as developers can accidently
    check in files into the source control without linking the file to the solution.
    This can possibly result in build issues.![How to do it...](img/image00369.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The code analysis ruleset definitions are stored in the `C:\Program Files (x86)\Microsoft
    Visual Studio 14.0\Team Tools\Static Analysis Tools\Rule Sets` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the FarbikamTFVC project, open `FabrikamFiber.CallCenter.sln`:![How to
    do it...](img/image00370.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **FabrikamFiber.Web** from `Controllers`, open `HomeController.cs`:![How
    to do it...](img/image00371.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code in the `Index()` function of `HomeController.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From Team Explorer, navigate to the pending changes window and check in the
    code changes into TFS. A policy warning is issued since the static code analysis
    hasn't been run:![How to do it...](img/image00372.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the warning message to see the details:![How to do it...](img/image00373.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trigger code analysis by selecting **Run Code Analysis on Solution** from the
    **Analyze** menu in Visual Studio:![How to do it...](img/image00374.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code analysis finds the issue with the newly added code. The developer would
    have missed this if the code analysis wasn't run. The code analysis policy ensures
    that code analysis is run before the code can be checked in:![How to do it...](img/image00375.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since code analysis has now been run, checking in the code will not issue a
    check-in policy violation warning message.![How to do it...](img/image00376.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check-in policies are used to enforce mandatory software development practices.
    Policy is enforced during the check-in process. Since TFVC check-ins are processed
    on the server, the check-in request is intercepted to force an execution of the
    check-in policy on the client side. If a user attempts to perform a check-in,
    in violation of a policy, the check-in is blocked.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four Team Project check-in policies that can be specified (in order
    to use check-in policies, you need to be connected to Team Foundation Server):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Builds**: This requires that any build breaking issues that were created
    during a build must be fixed before a new check-in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code analysis**: This requires that the code analysis is run before check-in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing policy**: This requires that check-in tests are completed before
    check-in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Work Items**: This requires that one or more Work Items be associated with
    the check-in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The check-in policy can be overridden by clicking on the **Override Warnings**
    hyperlink; you can continue to check in the code after providing a reason for
    the override:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00377.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can turn off the policy override option in Team Explorer using a no policy
    override server side plugin. Read the following blog post for more details [http://bit.ly/1jUhZ9y](http://bit.ly/1jUhZ9y).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have talked about check-in policies for TFVC projects. Using the
    TFS API, it is possible to create a custom check-in policy for Git projects. The
    server-side plugin listens for the `PushNotification` that is raised at the time
    of Git push event. Refer to [http://bit.ly/1OabagX](http://bit.ly/1OabagX) on
    how to create a server-side check-in policy for Git repositories to validate that
    a commit message has been associated with the push.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a baseless merge between sibling branches in TFVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing source code can get challenging when multiple Teams are contributing
    to the same repository. Are you already familiar with the branching and merging
    tools available in TFS? If not, I would encourage you to go through the ALM Rangers
    Version Control Guidance [http://bit.ly/1He8pmL](http://bit.ly/1He8pmL). The guidance
    talks in detail about the various branching strategy and its pros and cons.
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing a baseless merge between sibling branches in TFVC](img/image00378.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An extract from the ALM Rangers Version Control Guide showing different branching
    strategies
  prefs: []
  type: TYPE_NORMAL
- en: Branching in TFVC can get complicated over time; branching in Git is lightweight
    and path independent. In Git, many developers create a branch for each new feature
    they are coding, sometimes on a daily basis. Git allows you to quickly switch
    from one branch to another to pivot among different variations of your codebase.
    When using Git, you can create branches that exist only on your Dev machine and
    share them if and when you're ready. Consider evaluating your source control requirements
    against the workflow at [http://bit.ly/1P7UMvO](http://bit.ly/1P7UMvO); you may
    find Git a better fit.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to carry out a merge operation between two
    unrelated TFVC branches often referred to as sibling branches.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your TFVC-based Team Project, create a branching structure as illustrated
    in the following diagram. You can use the TFS Community Branch Tool extension
    to automate the creation of the branch, as illustrated in the following diagram
    ([http://bit.ly/1LZR2bx](http://bit.ly/1LZR2bx)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00379.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We'll be working through the following scenario in this recipe. The developer
    working on **Dev** branch has found a critical issue that he has resolved with
    a code check-in. The QA branch is already being used by another developer to carry
    out some unrelated work. To get the fix from **Dev** branch into production, the
    developer decides to perform a baseless merge between the **Dev** and **Prod**
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to perform a merge operation, your user account needs to have the
    merge permission. The project administrator group already grants this permission;
    however, this permission can be set to Allow directly on individual users and
    groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00380.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Visual Studio, open Team Explorer, and navigate to the Source Control Explore.
    Perform a **Get Latest Version** operation on the FabrikamTFVC Team Project:![How
    to do it…](img/image00381.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To simulate a fix being made in the **Dev** branch, open the `$\Dev\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers\HomeController.cs`
    file and copy the following comment in the `Index` method:![How to do it…](img/image00382.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check in the code changes to this file from the pending changes view in Team
    Explorer:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00383.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now that the critical change is in the Dev branch, let's look at the steps required
    to carry out the baseless merge of this change from the Dev branch to the Prod
    branch. From the source control explorer, right-click on the **Dev** branch and
    choose **Merge...** from under the **Branching and Merging** submenu:![How to
    do it…](img/image00384.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Merge** wizard will not show the **Prod** branch in the **Target branch**
    dropdown. Unrelated branches can only be selected using the **Browse...** button.
    Click on **Browse...** and select **Prod** branch. Then, click on **OK**:![How
    to do it…](img/image00385.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A warning sign shows up next to **Target branch** indicating that the chosen
    branch is unrelated and will cause a baseless merge:![How to do it…](img/image00386.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** to navigate to the next screen:![How to do it…](img/image00387.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the selection is changed from **All changes** to **Selected changesets**
    then a merge relationship between the two branches has not been established. While
    you would still be able to merge the change, you won't be able to visualize it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Keep the **Latest Version** selected in the dropdown and click on **Next**:![How
    to do it…](img/image00388.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the merge operation has completed, you'll be navigated to the **Resolve
    Conflicts** window. Click on **Merge Changes In Merge Tool**, then check and click
    on **Accept Merge**:![How to do it…](img/image00389.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Resolve Conflicts** window will clear of any conflicts once the merge
    has completed. From the pending changes viewed in Team Explorer, check in the
    pending changes:![How to do it…](img/image00390.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Source Control Explorer, right-click on the **Prod** branch and choose
    **View History**. Check all the branches and click on **Visualize**. The dashed
    line from Dev to Prod represents the baseless merge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a baseless merge is carried out, a relationship is established between
    the two sibling branches. The baseless merge is represented by the dashed line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00391.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To get a view of the timeline of the change, hit the **Timeline Tracking**
    view at the top of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00392.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Reparenting a branch in TFVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Team Foundation Version Control provides you with an option to prune a branch
    from somewhere in a given hierarchy and graft it on elsewhere in the same hierarchy.
    Consider using this approach if the branch structure you put in place is incorrectly
    set up or has stopped working as you have scaled up. In this recipe, you'll learn
    how to reparent a branch in TFVC.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The movement of the reparented branch is logical not physical and can be done
    without stopping developers from working. However, it's a good idea to get developers
    to shelve changes. You should also endeavor to make the new parent as close in
    content to the old parent to avoid merge conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to reparent a branch, your user account needs to have the **Manage
    branch** permission. The project administrator group and project collection administrator
    group already grant this permission; however, this permission can be set to allow
    directly on individual users and groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00393.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Manage branch** permission allows you to perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Convert a folder into a branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute the following actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the branch properties
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reparent the branch
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert the branch into a folder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your TFVC project, create a branching structure as illustrated in the figure
    on the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ![Getting ready](img/image00394.jpeg)'
  prefs: []
  type: TYPE_NORMAL
- en: Current branching structure
  prefs: []
  type: TYPE_NORMAL
- en: '| ![Getting ready](img/image00395.jpeg)'
  prefs: []
  type: TYPE_NORMAL
- en: Desired branching structure
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: The scenario we'll be working through in this recipe, as illustrated in the
    figure on the left, is the Development Team releases from the **Main** branch;
    **Release 1.1** was branched from **Release 1**. As illustrated in the figure
    on the right, the Team wants to move **Release 1.1** directly under the **Main**
    branch, so changes don't need to go through **Release 1** to be merged to **Release
    1.1**.
  prefs: []
  type: TYPE_NORMAL
- en: To reparent the branch **Release 1.1** from **Release 1** to **Main**, a relationship
    needs to be established between the two branches. This can only be done by performing
    a baseless merge between the two branches. Refer to the *Performing a baseless
    merge between sibling branches in TFVC* recipe to learn how to perform a baseless
    merge.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00396.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This recipe assumes that a merge relationship has been established between the
    **Main** and **Release 1.1** branch. In the preceding figure, the dashed line
    represents a relationship between the two branches.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to Source Control Explorer, right-click on the branch **Release 1.1**
    and choose **Reparent...** from the **Branching and Merging** submenu:![How to
    do it…](img/image00397.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Reparent** window, you'll see a list of all branches that have a direct
    or indirect relationship with **Release 1.1**. Select **Main** and click on **Reparent**.
    Selecting **No parent** will make **Release 1.1** an independent branch:![How
    to do it…](img/image00398.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The reparent operation takes place on the server. You will not see any pending
    changes as a result of the reparent operation. The branch hierarchy after the
    reparent operation is as follows:![How to do it…](img/image00399.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the reparent operation has been completed, you can view the updated branch
    hierarchy by right-clicking on the **Release1.1** branch and choosing **Properties**
    from under the **Advanced** submenu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00400.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Relationships** tab from the left menu to see the branch relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Unlocking files checked out by someone else
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In distributed Teams, developers often have pending changes that overlap shared
    code files. Don't you hate it when a developer takes a day off with files exclusively
    checked out to them or when a developer leaves an organization with files still
    checked out? When a file is exclusively locked, no check-in can be performed on
    the file until the lock is removed. In this recipe, you'll learn how to unlock
    files checked out by other users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To undo the pending changes in another user''s workspace, you must have the
    **Administer workspaces** permission set to **Allow**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00401.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developer *A* has checked out `$/FabrikamTFVC/Main/Source/FabrikamFiber.CallCenter/FabrikamFiber.Web/Web.config`
    in the FabrikamTFVC project with a check-in lock type. So while other users can
    check out the `Web.config` file, no one can check in `Web.config` until developer
    *A* has lifted this lock:![How to do it...](img/image00402.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following image, `Web.config` is checked out with the check-in lock.
    This is represented by **lock** in the **Pending Change** column:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00403.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now developer *B* checks out `Web.config` and adds a new section to the config
    file. To commit changes into version control, developer *B* tries to check in
    the file. The check-in fails with the following message.![How to do it...](img/image00404.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following issues were encountered during check-in:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Unable to perform operation on $/Fabrikam/Main/…/Web.config. The item $/Fabrikam/Main/
    …/Web.config is locked in workspace TFS2015;DeveloperA`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Developer *B* opens the "Developer Command Prompt for Visual Studio 2015" and
    runs the following command to undo the changes of developer *A*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Key in *Y* when prompted for confirmation of undo. Optionally, use the `/silent`
    switch in the preceding command for no prompt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00405.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Developer *B* can now successfully check-in the file through the Visual Studio
    pending changes window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: While the lock developer *A* had on the `app.config` has been removed, any pending
    changes that developer *A* might have had in the config file on his machine aren't.
    So, developer *A* can perform a `get` operation to pull down developer *B*'s changes
    and merge and continue as appropriate without any information loss.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TFS Power Tools provides an option to undo pending changes for other users right
    from within Visual Studio. If you don't have TFS Power Tools installed, refer
    to the *Creating a new Team Project through the command line* recipe in [Chapter
    1](part0016.xhtml#aid-F8901 "Chapter 1. Team Project Setup"), *Team Project Setup*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the file or folder you want to undo. From the context menu,
    choose **Find by Status...** from under the **Find** in Source Control submenu.
    You can narrow the search by specifying wildcard and username. The results are
    presented in **Find** in the Source Control window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image00406.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Simply select the file and choose **Undo...** from the context menu to undo
    the pending changes.
  prefs: []
  type: TYPE_NORMAL
- en: Unshelving a shelveset created in one branch to another branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using TFVC, you'll find shelvesets very useful. Shelvesets allow you to
    effectively back up your local copy of the changes on to the server. Developers
    are multitasking almost all the time; you may start coding a change in one branch
    and then realize that the change actually needs to be applied in another branch.
    In this recipe, you'll learn how to shelve changes in one code branch and then
    migrate the changes over to another branch without checking in the changes into
    source control.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The FabrikamTFVC project has three branches, **Dev**, **Main**, and **Prod**,
    as illustrated in the following diagram. In this recipe, we''ll create a shelveset
    `shelvesetDev1` from the pending changes in the **Dev** branch and unshelve the
    pending changes over to the **Prod** branch without checking in the pending changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00407.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This recipe requires the use of the `tfpt` command-line utility. This utility
    is installed with TFS Power Tools. If you don't have TFS Power Tools installed,
    refer to the *Creating a new Team Project through the command line* recipe in
    [Chapter 1](part0016.xhtml#aid-F8901 "Chapter 1. Team Project Setup"), *Team Project
    Setup*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform a `get latest` operation on both the **Dev** and **Prod** branch to
    ensure that they are up to date. Ensure that there are no pending changes in the
    **Prod** branch. If the branches are not up to date, the following error message
    may be issued during the unshelve operation: `Unable to determine the workspace`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Team Explorer, open Source Control Explorer and check out the `$\Dev\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers\HomeController.cs`
    file and copy the following comment in the `Index` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '// Assume this is a critical fix to this method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00382.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Navigate to the **Pending Changes** view in Team Explorer and click on the **Shelve**
    hyperlink. Enter the shelveset name as `shelvesetDev1` and click on the **Shelve**
    button:![How to do it...](img/image00408.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Visual Studio Developer Command Prompt and change the working directory
    to the target branch workspace directory. The target branch in this case is `Prod`:![How
    to do it...](img/image00409.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to migrate the shelveset from **Dev** to **Prod**
    branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the **Shelveset Details** window, click on the **Unshelve** button to continue:![How
    to do it...](img/image00410.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The merge button is enabled if TFS recons it can resolve the merge conflict.
    The **Resolve** button is enabled if TFS requires the conflict to be manually
    resolved. Click on the **Auto-merge All** button to continue:![How to do it...](img/image00411.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the auto merge operation has been completed, confirmation message is published
    in the command prompt:![How to do it...](img/image00412.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Source Control Explorer, navigate across to the **Prod** branch. Open `HomeController.cs`
    from `$\Prod\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers`. The changes
    made in the **Dev** version of the `HomeController.cs` file will reflect in the
    **Prod** branch version of `HomeController.cs`:![How to do it...](img/image00413.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ignoring file types from check-in using .tfignore and .gitignore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, TFS only supported server workspaces. Local workspaces were rolled
    out in TFS 2012\. A local workspace allows you to work disconnected from the server.
    All core version control operations can be performed without any server connectivity.
    Local workspaces listen for changes on the filesystem to infer the operations
    being performed. For example, a new file created in the workspace directly from
    the filesystem will show up as a pending change. Users who used Subversion source
    control will be familiar with local workspaces. Read more about the workings of
    local workspaces at [https://msdn.microsoft.com/en-us/library/bb892960.aspx](https://msdn.microsoft.com/en-us/library/bb892960.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: Many tools and extensions that work in concert with Visual Studio generate temporary
    files within the local workspace directories. For example, ReSharper, a developer
    productivity extension for Visual Studio, generates `_Resharper.[SolutionName]`
    files that are (by default) included in pending changes. These temporary files
    serve no benefit in version control and should be ignored; `.tfignore` and `.gitignore`
    allow you to do just that. File types to be ignored can be specified in `.tfignore`
    and `.gitignore`; these rules are used to automatically exclude specified file
    types from pending changes. In this recipe, you'll learn how to create `.tfignore`
    and `.gitignore` files to automatically exclude certain file types.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through the recipe, you''ll need to create a local workspace. Follow
    the instructions to create a local workspace in the FabrikamTFVC project:'
  prefs: []
  type: TYPE_NORMAL
- en: In the local drive, create a folder, `Wks`. This recipe assumes the folder to
    be `C:\Wks`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Team Explorer in Visual Studio and connect to the FabrikamTFVC Team Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Visual Studio menu, navigate to **File** | **Source Control** | **Advanced**
    | **Workspaces**:![Getting ready](img/image00414.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Manage workspace** window, click on **Add**. In **Add workspace**,
    create the workspace `TFS2015_99` mapped from `$/FabrikamTFVC/Main` to `C:\Wks`.
    Click on the **Advanced>>** button and confirm if the workspace location is set
    to **Local**. Then, click on **OK**:![Getting ready](img/image00415.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on **OK**, accept the prompt to perform a get latest operation
    to download the source code into the new local workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to set up the `.tfignore` files for TFVC-based
    source controls:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\Wks` and create a new file `ThisIsAFakeClass.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Team Explorer, navigate to the **Pending Changes** view for FabrikamTFVC
    project. In the **Excluded Changes** section, the count of detected shows up as
    1.![How to do it...](img/image00416.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Detected items** hyperlink. From the **Promote Candidate Changes**
    window, right-click on `ThisIsAFakeFile.txt` and choose **Ignore by extension
    (*.txt)**:![How to do it...](img/image00417.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `.tfignore` file is automatically created for you and shows up in the **Pending
    Changes** view. Open `.tfignore`; the extension `*.txt` has been added as an item
    to be ignored. Copy the following text into the `.tfignore` file to ignore all
    ReSharper generated files:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check in the `.tfignore` file into the version control; this ruleset will be
    evaluated on all developer workstations to ignore all files specified in this
    `.tfignore` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: TFVC honors multiple `.tfignore` files, where a `.tfignore` file in the scope
    of the project can override the ignore specification in the `.tfignore` file at
    the solution level.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TFVC accepts exclusion rules, for example, to ignore all TXT files except `help.txt`
    use `!help.txt`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Perform the following steps to set up the `.gitignore` files for Git-based
    source controls:'
  prefs: []
  type: TYPE_NORMAL
- en: In Team Explorer, open the FabrikamGit project and navigate to the **Settings**
    view. Click on the **Repository Settings** hyperlink. Then, click on **Add** to
    create a `.gitIgnore` file:![How to do it...](img/image00418.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Edit** hyperlink to edit the `.gitignore` file. Copy the following
    items in the `.gitIgnore` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Team Explorer, navigate to the **Changes** view and commit the `.gitIgnore`
    file. Click on the **Sync** hyperlink to push the updated `.gitIgnore` to the
    repository. All developer workspaces will now ignore the file extensions specified
    in this `.gitignore` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Git honors multiple `.gitIgnore` files, where a `.gitIgnore` file in the scope
    of the project can override the ignore specification file at the solution level.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `tfpt` command-line utility installed with TFS Power Tools among other
    things provides you with two very useful switches: `scortch` and `treeclean`.
    `scortch` and `treeclean` allow you to mirror the workspace as on the server and
    remove any unwanted clutter from the workspace. Learn more about `scortch` and
    `treeclean` at [http://adamprescott.net/2011/09/12/clean-tfs-workspaces-with-scorch-treeclean](http://adamprescott.net/2011/09/12/clean-tfs-workspaces-with-scorch-treeclean).'
  prefs: []
  type: TYPE_NORMAL
- en: Conducting code reviews in TFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the introduction to this chapter, we briefly talked about technical debt
    and how it can impact the productivity of a Team. The use of good engineering
    practices helps tackle issues that are potential contributors to technical debt.
    There is a consensus across the industry that code review is an effective and
    practical way to collar code inconsistency and possible defects early in the software
    development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'A study on the value and importance of code reviews conducted by Forrester
    Consulting highlighted the following as perceived benefits of code review:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Conducting code reviews in TFS](img/image00419.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Source - [http://www.klocwork.com/getattachment/08c47c41-053c-4fe8-bbf7-91b95734747c/The-Value-and-Importance-of-Code-Review-Forrester?sitename=Klocwork](http://www.klocwork.com/getattachment/08c47c41-053c-4fe8-bbf7-91b95734747c/The-Value-and-Importance-of-Code-Review-Forrester?sitename=Klocwork)
  prefs: []
  type: TYPE_NORMAL
- en: TFS offers two code review solutions, one through Team Explorer and the other
    through Team Web Access. The code review solution in Team Explorer, first introduced
    in TFS 2012, receives criticism for not supporting iterative reviews. On the other
    hand, the solution in Team Web Access called lightweight code commenting supports
    iterative reviews, but does not support an integrated Visual Studio IDE experience.
    You can learn more about the code review solution available in Team Explorer at
    [https://www.visualstudio.com/en-us/get-started/code/get-code-reviewed-vs](https://www.visualstudio.com/en-us/get-started/code/get-code-reviewed-vs).
    In this recipe, you'll learn how to use the lightweight code commenting in Team
    Web Access to conduct code reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll be working through the following scenario – Aaron is
    a developer on the FabrikamTFVC Team. He is working on a new feature in the `FabrikamFiber.CallCenter.sln`
    Dev codebase to show the `CreatedBy` column on the service ticket dashboard. Aaron
    has checked in his changes (this has created **Changeset 27**) and he now wants
    Tarun to perform a code review on the changes. Aaron sends Tarun the changeset
    by clicking on the share changeset icon in Team Web Access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00420.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Initiate a code review by clicking the e-mail icon from the Changeset view
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tarun receives an e-mail for a feedback request. Clicking on hyperlink **Changeset
    27** opens the changeset in review mode, highlighting the code changes in a comparison
    mode. The changes can also be viewed in side-by-side comparison by clicking on
    the file name hyperlink:![How to do it…](img/image00421.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code comparison window is launched by clicking on the Changeset hyperlink, in
    this case Changeset 27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Looking through the `Index.cshtml`, Tarun find a few issues. He selects the
    code with the issue and adds an inline comment:![How to do it…](img/image00422.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tarun adds an overall comment to the changeset using the **Add Comment** button
    at the top of the changeset:![How to do it…](img/image00423.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tarun submits his feedback by clicking on the **Sharechangeset** button. The
    e-mail contains a list of all the comments.![How to do it…](img/image00424.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Aaron goes through and fixes the issues highlighted by Tarun. Aaron thinks Tarun's
    comment on pagination and filter should be build out as a common capability. Aaron
    creates a product backlog item from the code comment and adds it to the Team's
    backlog:![How to do it…](img/image00425.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lightweight code commenting is a browser-based code commenting solution in Team
    Web Access. It provides a nice inline experience for commenting either on whole
    files or on individual changes. Code commenting enables interactive or time shifted
    conversations about code. Code commenting is done in a browser so, among other
    things, it will work wherever you are – including on your mobile phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'The comments are stored in Team Foundation Server in context to the code. If
    the code or the underlying code file is removed, the code comment associated to
    it is automatically removed. Work items created from comments include a reference
    back to the comment; this helps maintain traceability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00426.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While there is a consensus that code reviews are important, the industry is
    heavily divided whether code reviews should be done before or after check-in.
    Refer to the following blog post that talks about the pros and cons of both approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://geekswithblogs.net/TarunArora/archive/2012/09/18/vs-2012-code-review-ndash-before-check-in-or-after.aspx](http://geekswithblogs.net/TarunArora/archive/2012/09/18/vs-2012-code-review-ndash-before-check-in-or-after.aspx)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up policies for branches in Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building on the theme of code quality and how it helps prevent technical debt,
    branch policies is a great new feature in TFS that lends itself to improving the
    quality of the code that goes into the Git repo. In this recipe, you'll learn
    how to configure code review and Gated check-in policy on the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To configure branch policies on a branch, the user needs to have administration
    permission for that branch. To apply branch policy for the entire repo, the user
    needs admin rights for the repo.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00427.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Create a continuous integration build for the FabrikamGit Team; follow the instructions
    in the Creating a continuous integration build definition in TFBuild recipe in
    [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"),
    *Building Your Application*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamGit Team wants to protect the master branch by only allowing
    commits that pass the Fabrikam CI build and have been code reviewed by at least
    two people in the Team. If the code being changed falls under the `/src/FabrikamFiber.CallCenter/FabrikamFiber.Web`
    area, then it must be reviewed by Brian Miller.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the FabrikamGit Team Administration page at `http://tfs2015:8080/tfs/DefaultCollection/FabrikamGit/FabrikamGit%20Team/_admin/`.
    Navigate into the **Version Control** tab and select the **master** branch. To
    access branch policies, click on the **Branch Policies** tab:![How to do it...](img/image00428.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The branch policies page allows you to configure policies for gated check-ins
    and code reviews.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Automatically build pull requests** section, check both options and
    select the **FabrikamGit CI** build definition from the dropdown:![How to do it...](img/image00429.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Code review requirements** section, check require code reviews and
    specify the minimum number of reviewers as `2`:![How to do it...](img/image00430.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add a new path** hyperlink. Add the path as `/src/FabrikamFiber.CallCenter/FabrikamFiber.Web/*`
    and reviewer as `Brian Miller`:![How to do it...](img/image00431.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save Changes** button to save and apply the gated check-in and
    code review policies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Branch policies are evaluated on the server at the time of commit. With the
    branch policies enabled for the master, no code can be committed directly into
    the master. On directly committing code into the master, the following error message
    is issued.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following errors were reported during push:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There may be justifications at times for bypassing the policies. There is provision
    for this in TFS. By setting the **Exempt from policy enforcement** permission
    to **Allow**, the user or group is allowed to bypass the policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image00432.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This permission can be scoped to an entire project, a repo, or a single branch.
    If you are granted exempt from policy enforcement, you will not be warned nor
    blocked from pushing or merging directly to a branch. So, as they rightly say…
    with great power, comes great responsibility.
  prefs: []
  type: TYPE_NORMAL
- en: Conducting Pull requests in TFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in the chapter, you learned how to restrict unreviewed code from making
    its way into the master branch. Pull requests are the means to promote code from
    topic branches (also referred to as feature branch) into the master branch. Pull
    requests enable developers working in topic branches to get feedback on their
    changes from other developers prior to submitting the code into the master branch.
    In this recipe, you'll learn how to conduct a Pull request to accept changes from
    a topic branch into the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scenario we'll be working through in this recipe – Brian is a developer
    on the FabrikamGit Team. He is working on feature to add a dropdown called `problem
    type` on the service Dashboard. Brian has created an enum with the list of problem
    types and he wants to get feedback on this list and merge his changes to the master
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio and connect it to the FabrikamGit Team Project. From Team
    Explorer hub, click on **Branches**. In the **Branches** view, right-click on
    **master** and select **New local branch From…** in the context menu. Enter the
    new branch name as `Brian/Feature1` and click on the **Create branch** button:![Getting
    ready](img/image00433.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the topic branch, open `FabrikamFiber.CallCenter.sln`. In the **FabrikamFiber.Web**
    project, add a new folder and call it `Common`. Add a new class and call it `ProblemTypeEnum.cs`.
    Edit the class and create an enum, as shown in the screenshot:![Getting ready](img/image00434.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From Team Explorer, navigate to the **Changes** view. Commit the pending changes
    by entering a commit message and clicking on the **Commit** button. Sync and publish
    the branch:![Getting ready](img/image00435.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the branches view page in Team Web Access by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_git/FabrikamGit/branches`.
    The topic branch shows up here highlighting that it is one change a head of the
    master branch:![Getting ready](img/image00436.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validate that the master branch has gated check in and code review policy setup.
    If not, follow the steps in the *Setting up policies for branches in Git* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the Pull request page in the Web Portal by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_git/FabrikamGit/pullrequests`.
    You will see a prompt to create a Pull request from the earlier published branch.
    Alternatively, click on the **New Pull Request** button in the left panel:![How
    to do it...](img/image00437.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Create Pull Request** page shows the list of changes a long with file-level
    comparison of the changes. The destination branch is selected as master, since
    its set up as the default. Optionally, click on the **more options** hyperlink
    to add a description and an additional group of reviews:![How to do it...](img/image00438.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The master branch policies are evaluated, the FabrikamGit CI build is automatically
    kicked off, and code review requests are issued. The engine evaluates the changes
    and determines that there will be no merge conflicts as part of the merge operation.
    Since the code changes are under `/src/FabrikamFiber.CallCenter/FabrikamFiber.Web/`,'
    a code review request is issued to Tom Hacker, too.![How to do it...](img/image00439.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, Tom Hacker logs into Web Portal and, looks up the Pull requests assigned
    to him. He conducts a code review for this Pull request. Tom suggests a few changes
    to the enum and marks the Pull request as approved with suggestions:![How to do
    it...](img/image00440.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Brian makes the suggested changes and commits the changes into the topic branch.
    Click on **Refresh** to update the changes into the Pull request:![How to do it...](img/image00441.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The branch policies are reevaluated – the gated check-in build is run and merge
    is evaluated. Once the required number of reviewers have approved the Pull request,
    the request is ready to be merged. Clicking on the **Complete Pull Request** button
    merges the changes into the master and creates a new changeset:![How to do it...](img/image00442.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Delete Source Branch** button to delete the `feature1` branch.
    This is a good practice as leaving unwanted branches causes clutter.![How to do
    it...](img/image00443.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Pull request has been completed; the updated status reflects in the Team
    Portal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00444.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the Team Explorer hub, click on **Sync** page, fetch, and pull the incoming
    changes. From the **Branches** view, click on the **master** branch and choose
    **View history** from the context menu. The merge into the main branch has completed
    as part of the Pull request; this now reflects in the branch history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00445.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing code churn with TFS analysis services cube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TFS analysis services cube computes large datasets that enable users to
    answer questions about their software project. The TFS data warehouse empowers
    user to join up various datasets and understand trends in code churn, code coverage,
    builds, bugs, and so on. In this recipe, you'll learn how to connect Excel with
    TFS analysis services cube and analyze the code churn in the FabrikamTFVC project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to connect TFS analysis services as a data source using Excel, you
    need your Windows account permissioned on the TFS data warehouse. Alternatively,
    use a Windows user name and password that already has access.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open Excel, in the **DATA** tab click on **From Other Sources** and choose **From
    Analysis Services**. In the data connection wizard, enter the TFS analysis server
    connection details and click on the **Next** button:![How to do it...](img/image00446.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are unsure about the warehouse connectivity details, you can check and
    verify them through the **Reporting** tab in the TFS Administration Console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Tfs_Analysis** in the database dropdown, select **Code Churn**, and
    click on the **Next** button. The **Modified** column indicates the last processed
    data time of each cube and perspective. In the next screen, click on **Finish**:![How
    to do it...](img/image00447.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the pivot report as indicated in the following screenshot:![How to do
    it...](img/image00448.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The selection of these fields produces the following output. The data is grouped
    by year, month, and week, showing the total lines in the codebase along with a
    breakdown of lines modified, lines deleted, lines added, and the total churn:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00449.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you are interested in the build quality indicators report, TFS already
    offers this report out of the box. The report shows test coverage, code churn,
    and bug counts for a specified build definition. You can refer to [https://msdn.microsoft.com/en-us/library/dd380683(v=vs.120).aspx](https://msdn.microsoft.com/en-us/library/dd380683(v=vs.120).aspx),
    the tutorial, to learn more about this report.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change the fields in the pivot to what is illustrated in the following figure.
    Now, let''s bring the version control hierarchy and build details in to the equation
    and update the fields in the pivot as in the screenshot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image00450.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the values section add Total Lines, Lines Modified, Lined Added, and Total
    Churn.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will result in the results pivoted by year, week, and date and the version
    control hierarchy. As you can see in the screenshot here, the output shows the
    changes to the branch. You can drill down further to the specific project and
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image00451.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, change the file hierarchy to be the filter and add the file extension to
    be presented as a row. In the file extension filter on `.asax`, `.config`, and
    `.cshtml`, the output will show you the code churn in these file types overtime.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image00452.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The possibilities are limitless. Once you have the basics of analysis reports
    nailed down, you can begin spelunking into the other dimensions available to you
    in the data warehouse to correlate the data to drive more interesting trends about
    your software project.
  prefs: []
  type: TYPE_NORMAL
