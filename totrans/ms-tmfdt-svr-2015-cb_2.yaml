- en: Chapter 2. Setting Up and Managing Code Repositories
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章：设置和管理代码仓库
- en: '|   | *"Quality is never an accident; it is always the result of intelligent
    effort".* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“质量从来不是偶然的，它永远是智能努力的结果。”* |   |'
- en: '|   | --*John Ruskin* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*约翰·罗斯金* |'
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Creating a Git repository in an existing TFVC Team Project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在现有的 TFVC 团队项目中创建一个 Git 仓库
- en: Enabling code analysis check-in policy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用代码分析检查策略
- en: Performing a baseless merge between sibling branches in TFVC
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TFVC 中执行兄弟分支之间的无基础合并
- en: Reparenting a branch in TFVC
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TFVC 中重新调整分支的父分支
- en: Unlocking files checked out by someone else
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解锁其他人签出的文件
- en: Unshelving a shelveset created in one branch to another branch
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将在一个分支中创建的 shelve 集合还原到另一个分支
- en: Ignoring file types from check-in using .tfignore and .gitignore
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 .tfignore 和 .gitignore 忽略文件类型的提交
- en: Conducting code reviews in TFS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TFS 中进行代码审查
- en: Setting up policies for branches in Git
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Git 分支策略
- en: Conducting Pull requests in TFS
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TFS 中执行 Pull 请求
- en: Analyzing code churn with TFS analysis services cube
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TFS 分析服务立方体分析代码变化
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Code repositories enable developers to write code more confidently. More developers
    are using source control than ever before. The most obvious benefits of a code
    repository can be seen when multiple developers are collaborating on code. Many
    hands in the pot means there is a greater need to manage and understand revisions.
    If you ever have to make an argument to support source control, then the questions
    to ask would be the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 代码仓库使开发人员能够更有信心地编写代码。现在，使用源代码控制的开发人员比以往任何时候都多。当多个开发人员共同协作开发时，代码仓库的最显著好处就能显现出来。更多的人参与意味着对版本的管理和理解有更大的需求。如果你需要为源代码控制辩护，那么需要提出以下问题：
- en: Have you ever made a change to code, realized it was a mistake and wanted to
    revert back?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾修改过代码，后来意识到这是一个错误并希望恢复？
- en: Have you ever lost code or had a backup that was too old?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾丢失代码或有一个过时的备份？
- en: Have you ever had to maintain multiple versions of a product?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾需要维护多个版本的产品？
- en: Have you ever wanted to see the difference between two (or more) versions of
    your code?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾想过查看你代码的两个（或更多）版本之间的区别？
- en: Have you ever wanted to prove that a particular change broke or fixed a piece
    of code?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾想过证明某个特定的修改是导致或修复了某段代码的问题？
- en: Have you ever wanted to review the history of some code?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾想过回顾某段代码的历史？
- en: Have you ever wanted to submit a change to someone else's code?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾想过向其他人的代码提交修改？
- en: Have you ever wanted to share your code or let other people work on your code?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾想过分享你的代码或让其他人参与你的代码工作？
- en: Have you ever wanted to see how much work is being done, and where, when, and
    by whom?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾想过查看到底是谁、何时、何地进行了哪些工作？
- en: Have you ever wanted to experiment with a new feature without interfering with
    working code?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否曾想过在不干扰现有代码的情况下尝试一个新功能？
- en: 'Managing code is an essential part of **Application Lifecycle Management**,
    which spans indiscriminately across programming languages and frameworks. Source
    control systems can broadly be distinguished as centralized or distributed:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 管理代码是**应用生命周期管理**的一个重要部分，这一过程广泛适用于各种编程语言和框架。源代码控制系统大致可以分为集中式和分布式两类：
- en: '![Introduction](img/image00351.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00351.jpeg)'
- en: '**Centralized Version Control Systems** (**CVCS**) maintain a single "central"
    copy of your source code on a server repository. When working with a centralized
    version control system, developers download the code from the repository to a
    local workspace. Once changes to the code have been made locally, they are committed
    to the centralized copy. Additional functions against the repository (branching,
    merging, shelving, and so on) also take place on the server and require a connection
    to the server.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**集中版本控制系统**（**CVCS**）在服务器仓库上保持一份源代码的单一“中央”副本。在使用集中版本控制系统时，开发人员将代码从仓库下载到本地工作空间。一旦在本地对代码进行了修改，就会提交到中央副本。对仓库的其他操作（如分支、合并、暂存等）也发生在服务器上，并且需要连接到服务器。'
- en: TFVC is a Centralized Version Control System. When working with TFVC using Visual
    Studio or Eclipse, the IDE is in frequent communication with the server. Most
    common operations cannot be performed in the absence of an active connection to
    the server.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: TFVC 是一个集中版本控制系统。在使用 Visual Studio 或 Eclipse 与 TFVC 一起工作时，IDE 与服务器保持频繁的通信。没有与服务器的活动连接，大多数常见操作是无法执行的。
- en: '**Distributed Version Control Systems** (**DVCS**) does not necessarily rely
    on a central server to store all the versions of a project''s files. Instead,
    developers "clone" a copy of a repository and have the full history of the project
    on their own hard drive. This copy (clone) contains all of the data in the repository
    – all of the branches and the commit history.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式版本控制系统**（**DVCS**）不一定依赖中央服务器来存储项目文件的所有版本。相反，开发者“克隆”一个代码库副本，并在自己的硬盘上拥有项目的完整历史记录。这个副本（克隆）包含了代码库中的所有数据——包括所有分支和提交历史。'
- en: Git is a Distributed Version Control System. Most operations (except pushing
    and pulling) can be performed without an active connection to the server.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个分布式版本控制系统。除了推送和拉取操作外，大多数操作都可以在没有与服务器的活动连接时执行。
- en: TFS is the only platform to support both centralized (TFVC) and distributed
    (Git) source control systems. The following table should help you decide when
    centralized is a better option than distributed. More details on the differences
    between the two can be found at [https://msdn.microsoft.com/en-us/Library/vs/alm/code/overview](https://msdn.microsoft.com/en-us/Library/vs/alm/code/overview).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 是唯一同时支持集中式（TFVC）和分布式（Git）源代码管理系统的平台。以下表格可以帮助你决定在何种情况下集中式版本控制比分布式更合适。关于两者差异的更多详细信息，可以参考
    [https://msdn.microsoft.com/en-us/Library/vs/alm/code/overview](https://msdn.microsoft.com/en-us/Library/vs/alm/code/overview)。
- en: '|   | Centralized Version Control | DistributedVersion Control |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | 集中式版本控制 | 分布式版本控制 |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Check-inCheck-out | EditCommit |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 检入/检出 | 编辑/提交 |'
- en: '| --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Strengths |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 优势 |'
- en: Scales to very large codebases
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持非常大的代码库
- en: Fine level permission control
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精细级别的权限控制
- en: Allows usage monitoring
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许使用监控
- en: '|'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Offline editing support
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线编辑支持
- en: Easy to edit files outside Visual Studio or Eclipse
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松编辑 Visual Studio 或 Eclipse 外的文件
- en: '|'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Full offline experience
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全离线体验
- en: Complete repository with portable history
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的代码库与可移植的历史记录
- en: Simplified branching model
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的分支模型
- en: '|'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Best for |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 最适合 |'
- en: Large Integrated codebase
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大型集成代码库
- en: Control and auditability over source code down to the file level
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对源代码的控制和审计可达文件级别
- en: '|'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Medium-sized integrated codebase
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中型集成代码库
- en: A balance of fine-grained control with reduced fiction
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在减少摩擦的同时实现精细控制的平衡
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Modular codebases
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化代码库
- en: Integrated with open source
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与开源集成
- en: Highly distributed Teams
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度分布式的团队
- en: '|'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Until TFS 2015, the selection for source control type needed to be made at the
    time of Team Project creation. In Update 1, a new capability was introduced that
    allows Teams to create Git repositories within TFVC Team Projects. This is great
    for Teams that have large investments in TFVC projects but would like to try out
    Git. This capability and its advantages are discussed at length in the *Creating
    a Git repository in an existing TFVC Team Project* recipe. The Git for TFVC users
    is a very useful guide ([http://bit.ly/1RgboRk](http://bit.ly/1RgboRk)) for anyone
    coming from a TFVC background interested in learning Git.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TFS 2015 之前，源代码控制类型的选择需要在团队项目创建时做出。在 Update 1 中，引入了一个新功能，允许团队在 TFVC 团队项目中创建
    Git 仓库。这对那些在 TFVC 项目中已有大量投资，但又希望尝试 Git 的团队来说非常有用。这个功能及其优势在 *在现有 TFVC 团队项目中创建 Git
    仓库* 章节中有详细讨论。对于任何来自 TFVC 背景并希望学习 Git 的用户，Git for TFVC 是一本非常有用的指南 ([http://bit.ly/1RgboRk](http://bit.ly/1RgboRk))。
- en: Today, the marketplace and business demands are changing more than ever before.
    Development Teams are constantly under pressure to deliver better quality software
    faster. This is not sustainable unless the underlying codebase is of good quality
    and backed by unit tests. A good source control repository can significantly contribute
    to the quality of the software, but it requires much more than just a good source
    control repository to drive quality.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，市场和业务需求比以往任何时候都在发生变化。开发团队面临着更大的压力，需要更快地交付更高质量的软件。除非基础代码库的质量良好且有单元测试支持，否则这是不可持续的。一个好的源代码控制库可以显著提高软件质量，但仅仅拥有一个好的源代码库控制库是不够的，推动质量的因素远不止如此。
- en: Talking of quality, no code reviews, poor DevOps practices, lack of unit tests,
    too many tactical implementations, and not addressing underlying issues are major
    contributors to technical debt. Technical debt doesn't hit you overnight, it's
    a slow and gradual process. Unlike financial debt, technical debt is very hard
    to recognize. Technical debt will slow your ability to deliver value. Are you
    seeing any of these signs?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 说到质量，缺乏代码审查、糟糕的DevOps实践、缺少单元测试、过多的战术实现，以及没有解决根本问题，都是技术债务的主要原因。技术债务不会在一夜之间爆发，它是一个缓慢而渐进的过程。与财务债务不同，技术债务非常难以察觉。技术债务会减慢你交付价值的能力。你是否注意到这些迹象？
- en: '![Introduction](img/image00352.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00352.jpeg)'
- en: The goal of this chapter is to introduce you to various source control operations
    in Web Portal and Team Explorer, learn about features that help build quality
    into the code, and last but not least, understand the code metrics available in
    the TFS Warehouse. In this chapter, we'll be using the Fabrikam Fiber codebase
    available on CodePlex ([https://fabrikam.codeplex.com](https://fabrikam.codeplex.com)).
    Follow the following instructions to set up the code in the FabrikamTFVC and FabrikamGit
    Team Project.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是向你介绍Web Portal和Team Explorer中的各种源代码管理操作，了解帮助将质量构建到代码中的功能，最后但同样重要的是，理解TFS仓库中可用的代码度量标准。在本章中，我们将使用CodePlex上提供的Fabrikam
    Fiber代码库([https://fabrikam.codeplex.com](https://fabrikam.codeplex.com))。按照以下步骤将代码设置到FabrikamTFVC和FabrikamGit团队项目中。
- en: Setting up the Fabrikam solution in FabrikamTFVC Team Project
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在FabrikamTFVC团队项目中设置Fabrikam解决方案
- en: Open Visual Studio, and in Team Explorer connect to FabrikamTFVC project. Click
    on the hyperlink to configure your workspace. Accept the default name and location,
    and click on **Map & Get**. A success notification is shown when the operation
    is completed:![Setting up the Fabrikam solution in FabrikamTFVC Team Project](img/image00353.jpeg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio，在Team Explorer中连接到FabrikamTFVC项目。点击超链接以配置你的工作区。接受默认的名称和位置，然后点击**映射并获取**。操作完成时会显示成功通知：![在FabrikamTFVC团队项目中设置Fabrikam解决方案](img/image00353.jpeg)
- en: Open the workspace location, in this case, `C:\Users\Tarun\Source\Workspaces\FabrikamTFVC`.
    Create a new folder `Main`; in `Main`, create a folder `Source` and copy the content
    of Fabrikam codebase downloaded from CodePlex:![Setting up the Fabrikam solution
    in FabrikamTFVC Team Project](img/image00354.jpeg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开工作区位置，在本例中是`C:\Users\Tarun\Source\Workspaces\FabrikamTFVC`。创建一个新的文件夹`Main`；在`Main`文件夹中，创建一个`Source`文件夹并复制从CodePlex下载的Fabrikam代码库内容：![在FabrikamTFVC团队项目中设置Fabrikam解决方案](img/image00354.jpeg)
- en: Open Source Control Explorer in Visual Studio and from the menu bar, select
    **Add items to folder** icon. In the **Add to Source Control** window, click on
    the `Main` folder and then click on **Next**. Following this, click on **Excluded
    items**, select all the items, and then click on the **include item(s)** icon.
    There should be no excluded items now. Click on **Finish**, and then click on
    the **FabrikamTFVC** project and choose **Check in pending changes** from the
    context menu:![Setting up the Fabrikam solution in FabrikamTFVC Team Project](img/image00355.jpeg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio中的源代码管理资源管理器，在菜单栏中选择**将项目添加到文件夹**图标。在**添加到源代码管理**窗口中，单击`Main`文件夹，然后点击**下一步**。接着，点击**排除的项目**，选择所有项目，然后点击**包括项目**图标。现在应该没有排除的项目了。点击**完成**，然后点击**FabrikamTFVC**项目并从上下文菜单中选择**提交待处理更改**：![在FabrikamTFVC团队项目中设置Fabrikam解决方案](img/image00355.jpeg)
- en: In Source Control Explorer, right-click on the `Main` folder and select **Convert
    to Branch...** from under the branching and merging submenu in the context menu:![Setting
    up the Fabrikam solution in FabrikamTFVC Team Project](img/image00356.jpeg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源代码管理资源管理器中，右键单击`Main`文件夹，并在上下文菜单中的分支和合并子菜单下选择**转换为分支...**：![在FabrikamTFVC团队项目中设置Fabrikam解决方案](img/image00356.jpeg)
- en: Open `FabrikamFiber.CallCenter.sln` from `$/FabrikamTFVC/Main/Source/FabrikamFiber.CallCenter`.
    Right-click on the **Solution** in Solution Explorer and select **Add Solution
    to Source Control...** from the context menu:![Setting up the Fabrikam solution
    in FabrikamTFVC Team Project](img/image00357.jpeg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`FabrikamFiber.CallCenter.sln`文件，路径为`$/FabrikamTFVC/Main/Source/FabrikamFiber.CallCenter`。在解决方案资源管理器中右键单击**解决方案**，并从上下文菜单中选择**添加解决方案到源代码管理...**：![在FabrikamTFVC团队项目中设置Fabrikam解决方案](img/image00357.jpeg)
- en: Accept warnings and check in the changes from the pending page in Team Explorer.
    The Fabrikam solution is now successfully set up in the main branch in the FabrikamTFVC
    Team Project.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受警告并在Team Explorer的待处理页面上提交更改。Fabrikam解决方案现在已成功设置到FabrikamTFVC团队项目的主分支中。
- en: Setting up the Fabrikam solution in FabrikamGit Team Project
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 FabrikamGit 团队项目中设置 Fabrikam 解决方案
- en: Open Visual Studio and in Team Explorer, connect to the FabrikamTFVC project.
    Click on the hyperlink to clone this repository. Accept the default name and location
    and clone. A success notification is shown when the operation is complete:![Setting
    up the Fabrikam solution in FabrikamGit Team Project](img/image00358.jpeg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio，在团队资源管理器中连接到 FabrikamTFVC 项目。点击超链接以克隆此仓库。接受默认名称和位置并开始克隆。操作完成后会显示成功通知：![在
    FabrikamGit 团队项目中设置 Fabrikam 解决方案](img/image00358.jpeg)
- en: Open the local working directory, in this case, `C:\Users\Tarun\Source\Repos\FabrikamGit`.
    Create a new folder `src` and copy the content of the Fabrikam codebase downloaded
    from CodePlex:![Setting up the Fabrikam solution in FabrikamGit Team Project](img/image00359.jpeg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开本地工作目录，在此案例中为 `C:\Users\Tarun\Source\Repos\FabrikamGit`。创建一个新的文件夹 `src`，并将从
    CodePlex 下载的 Fabrikam 代码库内容复制进去：![在 FabrikamGit 团队项目中设置 Fabrikam 解决方案](img/image00359.jpeg)
- en: In Team Explorer, navigate to the changes page. From the untracked files section,
    click on the **Add All** hyperlink to include all files recently copied into the
    working folder. Click on the **Commit** button to commit these changes to the
    repo:![Setting up the Fabrikam solution in FabrikamGit Team Project](img/image00360.jpeg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在团队资源管理器中，导航到更改页面。从未跟踪的文件部分，点击**添加所有**超链接，将所有最近复制到工作文件夹中的文件添加进来。点击**提交**按钮，将这些更改提交到仓库：![在
    FabrikamGit 团队项目中设置 Fabrikam 解决方案](img/image00360.jpeg)
- en: A prompt to sync the changes is raised when the commit operation has been successfully
    completed. Click on **Sync** and then on **Push** from the **Outgoing Commits
    (1)** section to push the changes to the remote server:![Setting up the Fabrikam
    solution in FabrikamGit Team Project](img/image00361.jpeg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提交操作成功完成后，会提示同步更改。点击**同步**，然后在**外发提交（1）**部分点击**推送**，将更改推送到远程服务器：![在 FabrikamGit
    团队项目中设置 Fabrikam 解决方案](img/image00361.jpeg)
- en: Navigate to the branches page in Team Explorer. The **master** branch shows
    up as well as the **remotes/origin** branch:![Setting up the Fabrikam solution
    in FabrikamGit Team Project](img/image00362.jpeg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在团队资源管理器中，导航到分支页面。**master** 分支以及 **remotes/origin** 分支都会显示出来：![在 FabrikamGit
    团队项目中设置 Fabrikam 解决方案](img/image00362.jpeg)
- en: The Fabrikam solution is now successfully set up in the **Master** branch in
    the FabrikamGit Team Project.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Fabrikam 解决方案已成功设置在 FabrikamGit 团队项目的**主**分支中。
- en: Creating a Git repository in an existing TFVC Team Project
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在现有的 TFVC 团队项目中创建 Git 仓库
- en: Traditionally, it has only been possible to have TFVC as a source control repository.
    TFS started supporting Git as a source control from TFS 2013 onwards. Git offers
    many benefits for distributed Teams collaborating across the same codebase; you
    can read more about the benefits here at [https://git-scm.com/about](https://git-scm.com/about).
    TFVC Teams that are keen to try out Git, but cannot because of the rework involved
    in migrating their existing investments now have a solution. TFS now supports
    hybrid Team Projects. In this recipe, you'll learn how to set up a Git repository
    within an existing TFVC-based Team Project.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，只能使用 TFVC 作为源代码控制库。从 TFS 2013 开始，TFS 支持将 Git 作为源代码控制。Git 为分布式团队提供了许多好处，尤其是那些跨同一代码库协作的团队；你可以在这里阅读有关
    Git 好处的更多信息：[https://git-scm.com/about](https://git-scm.com/about)。那些渴望尝试 Git，但由于迁移现有投资所需的重做工作而无法尝试的
    TFVC 团队，现在有了解决方案。TFS 现在支持混合团队项目。在这个教程中，你将学习如何在现有的基于 TFVC 的团队项目中设置 Git 仓库。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In Team Foundation Server 2015 Update 1, you need to be a member of the project
    administrator group to make an existing TFVC or Git project into a hybrid project,
    a project that hosts both a TFVC repository and multiple Git repositories. Users
    will need Visual Studio 2015 Update 1 to work with the hybrid project. Older versions
    of Visual Studio, including 2015 RTM, will see the project as the type it was
    originally created as.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Team Foundation Server 2015 更新 1 中，你需要是项目管理员组的成员才能将现有的 TFVC 或 Git 项目转换为混合项目，这种项目同时托管
    TFVC 仓库和多个 Git 仓库。用户需要使用 Visual Studio 2015 更新 1 来处理混合项目。使用旧版本的 Visual Studio，包括
    2015 RTM，用户将看到项目仍然是最初创建时的类型。
- en: 'If your TFVC project was created prior to TFS 2015 Update 1, a project administrator
    will need to apply some project-level permissions once the first repository has
    been created. Go to the version control administration page and select the **Git
    repositories** node in the tree. To set up the same group permissions as any of
    the default process templates (Agile, Scrum, and CMMI), add the following TFS
    groups and grant the following permissions:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 TFVC 项目是在 TFS 2015 Update 1 之前创建的，项目管理员需要在创建第一个存储库后应用一些项目级别的权限。进入版本控制管理页面并选择树形结构中的
    **Git 存储库** 节点。要设置与任何默认过程模板（敏捷、Scrum 和 CMMI）相同的组权限，请添加以下 TFS 组并授予以下权限：
- en: '[ProjectName]\Readers'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[项目名称]\读者'
- en: '**- Allow**: Read'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 允许**：读取'
- en: '**- Not set**: All others'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 未设置**：其他所有人'
- en: '[ProjectName]\Contributors'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[项目名称]\贡献者'
- en: '**- Allow**: Branch creation, Contribute, Note management, Read, and Tag creation'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 允许**：分支创建、贡献、注释管理、读取和标签创建'
- en: '**- Not set**: All others'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 未设置**：其他所有人'
- en: '[ProjectName]\Build Administrators'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[项目名称]\构建管理员'
- en: '**- Allow**: Branch creation, Contribute, Note management, Read, and Tag creation'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 允许**：分支创建、贡献、注释管理、读取和标签创建'
- en: '**- Not set**: All others'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 未设置**：其他所有人'
- en: Similarly, when creating a TFVC repository with in a Git Team Project that was
    created before TFS 2015 Update 1, the following folder level permissions need
    to be amended.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，当在 TFS 2015 Update 1 之前创建的 Git 团队项目中创建 TFVC 存储库时，需要修改以下文件夹级别的权限。
- en: 'Go to the version control administration page and select the `$/_ProjectName_`
    node in the tree. To set up the same groups as any of the default process templates
    (Agile, Scrum, and CMMI), add the following TFS groups and grant the following
    permissions:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 进入版本控制管理页面并选择树形结构中的 `$/_项目名称_` 节点。要设置与任何默认过程模板（敏捷、Scrum 和 CMMI）相同的组权限，请添加以下
    TFS 组并授予以下权限：
- en: '[ProjectName]\Readers'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[项目名称]\读者'
- en: '**- Allow**: Read'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 允许**：读取'
- en: '**- Not set**: All others'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 未设置**：其他所有人'
- en: '[ProjectName]\Contributors'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[项目名称]\贡献者'
- en: '**- Allow**: Check in, Check out, Label, Lock, Merge, and Read'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 允许**：签入、签出、标签、锁定、合并和读取'
- en: '**- Not set**: All others'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 未设置**：其他所有人'
- en: '[ProjectName]\Build Administrators'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[项目名称]\构建管理员'
- en: '**- Allow**: Check in, Check out, Label, Lock, Merge, and Read'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 允许**：签入、签出、标签、锁定、合并和读取'
- en: '**- Not set**: All others'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**- 未设置**：其他所有人'
- en: If your Team Project was created after TFS 2015 Update 1, these permissions
    will have already been applied for you, and no action is necessary except creating
    the repository.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的团队项目是在 TFS 2015 Update 1 后创建的，那么这些权限已经为您应用，无需其他操作，只需创建存储库。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the code hub in FabrikamTFVC Web Portal by browsing to `http://TFS2015:8080/DefaultCollection/FabrikamTFVC/_versionControl`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览 `http://TFS2015:8080/DefaultCollection/FabrikamTFVC/_versionControl`，进入
    FabrikamTFVC Web 门户的代码中心。
- en: As illustrated in the following screenshot, click on **FabrikamTFVC** to pull
    down the **Options** menu. To create a new Git repository, click on **New repository...**
    from the **Options** menu. Name the repository `FabrikamFeature1` and click on
    **Create**:![How to do it...](img/image00363.jpeg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图所示，点击 **FabrikamTFVC** 以展开 **选项** 菜单。要创建新的 Git 存储库，请从 **选项** 菜单中点击 **新建存储库...**。命名存储库为
    `FabrikamFeature1` 并点击 **创建**：![如何操作...](img/image00363.jpeg)
- en: Note
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that there is no support for creating multiple TFVC repositories within
    the same Team Project. There is support for creating multiple Git repositories.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，同一个团队项目内不支持创建多个 TFVC 存储库，但支持创建多个 Git 存储库。
- en: The create operation will redirect you to a Git getting started page. The getting
    started page allows you to generate a clone of the repository and command-line
    credentials, create a README file to describe your repository and provide commands
    to set up the Git repository to work with Xcode, Eclipse, and Visual Studio. Click
    on **Clone in Visual Studio** to start working on the new repository in Visual
    Studio:![How to do it...](img/image00364.jpeg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建操作将把您重定向到 Git 入门页面。该页面允许您生成存储库的克隆和命令行凭据，创建一个 README 文件以描述您的存储库，并提供设置 Git 存储库以便与
    Xcode、Eclipse 和 Visual Studio 配合使用的命令。点击 **在 Visual Studio 中克隆** 以开始在 Visual Studio
    中工作：![如何操作...](img/image00364.jpeg)
- en: As a result of this action, the repository is cloned in Visual Studio:![How
    to do it...](img/image00365.jpeg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于此操作，存储库已在 Visual Studio 中克隆：![如何操作...](img/image00365.jpeg)
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Many customers are actively using TFVC repositories and have a rich Work Item
    history and customization in their Team Project. To make it easy for these Teams
    to start using Git, the Team Project model in TFS has been modified to support
    multiple source control repositories. Hybrid projects allow creating as many Git
    repositories as you need in your TFVC project. This model now also supports creating
    a TFVC repository in a Git project.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 许多客户积极使用 TFVC 仓库，并且在他们的团队项目中有丰富的工作项历史记录和自定义。为了方便这些团队开始使用 Git，TFS 中的团队项目模型已被修改以支持多个源代码控制仓库。混合项目允许在
    TFVC 项目中创建任意数量的 Git 仓库。该模型现在还支持在 Git 项目中创建 TFVC 仓库。
- en: Team Explorer has been enhanced in TFS Update 1 to provide support for operating
    the hybrid Team Project. As illustrated in the following image, the manage connections
    page in Team Explorer lists all source control repositories in the Team Project.
    The workflows in Team Explorer are adjusted based on the repository type you are
    connected to.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Team Explorer 在 TFS 更新 1 中进行了增强，以支持操作混合团队项目。正如以下图所示，Team Explorer 中的连接管理页面列出了团队项目中的所有源代码控制仓库。Team
    Explorer 中的工作流会根据你连接的仓库类型进行调整。
- en: '![How it works...](img/image00366.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image00366.jpeg)'
- en: The Web Portal also allows context switching between the TFVC and Git source
    control in the code hub. The workflows associated to the source control are made
    available based on the selection. For example, on selecting Git, you can see the
    option for Pull requests, while in the context of TFVC, you see the option for
    shelvesets.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Web 门户还允许在代码中心之间切换 TFVC 和 Git 源代码控制。与源代码控制相关的工作流会根据选择进行显示。例如，选择 Git 后，你可以看到拉取请求（Pull
    requests）选项，而在 TFVC 的上下文中，你会看到 shelvesets 选项。
- en: There's more...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: A recent roadmap of investments in Git experiences for Team Foundation Server
    and Visual Studio Online talks about support for Pull requests within Team Explorer
    and support for Git Large File Storage and GitFlow; you can read more about this
    at [http://bit.ly/1RXQRS1](http://bit.ly/1RXQRS1).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的关于 Team Foundation Server 和 Visual Studio Online 中 Git 体验的投资路线图提到了对 Team
    Explorer 中拉取请求（Pull requests）的支持，以及对 Git 大文件存储（Git Large File Storage）和 GitFlow
    的支持；你可以在 [http://bit.ly/1RXQRS1](http://bit.ly/1RXQRS1) 了解更多信息。
- en: Enabling code analysis check-in policy
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用代码分析检入策略
- en: Many organizations recommend certain checks be done before committing code into
    source control. The cost of fixing bad code increases overtime. There is incentive
    in identifying and fixing issues in code early. We discussed the definition of
    done in the previous chapter; think of this as the definition of check-in. In
    TFS, a check-in policy is a rule that is executed during the check-in operation
    to ensure that the selected change set is okay to commit. The check-in policies
    are stored on the server and executed on the client machines at the time of check-in.
    Check-in policies are only supported in TFVC projects. While TFS has some preconfigured
    check-in policies, several other check-in policies are added by TFS Power Tools.
    In this recipe, you'll learn how to configure the code analysis check-in policy.
    The code analysis check-in policy requires that code analysis is run before check-in.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织建议在将代码提交到源代码控制之前进行某些检查。修复坏代码的成本会随着时间的推移增加。在代码问题早期发现并修复的过程中有激励措施。我们在上一章讨论了完成的定义；可以将其视为检入的定义。在
    TFS 中，检入策略是在检入操作期间执行的规则，用以确保所选的变更集可以提交。检入策略存储在服务器上，并在检入时在客户端机器上执行。检入策略仅在 TFVC
    项目中受支持。虽然 TFS 有一些预配置的检入策略，但 TFS Power Tools 添加了几个其他的检入策略。在本章节中，你将学习如何配置代码分析检入策略。代码分析检入策略要求在检入之前运行代码分析。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete this recipe, you''ll need:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章节，你需要：
- en: A TFVC Team Project called FabrikamTFVC. Refer to the *Creating a Team Project
    using the Scrum Template* recipe in [Chapter 1](part0016.xhtml#aid-F8901 "Chapter 1. Team
    Project Setup"), *Team Project Setup*, for instructions on how to create a TFVC
    Team Project.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为 FabrikamTFVC 的 TFVC 团队项目。有关如何创建 TFVC 团队项目的说明，请参考 [第1章](part0016.xhtml#aid-F8901
    "第1章. 团队项目设置")中的 *使用 Scrum 模板创建团队项目* 章节，*团队项目设置*。
- en: In order to configure check-in policies, you need to have the edit project-level
    information permission set to **Allow** for your account. Add yourself. If you
    are part of the Project Administrators or Project Collection Administrators group,
    you'll already have this permission.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了配置检入策略，你需要将编辑项目级别信息的权限设置为**允许**。添加自己。如果你是项目管理员或项目集管理员组的成员，你将已经拥有此权限。
- en: Note
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Check-in policies that are defined using Team Explorer everywhere only apply
    when you check in using the Team Foundation Server plugin for Eclipse or the cross-platform
    command-line client for Team Foundation Server. If another client such as Team
    Portal or Team Explorer in Visual Studio is used, these policies do not apply.
    Similarly, policies that are defined using Team Portal or Team Explorer in Visual
    Studio are not applied when you check in using the Team Foundation Server plugin
    for Eclipse or the cross-platform command-line client for Team Foundation Server.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用Team Explorer everywhere定义的提交策略仅在使用Eclipse的Team Foundation Server插件或Team Foundation
    Server的跨平台命令行客户端提交时适用。如果使用其他客户端，如Team Portal或Visual Studio中的Team Explorer，这些策略将不适用。同样，使用Team
    Portal或Visual Studio中的Team Explorer定义的策略在使用Eclipse的Team Foundation Server插件或Team
    Foundation Server的跨平台命令行客户端提交时不会应用。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In Visual Studio, open Team Explorer and click on **Settings**. Once navigated
    into the **Settings** view, click on the **Source Control** hyperlink. From the
    **Source Control Settings** window, select the **Check-in Policy** Tab. Click
    on the **Add** button and select **Code Analysis**, then click on **OK**.![How
    to do it...](img/image00367.jpeg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，打开Team Explorer并点击**设置**。导航到**设置**视图后，点击**源代码管理**超链接。在**源代码管理设置**窗口中，选择**提交策略**标签页。点击**添加**按钮，选择**代码分析**，然后点击**确定**。![如何操作...](img/image00367.jpeg)
- en: In the **Code Analysis Policy Editor** window, from the rule set dropdown, select
    **Microsoft Managed Recommended Rules** and click on **OK**:![How to do it...](img/image00368.jpeg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**代码分析策略编辑器**窗口中，从规则集下拉框中选择**Microsoft推荐的托管规则**，然后点击**确定**：![如何操作...](img/image00368.jpeg)
- en: Check **Enforce check-in to only contain files that are part of current solution**.
    This option allows you to stop the check-in of any file that is not part of the
    current solution. This is a good option to enable as developers can accidently
    check in files into the source control without linking the file to the solution.
    This can possibly result in build issues.![How to do it...](img/image00369.jpeg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中**强制提交仅包含当前解决方案中的文件**。此选项允许你阻止提交任何不属于当前解决方案的文件。启用此选项是一个不错的选择，因为开发人员可能会不小心将文件提交到源代码管理中，而没有将该文件与解决方案关联。这可能会导致构建问题。![如何操作...](img/image00369.jpeg)
- en: Note
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The code analysis ruleset definitions are stored in the `C:\Program Files (x86)\Microsoft
    Visual Studio 14.0\Team Tools\Static Analysis Tools\Rule Sets` folder.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码分析规则集的定义存储在`C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Static
    Analysis Tools\Rule Sets`文件夹中。
- en: From the FarbikamTFVC project, open `FabrikamFiber.CallCenter.sln`:![How to
    do it...](img/image00370.jpeg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从FarbikamTFVC项目中，打开`FabrikamFiber.CallCenter.sln`：![如何操作...](img/image00370.jpeg)
- en: In **FabrikamFiber.Web** from `Controllers`, open `HomeController.cs`:![How
    to do it...](img/image00371.jpeg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**FabrikamFiber.Web**的`Controllers`中，打开`HomeController.cs`：![如何操作...](img/image00371.jpeg)
- en: 'Copy the following code in the `Index()` function of `HomeController.cs`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到`HomeController.cs`中的`Index()`函数：
- en: '[PRE0]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From Team Explorer, navigate to the pending changes window and check in the
    code changes into TFS. A policy warning is issued since the static code analysis
    hasn't been run:![How to do it...](img/image00372.jpeg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Team Explorer中，导航到待处理更改窗口，并将代码更改提交到TFS。由于没有运行静态代码分析，系统发出了策略警告：![如何操作...](img/image00372.jpeg)
- en: Double-click on the warning message to see the details:![How to do it...](img/image00373.jpeg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击警告信息查看详细信息：![如何操作...](img/image00373.jpeg)
- en: Trigger code analysis by selecting **Run Code Analysis on Solution** from the
    **Analyze** menu in Visual Studio:![How to do it...](img/image00374.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio的**分析**菜单中选择**在解决方案上运行代码分析**来触发代码分析：![如何操作...](img/image00374.jpeg)
- en: Code analysis finds the issue with the newly added code. The developer would
    have missed this if the code analysis wasn't run. The code analysis policy ensures
    that code analysis is run before the code can be checked in:![How to do it...](img/image00375.jpeg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码分析发现了新添加代码中的问题。如果没有运行代码分析，开发人员可能会错过这个问题。代码分析策略确保在代码提交之前运行代码分析：![如何操作...](img/image00375.jpeg)
- en: Since code analysis has now been run, checking in the code will not issue a
    check-in policy violation warning message.![How to do it...](img/image00376.jpeg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于现在已经运行了代码分析，提交代码时将不会发出提交策略违规的警告信息。![如何操作...](img/image00376.jpeg)
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Check-in policies are used to enforce mandatory software development practices.
    Policy is enforced during the check-in process. Since TFVC check-ins are processed
    on the server, the check-in request is intercepted to force an execution of the
    check-in policy on the client side. If a user attempts to perform a check-in,
    in violation of a policy, the check-in is blocked.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 提交策略用于强制执行强制的软件开发实践。策略在提交过程中执行。由于TFVC提交在服务器上处理，提交请求会被拦截，以强制在客户端执行提交策略。如果用户试图进行违反策略的提交，提交将被阻止。
- en: 'There are four Team Project check-in policies that can be specified (in order
    to use check-in policies, you need to be connected to Team Foundation Server):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定四种Team Project提交策略（要使用提交策略，必须连接到Team Foundation Server）：
- en: '**Builds**: This requires that any build breaking issues that were created
    during a build must be fixed before a new check-in.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：这要求在新提交之前，必须修复在构建过程中出现的任何破坏性构建问题。'
- en: '**Code analysis**: This requires that the code analysis is run before check-in.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码分析**：这要求在提交代码之前，必须运行代码分析。'
- en: '**Testing policy**: This requires that check-in tests are completed before
    check-in.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试策略**：这要求在提交代码之前，必须完成测试。'
- en: '**Work Items**: This requires that one or more Work Items be associated with
    the check-in.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作项**：这要求在提交代码时，必须关联一个或多个工作项。'
- en: 'The check-in policy can be overridden by clicking on the **Override Warnings**
    hyperlink; you can continue to check in the code after providing a reason for
    the override:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 提交策略可以通过点击**覆盖警告**超链接来覆盖；在提供覆盖理由后，你可以继续提交代码：
- en: '![How it works...](img/image00377.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image00377.jpeg)'
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: You can turn off the policy override option in Team Explorer using a no policy
    override server side plugin. Read the following blog post for more details [http://bit.ly/1jUhZ9y](http://bit.ly/1jUhZ9y).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在Team Explorer中使用不覆盖策略的服务器端插件来关闭策略覆盖选项。更多细节请阅读以下博客文章 [http://bit.ly/1jUhZ9y](http://bit.ly/1jUhZ9y)。
- en: There's more...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: So far, we have talked about check-in policies for TFVC projects. Using the
    TFS API, it is possible to create a custom check-in policy for Git projects. The
    server-side plugin listens for the `PushNotification` that is raised at the time
    of Git push event. Refer to [http://bit.ly/1OabagX](http://bit.ly/1OabagX) on
    how to create a server-side check-in policy for Git repositories to validate that
    a commit message has been associated with the push.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了TFVC项目的提交策略。通过TFS API，可以为Git项目创建自定义提交策略。服务器端插件会监听Git推送事件时触发的`PushNotification`。关于如何为Git仓库创建服务器端提交策略，以验证提交信息是否与推送关联，请参考
    [http://bit.ly/1OabagX](http://bit.ly/1OabagX)。
- en: Performing a baseless merge between sibling branches in TFVC
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在TFVC中执行无基础的兄弟分支合并
- en: Managing source code can get challenging when multiple Teams are contributing
    to the same repository. Are you already familiar with the branching and merging
    tools available in TFS? If not, I would encourage you to go through the ALM Rangers
    Version Control Guidance [http://bit.ly/1He8pmL](http://bit.ly/1He8pmL). The guidance
    talks in detail about the various branching strategy and its pros and cons.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个团队共同向同一个仓库贡献代码时，管理源代码可能会变得具有挑战性。你是否已经熟悉TFS中可用的分支和合并工具？如果没有，我建议你阅读ALM Rangers版本控制指南
    [http://bit.ly/1He8pmL](http://bit.ly/1He8pmL)。该指南详细讲解了各种分支策略及其优缺点。
- en: '![Performing a baseless merge between sibling branches in TFVC](img/image00378.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![在TFVC中执行无基础的兄弟分支合并](img/image00378.jpeg)'
- en: An extract from the ALM Rangers Version Control Guide showing different branching
    strategies
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 来自ALM Rangers版本控制指南的摘录，展示了不同的分支策略
- en: Branching in TFVC can get complicated over time; branching in Git is lightweight
    and path independent. In Git, many developers create a branch for each new feature
    they are coding, sometimes on a daily basis. Git allows you to quickly switch
    from one branch to another to pivot among different variations of your codebase.
    When using Git, you can create branches that exist only on your Dev machine and
    share them if and when you're ready. Consider evaluating your source control requirements
    against the workflow at [http://bit.ly/1P7UMvO](http://bit.ly/1P7UMvO); you may
    find Git a better fit.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间推移，TFVC 中的分支管理可能会变得复杂；而 Git 中的分支则轻量且路径独立。在 Git 中，许多开发人员为他们正在编码的每个新特性创建一个分支，有时是按日创建。Git
    允许你快速切换不同的分支，在代码库的不同变体之间进行切换。在使用 Git 时，你可以创建仅存在于你的开发机器上的分支，并在你准备好时与他人共享。考虑根据工作流评估你的源代码控制需求，访问
    [http://bit.ly/1P7UMvO](http://bit.ly/1P7UMvO)；你可能会发现 Git 更适合你的需求。
- en: In this recipe, you will learn how to carry out a merge operation between two
    unrelated TFVC branches often referred to as sibling branches.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，你将学习如何在两个无关的 TFVC 分支之间执行合并操作，这些分支通常被称为兄弟分支。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In your TFVC-based Team Project, create a branching structure as illustrated
    in the following diagram. You can use the TFS Community Branch Tool extension
    to automate the creation of the branch, as illustrated in the following diagram
    ([http://bit.ly/1LZR2bx](http://bit.ly/1LZR2bx)):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 TFVC 基础团队项目中，创建如下图所示的分支结构。你可以使用 TFS Community Branch Tool 扩展来自动化创建分支，如下图所示
    ([http://bit.ly/1LZR2bx](http://bit.ly/1LZR2bx))：
- en: '![Getting ready](img/image00379.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00379.jpeg)'
- en: We'll be working through the following scenario in this recipe. The developer
    working on **Dev** branch has found a critical issue that he has resolved with
    a code check-in. The QA branch is already being used by another developer to carry
    out some unrelated work. To get the fix from **Dev** branch into production, the
    developer decides to perform a baseless merge between the **Dev** and **Prod**
    branch.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将处理以下场景。正在开发 **Dev** 分支的开发人员发现了一个关键问题，并通过代码提交解决了该问题。QA 分支已经被另一位开发人员用于进行一些无关的工作。为了将
    **Dev** 分支的修复发布到生产环境，开发人员决定在 **Dev** 和 **Prod** 分支之间执行无基础的合并。
- en: 'In order to perform a merge operation, your user account needs to have the
    merge permission. The project administrator group already grants this permission;
    however, this permission can be set to Allow directly on individual users and
    groups:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行合并操作，你的用户帐户需要具备合并权限。项目管理员组已授予此权限；但是，该权限也可以直接在单个用户和组上设置为允许：
- en: '![Getting ready](img/image00380.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00380.jpeg)'
- en: How to do it…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In Visual Studio, open Team Explorer, and navigate to the Source Control Explore.
    Perform a **Get Latest Version** operation on the FabrikamTFVC Team Project:![How
    to do it…](img/image00381.jpeg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，打开团队资源管理器并导航到源代码控制资源管理器。对 FabrikamTFVC 团队项目执行 **获取最新版本** 操作：![如何操作…](img/image00381.jpeg)
- en: To simulate a fix being made in the **Dev** branch, open the `$\Dev\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers\HomeController.cs`
    file and copy the following comment in the `Index` method:![How to do it…](img/image00382.jpeg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了模拟在 **Dev** 分支上进行修复，打开 `$\Dev\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers\HomeController.cs`
    文件，并将以下注释放入 `Index` 方法中：![如何操作…](img/image00382.jpeg)
- en: 'Check in the code changes to this file from the pending changes view in Team
    Explorer:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在团队资源管理器的待提交更改视图中提交对该文件的代码更改：
- en: '![How to do it…](img/image00383.jpeg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00383.jpeg)'
- en: Now that the critical change is in the Dev branch, let's look at the steps required
    to carry out the baseless merge of this change from the Dev branch to the Prod
    branch. From the source control explorer, right-click on the **Dev** branch and
    choose **Merge...** from under the **Branching and Merging** submenu:![How to
    do it…](img/image00384.jpeg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在关键更改已经在 Dev 分支中，我们来看看将此更改从 Dev 分支无基础合并到 Prod 分支所需的步骤。在源代码控制资源管理器中，右键单击 **Dev**
    分支，然后在 **分支和合并** 子菜单下选择 **合并...**：![如何操作…](img/image00384.jpeg)
- en: The **Merge** wizard will not show the **Prod** branch in the **Target branch**
    dropdown. Unrelated branches can only be selected using the **Browse...** button.
    Click on **Browse...** and select **Prod** branch. Then, click on **OK**:![How
    to do it…](img/image00385.jpeg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**合并** 向导中不会显示 **Prod** 分支在 **目标分支** 下拉菜单中。无关的分支只能通过 **浏览...** 按钮选择。点击 **浏览...**
    并选择 **Prod** 分支，然后点击 **确定**：![如何操作…](img/image00385.jpeg)'
- en: A warning sign shows up next to **Target branch** indicating that the chosen
    branch is unrelated and will cause a baseless merge:![How to do it…](img/image00386.jpeg)
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标分支**旁边会出现一个警告标志，表示所选分支无关且会导致无基合并：![操作步骤](img/image00386.jpeg)
- en: Click on **Next** to navigate to the next screen:![How to do it…](img/image00387.jpeg)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**进入下一屏幕：![操作步骤](img/image00387.jpeg)
- en: Note
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the selection is changed from **All changes** to **Selected changesets**
    then a merge relationship between the two branches has not been established. While
    you would still be able to merge the change, you won't be able to visualize it.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果选择从**所有更改**更改为**选择的更改集**，则两个分支之间并未建立合并关系。尽管您仍然可以合并更改，但无法可视化该合并。
- en: Keep the **Latest Version** selected in the dropdown and click on **Next**:![How
    to do it…](img/image00388.jpeg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持下拉框中的**最新版本**选项，并点击**下一步**：![操作步骤](img/image00388.jpeg)
- en: Once the merge operation has completed, you'll be navigated to the **Resolve
    Conflicts** window. Click on **Merge Changes In Merge Tool**, then check and click
    on **Accept Merge**:![How to do it…](img/image00389.jpeg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并操作完成后，您将被导航到**解决冲突**窗口。点击**在合并工具中合并更改**，然后检查并点击**接受合并**：![操作步骤](img/image00389.jpeg)
- en: The **Resolve Conflicts** window will clear of any conflicts once the merge
    has completed. From the pending changes viewed in Team Explorer, check in the
    pending changes:![How to do it…](img/image00390.jpeg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在合并完成后，**解决冲突**窗口将清除所有冲突。在 Team Explorer 中查看待处理更改，检查待处理更改并提交：![操作步骤](img/image00390.jpeg)
- en: From the Source Control Explorer, right-click on the **Prod** branch and choose
    **View History**. Check all the branches and click on **Visualize**. The dashed
    line from Dev to Prod represents the baseless merge.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源代码管理资源管理器中，右键点击**Prod**分支，选择**查看历史记录**。检查所有分支并点击**可视化**。从 Dev 到 Prod 的虚线表示无基合并。
- en: How it works…
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'When a baseless merge is carried out, a relationship is established between
    the two sibling branches. The baseless merge is represented by the dashed line:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当进行无基合并时，将在两个兄弟分支之间建立关系。无基合并用虚线表示：
- en: '![How it works…](img/image00391.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/image00391.jpeg)'
- en: 'To get a view of the timeline of the change, hit the **Timeline Tracking**
    view at the top of the screen:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更改的时间线，点击屏幕顶部的**时间线跟踪**视图：
- en: '![How it works…](img/image00392.jpeg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/image00392.jpeg)'
- en: Reparenting a branch in TFVC
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 TFVC 中重新设置分支的父节点
- en: Team Foundation Version Control provides you with an option to prune a branch
    from somewhere in a given hierarchy and graft it on elsewhere in the same hierarchy.
    Consider using this approach if the branch structure you put in place is incorrectly
    set up or has stopped working as you have scaled up. In this recipe, you'll learn
    how to reparent a branch in TFVC.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Team Foundation 版本控制提供了一个选项，可以将分支从给定层级中的某个位置修剪出来，并在同一层级的其他位置重新附加。如果您在设置分支结构时出现了问题，或者在扩展过程中原有结构停止工作，可以考虑使用这种方法。在本教程中，您将学习如何在
    TFVC 中重新设置分支的父节点。
- en: Note
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The movement of the reparented branch is logical not physical and can be done
    without stopping developers from working. However, it's a good idea to get developers
    to shelve changes. You should also endeavor to make the new parent as close in
    content to the old parent to avoid merge conflicts.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 重新设置父分支的移动是逻辑上的而非物理上的，可以在不停止开发人员工作的情况下完成。然而，建议让开发人员将更改暂存。您还应尽力使新父分支的内容与旧父分支尽可能接近，以避免合并冲突。
- en: Getting ready
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In order to reparent a branch, your user account needs to have the **Manage
    branch** permission. The project administrator group and project collection administrator
    group already grant this permission; however, this permission can be set to allow
    directly on individual users and groups:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新设置分支的父节点，您的用户帐户需要具有**管理分支**权限。项目管理员组和项目集合管理员组已授予此权限；不过，您也可以直接在单个用户和组上设置此权限：
- en: '![Getting ready](img/image00393.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00393.jpeg)'
- en: 'The **Manage branch** permission allows you to perform the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**管理分支**权限允许您执行以下操作：'
- en: Convert a folder into a branch
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件夹转换为分支
- en: Execute the following actions
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行以下操作
- en: Edit the branch properties
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑分支属性
- en: Reparent the branch
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新设置分支父节点
- en: Convert the branch into a folder
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将分支转换为文件夹
- en: 'In your TFVC project, create a branching structure as illustrated in the figure
    on the left:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 TFVC 项目中，创建一个分支结构，如左图所示：
- en: '| ![Getting ready](img/image00394.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '| ![准备工作](img/image00394.jpeg)'
- en: Current branching structure
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的分支结构
- en: '| ![Getting ready](img/image00395.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '| ![准备就绪](img/image00395.jpeg)'
- en: Desired branching structure
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的分支结构
- en: '|'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The scenario we'll be working through in this recipe, as illustrated in the
    figure on the left, is the Development Team releases from the **Main** branch;
    **Release 1.1** was branched from **Release 1**. As illustrated in the figure
    on the right, the Team wants to move **Release 1.1** directly under the **Main**
    branch, so changes don't need to go through **Release 1** to be merged to **Release
    1.1**.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中我们将处理的场景，如左侧图示所示，是开发团队从**Main**分支发布；**Release 1.1**是从**Release 1**分支出来的。如右侧图示所示，团队希望将**Release
    1.1**直接移到**Main**分支下，这样更改就不需要通过**Release 1**进行合并到**Release 1.1**。
- en: To reparent the branch **Release 1.1** from **Release 1** to **Main**, a relationship
    needs to be established between the two branches. This can only be done by performing
    a baseless merge between the two branches. Refer to the *Performing a baseless
    merge between sibling branches in TFVC* recipe to learn how to perform a baseless
    merge.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要将**Release 1.1**分支从**Release 1**重新设置为**Main**，需要在这两个分支之间建立关系。这只能通过对两个分支执行无基础合并来完成。请参阅*在TFVC中对兄弟分支执行无基础合并*教程，了解如何执行无基础合并。
- en: '![Getting ready](img/image00396.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00396.jpeg)'
- en: This recipe assumes that a merge relationship has been established between the
    **Main** and **Release 1.1** branch. In the preceding figure, the dashed line
    represents a relationship between the two branches.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程假设**Main**分支与**Release 1.1**分支之间已建立合并关系。在前面的图中，虚线表示这两个分支之间的关系。
- en: How to do it…
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Navigate to Source Control Explorer, right-click on the branch **Release 1.1**
    and choose **Reparent...** from the **Branching and Merging** submenu:![How to
    do it…](img/image00397.jpeg)
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到源代码控制资源管理器，右键点击**Release 1.1**分支，然后从**分支和合并**子菜单中选择**重新设置父分支...**：![如何操作…](img/image00397.jpeg)
- en: In the **Reparent** window, you'll see a list of all branches that have a direct
    or indirect relationship with **Release 1.1**. Select **Main** and click on **Reparent**.
    Selecting **No parent** will make **Release 1.1** an independent branch:![How
    to do it…](img/image00398.jpeg)
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**重新设置父分支**窗口中，你将看到与**Release 1.1**有直接或间接关系的所有分支的列表。选择**Main**，然后点击**重新设置父分支**。选择**无父分支**将使**Release
    1.1**成为一个独立的分支：![如何操作…](img/image00398.jpeg)
- en: The reparent operation takes place on the server. You will not see any pending
    changes as a result of the reparent operation. The branch hierarchy after the
    reparent operation is as follows:![How to do it…](img/image00399.jpeg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新设置父分支操作发生在服务器上。你不会看到重新设置父分支操作带来的任何待处理更改。重新设置父分支操作后的分支层次结构如下：![如何操作…](img/image00399.jpeg)
- en: How it works…
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Once the reparent operation has been completed, you can view the updated branch
    hierarchy by right-clicking on the **Release1.1** branch and choosing **Properties**
    from under the **Advanced** submenu:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦重新设置父分支操作完成，你可以通过右键点击**Release1.1**分支，并选择**属性**，从**高级**子菜单中查看更新后的分支层次结构：
- en: '![How it works…](img/image00400.jpeg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00400.jpeg)'
- en: Click on the **Relationships** tab from the left menu to see the branch relationships.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧菜单点击**关系**选项卡，以查看分支关系。
- en: Unlocking files checked out by someone else
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解锁其他人签出的文件
- en: In distributed Teams, developers often have pending changes that overlap shared
    code files. Don't you hate it when a developer takes a day off with files exclusively
    checked out to them or when a developer leaves an organization with files still
    checked out? When a file is exclusively locked, no check-in can be performed on
    the file until the lock is removed. In this recipe, you'll learn how to unlock
    files checked out by other users.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式团队中，开发人员经常有待处理的更改，这些更改会与共享的代码文件发生冲突。你是不是讨厌当某个开发人员请假时，文件仅被他们自己签出，或者某个开发人员离开组织时，文件仍然被签出？当文件被独占锁定时，必须移除锁定才能对文件进行提交。在本教程中，你将学习如何解锁其他用户签出的文件。
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To undo the pending changes in another user''s workspace, you must have the
    **Administer workspaces** permission set to **Allow**:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要撤销其他用户工作区中的待处理更改，你必须具有**管理工作区**权限，并将其设置为**允许**：
- en: '![Getting ready](img/image00401.jpeg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00401.jpeg)'
- en: How to do it...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Developer *A* has checked out `$/FabrikamTFVC/Main/Source/FabrikamFiber.CallCenter/FabrikamFiber.Web/Web.config`
    in the FabrikamTFVC project with a check-in lock type. So while other users can
    check out the `Web.config` file, no one can check in `Web.config` until developer
    *A* has lifted this lock:![How to do it...](img/image00402.jpeg)
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者 *A* 在 FabrikamTFVC 项目中以提交锁定类型检出了 `$/FabrikamTFVC/Main/Source/FabrikamFiber.CallCenter/FabrikamFiber.Web/Web.config`
    文件。因此，尽管其他用户可以检出 `Web.config` 文件，但在开发者 *A* 解除此锁之前，任何人都无法提交该文件：![操作方法...](img/image00402.jpeg)
- en: 'In the following image, `Web.config` is checked out with the check-in lock.
    This is represented by **lock** in the **Pending Change** column:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下图中，`Web.config` 被选中并且具有提交锁。此状态在 **待处理更改** 列中显示为 **锁定**：
- en: '![How to do it...](img/image00403.jpeg)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法...](img/image00403.jpeg)'
- en: Now developer *B* checks out `Web.config` and adds a new section to the config
    file. To commit changes into version control, developer *B* tries to check in
    the file. The check-in fails with the following message.![How to do it...](img/image00404.jpeg)
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，开发者 *B* 检出 `Web.config` 并向配置文件中添加一个新部分。为了提交更改到版本控制，开发者 *B* 尝试提交该文件。提交失败，显示以下消息。![操作方法...](img/image00404.jpeg)
- en: Note
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following issues were encountered during check-in:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在提交过程中遇到了以下问题：
- en: '`Unable to perform operation on $/Fabrikam/Main/…/Web.config. The item $/Fabrikam/Main/
    …/Web.config is locked in workspace TFS2015;DeveloperA`.'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`无法对 $/Fabrikam/Main/…/Web.config 执行操作。项目 $/Fabrikam/Main/ …/Web.config 在工作区
    TFS2015;DeveloperA 中被锁定。`'
- en: 'Developer *B* opens the "Developer Command Prompt for Visual Studio 2015" and
    runs the following command to undo the changes of developer *A*:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者 *B* 打开 "Visual Studio 2015 开发者命令提示符" 并运行以下命令以撤销开发者 *A* 的更改：
- en: '[PRE1]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Key in *Y* when prompted for confirmation of undo. Optionally, use the `/silent`
    switch in the preceding command for no prompt:'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当提示是否确认撤销时，输入 *Y*。你也可以在上述命令中使用 `/silent` 开关来跳过提示：
- en: '![How to do it...](img/image00405.jpeg)'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方法...](img/image00405.jpeg)'
- en: Developer *B* can now successfully check-in the file through the Visual Studio
    pending changes window.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 开发者 *B* 现在可以通过 Visual Studio 的待处理更改窗口成功提交文件。
- en: Note
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While the lock developer *A* had on the `app.config` has been removed, any pending
    changes that developer *A* might have had in the config file on his machine aren't.
    So, developer *A* can perform a `get` operation to pull down developer *B*'s changes
    and merge and continue as appropriate without any information loss.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然开发者 *A* 对 `app.config` 的锁已被移除，但开发者 *A* 在其机器上的配置文件中可能仍有待处理的更改。因此，开发者 *A* 可以执行
    `get` 操作以获取开发者 *B* 的更改，并根据需要合并并继续操作，而不会丢失任何信息。
- en: There's more...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: TFS Power Tools provides an option to undo pending changes for other users right
    from within Visual Studio. If you don't have TFS Power Tools installed, refer
    to the *Creating a new Team Project through the command line* recipe in [Chapter
    1](part0016.xhtml#aid-F8901 "Chapter 1. Team Project Setup"), *Team Project Setup*.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: TFS Power Tools 提供了一个选项，可以在 Visual Studio 内直接撤销其他用户的待处理更改。如果你没有安装 TFS Power
    Tools，请参考[第 1 章](part0016.xhtml#aid-F8901 "第 1 章. 团队项目设置")中的*通过命令行创建新的团队项目*一节，了解更多内容，*团队项目设置*。
- en: 'Right-click on the file or folder you want to undo. From the context menu,
    choose **Find by Status...** from under the **Find** in Source Control submenu.
    You can narrow the search by specifying wildcard and username. The results are
    presented in **Find** in the Source Control window:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击你想要撤销的文件或文件夹。在上下文菜单中，选择 **查找状态...**，位于 **源代码管理** 子菜单下的 **查找** 中。你可以通过指定通配符和用户名来缩小搜索范围。搜索结果会显示在
    **源代码管理** 窗口中的 **查找** 视图：
- en: '![There''s more...](img/image00406.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法...](img/image00406.jpeg)'
- en: Simply select the file and choose **Undo...** from the context menu to undo
    the pending changes.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 只需选择文件，并在上下文菜单中选择 **撤销...** 来撤销待处理的更改。
- en: Unshelving a shelveset created in one branch to another branch
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一个分支中的 shelveset 还原到另一个分支
- en: When using TFVC, you'll find shelvesets very useful. Shelvesets allow you to
    effectively back up your local copy of the changes on to the server. Developers
    are multitasking almost all the time; you may start coding a change in one branch
    and then realize that the change actually needs to be applied in another branch.
    In this recipe, you'll learn how to shelve changes in one code branch and then
    migrate the changes over to another branch without checking in the changes into
    source control.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TFVC时，你会发现 shelvesets 非常有用。Shelvesets 允许你将本地的更改备份到服务器上。开发者几乎总是在进行多任务操作；你可能会在一个分支上开始编码某个更改，然后意识到该更改实际上需要应用到另一个分支。在本配方中，你将学习如何在一个代码分支中暂存更改，然后将这些更改迁移到另一个分支，而无需将更改提交到源代码管理。
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The FabrikamTFVC project has three branches, **Dev**, **Main**, and **Prod**,
    as illustrated in the following diagram. In this recipe, we''ll create a shelveset
    `shelvesetDev1` from the pending changes in the **Dev** branch and unshelve the
    pending changes over to the **Prod** branch without checking in the pending changes:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: FabrikamTFVC 项目有三个分支，**Dev**、**Main** 和 **Prod**，如下面的图所示。在本配方中，我们将从 **Dev**
    分支中的待处理更改创建一个名为 `shelvesetDev1` 的 shelveset，并将待处理更改迁移到 **Prod** 分支，而无需将待处理更改提交：
- en: '![Getting ready](img/image00407.jpeg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00407.jpeg)'
- en: This recipe requires the use of the `tfpt` command-line utility. This utility
    is installed with TFS Power Tools. If you don't have TFS Power Tools installed,
    refer to the *Creating a new Team Project through the command line* recipe in
    [Chapter 1](part0016.xhtml#aid-F8901 "Chapter 1. Team Project Setup"), *Team Project
    Setup*.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方需要使用 `tfpt` 命令行工具。此工具随 TFS Power Tools 一同安装。如果你没有安装 TFS Power Tools，请参考[第1章](part0016.xhtml#aid-F8901
    "第1章. 团队项目设置")中关于*通过命令行创建新的团队项目*的配方，*团队项目设置*。
- en: 'Perform a `get latest` operation on both the **Dev** and **Prod** branch to
    ensure that they are up to date. Ensure that there are no pending changes in the
    **Prod** branch. If the branches are not up to date, the following error message
    may be issued during the unshelve operation: `Unable to determine the workspace`.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Dev** 和 **Prod** 分支上执行 `get latest` 操作，确保它们是最新的。确保 **Prod** 分支中没有待处理的更改。如果分支不是最新的，在执行
    unshelve 操作时可能会出现以下错误消息：`无法确定工作区`。
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In Team Explorer, open Source Control Explorer and check out the `$\Dev\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers\HomeController.cs`
    file and copy the following comment in the `Index` method:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Team Explorer 中，打开源代码管理资源管理器并签出 `$\Dev\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers\HomeController.cs`
    文件，然后复制 `Index` 方法中的以下注释：
- en: '// Assume this is a critical fix to this method:'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 假设这是对该方法的关键修复：
- en: '![How to do it...](img/image00382.jpeg)'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00382.jpeg)'
- en: Navigate to the **Pending Changes** view in Team Explorer and click on the **Shelve**
    hyperlink. Enter the shelveset name as `shelvesetDev1` and click on the **Shelve**
    button:![How to do it...](img/image00408.jpeg)
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Team Explorer 中，导航到 **Pending Changes** 视图并点击 **Shelve** 超链接。输入 shelveset
    名称 `shelvesetDev1`，然后点击 **Shelve** 按钮：![如何操作...](img/image00408.jpeg)
- en: Open up the Visual Studio Developer Command Prompt and change the working directory
    to the target branch workspace directory. The target branch in this case is `Prod`:![How
    to do it...](img/image00409.jpeg)
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 开发者命令提示符，并将工作目录更改为目标分支的工作区目录。在此示例中，目标分支为 `Prod`：![如何操作...](img/image00409.jpeg)
- en: 'Run the following command to migrate the shelveset from **Dev** to **Prod**
    branch:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令将 shelveset 从 **Dev** 分支迁移到 **Prod** 分支：
- en: '[PRE2]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the **Shelveset Details** window, click on the **Unshelve** button to continue:![How
    to do it...](img/image00410.jpeg)
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Shelveset Details** 窗口中，点击 **Unshelve** 按钮以继续：![如何操作...](img/image00410.jpeg)
- en: The merge button is enabled if TFS recons it can resolve the merge conflict.
    The **Resolve** button is enabled if TFS requires the conflict to be manually
    resolved. Click on the **Auto-merge All** button to continue:![How to do it...](img/image00411.jpeg)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 TFS 认为它能够解决合并冲突，合并按钮将启用。如果 TFS 需要手动解决冲突，则 **Resolve** 按钮将启用。点击 **Auto-merge
    All** 按钮以继续：![如何操作...](img/image00411.jpeg)
- en: Once the auto merge operation has been completed, confirmation message is published
    in the command prompt:![How to do it...](img/image00412.jpeg)
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦自动合并操作完成，命令提示符中将发布确认消息：![如何操作...](img/image00412.jpeg)
- en: In Source Control Explorer, navigate across to the **Prod** branch. Open `HomeController.cs`
    from `$\Prod\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers`. The changes
    made in the **Dev** version of the `HomeController.cs` file will reflect in the
    **Prod** branch version of `HomeController.cs`:![How to do it...](img/image00413.jpeg)
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源代码管理资源管理器中，导航到 **Prod** 分支。从 `$\Prod\FabrikamFiber.CallCenter\FabrikamFiber.Web\Controllers`
    打开 `HomeController.cs`。在 **Dev** 版本中的 `HomeController.cs` 文件所做的更改将反映到 **Prod**
    分支中的 `HomeController.cs` 文件：![如何操作...](img/image00413.jpeg)
- en: Ignoring file types from check-in using .tfignore and .gitignore
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `.tfignore` 和 `.gitignore` 忽略提交文件类型
- en: Traditionally, TFS only supported server workspaces. Local workspaces were rolled
    out in TFS 2012\. A local workspace allows you to work disconnected from the server.
    All core version control operations can be performed without any server connectivity.
    Local workspaces listen for changes on the filesystem to infer the operations
    being performed. For example, a new file created in the workspace directly from
    the filesystem will show up as a pending change. Users who used Subversion source
    control will be familiar with local workspaces. Read more about the workings of
    local workspaces at [https://msdn.microsoft.com/en-us/library/bb892960.aspx](https://msdn.microsoft.com/en-us/library/bb892960.aspx).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，TFS 仅支持服务器工作区。局部工作区在 TFS 2012 中推出。局部工作区允许你在不连接服务器的情况下进行工作。所有核心版本控制操作都可以在没有服务器连接的情况下执行。局部工作区监听文件系统上的变化，从而推断正在执行的操作。例如，在文件系统中直接创建的新文件会显示为待提交更改。使用过
    Subversion 源代码控制的用户会对局部工作区有所了解。你可以在 [https://msdn.microsoft.com/en-us/library/bb892960.aspx](https://msdn.microsoft.com/en-us/library/bb892960.aspx)
    阅读有关局部工作区工作原理的更多信息。
- en: Many tools and extensions that work in concert with Visual Studio generate temporary
    files within the local workspace directories. For example, ReSharper, a developer
    productivity extension for Visual Studio, generates `_Resharper.[SolutionName]`
    files that are (by default) included in pending changes. These temporary files
    serve no benefit in version control and should be ignored; `.tfignore` and `.gitignore`
    allow you to do just that. File types to be ignored can be specified in `.tfignore`
    and `.gitignore`; these rules are used to automatically exclude specified file
    types from pending changes. In this recipe, you'll learn how to create `.tfignore`
    and `.gitignore` files to automatically exclude certain file types.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 许多与 Visual Studio 协同工作的工具和扩展会在本地工作区目录中生成临时文件。例如，ReSharper，一个用于 Visual Studio
    的开发者生产力扩展，生成 `_Resharper.[SolutionName]` 文件，这些文件（默认情况下）会包含在待提交更改中。这些临时文件对版本控制没有任何帮助，应当被忽略；`.tfignore`
    和 `.gitignore` 允许你做到这一点。可以在 `.tfignore` 和 `.gitignore` 中指定要忽略的文件类型；这些规则用于自动排除指定的文件类型不包含在待提交更改中。在本教程中，你将学习如何创建
    `.tfignore` 和 `.gitignore` 文件，以自动排除某些文件类型。
- en: Getting ready
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To work through the recipe, you''ll need to create a local workspace. Follow
    the instructions to create a local workspace in the FabrikamTFVC project:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照本教程操作，你需要创建一个本地工作区。按照以下指示在 FabrikamTFVC 项目中创建本地工作区：
- en: In the local drive, create a folder, `Wks`. This recipe assumes the folder to
    be `C:\Wks`.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地磁盘中创建一个文件夹 `Wks`。本教程假设该文件夹为 `C:\Wks`。
- en: Open Team Explorer in Visual Studio and connect to the FabrikamTFVC Team Project.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 中的 Team Explorer 并连接到 FabrikamTFVC 团队项目。
- en: From the Visual Studio menu, navigate to **File** | **Source Control** | **Advanced**
    | **Workspaces**:![Getting ready](img/image00414.jpeg)
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Visual Studio 菜单中，导航至 **文件** | **源代码控制** | **高级** | **工作区**：![准备就绪](img/image00414.jpeg)
- en: In the **Manage workspace** window, click on **Add**. In **Add workspace**,
    create the workspace `TFS2015_99` mapped from `$/FabrikamTFVC/Main` to `C:\Wks`.
    Click on the **Advanced>>** button and confirm if the workspace location is set
    to **Local**. Then, click on **OK**:![Getting ready](img/image00415.jpeg)
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **管理工作区** 窗口中，点击 **添加**。在 **添加工作区** 中，创建一个名为 `TFS2015_99` 的工作区，从 `$/FabrikamTFVC/Main`
    映射到 `C:\Wks`。点击 **高级>>** 按钮，确认工作区位置是否设置为 **本地**。然后，点击 **确定**：![准备就绪](img/image00415.jpeg)
- en: After clicking on **OK**, accept the prompt to perform a get latest operation
    to download the source code into the new local workspace.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **确定** 后，接受提示执行最新获取操作，将源代码下载到新的本地工作区。
- en: How to do it...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to set up the `.tfignore` files for TFVC-based
    source controls:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来设置基于 TFVC 的源代码控制的 `.tfignore` 文件：
- en: Open `C:\Wks` and create a new file `ThisIsAFakeClass.txt`.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `C:\Wks` 并创建一个新文件 `ThisIsAFakeClass.txt`。
- en: In Team Explorer, navigate to the **Pending Changes** view for FabrikamTFVC
    project. In the **Excluded Changes** section, the count of detected shows up as
    1.![How to do it...](img/image00416.jpeg)
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Team Explorer 中，导航至 FabrikamTFVC 项目的 **待处理更改** 视图。在 **排除的更改** 部分，检测到的数量显示为
    1。![如何操作...](img/image00416.jpeg)
- en: Click on the **Detected items** hyperlink. From the **Promote Candidate Changes**
    window, right-click on `ThisIsAFakeFile.txt` and choose **Ignore by extension
    (*.txt)**:![How to do it...](img/image00417.jpeg)
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **检测到的项目** 超链接。在 **提升候选更改** 窗口中，右键点击 `ThisIsAFakeFile.txt` 并选择 **按扩展名忽略 (*.txt)**：![如何操作...](img/image00417.jpeg)
- en: 'The `.tfignore` file is automatically created for you and shows up in the **Pending
    Changes** view. Open `.tfignore`; the extension `*.txt` has been added as an item
    to be ignored. Copy the following text into the `.tfignore` file to ignore all
    ReSharper generated files:'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.tfignore` 文件会自动为你创建，并出现在 **待处理更改** 视图中。打开 `.tfignore` 文件；扩展名 `*.txt` 已被添加为需要忽略的项目。将以下内容复制到
    `.tfignore` 文件中，以忽略所有 ReSharper 生成的文件：'
- en: '[PRE3]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Check in the `.tfignore` file into the version control; this ruleset will be
    evaluated on all developer workstations to ignore all files specified in this
    `.tfignore` file.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `.tfignore` 文件提交到版本控制中；此规则集将在所有开发者工作站上评估，以忽略该 `.tfignore` 文件中指定的所有文件。
- en: Note
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: TFVC honors multiple `.tfignore` files, where a `.tfignore` file in the scope
    of the project can override the ignore specification in the `.tfignore` file at
    the solution level.
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TFVC 支持多个 `.tfignore` 文件，其中项目范围内的 `.tfignore` 文件可以覆盖解决方案级别的 `.tfignore` 文件中的忽略规范。
- en: TFVC accepts exclusion rules, for example, to ignore all TXT files except `help.txt`
    use `!help.txt`.
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TFVC 接受排除规则，例如，要忽略所有 TXT 文件，除了 `help.txt`，可以使用 `!help.txt`。
- en: 'Perform the following steps to set up the `.gitignore` files for Git-based
    source controls:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤为基于 Git 的源代码管理设置 `.gitignore` 文件：
- en: In Team Explorer, open the FabrikamGit project and navigate to the **Settings**
    view. Click on the **Repository Settings** hyperlink. Then, click on **Add** to
    create a `.gitIgnore` file:![How to do it...](img/image00418.jpeg)
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Team Explorer 中，打开 FabrikamGit 项目并导航至 **设置** 视图。点击 **仓库设置** 超链接。然后，点击 **添加**
    来创建一个 `.gitIgnore` 文件：![如何操作...](img/image00418.jpeg)
- en: 'Click on the **Edit** hyperlink to edit the `.gitignore` file. Copy the following
    items in the `.gitIgnore` file:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **编辑** 超链接以编辑 `.gitignore` 文件。将以下内容复制到 `.gitIgnore` 文件中：
- en: '[PRE4]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In Team Explorer, navigate to the **Changes** view and commit the `.gitIgnore`
    file. Click on the **Sync** hyperlink to push the updated `.gitIgnore` to the
    repository. All developer workspaces will now ignore the file extensions specified
    in this `.gitignore` file.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Team Explorer 中，导航至 **更改** 视图并提交 `.gitIgnore` 文件。点击 **同步** 超链接，将更新后的 `.gitIgnore`
    推送到仓库。现在，所有开发者工作区将忽略该 `.gitignore` 文件中指定的文件扩展名。
- en: Note
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Git honors multiple `.gitIgnore` files, where a `.gitIgnore` file in the scope
    of the project can override the ignore specification file at the solution level.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Git 支持多个 `.gitIgnore` 文件，其中项目范围内的 `.gitIgnore` 文件可以覆盖解决方案级别的忽略规范文件。
- en: There's more…
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'The `tfpt` command-line utility installed with TFS Power Tools among other
    things provides you with two very useful switches: `scortch` and `treeclean`.
    `scortch` and `treeclean` allow you to mirror the workspace as on the server and
    remove any unwanted clutter from the workspace. Learn more about `scortch` and
    `treeclean` at [http://adamprescott.net/2011/09/12/clean-tfs-workspaces-with-scorch-treeclean](http://adamprescott.net/2011/09/12/clean-tfs-workspaces-with-scorch-treeclean).'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`tfpt` 命令行工具是与 TFS Power Tools 一起安装的，其中提供了两个非常有用的开关：`scortch` 和 `treeclean`。`scortch`
    和 `treeclean` 允许你将工作区镜像到服务器状态，并移除工作区中的任何不需要的杂乱文件。了解更多关于 `scortch` 和 `treeclean`
    的信息，请访问 [http://adamprescott.net/2011/09/12/clean-tfs-workspaces-with-scorch-treeclean](http://adamprescott.net/2011/09/12/clean-tfs-workspaces-with-scorch-treeclean)。'
- en: Conducting code reviews in TFS
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 TFS 中进行代码审查
- en: In the introduction to this chapter, we briefly talked about technical debt
    and how it can impact the productivity of a Team. The use of good engineering
    practices helps tackle issues that are potential contributors to technical debt.
    There is a consensus across the industry that code review is an effective and
    practical way to collar code inconsistency and possible defects early in the software
    development life cycle.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的介绍中，我们简要讨论了技术债务以及它如何影响团队的生产力。使用良好的工程实践有助于解决可能导致技术债务的问题。业界普遍认同，代码审查是一种有效且实用的方法，可以在软件开发生命周期的早期发现代码不一致和潜在缺陷。
- en: 'A study on the value and importance of code reviews conducted by Forrester
    Consulting highlighted the following as perceived benefits of code review:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Forrester Consulting 进行的一项关于代码审查的价值和重要性的研究突出了以下被认为是代码审查好处的内容：
- en: '![Conducting code reviews in TFS](img/image00419.jpeg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![在 TFS 中进行代码审查](img/image00419.jpeg)'
- en: Source - [http://www.klocwork.com/getattachment/08c47c41-053c-4fe8-bbf7-91b95734747c/The-Value-and-Importance-of-Code-Review-Forrester?sitename=Klocwork](http://www.klocwork.com/getattachment/08c47c41-053c-4fe8-bbf7-91b95734747c/The-Value-and-Importance-of-Code-Review-Forrester?sitename=Klocwork)
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 来源 - [http://www.klocwork.com/getattachment/08c47c41-053c-4fe8-bbf7-91b95734747c/The-Value-and-Importance-of-Code-Review-Forrester?sitename=Klocwork](http://www.klocwork.com/getattachment/08c47c41-053c-4fe8-bbf7-91b95734747c/The-Value-and-Importance-of-Code-Review-Forrester?sitename=Klocwork)
- en: TFS offers two code review solutions, one through Team Explorer and the other
    through Team Web Access. The code review solution in Team Explorer, first introduced
    in TFS 2012, receives criticism for not supporting iterative reviews. On the other
    hand, the solution in Team Web Access called lightweight code commenting supports
    iterative reviews, but does not support an integrated Visual Studio IDE experience.
    You can learn more about the code review solution available in Team Explorer at
    [https://www.visualstudio.com/en-us/get-started/code/get-code-reviewed-vs](https://www.visualstudio.com/en-us/get-started/code/get-code-reviewed-vs).
    In this recipe, you'll learn how to use the lightweight code commenting in Team
    Web Access to conduct code reviews.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 提供两种代码审查解决方案，一种通过 Team Explorer，另一种通过 Team Web Access。Team Explorer 中的代码审查解决方案首次在
    TFS 2012 中引入，但因不支持迭代审查而受到批评。另一方面，Team Web Access 中的轻量级代码评论解决方案支持迭代审查，但不支持集成的 Visual
    Studio IDE 体验。你可以在[https://www.visualstudio.com/en-us/get-started/code/get-code-reviewed-vs](https://www.visualstudio.com/en-us/get-started/code/get-code-reviewed-vs)了解有关
    Team Explorer 中可用代码审查解决方案的更多信息。在本教程中，你将学习如何在 Team Web Access 中使用轻量级代码评论进行代码审查。
- en: Getting ready
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'In this recipe, we''ll be working through the following scenario – Aaron is
    a developer on the FabrikamTFVC Team. He is working on a new feature in the `FabrikamFiber.CallCenter.sln`
    Dev codebase to show the `CreatedBy` column on the service ticket dashboard. Aaron
    has checked in his changes (this has created **Changeset 27**) and he now wants
    Tarun to perform a code review on the changes. Aaron sends Tarun the changeset
    by clicking on the share changeset icon in Team Web Access:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将处理以下场景——Aaron 是 FabrikamTFVC 团队的开发人员。他正在`FabrikamFiber.CallCenter.sln`开发代码库中为服务票务仪表板显示
    `CreatedBy` 列的一个新功能。Aaron 已经提交了他的更改（这创建了**变更集 27**），现在他希望 Tarun 对这些更改进行代码审查。Aaron
    通过点击 Team Web Access 中的共享变更集图标将变更集发送给 Tarun：
- en: '![Getting ready](img/image00420.jpeg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00420.jpeg)'
- en: Initiate a code review by clicking the e-mail icon from the Changeset view
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击变更集视图中的电子邮件图标发起代码审查
- en: Tip
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你的账户中下载示例代码文件，访问[http://www.packtpub.com](http://www.packtpub.com)，下载你所购买的所有
    Packt 出版书籍的代码文件。如果你在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接通过电子邮件发送给你。
- en: How to do it…
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Tarun receives an e-mail for a feedback request. Clicking on hyperlink **Changeset
    27** opens the changeset in review mode, highlighting the code changes in a comparison
    mode. The changes can also be viewed in side-by-side comparison by clicking on
    the file name hyperlink:![How to do it…](img/image00421.jpeg)
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tarun 收到一个反馈请求的电子邮件。点击超链接**变更集 27**会在审查模式下打开变更集，突出显示比较模式中的代码更改。也可以通过点击文件名超链接，在并排比较模式中查看更改：![如何操作...](img/image00421.jpeg)
- en: Code comparison window is launched by clicking on the Changeset hyperlink, in
    this case Changeset 27
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过点击变更集超链接，启动代码比较窗口，在此情况下为变更集 27
- en: Looking through the `Index.cshtml`, Tarun find a few issues. He selects the
    code with the issue and adds an inline comment:![How to do it…](img/image00422.jpeg)
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览`Index.cshtml`时，Tarun 发现了几个问题。他选择了有问题的代码并添加了内联评论：![如何操作...](img/image00422.jpeg)
- en: Tarun adds an overall comment to the changeset using the **Add Comment** button
    at the top of the changeset:![How to do it…](img/image00423.jpeg)
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tarun 使用变更集顶部的**添加评论**按钮对变更集进行总体评论：![如何操作...](img/image00423.jpeg)
- en: Tarun submits his feedback by clicking on the **Sharechangeset** button. The
    e-mail contains a list of all the comments.![How to do it…](img/image00424.jpeg)
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tarun通过点击**Sharechangeset**按钮提交反馈。电子邮件中包含所有评论的列表。![如何做…](img/image00424.jpeg)
- en: Aaron goes through and fixes the issues highlighted by Tarun. Aaron thinks Tarun's
    comment on pagination and filter should be build out as a common capability. Aaron
    creates a product backlog item from the code comment and adds it to the Team's
    backlog:![How to do it…](img/image00425.jpeg)
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Aaron逐一修复了Tarun指出的问题。Aaron认为Tarun关于分页和过滤器的评论应该作为一个通用功能来构建。Aaron从代码评论中创建了一个产品待办事项，并将其添加到团队的待办事项列表中：![如何做…](img/image00425.jpeg)
- en: How it works…
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: Lightweight code commenting is a browser-based code commenting solution in Team
    Web Access. It provides a nice inline experience for commenting either on whole
    files or on individual changes. Code commenting enables interactive or time shifted
    conversations about code. Code commenting is done in a browser so, among other
    things, it will work wherever you are – including on your mobile phone.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 轻量级代码评论是Team Web Access中的基于浏览器的代码评论解决方案。它为对整个文件或单个更改进行评论提供了良好的内联体验。代码评论使关于代码的互动或延时对话成为可能。代码评论是在浏览器中完成的，因此，除了其他功能外，它可以在任何地方工作——包括在您的手机上。
- en: 'The comments are stored in Team Foundation Server in context to the code. If
    the code or the underlying code file is removed, the code comment associated to
    it is automatically removed. Work items created from comments include a reference
    back to the comment; this helps maintain traceability:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 评论存储在Team Foundation Server中，与代码相关。如果代码或相关的代码文件被删除，关联的代码评论将自动删除。从评论中创建的工作项包括回到评论的引用；这有助于保持可追溯性：
- en: '![How it works…](img/image00426.jpeg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![如何运作…](img/image00426.jpeg)'
- en: There's more...
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'While there is a consensus that code reviews are important, the industry is
    heavily divided whether code reviews should be done before or after check-in.
    Refer to the following blog post that talks about the pros and cons of both approaches:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大家一致认为代码审查很重要，但业内对代码审查应该在提交前还是提交后进行意见分歧。请参考以下博客文章，讨论这两种方法的优缺点：
- en: '[http://geekswithblogs.net/TarunArora/archive/2012/09/18/vs-2012-code-review-ndash-before-check-in-or-after.aspx](http://geekswithblogs.net/TarunArora/archive/2012/09/18/vs-2012-code-review-ndash-before-check-in-or-after.aspx)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://geekswithblogs.net/TarunArora/archive/2012/09/18/vs-2012-code-review-ndash-before-check-in-or-after.aspx](http://geekswithblogs.net/TarunArora/archive/2012/09/18/vs-2012-code-review-ndash-before-check-in-or-after.aspx)'
- en: Setting up policies for branches in Git
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Git中设置分支策略
- en: Building on the theme of code quality and how it helps prevent technical debt,
    branch policies is a great new feature in TFS that lends itself to improving the
    quality of the code that goes into the Git repo. In this recipe, you'll learn
    how to configure code review and Gated check-in policy on the master branch.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码质量主题的基础上，如何帮助防止技术债务，分支策略是TFS中的一项新功能，它有助于提高进入Git仓库的代码质量。在本食谱中，您将学习如何在主分支上配置代码审查和门禁提交策略。
- en: Getting ready
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To configure branch policies on a branch, the user needs to have administration
    permission for that branch. To apply branch policy for the entire repo, the user
    needs admin rights for the repo.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要在分支上配置分支策略，用户需要对该分支具有管理员权限。要为整个仓库应用分支策略，用户需要对仓库具有管理员权限。
- en: '![Getting ready](img/image00427.jpeg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00427.jpeg)'
- en: Create a continuous integration build for the FabrikamGit Team; follow the instructions
    in the Creating a continuous integration build definition in TFBuild recipe in
    [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"),
    *Building Your Application*.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 为FabrikamGit团队创建一个持续集成构建；请参阅[第4章](part0050.xhtml#aid-1FLS42 "第4章. 构建您的应用程序")中的《创建持续集成构建定义》食谱，*构建您的应用程序*。
- en: 'Scenario: The FabrikamGit Team wants to protect the master branch by only allowing
    commits that pass the Fabrikam CI build and have been code reviewed by at least
    two people in the Team. If the code being changed falls under the `/src/FabrikamFiber.CallCenter/FabrikamFiber.Web`
    area, then it must be reviewed by Brian Miller.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamGit团队希望通过只允许通过Fabrikam CI构建并且已被团队中至少两个人进行代码审查的提交来保护主分支。如果正在更改的代码属于`/src/FabrikamFiber.CallCenter/FabrikamFiber.Web`区域，则必须由Brian
    Miller进行审查。
- en: How to do it...
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Open the FabrikamGit Team Administration page at `http://tfs2015:8080/tfs/DefaultCollection/FabrikamGit/FabrikamGit%20Team/_admin/`.
    Navigate into the **Version Control** tab and select the **master** branch. To
    access branch policies, click on the **Branch Policies** tab:![How to do it...](img/image00428.jpeg)
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 FabrikamGit 团队管理页面 `http://tfs2015:8080/tfs/DefaultCollection/FabrikamGit/FabrikamGit%20Team/_admin/`。进入**版本控制**标签并选择**主**分支。要访问分支策略，点击**分支策略**标签：![如何操作...](img/image00428.jpeg)
- en: The branch policies page allows you to configure policies for gated check-ins
    and code reviews.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分支策略页面允许你配置限制性提交和代码审查的策略。
- en: In the **Automatically build pull requests** section, check both options and
    select the **FabrikamGit CI** build definition from the dropdown:![How to do it...](img/image00429.jpeg)
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**自动构建拉取请求**部分，勾选两个选项并从下拉菜单中选择**FabrikamGit CI**构建定义：![如何操作...](img/image00429.jpeg)
- en: In the **Code review requirements** section, check require code reviews and
    specify the minimum number of reviewers as `2`:![How to do it...](img/image00430.jpeg)
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**代码审查要求**部分，勾选要求代码审查，并将最小审阅者人数设置为`2`：![如何操作...](img/image00430.jpeg)
- en: Click on the **Add a new path** hyperlink. Add the path as `/src/FabrikamFiber.CallCenter/FabrikamFiber.Web/*`
    and reviewer as `Brian Miller`:![How to do it...](img/image00431.jpeg)
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加新路径**超链接。添加路径 `/src/FabrikamFiber.CallCenter/FabrikamFiber.Web/*` 和审阅者
    `Brian Miller`：![如何操作...](img/image00431.jpeg)
- en: Click on the **Save Changes** button to save and apply the gated check-in and
    code review policies.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存更改**按钮以保存并应用限制性提交和代码审查策略。
- en: How it works...
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Branch policies are evaluated on the server at the time of commit. With the
    branch policies enabled for the master, no code can be committed directly into
    the master. On directly committing code into the master, the following error message
    is issued.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 分支策略会在提交时在服务器上进行评估。启用主分支的分支策略后，不能直接将代码提交到主分支。直接将代码提交到主分支时，会出现以下错误消息。
- en: 'The following errors were reported during push:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 推送时报告了以下错误：
- en: '[PRE5]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There's more...
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There may be justifications at times for bypassing the policies. There is provision
    for this in TFS. By setting the **Exempt from policy enforcement** permission
    to **Allow**, the user or group is allowed to bypass the policy:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 有时可能会有绕过策略的正当理由。TFS 提供了这一功能。通过将**免除策略执行**权限设置为**允许**，用户或组可以绕过策略：
- en: '![There''s more...](img/image00432.jpeg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image00432.jpeg)'
- en: This permission can be scoped to an entire project, a repo, or a single branch.
    If you are granted exempt from policy enforcement, you will not be warned nor
    blocked from pushing or merging directly to a branch. So, as they rightly say…
    with great power, comes great responsibility.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 此权限可以作用于整个项目、一个仓库或一个单独的分支。如果你被授予免除策略执行的权限，你将不会收到警告，也不会被阻止直接推送或合并到分支。因此，正如人们常说的那样……拥有巨大权力的同时，也需要承担相应的责任。
- en: Conducting Pull requests in TFS
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 TFS 中进行拉取请求
- en: Earlier in the chapter, you learned how to restrict unreviewed code from making
    its way into the master branch. Pull requests are the means to promote code from
    topic branches (also referred to as feature branch) into the master branch. Pull
    requests enable developers working in topic branches to get feedback on their
    changes from other developers prior to submitting the code into the master branch.
    In this recipe, you'll learn how to conduct a Pull request to accept changes from
    a topic branch into the master branch.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面，你已经学习了如何限制未经审查的代码进入主分支。拉取请求是将代码从主题分支（也称为功能分支）推送到主分支的方式。拉取请求使得在主题分支工作的开发人员能够在提交代码到主分支之前，获取其他开发人员对其更改的反馈。在本篇中，你将学习如何进行拉取请求，以接受来自主题分支的更改到主分支。
- en: Getting ready
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The scenario we'll be working through in this recipe – Brian is a developer
    on the FabrikamGit Team. He is working on feature to add a dropdown called `problem
    type` on the service Dashboard. Brian has created an enum with the list of problem
    types and he wants to get feedback on this list and merge his changes to the master
    branch.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个示例中演示的场景是：Brian 是 FabrikamGit 团队的开发人员。他正在开发一个功能，在服务仪表板上添加一个名为 `problem
    type` 的下拉菜单。Brian 创建了一个包含问题类型列表的枚举，并希望获得对此列表的反馈，并将他的更改合并到主分支。
- en: Open Visual Studio and connect it to the FabrikamGit Team Project. From Team
    Explorer hub, click on **Branches**. In the **Branches** view, right-click on
    **master** and select **New local branch From…** in the context menu. Enter the
    new branch name as `Brian/Feature1` and click on the **Create branch** button:![Getting
    ready](img/image00433.jpeg)
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio并将其连接到FabrikamGit团队项目。从Team Explorer中心，点击**分支**。在**分支**视图中，右键点击**master**并在上下文菜单中选择**从…新建本地分支**。输入新分支的名称为`Brian/Feature1`，然后点击**创建分支**按钮：![准备就绪](img/image00433.jpeg)
- en: From the topic branch, open `FabrikamFiber.CallCenter.sln`. In the **FabrikamFiber.Web**
    project, add a new folder and call it `Common`. Add a new class and call it `ProblemTypeEnum.cs`.
    Edit the class and create an enum, as shown in the screenshot:![Getting ready](img/image00434.jpeg)
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主题分支中，打开`FabrikamFiber.CallCenter.sln`。在**FabrikamFiber.Web**项目中，添加一个新文件夹并命名为`Common`。添加一个新类并命名为`ProblemTypeEnum.cs`。编辑该类并创建一个枚举，如截图所示：![准备就绪](img/image00434.jpeg)
- en: From Team Explorer, navigate to the **Changes** view. Commit the pending changes
    by entering a commit message and clicking on the **Commit** button. Sync and publish
    the branch:![Getting ready](img/image00435.jpeg)
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Team Explorer中，导航到**更改**视图。通过输入提交信息并点击**提交**按钮来提交待处理的更改。同步并发布分支：![准备就绪](img/image00435.jpeg)
- en: Navigate to the branches view page in Team Web Access by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_git/FabrikamGit/branches`.
    The topic branch shows up here highlighting that it is one change a head of the
    master branch:![Getting ready](img/image00436.jpeg)
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问`http://tfs2015:8080/tfs/DefaultCollection/_git/FabrikamGit/branches`，导航到Team
    Web Access中的分支视图页面。主题分支会在这里显示，突出显示它比master分支多了一次更改：![准备就绪](img/image00436.jpeg)
- en: Validate that the master branch has gated check in and code review policy setup.
    If not, follow the steps in the *Setting up policies for branches in Git* recipe.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证master分支是否已设置强制检查和代码审查策略。如果没有，请按照*在Git中设置分支策略*的步骤进行操作。
- en: How to do it...
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the Pull request page in the Web Portal by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_git/FabrikamGit/pullrequests`.
    You will see a prompt to create a Pull request from the earlier published branch.
    Alternatively, click on the **New Pull Request** button in the left panel:![How
    to do it...](img/image00437.jpeg)
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问`http://tfs2015:8080/tfs/DefaultCollection/_git/FabrikamGit/pullrequests`，导航到Web门户中的拉取请求页面。您将看到一个提示，要求您从先前发布的分支创建拉取请求。或者，点击左侧面板中的**新建拉取请求**按钮：![如何操作...](img/image00437.jpeg)
- en: The **Create Pull Request** page shows the list of changes a long with file-level
    comparison of the changes. The destination branch is selected as master, since
    its set up as the default. Optionally, click on the **more options** hyperlink
    to add a description and an additional group of reviews:![How to do it...](img/image00438.jpeg)
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建拉取请求**页面显示了更改的列表，并提供了文件级别的对比。目标分支被选择为 master，因为它已设置为默认分支。可选地，点击**更多选项**超链接以添加描述和额外的审核组：![如何操作...](img/image00438.jpeg)'
- en: The master branch policies are evaluated, the FabrikamGit CI build is automatically
    kicked off, and code review requests are issued. The engine evaluates the changes
    and determines that there will be no merge conflicts as part of the merge operation.
    Since the code changes are under `/src/FabrikamFiber.CallCenter/FabrikamFiber.Web/`,'
    a code review request is issued to Tom Hacker, too.![How to do it...](img/image00439.jpeg)
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估master分支策略，FabrikamGit CI构建会自动启动，并发出代码审查请求。引擎评估更改并确定合并操作不会发生冲突。由于代码更改位于`/src/FabrikamFiber.CallCenter/FabrikamFiber.Web/`，因此也会向Tom
    Hacker发出代码审查请求：![如何操作...](img/image00439.jpeg)
- en: Now, Tom Hacker logs into Web Portal and, looks up the Pull requests assigned
    to him. He conducts a code review for this Pull request. Tom suggests a few changes
    to the enum and marks the Pull request as approved with suggestions:![How to do
    it...](img/image00440.jpeg)
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Tom Hacker登录Web门户，查找分配给他的拉取请求。他对该拉取请求进行了代码审查。Tom建议对枚举进行一些更改，并将拉取请求标记为已批准并附有建议：![如何操作...](img/image00440.jpeg)
- en: Brian makes the suggested changes and commits the changes into the topic branch.
    Click on **Refresh** to update the changes into the Pull request:![How to do it...](img/image00441.jpeg)
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Brian根据建议进行了更改，并将更改提交到主题分支。点击**刷新**以更新拉取请求中的更改：![如何操作...](img/image00441.jpeg)
- en: The branch policies are reevaluated – the gated check-in build is run and merge
    is evaluated. Once the required number of reviewers have approved the Pull request,
    the request is ready to be merged. Clicking on the **Complete Pull Request** button
    merges the changes into the master and creates a new changeset:![How to do it...](img/image00442.jpeg)
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分支策略会重新评估——触发的检查构建会运行，合并会被评估。一旦所需的审阅者批准了 Pull 请求，请求就准备好合并。点击 **完成 Pull 请求**
    按钮将更改合并到主分支，并创建一个新的变更集：![如何操作...](img/image00442.jpeg)
- en: Now, click on the **Delete Source Branch** button to delete the `feature1` branch.
    This is a good practice as leaving unwanted branches causes clutter.![How to do
    it...](img/image00443.jpeg)
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **删除源分支** 按钮以删除 `feature1` 分支。这样做是一个良好的做法，因为保留不需要的分支会导致混乱。![如何操作...](img/image00443.jpeg)
- en: The Pull request has been completed; the updated status reflects in the Team
    Portal.
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Pull 请求已完成；更新的状态反映在 Team Portal 中。
- en: '![How to do it...](img/image00444.jpeg)'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00444.jpeg)'
- en: How it works...
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'From the Team Explorer hub, click on **Sync** page, fetch, and pull the incoming
    changes. From the **Branches** view, click on the **master** branch and choose
    **View history** from the context menu. The merge into the main branch has completed
    as part of the Pull request; this now reflects in the branch history:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Team Explorer 中心，点击 **同步** 页面，获取并拉取传入的更改。在 **分支** 视图中，点击 **master** 分支，并从上下文菜单中选择
    **查看历史记录**。合并到主分支已作为 Pull 请求的一部分完成；这现在在分支历史中有所反映：
- en: '![How it works...](img/image00445.jpeg)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image00445.jpeg)'
- en: Analyzing code churn with TFS analysis services cube
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TFS 分析服务立方体分析代码变动
- en: The TFS analysis services cube computes large datasets that enable users to
    answer questions about their software project. The TFS data warehouse empowers
    user to join up various datasets and understand trends in code churn, code coverage,
    builds, bugs, and so on. In this recipe, you'll learn how to connect Excel with
    TFS analysis services cube and analyze the code churn in the FabrikamTFVC project.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 分析服务立方体计算大型数据集，帮助用户回答关于软件项目的问题。TFS 数据仓库使用户能够连接各种数据集，并理解代码变动、代码覆盖率、构建、错误等趋势。在本教程中，您将学习如何将
    Excel 连接到 TFS 分析服务立方体，并分析 FabrikamTFVC 项目中的代码变动。
- en: Getting ready
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In order to connect TFS analysis services as a data source using Excel, you
    need your Windows account permissioned on the TFS data warehouse. Alternatively,
    use a Windows user name and password that already has access.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过 Excel 连接 TFS 分析服务作为数据源，您需要在 TFS 数据仓库中授予 Windows 帐户权限。或者，使用已经具有访问权限的 Windows
    用户名和密码。
- en: How to do it...
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Excel, in the **DATA** tab click on **From Other Sources** and choose **From
    Analysis Services**. In the data connection wizard, enter the TFS analysis server
    connection details and click on the **Next** button:![How to do it...](img/image00446.jpeg)
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Excel，在 **数据** 标签中点击 **来自其他来源**，然后选择 **来自分析服务**。在数据连接向导中，输入 TFS 分析服务器的连接详情，然后点击
    **下一步** 按钮：![如何操作...](img/image00446.jpeg)
- en: Note
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are unsure about the warehouse connectivity details, you can check and
    verify them through the **Reporting** tab in the TFS Administration Console.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您不确定仓库的连接详情，可以通过 TFS 管理控制台中的 **报告** 标签进行检查和验证。
- en: Select **Tfs_Analysis** in the database dropdown, select **Code Churn**, and
    click on the **Next** button. The **Modified** column indicates the last processed
    data time of each cube and perspective. In the next screen, click on **Finish**:![How
    to do it...](img/image00447.jpeg)
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库下拉列表中选择 **Tfs_Analysis**，选择 **代码变动**，然后点击 **下一步** 按钮。**修改** 列表示每个立方体和视角的最后处理数据时间。在下一个屏幕中，点击
    **完成**：![如何操作...](img/image00447.jpeg)
- en: Set up the pivot report as indicated in the following screenshot:![How to do
    it...](img/image00448.jpeg)
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下截图设置数据透视报告：![如何操作...](img/image00448.jpeg)
- en: How it works...
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The selection of these fields produces the following output. The data is grouped
    by year, month, and week, showing the total lines in the codebase along with a
    breakdown of lines modified, lines deleted, lines added, and the total churn:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 选择这些字段后，会生成如下输出。数据按年、月和周分组，显示代码库中的总行数，以及修改行数、删除行数、添加行数和总变动：
- en: '![How it works...](img/image00449.jpeg)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image00449.jpeg)'
- en: Note
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In case you are interested in the build quality indicators report, TFS already
    offers this report out of the box. The report shows test coverage, code churn,
    and bug counts for a specified build definition. You can refer to [https://msdn.microsoft.com/en-us/library/dd380683(v=vs.120).aspx](https://msdn.microsoft.com/en-us/library/dd380683(v=vs.120).aspx),
    the tutorial, to learn more about this report.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对构建质量指标报告感兴趣，TFS已经提供了这个报告。该报告显示了指定构建定义的测试覆盖率、代码变化量和缺陷数量。你可以参考[https://msdn.microsoft.com/en-us/library/dd380683(v=vs.120).aspx](https://msdn.microsoft.com/en-us/library/dd380683(v=vs.120).aspx)教程，了解更多关于这个报告的信息。
- en: There's more...
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Change the fields in the pivot to what is illustrated in the following figure.
    Now, let''s bring the version control hierarchy and build details in to the equation
    and update the fields in the pivot as in the screenshot here:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据透视表中的字段更改为下图所示。现在，让我们将版本控制层次结构和构建细节加入到方程式中，并像这里的截图一样更新数据透视表中的字段：
- en: '![There''s more...](img/image00450.jpeg)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image00450.jpeg)'
- en: In the values section add Total Lines, Lines Modified, Lined Added, and Total
    Churn.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在值部分，添加“总行数”、“修改行数”、“新增行数”和“总变化量”。
- en: 'This will result in the results pivoted by year, week, and date and the version
    control hierarchy. As you can see in the screenshot here, the output shows the
    changes to the branch. You can drill down further to the specific project and
    class:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致按年份、周和日期以及版本控制层次结构进行透视。正如你在这里的截图中看到的，输出显示了分支的变化。你可以进一步钻取到特定的项目和类：
- en: '![There''s more...](img/image00451.jpeg)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image00451.jpeg)'
- en: Now, change the file hierarchy to be the filter and add the file extension to
    be presented as a row. In the file extension filter on `.asax`, `.config`, and
    `.cshtml`, the output will show you the code churn in these file types overtime.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将文件层次结构更改为过滤器，并将文件扩展名添加为行。在`.asax`、`.config`和`.cshtml`的文件扩展名过滤器中，输出将显示这些文件类型随时间的代码变化量。
- en: '![There''s more...](img/image00452.jpeg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image00452.jpeg)'
- en: The possibilities are limitless. Once you have the basics of analysis reports
    nailed down, you can begin spelunking into the other dimensions available to you
    in the data warehouse to correlate the data to drive more interesting trends about
    your software project.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 可能性是无限的。一旦你掌握了分析报告的基础，你就可以开始探索数据仓库中其他维度，以将数据关联起来，发现更多关于你的软件项目的有趣趋势。
