["```\npublic class AzureAwarePlugin : IPlugin \n{ \npublic void Execute(IServiceProvider serviceProvider) \n{ \n// set the Service Endpoint Id \nvar serviceEndpointId = \"[ServiceEndpointGuid]\"; \n\n// Obtain the execution context from the service provider. \nIPluginExecutionContext context = (IPluginExecutionContext) \nserviceProvider.GetService(typeof(IPluginExecutionContext)); \n\n// Extract the notification service for posting execution context \nIServiceEndpointNotificationService notificationService = (IServiceEndpointNotificationService) \nserviceProvider.GetService(typeof(IServiceEndpointNotificationService)); \n// Call the Execute method. \nvar response = notificationService.Execute(new EntityReference(\"serviceendpoint\", \nnew Guid(serviceEndpointId)), context); \n} \n} \n```", "```\n// set the connection string of the Shared Access Policy created for the Queue \nvar connectionString = \"Endpoint=sb://[namespace].servicebus.windows.net/;SharedAccessKeyName=[KeyName];SharedAccessKey=[KeyValue];EntityPath=[QueueName]\"; \n\n// create the Queue Client object \nvar client = QueueClient.CreateFromConnectionString(connectionString); \n\nwhile (true) \n{ \nConsole.Write(\"Press [Enter] to retrieve a message from the queue.\"); \nstring line = Console.ReadLine(); \nConsole.WriteLine(\"Waiting for a message from the queue... \"); \ntry \n{ \n// get the message from the Queue Client \nBrokeredMessage brokeredMessage = client.Receive(); \n\n// if message recieved \nif (brokeredMessage != null) \n{ \n// get the Remote Execution Context passed from the Azure Service Bus \nRemoteExecutionContext context = brokeredMessage.GetBody<RemoteExecutionContext>(); \n\n// cast to Entity object \nEntity entity = (Entity)context.InputParameters[\"Target\"]; \n\n// get the lead's topic attribute value \nvar leadTopic = entity.Attributes[\"subject\"].ToString(); \n\n// output to console \nConsole.WriteLine(string.Format(\"   Entity Name = {0}, Message Name = {1}, Lead's Topic = {2}\", \ncontext.PrimaryEntityName, context.MessageName, leadTopic)); \n\n// marks message as processed and deleted \nbrokeredMessage.Complete(); \n} \n} \ncatch (TimeoutException ex) \n{ \nConsole.WriteLine(ex.Message); \ncontinue; \n} \ncatch (FaultException ex) \n{ \nConsole.WriteLine(ex.Message); \ncontinue; \n} \n} \n```", "```\n// set the connection string of the Shared Access Policy created for the Subscription \n// along with name of the Topic and Subscription \n\nvar connectionString = \"Endpoint=sb://[namespace].servicebus.windows.net/;SharedAccessKeyName=[KeyName];SharedAccessKey=[KeyValue];EntityPath=[TopicName]\"; \n\nvar topic = \"[topic]\"; \nvar subscriptionName = \"[subscription]\"; \n```", "```\n// create the Subcription Client object \nvar client = SubscriptionClient.CreateFromConnectionString(connectionString, topic, subscriptionName); \n\nwhile (true) \n{ \nConsole.Write(\"Press [Enter] to retrieve a message from the topic.\"); \nstring line = Console.ReadLine(); \nConsole.WriteLine(\"Waiting for a message from the topic... \"); \ntry \n{ \n// get the message from the client \nBrokeredMessage brokeredMessage = client.Receive(); \n\n// get the Remote Execution Context passed from the Azure Service Bus \nRemoteExecutionContext context = brokeredMessage.GetBody<RemoteExecutionContext>(); \n\n// cast to Entity object \nEntity entity = (Entity)context.InputParameters[\"Target\"]; \n\n// get the lead's topic attribute value \nvar leadTopic = entity.Attributes[\"subject\"].ToString(); \n\n// output to console \nConsole.WriteLine(string.Format(\"  Entity Name = {0}, Message Name = {1}, Lead's Topic = {2}\", \ncontext.PrimaryEntityName, context.MessageName, leadTopic)); \n\n// marks message as processed and deleted \nbrokeredMessage.Complete(); \n} \ncatch (TimeoutException ex) \n{ \nConsole.WriteLine(ex.Message); \ncontinue; \n} \ncatch (FaultException ex) \n{ \nConsole.WriteLine(ex.Message); \ncontinue; \n} \n} \n```", "```\n[ServiceBehavior] \nclass AzureExample : IServiceEndpointPlugin \n{ \nstatic void Main(string[] args) \n{ \n// get the shared access key name \n// shared access key value \n// service bus endpoint from the Shared Access Policy Connection String. \nvar sharedAccessKeyName = \"[keyName]\"; \nvar sharedAccessKey = \"[keyValue]\"; \nvar serviceBusEndPoint = \"https://[serviceBusNameSpace].servicebus.windows.net\"; \n\n// initialize the ServiceHost \nvar serviceHost = new ServiceHost(typeof(AzureExample)); \n\n// define the behaviour \nvar transportClient = new TransportClientEndpointBehavior \n(TokenProvider.CreateSharedAccessSignatureTokenProvider(sharedAccessKeyName, sharedAccessKey)); \n\n// add the service endpoint \nserviceHost.AddServiceEndpoint(typeof(IServiceEndpointPlugin), \nnew WS2007HttpRelayBinding(), serviceBusEndPoint).EndpointBehaviors.Add(transportClient); \n\nserviceHost.Open(); \n\nConsole.ReadLine(); \n} \n\nvoid IServiceEndpointPlugin.Execute(RemoteExecutionContext context) \n{ \n// cast to Entity object \nEntity entity = (Entity)context.InputParameters[\"Target\"]; \n\n// get the lead's topic attribute value \nvar leadTopic = entity.Attributes[\"subject\"].ToString(); \n\n// output to console \nConsole.WriteLine(string.Format(\"  Entity Name = {0}, Message Name = {1}, Lead's Topic = {2}\", \ncontext.PrimaryEntityName, context.MessageName, leadTopic)); \n} \n} \n```", "```\n[ServiceBehavior] \nclass AzureExample : ITwoWayServiceEndpointPlugin \n    { \n        static void Main(string[] args) \n        { \n            // get the shared access key name \n            // shared access key value \n            // service bus endpoint from the Shared Access Policy \n            Connection String. \n            var sharedAccessKeyName = \"RootManageSharedAccessKey\"; \n            var sharedAccessKey = \"[KeyValue]\"; \n            var serviceBusEndPoint =  \n           \"https://[ServiceBusNamespace].servicebus.windows.net\"; \n\n            // initialize the ServiceHost  \n            var serviceHost = new ServiceHost(typeof(AzureExample)); \n\n            // define the behaviour \n            var transportClient = new\n            TransportClientEndpointBehavior \n\n        (TokenProvider.CreateSharedAccessSignatureTokenProvider\n        (sharedAccessKeyName,  \n          sharedAccessKey)); \n\n            // add the service endpoint \n            serviceHost.AddServiceEndpoint\n           (typeof(ITwoWayServiceEndpointPlugin), \n                new WS2007HttpRelayBinding(),  \n                serviceBusEndPoint).EndpointBehaviors.\n                Add(transportClient); \n\n            serviceHost.Open(); \n\n            Console.ReadLine(); \n        }        \n\n        string ITwoWayServiceEndpointPlugin.Execute\n        (RemoteExecutionContext context) \n        { \n            // cast to Entity object \n            Entity entity =  \n            (Entity)context.InputParameters[\"Target\"]; \n\n            // get the lead's topic attribute value \n            var leadTopic = entity.Attributes[\"subject\"].ToString(); \n\n            // output to console \n            Console.WriteLine(string.Format\n            (\"  Entity Name = {0}, Message Name = \n            {1}, \n            Lead's Topic = {2}\", \n                context.PrimaryEntityName, \n               context.MessageName, leadTopic)); \n\n            // return the message back to the\n            custom azure aware plugin \n            return \"Message Processed\"; \n        } \n    } \n```", "```\npublic class AzureAwarePlugin : IPlugin \n    { \n        public void Execute(IServiceProvider serviceProvider) \n        { \n            // set the Service Endpoint Id \n            var serviceEndpointId = \"[serviceEndpointGUID]\"; \n\n            // Obtain the execution context from \n            the service provider. \n            IPluginExecutionContext context = \n           (IPluginExecutionContext) \n                serviceProvider.GetService\n                 (typeof(IPluginExecutionContext)); \n\n            //Extract the tracing service for use in debugging \n           sandboxed plug-ins. \n            ITracingService tracingService = \n\n          (ITracingService)serviceProvider.GetService\n         (typeof(ITracingService)); \n\n            // Extract the notification service for posting \n            execution context \n            IServiceEndpointNotificationService \n            notificationService =  \n           (IServiceEndpointNotificationService) \n\n           serviceProvider.GetService(typeof\n          (IServiceEndpointNotificationService)); \n\n            var response = notificationService.Execute(new \n          EntityReference(\"serviceendpoint\", new \n           Guid(serviceEndpointId)), context); \n\n            if (!string.IsNullOrEmpty(response)) \n            { \n                tracingService.Trace(\"Response = {0}\", response); \n            } \n        } \n    } \n```", "```\n[ServiceBehavior] \n  class AzureExample : IWebHttpServiceEndpointPlugin \n    { \n        static void Main(string[] args) \n        { \n            // get the shared access key name \n            // shared access key value \n            // service bus endpoint from the Shared \n           Access Policy Connection String. \n            var sharedAccessKeyName = \"RootManageSharedAccessKey\"; \n            var sharedAccessKey = \"[KeyValue]\"; \n            var serviceBusEndPoint = \n            \"https://[ServiceBusNamespace].servicebus.windows.net\"; \n\n            // Create the service host for \n           Azure to post messages to. \n            var serviceHost = new \n           WebServiceHost(typeof(AzureExample)); \n\n            // define the behaviour \n            var transportClient = new \n            TransportClientEndpointBehavior \n\n        (TokenProvider.CreateSharedAccessSignatureTokenProvider\n        (sharedAccessKeyName,  \n           sharedAccessKey)); \n\n            // Using an HTTP binding instead of a \n            SOAP binding for this RESTful \n             endpoint. \n            WebHttpRelayBinding binding = new WebHttpRelayBinding(); \n            binding.Security.Mode = \n            EndToEndWebHttpSecurityMode.Transport; \n\n            // add the service endpoint \n            serviceHost.AddServiceEndpoint\n             (typeof(IWebHttpServiceEndpointPlugin), \n               binding, serviceBusEndPoint).\n              EndpointBehaviors.Add(transportClient); \n\n            // Begin listening for messages posted to Azure. \n            serviceHost.Open();            \n\n            Console.ReadLine(); \n        } \n\n        string IWebHttpServiceEndpointPlugin.\n         Execute(RemoteExecutionContext context) \n        { \n            // cast to Entity object \n            Entity entity = \n            (Entity)context.InputParameters[\"Target\"]; \n\n            // get the lead's topic attribute value \n            var leadTopic = entity.Attributes[\"subject\"].ToString(); \n\n            // output to console \n            Console.WriteLine(string.Format\n            (\"  Entity Name = {0}, Message Name = \n             {1}, \n             Lead's Topic = {2}\", \n                context.PrimaryEntityName, \n                context.MessageName, leadTopic)); \n\n            // return the message back to the \n            custom azure aware plugin \n            return \"Message Processed by Rest Listener\"; \n        } \n\n    } \n```", "```\nvar connectionString = \"Endpoint=sb://[namespace].servicebus.windows.net/;SharedAccessKeyName=[KeyName];SharedAccessKey=[KeyValue];EntityPath=[QueueName]\"; \n\n// create the Event Hub Client object \nvar client = EventHubClient.CreateFromConnectionString(connectionString); \n\n// create the event hub reciever \nEventHubConsumerGroup consumerGroup = client.GetDefaultConsumerGroup(); \nvar eventHubReciever = consumerGroup.CreateReceiver(client.GetRuntimeInformation().PartitionIds[0]); \n\nwhile (true) \n{ \nConsole.Write(\"Press [Enter] to retrieve a message from the Event Hub.\"); \nstring line = Console.ReadLine(); \nConsole.WriteLine(\"Waiting for a message from the eventhub... \"); \n\n// call the Recieve method \nvar message = eventHubReciever.Receive(); \n\n// get the JSON result \nstring jsonResult = Encoding.UTF8.GetString(message.GetBytes()); \n// output to window \nConsole.WriteLine(\"JSON Output\" + jsonResult); \n} \n```"]