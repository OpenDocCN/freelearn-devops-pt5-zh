["```\nbuildscript {\n    dependencies {\n        classpath('com.h2database:h2:1.4.200')\n    }\n}\n...\nplugins {\n   id \"org.flywaydb.flyway\" version \"8.5.0\"\n}\n...\nflyway {\n   url = 'jdbc:h2:file:/tmp/calculator'\n   user = 'sa'\n}\n```", "```\n$ ./gradlew flywayMigrate -i\n```", "```\ncreate table CALCULATION (\n   ID      int not null auto_increment,\n   A       varchar(100),\n   B       varchar(100),\n   RESULT  varchar(100),\n   primary key (ID)\n);\n```", "```\n$ ./gradlew flywayMigrate -i\n...\nMigrating schema \"PUBLIC\" to version \"1 - Create calculation table\"\nSuccessfully applied 1 migration to schema \"PUBLIC\", now at version v1 (execution time 00:00.018s)\n```", "```\n    dependencies {\n       implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n       implementation 'com.h2database:h2:1.4.200'\n    }\n    ```", "```\n    spring.datasource.url=jdbc:h2:file:/tmp/calculator;DB_CLOSE_ON_EXIT=FALSE \n    spring.jpa.hibernate.ddl-auto=validate\n    spring.datasource.username=sa\n    ```", "```\n    package com.leszko.calculator;\n    import javax.persistence.Entity;\n    import javax.persistence.GeneratedValue;\n    import javax.persistence.GenerationType;\n    import javax.persistence.Id;\n    @Entity\n    public class Calculation {\n       @Id\n       @GeneratedValue(strategy= GenerationType.IDENTITY)\n       private Integer id;\n       private String a;\n       private String b;\n       private String result;\n       protected Calculation() {}\n       public Calculation(String a, String b, String result) {\n           this.a = a;\n           this.b = b;\n           this.result = result;\n       }\n    }\n    ```", "```\n    package com.leszko.calculator;\n    import org.springframework.data.repository.CrudRepository;\n    public interface CalculationRepository extends CrudRepository<Calculation, Integer> {}\n    ```", "```\n    ...\n    class CalculatorController {\n       ...\n       @Autowired\n       private CalculationRepository calculationRepository;\n       @RequestMapping(\"/sum\")\n       String sum(@RequestParam(\"a\") Integer a, @RequestParam(\"b\") Integer b) {\n           String result = String.valueOf(calculator.sum(a, b));\n           calculationRepository.save(new Calculation(a.toString(), b.toString(), result));\n           return result;\n       }\n    }\n    ```", "```\n    $ ./gradlew bootRun\n    ```", "```\nalter table CALCULATION\nadd CREATED_AT timestamp;\n```", "```\n...\nprivate Timestamp createdAt;\n...\n```", "```\ncalculationRepository.save(new Calculation(a.toString(), b.toString(), result, Timestamp.from(Instant.now())));\n```", "```\nalter table CALCULATION\nadd SUM varchar(100);\n```", "```\npublic class Calculation {\n    ...\n    private String sum;\n    ...\n    public Calculation(String a, String b, String sum, Timestamp createdAt) {\n        this.a = a;\n        this.b = b;\n        this.sum = sum;\n        this.result = sum;\n        this.createdAt = createdAt;\n    }\n    public String getSum() {\n        return sum != null ? sum : result;\n    }\n}\n```", "```\nupdate CALCULATION\nset CALCULATION.sum = CALCULATION.result\nwhere CALCULATION.sum is null;\n```", "```\npublic class Calculation {\n    ...\n    private String sum;\n    ...\n    public Calculation(String a, String b, String sum, Timestamp createdAt) {\n        this.a = a;\n        this.b = b;\n        this.sum = sum;\n        this.createdAt = createdAt;\n    }\n    public String getSum() {\n        return sum;\n    }\n}\n```", "```\nalter table CALCULATION\ndrop column RESULT;\n```", "```\npipeline {\n   agent any\n   stages {\n       stage('Stage 1') {\n           steps {\n               parallel (\n                       one: { echo \"parallel step 1\" },\n                       two: { echo \"parallel step 2\" }\n               )\n           }\n       }\n       stage('Stage 2') {\n           steps {\n               echo \"run after both parallel steps are completed\"   \n           }\n       }\n   }\n}\n```", "```\npipeline {\n   agent any\n   parameters {\n       string(name: 'Environment', defaultValue: 'dev', description: 'Which environment (dev, qa, prod)?')\n   }\n   stages {\n       stage('Environment check') {\n           steps {\n               echo \"Current environment: ${params.Environment}\"   \n           }\n       }\n   }\n}\n```", "```\n/**\n* Hello world step.\n*/\ndef call(String name) {   \n   echo \"Hello $name!\"\n}\n```", "```\npipeline {\n   agent any\n   stages {\n       stage(\"Hello stage\") {\n           steps {\n           sayHello 'Rafal'\n         }\n       }\n   }\n}\n```", "```\nstage(\"Release approval\") {\n   steps {\n       input \"Do you approve the release?\"\n   }\n}\n```"]