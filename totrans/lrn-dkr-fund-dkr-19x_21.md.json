["```\n$ mkdir node && cd node\n```", "```\n$ npm install --save express\n```", "```\n$ npm install --save prom-client \n```", "```\nconst app = require(\"express\")();\n\napp.get('/hello', (req, res) => {\n  const { name = 'World' } = req.query;\n  res.json({ message: `Hello, ${name}!` });\n});\n\napp.listen(port=3000, () => {\n  console.log(`Example api is listening on http://localhost:3000`);\n}); \n```", "```\nconst client = require(\"prom-client\");\nconst register = client.register;\nconst collectDefaultMetrics = client.collectDefaultMetrics;\ncollectDefaultMetrics({ register });\n```", "```\napp.get('/metrics', (req, res) => {\n  res.set('Content-Type', register.contentType);\n  res.end(register.metrics());\n});\n```", "```\n$ npm start\n\n> node@1.0.0 start C:\\Users\\Gabriel\\fod\\ch17\\node\n> node server.js\n\nExample api is listening on http://localhost:3000\n```", "```\n$ curl localhost:3000/metrics\n...\nprocess_cpu_user_seconds_total 0.016 1577633206532\n\n# HELP process_cpu_system_seconds_total Total system CPU time spent in seconds.\n# TYPE process_cpu_system_seconds_total counter\nprocess_cpu_system_seconds_total 0.015 1577633206532\n\n# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.\n# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 0.031 1577633206532\n...\nnodejs_version_info{version=\"v10.15.3\",major=\"10\",minor=\"15\",patch=\"3\"} 1\n```", "```\nconst helloCounter = new client.Counter({ \n  name: 'my_hello_counter', \n  help: 'Counts the number of hello requests',\n});\n```", "```\napp.get('/hello', (req, res) => {\n  helloCounter.inc();\n  const { name = 'World' } = req.query;\n  res.json({ message: `Hello, ${name}!` });\n});\n```", "```\n$ curl localhost:3000/hello?name=Sue\n```", "```\n$ curl localhost:3000/metrics\n\n...\n# HELP my_hello_counter Counts the number of hello requests \n# TYPE my_hello_counter counter\nmy_hello_counter 2\n```", "```\n$ mkdir dotnet && cd dotnet\n```", "```\n$ dotnet new webapi --output sample-api\n```", "```\n$ dotnet add sample-api package prometheus-net.AspNetCore\n```", "```\n$ code .\n```", "```\nusing Prometheus; \n```", "```\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    ...\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllers();\n        endpoints.MapMetrics();\n    });\n}\n```", "```\n$ dotnet run --project sample-api\n\ninfo: Microsoft.Hosting.Lifetime[0]\n Now listening on: https://localhost:5001 \ninfo: Microsoft.Hosting.Lifetime[0]\n Now listening on: http://localhost:5000 \n...\n```", "```\n$ curl --insecure https://localhost:5001/metrics \n\n# HELP process_private_memory_bytes Process private memory size\n# TYPE process_private_memory_bytes gauge\nprocess_private_memory_bytes 55619584\n# HELP process_virtual_memory_bytes Virtual memory size in bytes. \n# TYPE process_virtual_memory_bytes gauge\nprocess_virtual_memory_bytes 2221930053632\n# HELP process_working_set_bytes Process working set\n# TYPE process_working_set_bytes gauge\nprocess_working_set_bytes 105537536\n...\ndotnet_collection_count_total{generation=\"1\"} 0\ndotnet_collection_count_total{generation=\"0\"} 0\ndotnet_collection_count_total{generation=\"2\"} 0\n```", "```\nprivate static readonly Gauge weatherForecastsInProgress = Metrics\n    .CreateGauge(\"myapp_weather_forecasts_in_progress\", \n                 \"Number of weather forecast operations ongoing.\");\n```", "```\n[HttpGet]\npublic IEnumerable<WeatherForecast> Get()\n{\n    using(weatherForecastsInProgress.TrackInProgress())\n {\n...\n }\n}\n```", "```\n$ curl --insecure https://localhost:5001/weatherforecast\n```", "```\n$ curl --insecure https://localhost:5001/metrics \n\n# HELP myapp_weather_forecasts_in_progress Number of weather forecast operations ongoing.\n# TYPE myapp_weather_forecasts_in_progress gauge\nmyapp_weather_forecasts_in_progress 0\n...\n```", "```\n$ mkdir -p ~/fod/ch17/kube && cd ~/fod/ch17/kube\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus-deployment\n  labels:\n    app: prometheus\n    purpose: monitoring-demo\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: prometheus\n      purpose: monitoring-demo\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        purpose: monitoring-demo\n    spec:\n      containers:\n      - name: prometheus\n        image: prom/prometheus\n        volumeMounts:\n          - name: config-volume\n            mountPath: /etc/prometheus/prometheus.yml\n            subPath: prometheus.yml\n        ports:\n        - containerPort: 9090\n      volumes:\n        - name: config-volume\n          configMap:\n           name: prometheus-cm\n```", "```\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: prometheus-svc\nspec:\n  type: NodePort\n  selector:\n    app: prometheus\n    purpose: monitoring-demo\n  ports:\n  - name: promui\n    protocol: TCP\n    port: 9090\n    targetPort: 9090\n```", "```\n$ mkdir -p ~/fod/ch17/kube/config\n```", "```\nscrape_configs:\n    - job_name: 'prometheus'\n      scrape_interval: 5s\n      static_configs:\n        - targets: ['localhost:9090']\n\n    - job_name: dotnet\n      scrape_interval: 5s\n      static_configs:\n        - targets: ['dotnet-api-svc:5000']\n\n    - job_name: node\n      scrape_interval: 5s\n      static_configs:\n        - targets: ['node-api-svc:3000']\n          labels:\n            group: 'production'\n```", "```\n$ kubectl create configmap prometheus-cm \\\n --from-file config/prometheus.yml\n```", "```\n$ kubectl apply -f prometheus.yaml deployment.apps/prometheus-deployment created\nservice/prometheus-svc created\n```", "```\n$ kubectl get all\n\nNAME                                        READY  STATUS   RESTARTS  AGE\npod/prometheus-deployment-779677977f-727hb  1/1    Running  0         24s\npod/prometheus-deployment-779677977f-f5l7k  1/1    Running  0         24s\n\nNAME                    TYPE       CLUSTER-IP      EXTERNAL-IP  PORT(S)         AGE\nservice/kubernetes      ClusterIP  10.96.0.1       <none>       443/TCP         28d\nservice/prometheus-svc  NodePort   10.110.239.245  <none>       9090:31962/TCP  24s\n\nNAME                                   READY  UP-TO-DATE  AVAILABLE  AGE\ndeployment.apps/prometheus-deployment  2/2    2           2          24s\n\nNAME                                              DESIRED  CURRENT  READY  AGE\nreplicaset.apps/prometheus-deployment-779677977f  2        2        2      24s\n```", "```\nHost.CreateDefaultBuilder(args)\n    .ConfigureWebHostDefaults(webBuilder =>\n    {\n        webBuilder.UseStartup<Startup>();\n        webBuilder.UseUrls(\"http://*:5000\");\n    });\n```", "```\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.1 AS base\nWORKDIR /app\nEXPOSE 5000\n\nFROM mcr.microsoft.com/dotnet/core/sdk:3.1 AS builder\nWORKDIR /src\nCOPY sample-api.csproj ./\nRUN dotnet restore\nCOPY . .\nRUN dotnet build -c Release -o /src/build\n\nFROM builder AS publisher\nRUN dotnet publish -c Release -o /src/publish\n\nFROM base AS final\nCOPY --from=publisher /src/publish .\nENTRYPOINT [\"dotnet\", \"sample-api.dll\"]\n```", "```\n$ docker image build -t fundamentalsofdocker/ch17-dotnet-api:2.0 .\n```", "```\n$ docker image push fundamentalsofdocker/ch17-dotnet-api:2.0\n```", "```\nFROM node:13.5-alpine\nWORKDIR /app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```", "```\n$ docker image build -t fundamentalsofdocker/ch17-node-api:2.0 .\n```", "```\n$ docker image push fundamentalsofdocker/ch17-node-api:2.0\n```", "```\n$ kubectl apply -f app-services.yaml\n\ndeployment.apps/dotnet-api-deployment created\nservice/dotnet-api-svc created\ndeployment.apps/node-api-deployment created\nservice/node-api-svc created\n```", "```\n$ kubectl get services\n\nNAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\ndotnet-api-svc   NodePort    10.98.137.249    <none>        5000:30822/TCP   5m29s\ngrafana-svc      NodePort    10.107.232.211   <none>        8080:31461/TCP   33m\nkubernetes       ClusterIP   10.96.0.1        <none>        443/TCP          28d\nnode-api-svc     NodePort    10.110.15.131    <none>        5000:31713/TCP   5m29s\nprometheus-svc   NodePort    10.110.239.245   <none>        9090:31962/TCP   77m\n```", "```\n$ curl localhost:30822/metrics # HELP process_working_set_bytes Process working set\n# TYPE process_working_set_bytes gauge\nprocess_working_set_bytes 95236096\n# HELP process_private_memory_bytes Process private memory size\n# TYPE process_private_memory_bytes gauge\nprocess_private_memory_bytes 186617856\n...\n\n$ curl localhost:31713/metrics\n# HELP process_cpu_user_seconds_total Total user CPU time spent in seconds.\n# TYPE process_cpu_user_seconds_total counter\nprocess_cpu_user_seconds_total 1.0394399999999997 1578294999302\n# HELP process_cpu_system_seconds_total Total system CPU time spent in seconds.\n# TYPE process_cpu_system_seconds_total counter\nprocess_cpu_system_seconds_total 0.3370890000000001 1578294999302\n...\n```", "```\n# access the /weatherforecast endpoint in the .NET service\n$ curl localhost:31713/weatherforecast\n\n# and access the /hello endpoint in the Node service \n$ curl localhost:30822/hello\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana-deployment\n  labels:\n    app: grafana\n    purpose: monitoring-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: grafana\n      purpose: monitoring-demo\n  template:\n    metadata:\n      labels:\n        app: grafana\n        purpose: monitoring-demo\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana\n```", "```\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: grafana-svc\nspec:\n  type: NodePort\n  selector:\n    app: grafana\n    purpose: monitoring-demo\n  ports:\n  - name: grafanaui\n    protocol: TCP\n    port: 3000\n    targetPort: 3000\n```", "```\n$ kubectl apply -f grafana.yaml deployment.apps/grafana-deployment created\nservice/grafana-svc created\n```", "```\n$ kubectl get services\n\nNAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE\ndotnet-api-svc   NodePort    10.100.250.40   <none>        5000:30781/TCP   16m\ngrafana-svc      NodePort    10.102.239.176  <none>        3000:32379/TCP   11m\nkubernetes       ClusterIP   10.96.0.1       <none>        443/TCP          28d\nnode-api-svc     NodePort    10.100.76.13    <none>        3000:30731/TCP   16m\nprometheus-svc   NodePort    10.104.205.217  <none>        9090:31246/TCP   16m\n```", "```\n$ kubectl run tmp-shell --generator=run-pod/v1 --rm -i --tty \\\n --image fundamentalsofdocker/netshoot \\\n --command -- bash\n\n bash-5.0#\n```", "```\nbash-5.0# ip a\n```", "```\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n inet 127.0.0.1/8 scope host lo\n valid_lft forever preferred_lft forever\n 2: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN group default qlen 1000\n link/sit 0.0.0.0 brd 0.0.0.0\n 4: eth0@if263: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n link/ether 52:52:9d:1d:fd:cc brd ff:ff:ff:ff:ff:ff link-netnsid 0\n inet 10.1.0.71/16 scope global eth0\n valid_lft forever preferred_lft forever\n```", "```\n$ kubectl run tmp-shell --generator=run-pod/v1 --rm -i --tty \\\n --overrides='{\"spec\": {\"hostNetwork\": true}}' \\\n --image fundamentalsofdocker/netshoot \\\n --command -- bash\n```"]