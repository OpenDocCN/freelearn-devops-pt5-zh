- en: Chapter 8. Testing Network Changes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 网络更改测试
- en: This chapter will focus on an important part of the software development lifecycle
    as well as DevOps, testing, and quality assurance. This chapter will describe
    why it is essential to incorporate network changes as part of the continuous integration
    process and test them thoroughly. It will then go on to look at open source test
    tooling that is available to facilitate the creation of tests suites for network
    operations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍软件开发生命周期、DevOps、测试和质量保证中的一个重要部分。将描述为什么将网络更改纳入持续集成过程并彻底测试它们至关重要。接着，我们将研究可用于帮助创建网络操作测试套件的开源测试工具。
- en: This chapter will focus on the overall quality assurance process, outlining
    some of the best-practice approaches that can be adopted by network teams or teams
    implementing network operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讨论整体质量保证过程，概述一些网络团队或实施网络操作团队可以采用的最佳实践方法。
- en: We will also look at the benefits of implementing feedback loops, quality reporting,
    and what checks can be implemented to make sure that the network is functioning
    as expected. These are all essential topics as network teams move toward code-driven
    network operations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将探讨实施反馈循环、质量报告的好处，以及可以实施哪些检查以确保网络按预期运行。这些都是网络团队向代码驱动的网络操作过渡时的关键话题。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Testing overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试概览
- en: Quality assurance best practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证最佳实践
- en: Available test tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的测试工具
- en: Testing overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试概览
- en: There are many ways to ensure quality when making operational or development
    changes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以确保在进行操作或开发更改时保证质量。
- en: 'When combining quality checks and ordering them, they can be used to form a
    set of quality gates that development, infrastructure, or even network changes
    should flow through before they reach production. We will briefly touch upon some
    of the more popular testing strategies that are used to ensure that any changes
    to a system or application are operating effectively, comprised of the following
    phases of testing:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当结合质量检查并对其进行排序时，它们可以用来形成一套质量门控，开发、基础设施甚至网络更改在到达生产环境之前应通过这些质量门控。我们将简要介绍一些常见的测试策略，这些策略用于确保系统或应用程序的任何更改都能有效运行，包含以下测试阶段：
- en: '![Testing overview](img/B05559_08_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![测试概览](img/B05559_08_01.jpg)'
- en: Unit testing
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: One of the most popular types of quality assurance is the unit test. A **unit
    test** will test each isolated code operation and make sure that each method or
    function exhibits the desired behavior with different inputs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的质量保证类型之一是单元测试。**单元测试**将测试每个独立的代码操作，并确保每个方法或函数在不同的输入下表现出预期的行为。
- en: One or more unit tests will be required to make sure that a method or function
    works as desired. So multiple unit tests may need to be written to test any basic
    operation asserting either a pass or failure based on one isolated operation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个单元测试是确保方法或函数按预期工作的必要条件。因此，可能需要编写多个单元测试来测试任何基本操作，基于一个独立操作验证通过或失败。
- en: Unit tests can normally be carried out against compiled binaries, as opposed
    to requiring a fully-fledged test environment. Utilizing popular test frameworks,
    unit tests can be used to assert a pass or failure based on input.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试通常可以在已编译的二进制文件上进行，而不需要完整的测试环境。利用流行的测试框架，单元测试可以根据输入来验证通过或失败。
- en: 'For example, a unit test for an Apache Tomcat web server could involve making
    sure that the code can serve traffic on HTTP port 8080:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对 Apache Tomcat Web 服务器的单元测试可能包括确保代码能够在 HTTP 端口 8080 上处理流量：
- en: '![Unit testing](img/B05559_08_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![单元测试](img/B05559_08_02.jpg)'
- en: Component testing
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件测试
- en: '**Component testing** involves testing a single component in isolation and
    making sure that it behaves the way it should as a self-contained entity.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件测试**涉及隔离地测试单一组件，并确保其作为自包含实体表现出应有的行为。'
- en: Component testing normally involves deploying an application to a test environment
    and executing a suite of tests against the component that tests all its features
    and functionality. Microservice applications are small components which need to
    be tested each time they are released.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 组件测试通常涉及将应用程序部署到测试环境，并对该组件执行一系列测试，测试其所有特性和功能。微服务应用程序是每次发布时都需要进行测试的小组件。
- en: This may involve making sure a banking application can process transactions
    correctly based on a specific type of account.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能涉及确保银行应用程序能够根据特定类型的账户正确处理交易。
- en: Integration testing
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成测试
- en: '**Integration testing** involves more than one microservice component, so if
    two different components are integrated, a set of integration tests needs to be
    written to make sure they both integrate and exhibit the desired behavior.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成测试**涉及多个微服务组件，因此，如果两个不同的组件被集成，就需要编写一组集成测试，确保它们都能集成并表现出预期的行为。'
- en: Integration testing normally requires a simulation of a database schema or multiple
    components to be deployed in an environment and tested together. While a unit
    test can assert the behavior of the build binaries, an integration test is slightly
    more complex.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试通常需要模拟一个数据库架构或多个组件，并在环境中一起部署和测试。虽然单元测试可以断言构建的二进制文件的行为，但集成测试要稍微复杂一些。
- en: Mocking or stubbing can be carried out in order to simulate another application's
    endpoint behavior and assert if it is operating as expected.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过模拟或存根来模拟另一个应用程序的端点行为，并验证其是否按预期工作。
- en: 'Integration testing could test that two different microservice endpoints can
    be connected and that a transaction such as a TCP handshake can be completed correctly
    between the initiator service and the receiver service, with the reception of
    ACK making sure that the two-way TCP handshake is working correctly between the
    two microservice applications:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试可以测试两个不同的微服务端点是否可以连接，并且像TCP握手这样的交易能否在发起方服务和接收方服务之间正确完成，通过接收ACK来确保两微服务应用程序之间的双向TCP握手正常工作：
- en: '![Integration testing](img/B05559_08_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![集成测试](img/B05559_08_03.jpg)'
- en: System testing
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统测试
- en: '**System testing** is normally carried out on a full-blown environment with
    a set of fully deployed components. System testing will test the whole system
    and is normally utilized as a final step before production. Some of the tests
    that can be carried out are user journey tests such as setting up a full transaction.
    This tests that the fully integrated system can pass all the end-to-end testing
    as a customer would use it in production.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统测试**通常在一个完整的环境中进行，所有组件都已完全部署。系统测试将测试整个系统，通常作为生产前的最后一步进行。一些可以进行的测试包括用户旅程测试，例如设置一个完整的交易。这测试了完全集成的系统是否能通过所有的端到端测试，就像客户在生产环境中使用它一样。'
- en: 'This may result in integrating multiple microservice applications together
    such as microservice **A**, **B**, **C**, and **D** and making sure they all integrate
    functionally and work as a single entity:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能涉及将多个微服务应用程序集成在一起，例如微服务**A**、**B**、**C**和**D**，并确保它们能够在功能上集成并作为一个整体工作：
- en: '![System testing](img/B05559_08_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![系统测试](img/B05559_08_04.jpg)'
- en: Performance testing
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能测试
- en: '**Performance testing** is fairly self-explanatory, it will baseline the application''s
    performance on the first execution. It will then use that baseline to check for
    any performance degradations in the application every time a new release takes
    place.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能测试**是相当直观的，它会在第一次执行时为应用程序的性能设定基准。然后，它会使用该基准来检查每次新版本发布时应用程序是否有性能下降。'
- en: Performance tests will be used to check performance metrics, this is useful
    to see if a code commit causes performance issues in the overall system. Performance
    testing can be incorporated into the system test phase.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试将用于检查性能指标，这对于查看代码提交是否导致系统整体性能问题非常有用。性能测试可以纳入系统测试阶段。
- en: Alternatively, performance testing can also mean **Stress Testing or Load Testing**
    the application, network, or infrastructure to its absolute limit and by writing
    tests to see to find if the system can cope with the desired traffic patterns.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，性能测试也可以意味着**压力测试或负载测试**应用程序、网络或基础设施的极限，并通过编写测试来检查系统是否能够应对预期的流量模式。
- en: '**Endurance Testing** means setting a time period for testing and see how long
    the infrastructure, network, or application can cope with stress for a fixed period
    of time.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**耐力测试**是指设定一个测试时间段，看看基础设施、网络或应用程序在固定时间内能承受多大的压力。'
- en: '**Spike Testing** is making sure a system can cope with a sudden spike in traffic
    from a dormant traffic pattern, which tests if the system can cope with a high
    degree of variance.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**峰值测试**是确保系统能够应对从低谷流量模式中突然激增的流量，测试系统是否能够处理高度变化的流量。'
- en: '**Scalability Testing** on the other hand can mean horizontally scaling out
    infrastructure or scaling up more applications to the point it makes no performance
    benefit. This identifies the scaling limits a system has.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**可扩展性测试**另一方面可以意味着水平扩展基础设施或增加更多应用程序，直到达到没有性能提升的程度。这可以识别系统的扩展极限。'
- en: '**Volume Testing** can be used to see the volume of transactions or data a
    system can process over a given period of time.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**负载测试**可以用来查看一个系统在给定时间内可以处理的事务或数据量。'
- en: 'The following diagram shows the different types of testing that fall under
    the performance testing umbrella:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了属于性能测试范畴的不同测试类型：
- en: '![Performance testing](img/B05559_08_05.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![性能测试](img/B05559_08_05.jpg)'
- en: User acceptance testing
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户验收测试
- en: '**User acceptance testing** involves having end users test new features or
    functionality. User acceptance testing is normally utilized to make sure customers
    or product managers are happy with the development changes that have been made.
    This type of testing is normally exploratory and fairly manual. It is often used
    to test the look and feel of a website or graphical user interface.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户验收测试**涉及让最终用户测试新特性或功能。用户验收测试通常用于确保客户或产品经理对已经做出的开发更改感到满意。这种类型的测试通常是探索性的，并且相当手动。它通常用于测试网站或图形用户界面的外观和感受。'
- en: Why is testing relevant to network teams?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么测试对网络团队很重要？
- en: Quality assurance is a huge part of network or infrastructure changes, it is
    not just solely a software development concern. If the network or infrastructure,
    which software is installed upon, is not operating as desired, then this will
    have the same customer impact as a software bug.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 质量保证是网络或基础设施更改的重要部分，它不仅仅是软件开发的问题。如果软件安装的网络或基础设施没有按预期运行，那么它将产生与软件漏洞相同的客户影响。
- en: The customer doesn't differentiate between software bugs, infrastructure, or
    networking issues. All a customer knows is that they can't utilize products and
    as far as they are concerned the business is not meeting their needs or providing
    a good and reliable service.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 客户不会区分软件漏洞、基础设施或网络问题。客户只知道他们无法使用产品，并且在他们看来，企业没有满足他们的需求，也没有提供良好可靠的服务。
- en: Not having adequate testing can be very harmful to a business, as its very reputation
    can be damaged, and the rise of social media means that if websites are down or
    not operational, within a blink of the eye an outage can be all over social media
    channels.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 没有足够的测试对企业非常有害，因为企业的声誉可能会受到损害，而且社交媒体的兴起意味着，如果网站出现故障或无法正常运行，几乎一瞬间，停机信息就会在社交媒体平台上广泛传播。
- en: If one user notices an issue they can send a tweet, which alerts other customers
    to the issue, one tweet becomes many and before the company knows it, the outage
    is trending on Twitter or other social media and now everyone across the world
    is aware that the business is having problems.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个用户注意到问题，他们可以发推文，这会提醒其他客户注意到这个问题，一条推文变成多条，等到公司反应过来时，故障已经在Twitter或其他社交媒体上成为热议话题，现在全世界的人都知道该企业有问题。
- en: This situation is the worst fear for many online businesses, if the site is
    not up, operational, and providing a good user experience, then the business is
    no longer making money and customers may go to a competitor.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况是许多在线企业最担心的，如果网站无法上线、无法正常运行并提供良好的用户体验，那么企业就不再赚钱，客户可能会转向竞争对手。
- en: One of the key objectives for any development, infrastructure, or networking
    team is to provide a good service to end users and prevent downtime or outages.
    Typically, a set of **Key Performance Indicators** (**KPIs**) are used to quantify
    performance and set targets to decipher if a business is meeting customer needs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 任何开发、基础设施或网络团队的关键目标之一是为最终用户提供良好的服务，防止停机或故障。通常，使用一组**关键绩效指标**（**KPIs**）来量化性能，并设定目标，以判断企业是否满足客户需求。
- en: So making the delivery of network changes less prone to error should be the
    aim of any network team. In [Chapters 4](ch04.html "Chapter 4. Configuring Network
    Devices Using Ansible"), *Configuring Network Devices Using Ansible*, [Chapter
    5](ch05.html "Chapter 5. Orchestrating Load Balancers Using Ansible"), *Orchestrating
    Load Balancers Using Ansible*, and [Chapter 6](ch06.html "Chapter 6. Orchestrating
    SDN Controllers Using Ansible"), *Orchestrating SDN Controllers Using Ansible,*
    we looked at ways to automate network devices, load balancers, and SDN controllers
    using configuration management tooling. At the same time, having a set of repeatable
    tests for any network change should also be something that network teams are striving
    for. The ideal scenario being that a network team knows that a change is going
    to fail, before it has a customer impact. This means testing changes sufficiently
    before giving them a seal of approval and failing as fast as possible in test
    environments so breaking changes are not pushed directly to production environments.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使网络变更的交付减少出错的可能性应该是任何网络团队的目标。在[第4章](ch04.html "第4章 配置网络设备使用Ansible")，*配置网络设备使用Ansible*，[第5章](ch05.html
    "第5章 使用Ansible管理负载均衡器")，*使用Ansible管理负载均衡器*，以及[第6章](ch06.html "第6章 使用Ansible管理SDN控制器")，*使用Ansible管理SDN控制器*中，我们研究了如何使用配置管理工具自动化网络设备、负载均衡器和SDN控制器。同时，拥有一套可重复执行的测试来验证任何网络变更，应该也是网络团队努力的目标。理想的场景是，网络团队在变更实施之前，就知道该变更会失败，而不会对客户产生影响。这意味着在批准变更之前，充分进行测试，并尽可能快地在测试环境中发现问题，以避免破坏性变更直接推送到生产环境。
- en: One of the common concerns from network engineers when initially moving to an
    automated process is a lack of trust in the automation. Network engineers are
    used to going through due diligence and a subset of checks prior to releasing
    network changes. Just because automation is in place doesn't mean that the manual
    check-list network engineers used to validate network changes goes away.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 网络工程师在初步转向自动化流程时，常见的担忧之一是对自动化缺乏信任。网络工程师习惯于在发布网络变更之前，进行尽职调查和一系列检查。仅仅因为实施了自动化，并不意味着网络工程师用于验证网络变更的手动检查清单就不再需要。
- en: However, when considering software delivery, the overall process is only as
    fast as the slowest component, so if those network validation checks remain manual,
    then the whole process will be slowed down. This will result in manual stops being
    placed in the automation process, which will inevitably slow down the delivery
    of a new product to market.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，考虑到软件交付时，整体流程的速度取决于最慢的环节，因此如果这些网络验证检查仍然是手动的，那么整个流程就会变慢。这将导致在自动化过程中插入手动步骤，最终不可避免地会拖慢新产品的交付速度。
- en: The simple solution is to automate each of the networking check-lists, so any
    validation that was carried out manually by a network engineer instead becomes
    an automated check or test as part of an automated test suite which is run alongside
    the automation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的解决方案是自动化每一项网络检查清单，这样原本由网络工程师手动执行的验证就会变成一个自动化检查或测试，成为与自动化一起运行的自动化测试套件的一部分。
- en: These checks or tests are then written and built up over a period of time. So
    if a situation occurs when an edge case is found and it doesn't have test coverage
    that causes a failure. Rather than using the argument that the automation doesn't
    work and making a case to revert to tried and tested manual approaches, network
    engineers need to instead create a new test or check and add it to the automated
    validation pack which will catch the issue and fail in a test environment before
    it reaches the end user.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检查或测试是在一段时间内编写和构建的。所以，当发现边缘案例并且没有测试覆盖，导致失败时，应该采取的做法不是使用“自动化无法工作”的论点，并为恢复到经过验证的手动方法提供理由，而是网络工程师应该创建一个新的测试或检查，并将其添加到自动化验证包中，以便在问题影响最终用户之前，在测试环境中捕获并失败。
- en: Network changes and testing today
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当前的网络变更与测试
- en: Network teams still remain in the main work with a waterfall methodology, so
    they need to align and adopt a more agile approach. This will allow network teams
    to better integrate with the rest of the IT team and become a participant in the
    Continuous Delivery processes rather an observer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 网络团队仍然主要使用瀑布式方法，因此他们需要调整并采用更灵活的方法。这将使网络团队能够更好地与其他IT团队进行整合，成为持续交付过程中的参与者，而不仅仅是旁观者。
- en: When the waterfall methodology was the de-facto way of delivering software development
    projects to market, then a very rigid process lifecycle would be followed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当瀑布方法成为交付软件开发项目的标准方法时，将会遵循一个非常严格的过程生命周期。
- en: 'Waterfall processes stipulated every new feature would traverse the following
    phases:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布流程规定每个新特性将经历以下阶段：
- en: Analysis
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析
- en: Design
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计
- en: Implementation
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施
- en: Test
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: One of the main implementations of the waterfall method was known as the **V-Model**,
    which was initially used to simplify projects into deliverable chunks. This meant
    that all stakeholders could identify progress and look for potential delays.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布方法的主要实施之一是**V 模型**，最初用于将项目简化为可交付的块。这意味着所有利益相关者都可以识别进展并寻找潜在的延迟。
- en: This simplification made project managers and senior management happy as they
    had an easy way of tracking projects and whether they were on time or going over
    budget.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简化使得项目经理和高层管理人员非常高兴，因为他们有一种简单的方式来跟踪项目进度，并判断是否按时完成或超出预算。
- en: 'The structure of the V-Model is shown as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: V 模型的结构如下所示：
- en: '![Network changes and testing today](img/B05559_08_06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![网络变更与今天的测试](img/B05559_08_06.jpg)'
- en: In waterfall terms, the analysis and design phases took place on the left-hand
    side of the V-Model and would happen at the start of the process. The left-hand
    side of the V-Model in simplistic terms is used to interact with stakeholders,
    do necessary research, and gather all necessary high-level and low-level requirements
    to work out what is required to implement a new product or change. The left side
    of the V-Model was also about documenting the overall process at an architectural
    level.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布模型中，分析和设计阶段位于 V 模型的左侧，并会在过程开始时进行。简而言之，V 模型的左侧用于与利益相关者互动，进行必要的研究，并收集所有必要的高层和低层需求，以明确实现新产品或变更所需的内容。V
    模型的左侧还涉及在架构层面记录整体过程。
- en: After the initial requirement gathering as part of the analysis phase, the analysis
    phase was signed off, which meant that the architectural design phase could begin
    and some meat could be put around the requirements. As part of the design phase,
    high-level and low-level design documents would be created to document the proposed
    changes which would have an associated review, sign off, and approval process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析阶段完成初步需求收集后，分析阶段会签署结束，这意味着架构设计阶段可以开始，并对需求进行详细规划。作为设计阶段的一部分，将创建高层和低层设计文档，记录拟议的更改，并进行相关的审查、签署和批准流程。
- en: Once the design was completed, then the left side of the V-Model was complete
    and implementation of the change or product would take place. The implementation
    phase could span numerous weeks, or even months, to deliver the desired result
    and this lifecycle phase sits at the bottom of the V-Model.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设计完成，V 模型的左侧也就完成了，变更或产品的实施将开始。实施阶段可能需要数周甚至数月时间才能交付所需的结果，并且这一生命周期阶段位于 V 模型的底部。
- en: Once all the requirements were implemented, the implementation phase would be
    signed off and the project would move to the right-hand side of the V-Model where
    the Test phase would commence.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有需求实现完成，实施阶段将被签署结束，项目将进入 V 模型的右侧，测试阶段将开始。
- en: A test team would then carry out unit, integration, and then finally system
    testing on any change or new product feature. Any issues found with the implementation
    phase would result in a change request. This would mean that the high- or low-level
    design would need to be updated, re-work on the implementation would need to be
    done, and then tests would need to be repeated or re-written in order for the
    product to be refined.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，测试团队将对任何更改或新产品特性进行单元测试、集成测试，最后进行系统测试。实施阶段发现的任何问题都会导致变更请求。这意味着高层或低层设计需要更新，实施工作需要重新进行，然后测试需要重复或重新编写，以便对产品进行精炼。
- en: With the move to agile development covered in [Chapter 3](ch03.html "Chapter 3. Bringing
    DevOps to Network Operations"), *Bringing DevOps to Network Operations,* the V-Model
    has been seen to be a sub-optimal delivery mechanism. For reporting purposes,
    the V-Model is ideal and transparent, but it means that the implementation process
    suffers from the rigid restrictions enforced on engineers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 随着在[第3章](ch03.html "第3章：将DevOps引入网络运营")中讨论的敏捷开发的推进，*将DevOps引入网络运营*，V模型已被认为是一种次优的交付机制。从报告的角度来看，V模型是理想的和透明的，但这意味着实施过程受到对工程师施加的严格限制。
- en: The V-Model doesn't take into account that any engineer likes to iterate processes
    and the actual implementation they write down at the start of a process may not
    be the final design they implement. The V-Model doesn't align well to prototyping
    as engineers typically like to spend time with the system and try, fail, iterate,
    and then improve the implementation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: V模型没有考虑到工程师喜欢迭代过程的事实，而且他们在开始一个过程时写下的实际实现可能不是他们最终实施的设计。V模型与原型制作的契合度较差，因为工程师通常喜欢花时间与系统互动，尝试、失败、迭代，然后改善实现。
- en: Not accounting for prototyping leads to multiple change requests which have
    cost implications to businesses, so using two week sprints in an agile methodology
    to plan in iterative development has proved much more realistic. Although it is
    still something that senior managers struggle with as they are indoctrinated with
    having the need to report due dates and milestones, the due date is, by all intents
    and purposes, a made-up date.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不考虑原型制作会导致多个变更请求，这对企业带来成本影响，因此，在敏捷方法中使用两周的迭代开发周期来计划迭代开发被证明更为现实。尽管这仍然是高级经理们的一个难题，因为他们习惯了需要报告截止日期和里程碑，而截止日期在所有实际情况中不过是一个虚拟的日期。
- en: An engineer in the waterfall process will still do the same amount of prototyping
    to deliver implementations, and work takes *x* amount of time regardless of how
    a plan is structured. Agile development is just structured to accept prototyping
    and time-boxed spikes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布过程中，工程师仍然会进行相同数量的原型制作以交付实施，工作所需的时间是*x*，无论计划如何结构化。敏捷开发只是结构化以接受原型制作和时限内的突发工作。
- en: So the age-old question from a project manager to an engineer is always; *when
    will this be done by?* The engineer that replies; *I don't know* isn't an acceptable
    answer in a waterfall methodology. What is expected is an estimate, or in engineering
    circles a made-up date, which the project manager will likely change later when,
    inevitably, said date isn't met.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，项目经理对工程师的老生常谈问题总是；*这什么时候完成？* 作为回答的“*我不知道*”在瀑布模型中是不可接受的。期望的是一个估算，或者在工程圈里是一个虚拟的日期，而项目经理很可能会在该日期未能完成时进行更改。
- en: So how does any of this have any relevance to network changes and testing overall?
    Well, network teams today typically implement a mini V-Model when they think about
    making network changes. Network managers will act as a project manager that will
    plan out a design, implementation, and test phase cycle and report this back to
    senior management teams as network changes are seen as long pieces of work that
    need massive planning and testing before implementation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这一切与网络变更和测试总体上有什么相关性呢？嗯，今天的网络团队通常在考虑进行网络变更时会实施一个迷你V模型。网络经理会充当项目经理，规划设计、实施和测试阶段的周期，并将其反馈给高层管理团队，因为网络变更被视为需要大量规划和测试才能实施的大型工作。
- en: Network managers may not split out testing into test, integration, and system
    testing as traditionally, network testing is not as sophisticated as this, but
    it doesn't allow network engineers the freedom to prototype.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 网络经理可能不会像传统方法那样将测试拆分为测试、集成和系统测试，因为网络测试通常没有这么复杂，但这并不允许网络工程师进行原型制作。
- en: 'Instead network engineers, like infrastructure engineers or any operational
    team before them, will be pressured into making changes to a rigid plan. The plan
    will be indicative of the following criteria being met:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，网络工程师，像基础设施工程师或他们之前的任何运营团队一样，将被迫在一个严格的计划中做出改变。这个计划将体现以下标准的满足：
- en: Does the implemented change work as desired?
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施的变更是否按预期工作？
- en: Did the change break anything?
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更是否破坏了任何东西？
- en: Is the documentation updated to reflect change?
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档是否已更新以反映变更？
- en: If all these points are met, they would have deemed a successful change by a
    network team.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果满足所有这些点，网络团队会认为这是一次成功的变更。
- en: 'However, this doesn''t tell the complete and whole story as other points have
    to be considered when making network changes within the remit of a Continuous
    Delivery model:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并没有讲述完整的故事，因为在持续交付模型下进行网络更改时，还需要考虑其他几个方面：
- en: Will the change break anything that isn't immediately visible?
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个更改会破坏任何看不见的部分吗？
- en: Was the same change implemented to pre-production environments?
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的更改是否也已在预生产环境中实施？
- en: Was the same change tested and validated on pre-production environments?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的更改是否已在预生产环境中进行了测试和验证？
- en: The initial three points are mandatory requirements when doing any change, but
    the remaining three points should be considered mandatory too, in order to maintain
    a successful Continuous Delivery model. This is something of a mind-set change
    for network engineers, that they need to take this into consideration when making
    changes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的三个点是进行任何更改时的强制性要求，但剩下的三个点也应视为强制性要求，以维持成功的持续交付模型。这对网络工程师来说是一个思维方式的转变，他们需要在进行更改时将这些因素考虑在内。
- en: 'All network changes from a network engineer need to be committed to the source
    control management system and propagated through all the necessary environments
    before being pushed to production, as shown in the following figure:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 网络工程师进行的所有网络更改都需要提交到源代码管理系统，并在推送到生产环境之前，通过所有必要的环境进行传播，如下图所示：
- en: '![Network changes and testing today](img/B05559_08_07.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![今天的网络更改与测试](img/B05559_08_07.jpg)'
- en: If a change is made directly to production manually by network engineers and
    not implemented first on test, pre-production and production environments via
    an automated, then the network configuration will be forever misaligned on test
    environments. This will have dire consequences as the configuration of test, pre-production
    environments, and production will have drifted apart.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网络工程师直接手动在生产环境中进行更改，而没有先通过自动化在测试、预生产和生产环境中实施，那么测试环境中的网络配置将永远与生产环境不一致。这将导致严重的后果，因为测试、预生产环境和生产环境的配置将会逐渐偏离。
- en: This means that any developer, infrastructure, or network engineer using test
    and pre-production environments expecting a copy of production for mission-critical
    changes will be sadly disappointed. This can, in turn, compromise any tests run
    on those environments as they are no longer a proper reflection of the production
    estate.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着任何开发人员、基础设施人员或网络工程师，如果在使用测试和预生产环境时，期望它们是生产环境的副本以进行关键任务更改，将会感到失望。反过来，这也可能会影响在这些环境中运行的任何测试，因为它们不再能准确反映生产环境的状态。
- en: So what does this mean in practice? The system test box on the V-Model may pass
    in pre-production environments but fail in production. This does not build confidence
    in the Continuous Delivery process which is now a mission critical part of the
    business.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，实践中这意味着什么呢？V模型中的系统测试框可能在预生产环境中通过，但在生产环境中失败。这无法增强对持续交付过程的信心，而持续交付现在是业务中至关重要的部分。
- en: It cannot be highlighted how important it is to make sure all network, code,
    or infrastructure changes are pushed to pre-production environments prior to production
    to maintain the validity of all environments. Any team deviating from this process
    can compromise the whole system and negate the testing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 无法过分强调，在进行任何网络、代码或基础设施更改之前，确保所有更改都推送到预生产环境，以保持所有环境的有效性。这一点对于网络工程师而言是一个心态转变，他们在做更改时需要考虑这一点。
- en: This is not only used to test the changes, but also to keep the pre-production
    environments as a scaled-down mirror image of production that avoids the scenario
    of all tests pass in test environments but when they are deployed to production
    they cause outages to customers. So it means it is important that all validation
    tests are completed in associated test environments before a change is released
    to production.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅用于测试更改，还用于保持预生产环境作为生产环境的缩小版镜像，从而避免所有测试在测试环境中通过，但部署到生产环境后却导致客户停机的情况。因此，这意味着，在将更改发布到生产之前，必须在相关的测试环境中完成所有验证测试。
- en: If manual changes are pushed directly into production, even in the event of
    emergencies, then the changes need to be immediately put back into the **Source
    Control Management** (**SCM**) system, the SCM system should be the single source
    of truth for all configuration at all times.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果手动更改直接推送到生产环境，即使是紧急情况，也需要立即将更改提交回**源代码管理系统**（**SCM**），源代码管理系统应始终作为所有配置的唯一真实来源。
- en: 'If any manual changes are applied, snowflake environments will become common,
    which are shown below. This is where an engineer has made a manual change to production
    outside the process and not pushed the change to any of the other environments
    using the deployment pipeline:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用了任何手动更改，雪花环境将变得普遍，具体表现如下。这里是指工程师在生产环境中进行了手动更改，但未通过部署流水线将更改推送到其他环境中：
- en: '![Network changes and testing today](img/B05559_08_08.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![当前的网络变更和测试](img/B05559_08_08.jpg)'
- en: In order for network changes to be delivered at the desired rate, network changes
    and testing cannot continue to be done in a mini V-Model strategy. If network
    teams and managers are serious about being collaborators in Continuous Delivery
    models and DevOps models, they need to keep pace with the rest of the agile changes
    being made in development and infrastructure teams.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使网络变更能够按预期的速度交付，网络变更和测试不能继续采用迷你V模型策略。如果网络团队和管理人员真心希望在持续交付模型和DevOps模型中进行协作，他们需要跟上开发和基础设施团队在敏捷变更方面的步伐。
- en: The solution though is not to stop validating changes and paying due diligence,
    lessons can be learned from formulaic quality assurance processes that have been
    successfully applied on development and infrastructure changes for years, these
    processes can also help test network changes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，解决方案并不是停止验证更改和进行应有的尽职调查，而是从那些多年来成功应用于开发和基础设施变更的规范化质量保证流程中汲取经验，这些流程同样也能帮助测试网络变更。
- en: Quality assurance best practices
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 质量保证最佳实践
- en: Quality assurance teams, when utilizing a waterfall V-Model structure of delivery,
    worked in silos that retrospectively tested development changes once they were
    completed by a development team.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 质量保证团队在采用瀑布式V模型交付结构时，通常处于信息孤岛，只在开发团队完成后回顾性地测试开发变更。
- en: 'This led to quality assurance teams having to react to every development change,
    as it was an impossible task having to write tests for a feature they had not
    yet seen, or understand how it fully operated. Situations would often arise where
    developers without warning would commit features into source control management
    systems and then quality assurance teams would have to react to them:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致质量保证团队不得不对每个开发变更作出反应，因为他们需要为一个自己还没有见过的功能编写测试，或者理解该功能是如何完全运作的。这种情况经常发生，开发人员会在没有预警的情况下将功能提交到源代码管理系统，随后质量保证团队需要对其做出反应：
- en: '![Quality assurance best practices](img/B05559_08_09.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![质量保证最佳实践](img/B05559_08_09.jpg)'
- en: 'This method of working provided lots of challenges such as:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式带来了许多挑战，例如：
- en: Developers changing user interfaces, so the quality assurance team's automated
    tests broke as test engineers were not aware of the user interface changes
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员更改了用户界面，因此质量保证团队的自动化测试失败了，因为测试工程师未意识到用户界面发生了变化。
- en: Test engineers not understanding new features meaning appropriate tests weren't
    written to test functionality properly
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试工程师不了解新功能，导致没有编写适当的测试来正确地测试功能。
- en: Developers having to spend lots of time explaining how features worked to quality
    assurance testers so they could write tests post-commit
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员不得不花大量时间向质量保证测试人员解释功能是如何工作的，以便他们能够在提交后编写测试。
- en: Delays associated with fixing broken regression tests that were not down to
    bugs but test issues
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复断裂的回归测试时的延迟，这些问题并不是由错误导致的，而是测试本身的问题。
- en: Quality assurance teams were acting in a completely reactive fashion as they
    could not see what new developer changes were coming
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证团队以完全被动的方式行事，因为他们无法看到开发人员即将进行的更改。
- en: Quality assurance packs never passing, or being green, meant that actual software
    issues slipped through the process
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证包未通过测试，或者测试结果显示“通过”，意味着实际的软件问题会被漏掉。
- en: So, when considering network testing, the solution to this problem is not to
    hire a separate test team. Instead, it is about incorporating and integrating
    network testing into a Continuous Delivery model.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在考虑网络测试时，解决此问题的方法不是雇佣一个单独的测试团队。相反，它是将网络测试融入并整合到持续交付模型中。
- en: Agile development has shown that as code changes were being written, embedding
    quality assurance test engineers in the development team meant that tests could
    be written pre-commit. It is a far more productive method of working.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发表明，在编写代码更改的同时，将质量保证测试工程师嵌入到开发团队中意味着可以在提交前编写测试。这是一种更高效的工作方式。
- en: Moving quality assurance engineers out of the siloed quality assurance team
    and allowing them to work together in the same scrum team means that individuals
    that work together can collaborate and make sure that the submitted commit will
    work at every phase.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将质量保证工程师从孤立的质量保证团队中调出，并让他们与开发人员一起在同一个scrum团队中工作，这意味着团队成员可以协作，确保提交的变更在每个阶段都能正常工作。
- en: 'The associated regression, integration, or system tests then form a set of
    automated quality gates that the change will propagate through:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的回归测试、集成测试或系统测试将形成一组自动化的质量门控，变更将通过这些门控传播：
- en: '![Quality assurance best practices](img/B05559_08_10.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![质量保证最佳实践](img/B05559_08_10.jpg)'
- en: 'The main benefits of the agile testing approach over using a siloed waterfall
    approach is:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 相较于使用传统的瀑布式方法，敏捷测试方法的主要优势是：
- en: Quality assurance testers were no longer working reactively and have complete
    visibility of what developers are creating
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证测试人员不再被动工作，而是完全能看到开发人员正在创建的内容。
- en: Each agile user story could have proper acceptance criteria written that included
    automated testing, allowing quality assurance engineers to work on test tasks
    as developers code new features
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个敏捷用户故事可以编写适当的接受标准，其中包括自动化测试，允许质量保证工程师在开发人员编写新特性时进行测试任务。
- en: When new features were coded, relevant tests are written for a new feature
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新特性被编码时，相关的测试会为新特性编写
- en: New feature tests can be added to the regression pack, so that every time a
    code commit is made the feature is tested
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新特性测试可以添加到回归测试包中，以便每次代码提交时都会进行该特性测试。
- en: This process change removes the inhibitor, which is simply the team structure,
    and joins two teams together so they become more productive, which is in essence
    the DevOps way.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程变更消除了障碍，即团队结构，并将两个团队结合起来，使得它们变得更加高效，这本质上是DevOps方式。
- en: Creating testing feedback loops
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建测试反馈循环
- en: If we think back to the continuous integration process in [Chapter 7](ch07.html
    "Chapter 7. Using Continuous Integration Builds for Network Configuration"), *Using
    Continuous Integration Builds for Network Configuration*, then we had the commit
    process. The commit essentially starting the whole Continuous Delivery process.
    Once a commit has taken place, the change is already on the road to production.
    Any commit to the trunk/mainline/master branch is a final change, so if a network
    commit is made, it is already on its way to production.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾一下[第7章](ch07.html "第7章 使用持续集成构建进行网络配置")中的持续集成过程，*使用持续集成构建进行网络配置*，我们会发现有提交过程。提交基本上启动了整个持续交付过程。一旦提交发生，变更就已经开始进入生产流程。对主干/主线/主分支的任何提交都是最终变更，因此如果进行网络提交，它已经在向生产环境推进的过程中。
- en: If no validation engine or tests exist post check-in, then changes will flow
    all the way through test environments reaching production environments.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在检查后没有验证引擎或测试存在，那么变更会一直流经测试环境，直到到达生产环境。
- en: '![Creating testing feedback loops](img/B05559_08_11.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试反馈循环](img/B05559_08_11.jpg)'
- en: This means that utilizing feedback loops with proper test gates is essential,
    so once a code commit has taken place, it will be adequately tested and provide
    an immediate indicator that a change has failed. Once all the quality gates have
    completed successfully only then should the change be promoted to production,
    this model promotes continuous improvement and failing fast. The further to the
    left a change fails, the less cost it incurs to a business.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着利用具有适当测试门控的反馈循环至关重要，因此一旦代码提交发生，它将得到充分的测试，并提供即时指示，表明变更失败。一旦所有质量门控成功完成，变更才应该被提升到生产环境，这种模型促进了持续改进和快速失败。变更失败发生得越早，对业务的成本越低。
- en: Continuous integration testing
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成测试
- en: In [Chapter 7,](ch07.html "Chapter 7. Using Continuous Integration Builds for
    Network Configuration") *Using Continuous Integration Builds for Network Configuration*,
    we focused on the process of continuous integration and how multiple different
    checks can be applied as part of the validation engine for a user commit. This
    makes sure that the user commit is always properly validated.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章 使用持续集成构建进行网络配置")中，*使用持续集成构建进行网络配置*，我们重点讨论了持续集成的过程以及如何将多种不同的检查作为验证引擎的一部分应用于用户提交。这确保了用户提交始终得到正确验证。
- en: 'Continuous integration provides a set of feedback loops where a code commit
    is submitted to the SCM and the validation engine will return either a pass or
    a failure. All testing can form the validation engine for changes:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成提供了一套反馈循环，其中代码提交到SCM后，验证引擎将返回通过或失败的结果。所有测试都可以构成更改的验证引擎：
- en: '![Continuous integration testing](img/B05559_08_12.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![持续集成测试](img/B05559_08_12.jpg)'
- en: 'The continuous integration process when applied to development, takes the approach
    that all changes are committed to the **Trunk/Mainline/Master** branch:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当持续集成过程应用于开发时，采用的方式是将所有更改提交到**Trunk/Mainline/Master**分支：
- en: '![Continuous integration testing](img/B05559_08_13.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![持续集成测试](img/B05559_08_13.jpg)'
- en: 'The new development feature will be committed to the **Trunk/Mainline/Master**
    branch. This new commit will be compiled and be immediately integrated with the
    rest of the code base, and then subsequent unit tests will then be executed to
    determine a pass or failure against the build binaries, as shown in the following
    diagram:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 新的开发功能将提交到**Trunk/Mainline/Master**分支。这个新的提交将被编译并立即与其他代码库集成，随后将执行单元测试，以检查构建二进制文件是否通过，如下图所示：
- en: '![Continuous integration testing](img/B05559_08_14.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![持续集成测试](img/B05559_08_14.jpg)'
- en: Using the commit to **Trunk/Mainline/Master** continuous integration approach
    relies on a degree of discipline from teams. If a commit fails and the **CI Build
    Server** returns a failed build, then the team member that made the failed commit
    has a duty to fix the build immediately, by either reverting or fixing the broken
    commit.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提交到**Trunk/Mainline/Master**的持续集成方法依赖于团队的纪律性。如果提交失败，且**CI构建服务器**返回构建失败，那么做出失败提交的团队成员有责任立即修复构建，方法是回滚或修复破坏的提交。
- en: Continuous integration builds should under no circumstances ever be left in
    a failed state as it means the **Trunk/Mainline/Master** is not in a clean state
    and all subsequent code commits will not have valid continuous integration performed
    until the build is fixed. This slows down a team's productivity so continuous
    integration is a collaborative process and failure should be seen as a learning
    opportunity.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，持续集成构建都不应处于失败状态，因为这意味着**Trunk/Mainline/Master**分支不处于干净状态，所有后续的代码提交将在构建修复之前无法进行有效的持续集成。这会减慢团队的生产力，因此持续集成是一个协作过程，失败应该视为一个学习的机会。
- en: Gated builds on branches
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分支上的门控构建
- en: Another popular method is using **feature branches** and **gated builds**. Every
    time a developer makes a change, they will raise a merge request which will be
    peer-reviewed by other members of the team and then subsequently merged.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种流行的方法是使用**功能分支**和**门控构建**。每当开发人员进行更改时，他们将提出一个合并请求，该请求将由团队的其他成员进行同行评审，然后再合并。
- en: Each merge request, when accepted, will start the merge process, but as part
    of the merge process something known as a gated build will execute.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 每当合并请求被接受时，它将启动合并过程，但作为合并过程的一部分，将执行一个称为门控构建（gated build）的过程。
- en: '![Gated builds on branches](img/B05559_08_15.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![分支上的门控构建](img/B05559_08_15.jpg)'
- en: A gated build will be invoked when a merge occurs prior to integration with
    the **Trunk/Mainline/Master**. It will run the equivalent of a continuous integration
    build as a pre-commit, but only if the build and unit testing associated with
    the pre-commit build passes, will the contents of the merge request be merged
    to the **Trunk/Mainline/Master** branch.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在合并发生之前，会调用门控构建过程，并与**Trunk/Mainline/Master**集成。它将作为预提交运行等同于持续集成构建的过程，但只有在预提交构建的构建和单元测试通过时，合并请求的内容才会合并到**Trunk/Mainline/Master**分支。
- en: The gated build process means that the **Trunk/Mainline/Master** branch is always
    kept completely clean and functional. Where pure continuous integration can have
    developers break the continuous integration build, gated builds prevent this from
    happening, as long as the tests are good.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 门控构建过程意味着**Trunk/Mainline/Master**分支始终保持完全干净和功能正常。纯粹的持续集成可能会让开发人员破坏持续集成构建，而门控构建通过确保测试通过来防止这种情况发生。
- en: Applying quality assurance best practices to networking
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将质量保证最佳实践应用于网络
- en: Network teams can greatly benefit from adopting some of the best practices and
    tried and tested methodologies that have been implemented to test development
    or infrastructure changes.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 网络团队可以通过采用一些最佳实践和经过验证的测试方法，极大地受益于测试开发或基础设施更改。
- en: Quality assurance is all about principles and processes, so test methodologies
    are fairly agnostic and the tools used to implement the process come secondary.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 质量保证完全关乎原则和流程，因此测试方法论是相对中立的，实施这些流程的工具是次要的。
- en: When teams are working within a Continuous Delivery model, any changes to network
    devices, load balancers, or even SDN controllers should be defined in source control
    using orchestration and configuration management tools such as Ansible.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队在持续交付模型中工作时，对网络设备、负载均衡器，甚至是 SDN 控制器的任何变更都应该使用源代码管理工具定义，并通过像 Ansible 这样的编排和配置管理工具来进行。
- en: 'In a Continuous Delivery model, network changes need to propagate through environments
    and at all times be governed by source control management systems, with the state
    of the SCM system being the state of the network:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续交付模型中，网络变更需要通过环境进行传播，并始终受到源代码管理系统的控制，源代码管理系统的状态就是网络的状态：
- en: '![Applying quality assurance best practices to networking](img/B05559_08_16.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![将质量保证最佳实践应用于网络](img/B05559_08_16.jpg)'
- en: Network changes can be treated much like code changes and adequate testing could
    be created as a network team initiative or by collaborating with the quality assurance
    team. The type of testing at each phase may vary slightly from the set of tests
    that a development or infrastructure team would run as part of their deployment
    pipeline.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 网络变更可以像代码变更一样处理，充分的测试可以作为网络团队的倡议创建，或通过与质量保证团队的合作来完成。每个阶段的测试类型可能与开发或基础设施团队在部署管道中运行的测试集略有不同。
- en: However, equivalent network-specific testing can be derived to create a set
    of robust tests that network changes have to traverse before being deployed to
    production by associating particular network tests with each quality gate on the
    deployment pipeline.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可以衍生出等效的网络特定测试，创建一套健全的测试，确保网络变更在部署到生产环境之前必须通过每个质量门控，通过将特定的网络测试与部署管道中的每个质量门控关联。
- en: Network teams, such as development and infrastructure teams need to create a
    set of feedback loops to govern network changes, so that different test categories
    can be executed in the deployment pipeline.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 网络团队，如开发和基础设施团队，需要创建一套反馈循环来管理网络变更，以便在部署管道中执行不同类别的测试。
- en: 'All testing should ideally be automated as part of each network change, in
    a proactive manner and written at the same time as the network change is being
    lined up. This then allows network changes to be tested in an automated manner
    at the point of inception:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试应理想地作为每个网络变更的一部分自动化，以一种主动的方式进行，并在网络变更排定时同时编写。这将使网络变更在开始时就可以以自动化的方式进行测试：
- en: '![Applying quality assurance best practices to networking](img/B05559_08_17.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![将质量保证最佳实践应用于网络](img/B05559_08_17.jpg)'
- en: When setting up continuous integration, selecting either continuous integration
    or a gated build strategy is down to the preference of the network team or engineers
    that commit changes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置持续集成时，选择持续集成或受限构建策略取决于网络团队或提交变更的工程师的偏好。
- en: Unit testing should be integrated with the network continuous integration process.
    A network operator will first check in a code change or change the state of the
    network.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试应该与网络持续集成过程集成。网络操作员首先会提交代码变更或更改网络状态。
- en: The **CI Build Server** will check the Ansible `var` YAML files using Lint,
    which will make sure that the YAML files are valid syntax.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI 构建服务器**将使用 Lint 检查 Ansible `var` YAML 文件，确保 YAML 文件的语法有效。'
- en: If valid, the same playbook that would be executed on any downstream environment
    will be executed against a CI test environment to make sure the playbook is successful
    in terms of syntax and execution.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有效，则将在任何下游环境中执行的相同 playbook 会在 CI 测试环境中执行，以确保 playbook 在语法和执行方面成功。
- en: 'Finally, a set of unit tests will be executed against the environment to validate
    its functional and desired state of the environment after the playbook has been
    executed:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一组单元测试将在环境中执行，以验证在执行完 playbook 后，环境的功能和期望状态。
- en: '![Applying quality assurance best practices to networking](img/B05559_08_18.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![将质量保证最佳实践应用于网络](img/B05559_08_18.jpg)'
- en: The important thing to note is that unit tests are executed as part of the continuous
    integration process and that these tests can either be part of the merge request
    validation or executed on commit to the **Trunk/Mainline/Master** branch.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Assigning network testing to quality gates
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When looking at what type of testing network teams can carry out to validate
    network changes, they can be broken into different test categories and assigned
    to different quality gates.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main test environments covered in this chapter are:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Unit test
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration test
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System test
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before considering where to put tests, we should first look at the network team's
    needs. With a blank canvas what would be a beneficial set of tests that could
    help with network operations?
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the following tests spring to mind, but any check or validation that
    is valid to a particular team is applicable and should be included:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Network checklist that network engineers carry out manually when making changes
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing against network automation to make sure the network device is in
    the desired state
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing performance of the network to see what the desired throughput is and
    test when parts of the network become oversubscribed and need to be scaled out
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing failover of network devices
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing network code quality
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing different user journeys through the network
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Quality of Services
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these types of tests can then be assigned to particular test environments
    and quality gates created:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![Assigning network testing to quality gates](img/B05559_08_19.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: Available test tools
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test tools, like all tools, should be used to facilitate test processes and
    outcomes. So. for every single test quality gate, tools are required to wrap processes,
    schedule, and execute tests.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: There are various test tools available on the market today that network engineers
    could greatly benefit from using.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing tools
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Network unit testing as said many times before will form part of the continuous
    integration build process and scheduled by a continuous integration build server.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: One open source tool that can help with unit testing network changes is Test
    Kitchen. **Test Kitchen** is a unit testing tool which utilizes the Busser framework
    and can be used to carry out infrastructure testing. Test Kitchen supports many
    test frameworks such as **Bats** and **RSpec**.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Test Kitchens Busser** framework is comprised of the following architectural
    components:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Driver
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioner
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suites
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Kitchen defines all its plugins using a `kitchen.yml` file, which outlines
    the Driver, Provisioner, Platform, and Suites to use for the testing.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: A **Driver** can be any platform that can be used to provision a virtual machine
    or container. Test Kitchen has support for Vagrant, Amazon, OpenStack, and Docker,
    and so can be used to test infrastructure changes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: A **Provisioner** is a configuration management tool such as Ansible, Chef,
    Puppet, or Salt and is used to configure the server into the state that needs
    to be tested.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**Provisioner**是一种配置管理工具，如Ansible、Chef、Puppet或Salt，用于将服务器配置为需要测试的状态。'
- en: The **Platform** is the operating system that the Provisioner will execute on.
    Multiple Platforms can be specified for cross-operating system testing. This could
    be very useful when testing new versions of network operating systems operate
    in the same way as their predecessors when doing software upgrades.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**Platform**是Provisioner将执行操作的操作系统。可以为跨操作系统测试指定多个平台。当测试新版本的网络操作系统时，这非常有用，能够确保在进行软件升级时，这些操作系统的行为与前一版本相同。'
- en: '**Suites** are used to create a test suite in combination with the Platform
    definition, so if two different Platforms are defined, then unit tests will be
    executed against each different platform in a consistent manner.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**Suites**用于与Platform定义一起创建测试套件，因此如果定义了两个不同的平台，单元测试将以一致的方式在每个平台上执行。'
- en: Test Kitchen example using OpenStack
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用OpenStack的Test Kitchen示例
- en: 'The `test kitchen` gem will need to be pre-installed on the Ansible controller
    host. Then perform the following steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`test kitchen` gem需要预先安装在Ansible控制主机上。然后执行以下步骤：'
- en: From an Ansible controller node, in the folder containing the top player file
    structure, as shown in the following screenshot:![Test Kitchen example using OpenStack](img/B05559_08_20.jpg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ansible控制节点中，进入包含顶级播放器文件结构的文件夹，如下图所示：![使用OpenStack的Test Kitchen示例](img/B05559_08_20.jpg)
- en: 'Here, execute the following command:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，执行以下命令：
- en: '[PRE0]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This creates a `kitchen.yml` file and a test subdirectory.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个`kitchen.yml`文件和一个测试子目录。
- en: 'Next, the `folder test` folder needs to be created which will store the unit
    tests:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，需要创建`folder test`文件夹，该文件夹将存储单元测试：
- en: '[PRE1]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `test kitchen` file will then need to be populated with the Driver, Platform,
    Provisioner, and Suites.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，需要将`test kitchen`文件填充上Driver、Platform、Provisioner和Suites。
- en: 'In the following example:'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下示例中：
- en: The Driver is specified as OpenStack, with a `cumulus-vx` image and Platform
    being created.
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Driver被指定为OpenStack，使用`cumulus-vx`镜像，并创建Platform。
- en: The size of the image is `m1.large` which specifies the CPU, RAM, and disk for
    the server.
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像的大小为`m1.large`，这指定了服务器的CPU、内存和磁盘。
- en: The instance will be created within the `network_team` tenant and `qa` availability
    zone.
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例将在`network_team`租户和`qa`可用区域中创建。
- en: 'Once spun up, the `configure_device.yml` playbook will be executed to configure
    the network device before the default folder under `test/integration` which was
    defined in step 2\. This tells Test Kitchen the location of the Bats tests that
    will be executed to test the state of the device:'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦启动，`configure_device.yml` playbook将被执行，以在第2步中定义的`test/integration`下的默认文件夹中配置网络设备。这告诉Test
    Kitchen执行的Bats测试的位置，用于测试设备的状态：
- en: '![Test Kitchen example using OpenStack](img/B05559_08_21.jpg)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用OpenStack的Test Kitchen示例](img/B05559_08_21.jpg)'
- en: 'Each test can be given a unique name and the `.bats` file extension to define
    each unit test under the `bats` directory that was created in step 2:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个测试可以被赋予一个唯一的名称，并使用`.bats`文件扩展名，在第2步中创建的`bats`目录下定义每个单元测试：
- en: '[PRE2]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: An example of a test that can be written using Bats is as follows:![Test Kitchen
    example using OpenStack](img/B05559_08_22.jpg)
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Bats编写的测试示例如下：![使用OpenStack的Test Kitchen示例](img/B05559_08_22.jpg)
- en: This checks that the `eth0` interface is in a good working state when executed.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这检查`eth0`接口在执行时是否处于良好的工作状态。
- en: Finally, to execute `test kitchen`, execute the command shown in the following
    screenshot:![Test Kitchen example using OpenStack](img/B05559_08_23.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，要执行`test kitchen`，请输入以下截图中所示的命令：![使用OpenStack的Test Kitchen示例](img/B05559_08_23.jpg)
- en: 'Test Kitchen will then carry out the following workflow:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Test Kitchen将执行以下工作流：
- en: Create instance in OpenStack.
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在OpenStack中创建实例。
- en: Run playbook.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行playbook。
- en: Install Busser plugin.
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Busser插件。
- en: Run unit tests.
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元测试。
- en: Destroy instance if all tests passed.
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有测试通过，则销毁实例。
- en: Network checklist
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络检查清单
- en: Network engineers, as discussed, often have a set of manual checklists that
    they use to validate if a network change has been successful or not.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，网络工程师通常会有一套手动检查清单，用来验证网络变更是否成功。
- en: Sometimes, this could involve validating whether a user interface has the desired
    configuration that checks if the automation has worked as desired.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这可能涉及验证用户界面是否具有所需的配置，检查自动化是否按预期工作。
- en: Instead of doing these checks manually, Selenium can be used to carry out graphical
    user interface checks.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 与其手动进行这些检查，不如使用 Selenium 执行图形用户界面检查。
- en: 'Selenium''s workflow can be summarized as test scripts invoking the Selenium
    web driver which then creates a browser session to test a website or web page:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 的工作流程可以总结为测试脚本调用 Selenium WebDriver，然后创建浏览器会话以测试网站或网页：
- en: '![Network checklist](img/B05559_08_24.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![网络检查清单](img/B05559_08_24.jpg)'
- en: Test scripts can be written in multiple languages such as Java, Python, or Ruby.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 测试脚本可以用多种语言编写，如 Java、Python 或 Ruby。
- en: Selenium can be installed in Python form by doing a pip install when using Python
    for authoring scripts.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Python 编写脚本时，可以通过执行 pip install 来安装 Selenium 的 Python 版本。
- en: As Selenium is browser-based, it works with multiple browsers such as Internet
    Explorer, Firefox, Chrome, and Safari and tests cross-browser support.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Selenium 是基于浏览器的，它与多个浏览器兼容，如 Internet Explorer、Firefox、Chrome 和 Safari，并进行跨浏览器支持测试。
- en: 'A Selenium test sample is shown in the following screenshot; this script will
    launch [google.co.uk](http://google.co.uk) in Chrome, type `DevOps For Networking`
    and finally click the **Search** button on Google:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了一个 Selenium 测试示例；该脚本将在 Chrome 中启动 [google.co.uk](http://google.co.uk)，输入`DevOps
    For Networking`，然后点击 Google 上的**搜索**按钮：
- en: '![Network checklist](img/B05559_08_25.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![网络检查清单](img/B05559_08_25.jpg)'
- en: So, any graphical interface can be screen scraped such as a load balancer or
    network device interface to assert that the correct information has been entered
    and returned. This can also be useful if older network devices don't have an API.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，任何图形界面都可以进行屏幕抓取，例如负载均衡器或网络设备接口，以确认已输入并返回了正确的信息。如果旧的网络设备没有 API，这也会很有用。
- en: Network user journey
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络用户旅程
- en: A good test methodology is to test user journeys throughout the network. This
    can be done by doing point-to-point testing in the network.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 一种好的测试方法是测试整个网络中的用户旅程。这可以通过在网络中进行点对点测试来实现。
- en: A good example of network user journeys may be testing **Equal Cost Multipath**
    (**ECMP**) on Leaf-Spine architecture to make sure it is performing as desired.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一个网络用户旅程的好例子是测试**等成本多路径**（**ECMP**）在叶脊架构中的应用，以确保其按预期执行。
- en: Another test may be setting up point-to-point tests across data centers to make
    sure links are performing as desired and do not suddenly depreciate.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个测试可能是设置跨数据中心的点对点测试，以确保链路按预期工作，并且不会突然降级。
- en: Setting up user journey testing means that if a baseline performance drops,
    then it can be tracked back to specific network changes as part of the network
    deployment pipeline. This is done in much the same way as baselining application
    performance and making sure a new release doesn't cause a drop in performance
    that will impact end users.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用户旅程测试意味着如果基线性能下降，则可以追溯到特定的网络变化，作为网络部署管道的一部分。这与应用程序性能基准测试非常相似，并确保新版本不会导致性能下降，从而影响最终用户。
- en: Network user journey testing mean that if an ill-performing path through the
    network is found, then it can be localized and fixed quickly so it improves mean
    time to resolution when issues occur. Network engineers can use a tool such as
    **iPerf** to send large amounts of packets through points in the network. This
    can be useful to see where the bottlenecks are in the network and make sure the
    performance is as desired.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 网络用户旅程测试意味着如果在网络中发现性能不佳的路径，则可以快速定位并修复，从而提高问题发生时的平均解决时间。网络工程师可以使用像**iPerf**这样的工具，通过网络中的各个节点发送大量数据包。这可以帮助识别网络中的瓶颈，确保性能符合预期。
- en: Quality of Service
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务质量
- en: A lot of network tools now offer **Quality of Service** (**QoS**), which allows
    network operators to limit the amount of network bandwidth that particular tenants
    utilize in a network.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在许多网络工具提供**服务质量**（**QoS**），它允许网络运营商限制特定租户在网络中使用的带宽量。
- en: This prevents noisy test environments from impacting a production environment.
    This is possible as network devices can set guarantees on performance on particular
    tenant networks. This means that certain application workloads are always guaranteed
    a certain network throughput, while other less crucial tenant networks can be
    capped at peak times.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以防止嘈杂的测试环境影响生产环境。由于网络设备可以为特定租户网络设定性能保证，因此这一点是可能的。这意味着某些应用程序工作负载总能保证一定的网络吞吐量，而其他不太重要的租户网络则可以在高峰期受到限制。
- en: 'Different thresholds and alerting can be set up on network devices and faults
    in network hardware can be detected if the QoS drops at a random time. It also
    guards network engineers against the age-old: *I think we have a network problem*.
    Instead they can prove it is an application issue, as the network service is stable
    and performing as desired and can be easily displayed.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在网络设备上设置不同的阈值和告警，并且如果 QoS 在随机时刻下降，则可以检测到网络硬件故障。这还可以帮助网络工程师避免陷入老生常谈的：“*我觉得我们有网络问题*”。相反，他们可以证明问题是应用程序的问题，因为网络服务稳定且按预期运行，并且可以轻松显示。
- en: It is good to simulate and test QoS away from production environments and have
    network teams come up with different scenarios to design the best fit for the
    network, based on the applications that they are hosting.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在生产环境之外模拟和测试 QoS，并让网络团队提出不同的场景，设计最适合网络的方案，基于他们所托管的应用程序。
- en: Failover testing
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障转移测试
- en: '**Failover testing** should ideally be tested regularly by network teams, as
    modern networks should be disaster recovery-aware and designed for failure.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**故障转移测试** 应该由网络团队定期进行测试，因为现代网络应该具备灾难恢复意识，并设计为可以容忍故障。'
- en: Network failover tests can be simulated by writing an Ansible playbook or role
    that disables a service or reboots a switch to make sure that the system adequately
    fails over.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 网络故障转移测试可以通过编写 Ansible 剧本或角色来模拟，禁用某个服务或重启交换机，确保系统能够适当地进行故障转移。
- en: 'Utilizing `delegate_to: localhost`, API commands can be issued to network devices
    such as switches to disable them programmatically using the API. Alternatively,
    Ansible can SSH onto a network device''s operating system and issue an impromptu
    hard reboot.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 `delegate_to: localhost`，可以通过 API 向网络设备（如交换机）发出命令，使用 API 程序化地禁用它们。或者，Ansible
    可以 SSH 连接到网络设备的操作系统，并发出临时的强制重启命令。'
- en: Supplementary monitoring should be set up while doing failover testing to make
    sure the network does not drop packets and test the speed at which the network
    device fails over after the initial primary device is disabled.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行故障转移测试时，应设置补充监控，以确保网络不会丢包，并测试在初始主设备禁用后，网络设备故障转移的速度。
- en: Network code quality tooling
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络代码质量工具
- en: When defining the desired state of the network as code, make sure the Python
    code that is written to create Ansible modules, as well as any other code that
    is used is of a high standard and good quality.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义网络的期望状态时，请确保编写的 Python 代码以及使用的任何其他代码都具有高标准和良好的质量，以便创建 Ansible 模块。
- en: '**SonarQube** is an open source code quality tool which allows teams to analyze
    their codes quality. Its architecture is comprised of three main components:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**SonarQube** 是一款开源的代码质量工具，允许团队分析其代码质量。它的架构由三个主要组件组成：'
- en: SonarQube Runner
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SonarQube Runner
- en: SonarQube database
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SonarQube 数据库
- en: SonarQube web interface
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SonarQube 网络界面
- en: Sonar has a range of plug-ins that can be configured to provide unit test reporting,
    code coverage, or code quality rules and can be set-up for any language be it
    Python, Java, or C#.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Sonar 提供了一系列插件，可以配置用于提供单元测试报告、代码覆盖率或代码质量规则，并且可以为任何语言（如 Python、Java 或 C#）进行设置。
- en: SonarQube will snapshot a code repository every time it is run and store the
    history of a project in terms of code quality. This can be trended over time showing
    quality improvements or drops in the code quality. Sonar can be used to define
    specific best practice or rules, which show up as violations when broken by commits.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube 会在每次运行时拍摄代码仓库的快照，并存储项目在代码质量方面的历史。这些数据可以随着时间推移显示代码质量的提升或下降。Sonar 可以用来定义特定的最佳实践或规则，当提交违反这些规则时，会显示为违规。
- en: The **SonarQube Runner** uses a `sonar.properties` file at runtime that can
    be included as part of the source control management system. This can be pulled
    down as part of the continuous integration process. This means that after a new
    code commit on a custom Ansible module the SonarQube Runner can be executed against
    the code to test the new commit and see the impact.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**SonarQube Runner** 在运行时使用 `sonar.properties` 文件，该文件可以作为源代码管理系统的一部分进行包含。这个文件可以在持续集成过程中被拉取下来。这意味着在自定义
    Ansible 模块进行新代码提交后，可以执行 SonarQube Runner 对代码进行测试，检查新提交的代码并查看其影响。'
- en: The SonarQube Runner will execute a code quality check using one of the plug-ins
    stipulated in the `sonar.properties` file. In the case of a new or changed Ansible
    module that will invoke the Python-specific group of code quality tests. Information
    will subsequently be displayed on the Sonar web-interface once the analysis is
    complete.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube Runner将使用`sonar.properties`文件中规定的插件执行代码质量检查。在新或更改的Ansible模块的情况下，将调用特定于Python的代码质量测试组。分析完成后，信息将显示在Sonar的Web界面上。
- en: 'The workflow for this process is shown in the following screenshot with the
    SonarQube Runner triggering the whole process:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程的工作流程如下面的截图所示，SonarQube Runner触发整个过程：
- en: '![Network code quality tooling](img/B05559_08_26.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![网络代码质量工具](img/B05559_08_26.jpg)'
- en: 'An example of the sonar Python SonarQube project dashboard is shown in the
    following screenshot, outlining the bugs, vulnerabilities, and tech debt to fix
    all the issues in the code:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了SonarQube Python项目仪表板的一个例子，概述了代码中需要修复的漏洞、缺陷和技术债务：
- en: '![Network code quality tooling](img/B05559_08_27.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![网络代码质量工具](img/B05559_08_27.jpg)'
- en: Tracking code quality and metrics is very important when implementing a continuous
    improvement model in any company. So adequately measuring and analyzing where
    improvements can be made in the code that drives all processes is important in
    order to have engineers engage and write tests.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何公司实施持续改进模型时，跟踪代码质量和指标非常重要。因此，适当地衡量和分析代码中可以改进的地方，对于让工程师参与并编写测试至关重要。
- en: Summary
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have looked at why testing network changes are necessary.
    We focused on the benefits of utilizing feedback loops to continuously improve
    network operations. We then explored some of the challenges associated with the
    way network teams approach network changes and testing and how they will need
    to adapt and adopt quality assurance best practices to keep up when companies
    are running a Continuous Delivery model supplemented by a DevOps methodology.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们探讨了为什么测试网络更改是必要的。我们重点讲解了利用反馈循环持续改进网络操作的好处。接着，我们研究了网络团队在进行网络更改和测试时面临的一些挑战，以及他们如何需要适应并采纳质量保证最佳实践，以便在公司运行持续交付模型并辅以DevOps方法时保持竞争力。
- en: We then looked at how network teams could set up quality gates for testing and
    looked at some of the tests that could be mapped at each stage of testing. Finally
    we looked at some available tools that could be used to carry out network testing
    to implement unit testing, check-lists, and code quality checks.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们探讨了网络团队如何为测试设置质量门，并查看了每个测试阶段可以映射的一些测试。最后，我们研究了一些可用于进行网络测试的工具，以实现单元测试、检查清单和代码质量检查。
- en: In this chapter you have learned about different types of test strategies such
    as unit, component, integration, performance, system, and user acceptance testing.
    Key takeaways also include quality assurance best practices, and why they are
    applicable to networking and different types of network validations that could
    help assert automated network changes.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了不同类型的测试策略，如单元测试、组件测试、集成测试、性能测试、系统测试和用户验收测试。关键要点还包括质量保证最佳实践，以及它们为何适用于网络，以及可以帮助确认自动化网络更改的不同类型的网络验证。
- en: This chapter has also delved into test tools that can be used to help test networking
    such as Test Kitchen ([http://kitchen.ci/](http://kitchen.ci/)), SonarQube ([http://www.sonarqube.org/](http://www.sonarqube.org/)),
    and iPerf ([https://iperf.fr/](https://iperf.fr/)).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还深入探讨了可以帮助测试网络的测试工具，如Test Kitchen（[http://kitchen.ci/](http://kitchen.ci/)）、SonarQube（[http://www.sonarqube.org/](http://www.sonarqube.org/)）和iPerf（[https://iperf.fr/](https://iperf.fr/)）。
- en: In the next chapter we will focus on deployment pipelines, look at the tooling
    that can be used to automatically deploy network changes. We will also look at
    the difference between Continuous Delivery and deployment and when each approach
    should be implemented.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重点关注部署管道，了解可以用来自动部署网络更改的工具。我们还将探讨持续交付和部署之间的差异，以及何时应采用每种方法。
- en: 'The following blogs and presentations may be useful for further understanding
    microservice test strategies in more detail:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 以下博客和演示可能有助于进一步详细了解微服务测试策略：
- en: '[http://martinfowler.com/articles/microservice-testing/](http://martinfowler.com/articles/microservice-testing/)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://martinfowler.com/articles/microservice-testing/](http://martinfowler.com/articles/microservice-testing/)'
- en: '[https://www.youtube.com/watch?v=FotoHYyY8Bo](https://www.youtube.com/watch?v=FotoHYyY8Bo)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/watch?v=FotoHYyY8Bo](https://www.youtube.com/watch?v=FotoHYyY8Bo)'
