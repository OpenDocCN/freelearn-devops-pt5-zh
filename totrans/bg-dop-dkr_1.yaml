- en: Chapter 1. Images and Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 镜像与容器
- en: This lesson will cover fundamental concepts about containerization as a foundation
    for the images and containers we will later build. We will also get to understand
    how and why Docker gets involved in the DevOps ecosystem. Before we begin, we
    will see how virtualization differs from containerization in Docker.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程将涵盖有关容器化的基本概念，为我们后续构建的镜像和容器打下基础。我们还将了解 Docker 如何以及为何参与 DevOps 生态系统。在开始之前，我们将了解虚拟化与
    Docker 中容器化的区别。
- en: Lesson Objectives
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程目标
- en: 'By the end of this lesson, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程结束时，您将能够：
- en: Describe how Docker improves a DevOps workflow
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Docker 如何改善 DevOps 工作流
- en: Interpret Dockerfile syntax
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析 Dockerfile 语法
- en: Build images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建镜像
- en: Set up containers and images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置容器和镜像
- en: Set up a local dynamic environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置本地动态环境
- en: Run applications in Docker containers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker 容器中运行应用程序
- en: Obtain a basic overview of how Docker manages images via Docker Hub
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取关于如何通过 Docker Hub 管理镜像的基本概述
- en: Deploy a Docker image to Docker Hub
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Docker 镜像部署到 Docker Hub
- en: Virtualization versus Containerization
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化与容器化
- en: 'This block diagram gives an overview of a typical virtual machine setup:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个框图概述了典型的虚拟机设置：
- en: '![Virtualization versus Containerization](img/image01_01a.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![虚拟化与容器化](img/image01_01a.jpg)'
- en: In virtual machines, the physical hardware is abstracted, therefore we have
    many servers running on one server. A hypervisor helps do this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机中，物理硬件被抽象化，因此我们可以在一台服务器上运行多个服务器。一个虚拟机监控程序（Hypervisor）帮助实现这一点。
- en: 'Virtual machines do sometimes take time to start up and are expensive in capacity
    (they can be GBs in size), although the greatest advantage they have over containers
    is the ability to run different Linux distributions such as CentOS instead of
    just Ubuntu:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机有时需要一些时间启动，并且在容量上比较昂贵（它们的大小可以达到 GB 级别），尽管它们相对于容器的最大优势是能够运行不同的 Linux 发行版，如
    CentOS，而不仅仅是 Ubuntu：
- en: '![Virtualization versus Containerization](img/image01_02a.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![虚拟化与容器化](img/image01_02a.jpg)'
- en: In containerization, it is only the app layer (where code and dependencies are
    packaged) that is abstracted, making it possible for many containers to run on
    the same OS kernel but on separate user space.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器化中，只有应用层（即代码和依赖项打包的地方）被抽象化，这使得多个容器可以在相同的操作系统内核上运行，但在独立的用户空间中。
- en: Containers use less space and boot fast. This makes development easier, since
    you can delete and start up containers on the fly without considering how much
    server or developer working space you have.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 容器使用更少的空间并且启动速度快。这使得开发变得更容易，因为您可以快速删除和启动容器，而无需考虑服务器或开发人员工作空间的大小。
- en: Let's begin the lesson with a quick overview on how Docker comes into play in
    a DevOps workflow and the Docker environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过简要概述 Docker 在 DevOps 工作流和 Docker 环境中的作用来开始本课程。
- en: How Docker Improves a DevOps Workflow
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 如何改善 DevOps 工作流
- en: DevOps is a mindset, a culture, and a way of thinking. The ultimate goal is
    to always improve and automate processes as much as possible. In layman language,
    DevOps requires one to think in the laziest point of view, which puts most, if
    not all, processes as automatic as possible.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是一种思维方式，一种文化，以及一种思考方式。最终目标是尽可能地提高和自动化流程。用通俗的话来说，DevOps 要求人们从最懒的角度思考，将大部分，甚至是所有流程尽可能自动化。
- en: Docker is an open source containerization platform that improves the shipping
    process of a development life cycle. Note it is neither a replacement for the
    already existing platforms nor does the organization want it to be.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一个开源容器化平台，改善了开发生命周期中软件交付的过程。请注意，它既不是现有平台的替代品，也不是组织希望它成为替代品。
- en: Docker abstracts the complexity of configuration management like Puppet. With
    this kind of setup, shell scripts become unnecessary. Docker can also be used
    on small or large deployments, from a hello world application to a full-fledged
    production server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 抽象了配置管理的复杂性，类似于 Puppet。通过这种设置，shell 脚本变得不再必要。Docker 还可以在小型或大型部署中使用，从一个简单的
    Hello World 应用到一个完整的生产服务器。
- en: As a developer on different levels, whether beginner or expert, you may have
    used Docker and you didn't even realize it. If you have set up a continuous integration
    pipeline to run your tests online, most servers use Docker to build and run your
    tests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为不同级别的开发者，无论是初学者还是专家，您可能已经使用过 Docker，而您可能并没有意识到。如果您已经设置了一个持续集成管道来在线运行测试，大多数服务器都使用
    Docker 来构建和运行您的测试。
- en: 'Docker has gained a lot of support in the tech community because of its agility
    and, as such, a lot of organizations are running containers for their services.
    Such organizations include the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Docker 的灵活性，它在技术社区中获得了广泛支持，因此许多组织开始为其服务运行容器。这些组织包括以下几家：
- en: Continuous integration and continuous delivery platforms such as Circle CI,
    Travis CI, and Codeship
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成和持续交付平台，如 Circle CI、Travis CI 和 Codeship
- en: Cloud platforms such as **Amazon Web Services** **(AWS)** and **Google Cloud
    Platform** **(GCP)** allow developers to run applications out of containers
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云平台如 **Amazon Web Services** **(AWS)** 和 **Google Cloud Platform** **(GCP)**
    允许开发者从容器中运行应用程序
- en: Cisco and the Alibaba group also run some of their services in containers
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思科和阿里巴巴集团也在容器中运行他们的一些服务
- en: 'Docker''s place in the DevOps workflow involves, but is not limited to, the
    following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在 DevOps 工作流中的作用包括但不限于以下几点：
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Examples of Docker's use cases in a development workflow.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在开发工作流中的应用案例示例。
- en: Unifying requirements refers to using a single configuration file. Docker abstracts
    and limits requirements to a single Dockerfile file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 统一需求意味着使用单一配置文件。Docker 将需求抽象化并限制为一个 Dockerfile 文件。
- en: Abstraction of OS means one doesn't need to worry about building the OS because
    there exist prebuilt images.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统的抽象意味着我们不需要担心构建操作系统，因为已经存在预构建的镜像。
- en: Velocity has to define a Dockerfile and build containers to test in, or use
    an already built image without writing a Dockerfile.Docker allows development
    teams to avoid investment on steep learning curves through shell scripts because
    "automation tool X" is too complicated.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Velocity 必须定义一个 Dockerfile 并构建容器进行测试，或者直接使用已经构建好的镜像，而无需编写 Dockerfile。Docker
    使开发团队能够避免因为“自动化工具 X”过于复杂而需要投入大量学习曲线的成本。
- en: Recap of the Docker Environment
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 环境回顾
- en: We walked through the fundamentals of containerization earlier. Allow me to
    emphasize the alternative workflow that Docker brings to us.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经介绍了容器化的基本概念。让我再强调一下 Docker 为我们带来的替代工作流。
- en: 'Normally, we have two pieces to a working application: the project code base
    and the provisioning script. The code base is the application code. It is managed
    by version control and hosted in GitHub, among other platforms.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们有两个组成部分来构建一个有效的应用程序：项目代码库和配置脚本。代码库是应用程序代码，它由版本控制管理，并托管在 GitHub 等平台上。
- en: The provisioning script could be a simple shell script to be run in a host machine,
    which could be anywhere from a Windows workstation to a fully dedicated server
    in the cloud.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 配置脚本可以是一个简单的 shell 脚本，在主机机器上运行，该机器可以是从 Windows 工作站到云中的完全专用服务器的任何地方。
- en: 'Using Docker does not interfere with the project code base, but innovates on
    the provisioning aspect, improving the workflow and delivery velocity. This is
    a sample setup of how Docker implements this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 并不会干扰项目代码库，而是在配置方面进行创新，改善工作流和交付速度。以下是 Docker 如何实现这一点的示例设置：
- en: '![Recap of the Docker Environment](img/image01_03a.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Docker 环境回顾](img/image01_03a.jpg)'
- en: The **Dockerfile** takes the place of the provisioning script. The two combined
    (project code and Dockerfile) make a **Docker image.** A Docker image can be run
    as an application. This running application sourced from a Docker image is called
    a **Docker container.**
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dockerfile** 取代了配置脚本。两者结合（项目代码和 Dockerfile）构成了 **Docker 镜像**。一个 Docker 镜像可以作为一个应用程序运行。这个从
    Docker 镜像启动的运行应用程序被称为 **Docker 容器**。'
- en: The Docker container allows us to run the application in a completely new environment
    on our computers, which is completely disposable. What does this mean?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器允许我们在计算机上运行应用程序，且该环境是完全新的、一次性的。这意味着什么呢？
- en: It means that we are able to declare and run Linux or any other operating system
    on our computers and then, run our application in it. This also emphasizes that
    we can build and run the container as many times as we want without interfering
    with our computer's configuration.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们能够在计算机上声明并运行 Linux 或任何其他操作系统，然后在其中运行我们的应用程序。这也强调了我们可以无限次地构建和运行容器，而不会干扰我们计算机的配置。
- en: 'With this, I have brought to your attention four key words: **image**, **container**,
    **build**, and **run**. We will get to the nitty-gritty of the Docker CLI next.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这点，我向你介绍了四个关键字：**镜像**、**容器**、**构建** 和 **运行**。接下来我们将深入探讨 Docker CLI 的细节。
- en: Basic Docker Terminal Commands
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的 Docker 终端命令
- en: 'Open Command Prompt to check that Docker is installed in your workstation.
    Entering the command `docker` on your terminal should show the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic Docker Terminal Commands](img/image01_04a.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: 'This is the list of available subcommands for Docker. To understand what each
    subcommand does, enter `docker-subcommand –help` on the terminal:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic Docker Terminal Commands](img/image01_05a.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: 'Run `docker info` and note the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server Version
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Basic Docker Terminal Commands](img/image01_06a.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: This command displays system-wide information. The server version number is
    important at times, especially when new releases introduce something that is not
    backward-compatible. Docker has stable and edge releases for their Community Edition.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at a few commonly used commands.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'This command searches **Docker Hub** for images:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Docker Hub is the default Docker registry. A Docker registry holds named Docker
    images. Docker Hub is basically the "GitHub for Docker images". Earlier, we looked
    at running an Ubuntu container without building one; this is where the Ubuntu
    image is stored and versioned:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic Docker Terminal Commands](img/image01_07a.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: '"There are private Docker registries, and it is important that you are aware
    of this now."? Docker Hub is at [hub.docker.com](http://hub.docker.com). Some
    images are hosted at [store.docker.com](http://store.docker.com) but Docker Store
    contains official images. However, it mainly focuses on the commercial aspect
    of an app store of sorts for Docker images and provides workflows for use.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'The register page is as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic Docker Terminal Commands](img/image01_08a.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'The log in page is as shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic Docker Terminal Commands](img/image01_09a.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: From the results, you can tell how users have rated the image by the number
    of stars. You can also tell whether the image is official. This means that the
    image is promoted by the registry, in this case, Docker Hub. New Docker users
    are advised to use official images since they have great documentation, are secure,
    promote best practices, and are designed for most use cases. As soon as you have
    settled on one image, you'll need to have it locally.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure you are able to search for at least one image from Docker Hub. Image
    variety ranges from operating systems to libraries, such as Ubuntu, Node.js, and
    Apache.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'This command allows you to search from Docker Hub:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For example, `docker search ubuntu`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'This command pulls an image from the registry to your local machine:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For example, `docker pull ubuntu`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as this command is running, you''ll notice that it is using the default
    tag: `latest`. In Docker Hub, you can see the list of tags. For **Ubuntu**, they
    are listed here: [https://hub.docker.com/r/library/ubuntu/](https://hub.docker.com/r/library/ubuntu/)
    plus their respective Dockerfiles:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic Docker Terminal Commands](img/image01_010a.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: 'Download the Ubuntu image profile on Docker Hub from: [https://hub.docker.com/r/library/ubuntu/](https://hub.docker.com/r/library/ubuntu/).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Activity 1 — Utilizing the docker pull Command
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get you conversant with the `docke`r `pull` command.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this activity is to gain a firm understanding of the `docker-pull`
    CLI, not only by running the listed commands, but also by seeking help on other
    commands while exploring, through manipulating the built containers.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Is Docker up and running? Type `docker` on the terminal or command-line application.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This command is used to pull the image from the Docker Hub`.`
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Image variety ranges from operating systems to libraries, such as Ubuntu, Node.js,
    and Apache. This command allows you to pull images from Docker Hub:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: For example, `docker pull ubuntu`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'This command lists the Docker images we have locally:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '`docker images`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we run the command, if we have pulled images from Docker Hub, we will
    be able to see a list of images:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![Activity 1 — Utilizing the docker pull Command](img/image01_11a.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: They are listed according to the repository, tag, image ID, date created, and
    size. The repository is simply the image name unless it is sourced from a different
    registry. In this case, you'll have a URL without the `http://` and the **top
    level domain (TLD)** such as `>registry.heroku.com/<image-name>` from the Heroku
    registry.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'This command will check whether the image by the name `hello-world` exists
    locally:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For example, `docker run hello-world`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![Activity 1 — Utilizing the docker pull Command](img/image01_12a.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: If the image is not local, it will be pulled from the default registry, Docker
    Hub, and run as a container, by default.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'This command lists the running containers:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If there aren''t any running containers, you should have a blank screen with
    the headers:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![Activity 1 — Utilizing the docker pull Command](img/image01_13a.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: Activity 2 — Analyzing the Docker CLI
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have the Docker CLI running by typing `docker` on your terminal.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: You have been asked to demonstrate the commands covered so far.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: To get you conversant with the Docker CLI. The goal of this activity is to gain
    a firm understanding of the `docker-compose` CLI, not only by running the listed
    commands, but also by seeking help on other commands while exploring, through
    manipulating the built containers. The goal is to be flexible enough with the
    CLI to be able to use it in a real-world scenario such as running an automated
    script.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Is Docker up and running? Type `docker` on the terminal or command-line application.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the official Apache image using the CLI, using `docker search apache:`![Activity
    2 — Analyzing the Docker CLI](img/image01_14a.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attempt to pull the image using `docker pull apache.`
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the availability of the image locally using `docker images.`
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Bonus: Run the image as a container using `docker run apache.`'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Bonus: Stop the container using `docker stop <container ID>.`'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Bonus: Delete the container and the image using `docker rm <contai``ner ID>.`'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dockerfile Syntax
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every Docker image starts from a **Dockerfile**. To create an image of an application
    or script, simply create a file called **Dockerfile**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It does not have an extension and begins with a capital letter D.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: A Dockerfile is a simple text document where all the commands that template
    a container are written. The Dockerfile always starts with a base image. It contains
    steps to create the application or to run the script in mind.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Before we build, let's take a quick look at a few best practices on writing
    Dockerfiles.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Some best practices include, but are not limited to, the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '**Separation of concern**: Ensure each Dockerfile is, as much as possible,
    focused on one goal. This will make it so much easier to reuse in multiple applications.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoid unnecessary installations**: This will reduce complexity and make the
    image and container compact enough.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reuse already built images**: There are several built and versioned images
    on Docker Hub; thus, instead of implementing an already existing image, it''s
    highly advisable to reuse by importing.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Have a limited number of layers**: A minimal number of layers will allow
    one to have a compact or smaller build. Memory is a key factor to consider when
    building images and containers, because this also affects the consumers of the
    image, or the clients.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start simply with a Python and JavaScript script. The choice of these
    languages is based on their popularity and ease of demonstration.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Writing Dockerfiles for Python and JavaScript examples
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No prior experience is required on the selected languages as theyare meant to
    give a dynamic view of how any language can adopt containerization.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Python
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we begin, create a new directory or folder; let's use this as our workspace.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the directory and run `docker search python`. We''ll pick the official
    image: `python`. The official image has the value **[OK]** in the **OFFICIAL**
    column:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/image01_15a.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: Go to [hub.docker.com](http://hub.docker.com) or [store.docker.com](http://store.docker.com)
    and search for python to get the correct tag or at least know what version the
    Python image with the latest tag is. We will talk more about tags in *Topic D*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: The image tag should be the number with this syntax that looks like `3.x.x`
    or `3.x.x-rc.`
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file by the name `run.py` and enter the first line as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Create a new file on the same folder level and name it **Dockerfile.**
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We do not have an extension for the Dockerfile.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following in the **Dockerfile**:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The **FROM** command, as alluded to earlier, specifies the base image.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: The command can also be used on an **inheritance** point of view. This means
    you do not have to include extra package installations in the Dockerfile if there
    already exists an image with the packages.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: The **ADD** command copies the specified files at source to the destination
    within the image's filesystem. This means the contents of the script will be copied
    to the directory specified.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: In this case because `run.py` and Dockerfile are on the same level then `run.py`
    is copied to the working directory of the base image's file system that we are
    building upon.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: The **RUN** command is executed while the image is being built. `ls` being run
    here is simply for us to see the contents of the image's filesystem.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: The **CMD** command is used when a container is run based on the image we'll
    create using this Dockerfile. That means at the end of the Dockerfile execution,
    we are intending to run a container.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exit the previous directory and create a new one. This one will be demonstrating
    a node application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line in the script and save:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run `docker search node` - we''ll pick the official image: `node`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that the official image has the value **[OK]** in the **OFFICIAL**
    column:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript](img/image01_16a.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: Note that node is the JavaScript runtime based on Google's high performance,
    open source JavaScript engine, V8.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Go to [hub.docker.com](http://hub.docker.com) and search for node to get the
    correct tag or at least know what version the node image with the latest tag is.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new **Dockerfile** and add the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: This should be on the same file level as the script.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We'll cover these for now.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Activity 3 — Building the Dockerfile
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have the Docker CLI running by typing `docker` on your terminal.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: To get you conversant with Dockerfile syntax. The goal of this activity is to
    help understand and practice working with third-party images and containers. This
    helps get a bigger picture on how collaboration can still be affected through
    containerization. This increases product delivery pace by building features or
    resources that already exist.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: You have been asked to write a simple Dockerfile that prints `hello-world`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Is Docker up and running? Type `docker` on the terminal or command-line application.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory and create a new Dockerfile.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a Dockerfile that includes the following steps:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Building Images
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin building images, let's understand the context first. An image
    is a standalone package that can run an application or allocated service. Images
    are built through Dockerfiles, which are templates that define how images are
    to be built.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: A container is defined as a runtime instance or version of an image. Note this
    will run on your computer or the host as a completely isolated environment, which
    makes it disposable and viable for tasks such as testing.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: With the Dockerfiles ready, let's get to the Python Dockerfile directory and
    build the image.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: docker build
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command to build images is as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`-t` stands for the tag. The `<image-name>` can include the specific tag, say,
    latest. It is advised that you do it this way: always tagging the image.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '**The relative location of the Dockerfile** here would be a `dot (.)` to mean
    that the Dockerfile is on the same level as the rest of the code; that is, it
    is at the root level of the project. Otherwise, you would enter the directory
    the Dockerfile is in.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dockerfile 的相对位置** 这里会用一个 `点 (.)` 来表示 Dockerfile 与代码在同一层级；也就是说，它位于项目的根目录。如果不是这种情况，你需要进入
    Dockerfile 所在的目录。'
- en: If, for example, it is in the Docker folder, you would have `docker build -t
    <image-name> docker`, or if it is in a folder higher than the root directory,
    you would have two dots. Two levels higher would be three dots in place of the
    one dot.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果它在 Docker 文件夹中，你会使用 `docker build -t <image-name> docker`，或者如果它在比根目录更高的文件夹中，你会使用两个点。如果它在比根目录更高两层的文件夹中，则使用三个点代替一个点。
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The output on the terminal and compare to the steps written on the Dockerfiles.
    You may want to have two or more Dockerfiles to configure different situations,
    say, a Dockerfile to build a production-ready app and another one for testing.
    Whatever reason you may have, Docker has the solution.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 终端上的输出与你在 Dockerfile 中写的步骤进行对比。你可能想要有两个或更多 Dockerfile 来配置不同的情况，例如，一个 Dockerfile
    用于构建生产就绪的应用，另一个用于测试。不管你有什么理由，Docker 都有解决方案。
- en: The default Dockerfile is, yes, Dockerfile. Any additional one by best practices
    is named `Dockerfile.<name>`,say, `Dockerfile.dev`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Dockerfile 名称是 Dockerfile。按照最佳实践，任何额外的 Dockerfile 会命名为 `Dockerfile.<name>`，比如，`Dockerfile.dev`。
- en: 'To build an image using a Dockerfile aside from the default one, run the following:
    `docker build -f Dockerfile.<name> -t <image-name> <relative location of the Dockerfile>`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用非默认的 Dockerfile 构建镜像，请运行以下命令：`docker build -f Dockerfile.<name> -t <image-name>
    <Dockerfile 的相对位置>`
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you rebuild the image with a change to the Dockerfile, without specifying
    a different tag, a new image will be built and the previous image is named `<none>.`
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Dockerfile 中进行了修改后重新构建镜像，但没有指定不同的标签，那么将会构建一个新的镜像，且之前的镜像会被命名为`<none>`。
- en: The `docker` build command has several options that you can see for yourself
    by running `docker build --help`. Tagging images with names such as latest is
    also used for versioning. We will talk more on this in the *Topic F*.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker` build 命令有多个选项，你可以通过运行 `docker build --help` 来查看。使用类似 latest 的标签来标记镜像也用于版本控制。我们将在
    *主题 F* 中详细讨论这个问题。'
- en: 'To build the image, run the following command in the Python workspace:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建镜像，请在 Python 工作空间中运行以下命令：
- en: '[PRE12]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The trailing dot is an important part of the syntax here:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的尾部点是语法中一个重要的部分：
- en: '![docker build](img/image01_17a.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![docker build](img/image01_17a.jpg)'
- en: Note
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The trailing dot is an important part of the syntax here:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的尾部点是语法中一个重要的部分：
- en: '![docker build](img/image01_18a.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![docker build](img/image01_18a.jpg)'
- en: 'Open the JavaScript directory and build the JavaScript image as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 JavaScript 目录并按如下方式构建 JavaScript 镜像：
- en: '[PRE13]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Running the commands will outline the four steps based on the four lines of
    commands in the **Dockerfile**.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令将根据 **Dockerfile** 中的四行命令概述四个步骤。
- en: Running `docker images` lists the two images you have created and any other
    image you had pulled before.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `docker images` 会列出你创建的两个镜像以及你之前拉取的任何其他镜像。
- en: Removing Docker Images
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除 Docker 镜像
- en: The `docker rmi <image-id>` command is used to delete an image. Let me remind
    you that the image ID can be found by running the `docker images` command.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker rmi <image-id>` 命令用于删除镜像。提醒你，镜像 ID 可以通过运行 `docker images` 命令找到。'
- en: 'To delete the images that are non-tagged (assumed not to be relevant), knowledge
    of bash scripting comes in handy. Use the following command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除未标记的镜像（假设它们不相关），掌握 bash 脚本编程会派上用场。请使用以下命令：
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This simply searches for images with <none> within their row of the `docker
    images` command and returns the image IDs that are in the third column:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这会简单地搜索在 `docker images` 命令的行中包含 `<none>` 的镜像，并返回位于第三列的镜像 ID：
- en: '![Removing Docker Images](img/image01_19a.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![移除 Docker 镜像](img/image01_19a.jpg)'
- en: Activity 4 — Utilizing the Docker Image
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4 — 利用 Docker 镜像
- en: Ensure you have the Docker CLI running by typing `docker` on your terminal.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 Docker CLI 正在运行，可以在终端中输入 `docker` 来检查。
- en: To get you conversant with running containers out of images.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助你熟悉从镜像运行容器。
- en: You have been asked to build an image from the Dockerfile written in *Activity
    C*. Stop the running container, delete the image, and rebuild it using a different
    name.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你被要求从 *活动 C* 中编写的 Dockerfile 构建一个镜像。停止正在运行的容器，删除镜像，并使用不同的名称重新构建它。
- en: Is Docker up and running? Type `docker` on the terminal or command-line application.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker 是否正在运行？在终端或命令行应用中输入 `docker`。
- en: Open the JavaScript example directory.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 JavaScript 示例目录。
- en: Run `docker build -t <choose a name>` (observe the steps and take note of the
    result).
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `docker build -t <选择一个名称>`（观察步骤并记录结果）。
- en: Run `docker run <the-name-you-chose>.`
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `docker run <你选择的名称>`。
- en: Run `docker stop <container ID>.`
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `docker stop <容器 ID>`。
- en: Run `docker rmi <add the image ID here>.`
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `docker rmi <在此添加镜像 ID>`。
- en: Run `docker build -t <choose new name>.`
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `docker build -t <选择新的名称>`。
- en: Run `docker ps` (note the result; the old image should not exist).
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `docker ps`（注意结果；旧镜像应该不存在）。
- en: Running Containers From Images
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从镜像运行容器
- en: Remember when we mentioned containers are built from images? The command `docker
    run <image>` creates a container based on that image. One can say that a container
    is a running instance of an image. Another reminder is that this image could either
    be local or in the registry.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们提到容器是从镜像构建的吗？命令 `docker run <镜像>` 会基于该镜像创建一个容器。可以说，容器是镜像的运行实例。另一个提醒是，这个镜像可以是本地镜像，也可以是从镜像库获取的。
- en: Go ahead and run the already created images `docker run python-docker` and `docker
    run js-docker:`
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 继续运行已经创建的镜像 `docker run python-docker` 和 `docker run js-docker:`
- en: '![Running Containers From Images](img/image01_20a.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![从镜像运行容器](img/image01_20a.jpg)'
- en: 'What do you notice? The containers run outputs to the terminal''s respective
    lines. Notice that the command preceded by CMD in the Dockerfile is the one that
    runs:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到什么了吗？容器运行时会将输出发送到终端的相应行。注意，在 Dockerfile 中以 CMD 开头的命令就是运行的命令：
- en: '[PRE15]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, run the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下命令：
- en: '[PRE16]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will not see any output on the terminal.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你在终端上不会看到任何输出。
- en: This is not because we don't have a command `CMD` to run as soon as the container
    is up. For both images built from **Python** and **Node**, there is a `CMD` inherited
    from the base images.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是因为我们没有在容器启动后运行的 `CMD` 命令。对于从 **Python** 和 **Node** 构建的两个镜像，都有一个从基础镜像继承的 `CMD`
    命令。
- en: Note
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Images created always inherit from the base image.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的镜像始终继承自基础镜像。
- en: The two containers we have run contain scripts that run once and exit. Examining
    the results of `docker ps`, you'll have nothing listed from the two containers
    run earlier. However, running `docker ps -a` reveals the containers and their
    state as exited.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行的两个容器包含运行一次后退出的脚本。检查 `docker ps` 的结果时，你不会看到之前运行的两个容器。然而，运行 `docker ps -a`
    会显示这些容器及其状态为已退出。
- en: There is a command column that shows the CMD of the image from which the container
    is built from.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个命令列，显示了容器从哪个镜像继承的 CMD。
- en: 'When running a container, you can specify the name as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 运行容器时，你可以按如下方式指定名称：
- en: '`docker run --name <container-name> <image-name>` (for example, `docker run
    --name py-docker-container python-docker`):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run --name <容器名称> <镜像名称>`（例如，`docker run --name py-docker-container
    python-docker`）：'
- en: '![Running Containers From Images](img/image01_21a.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![从镜像运行容器](img/image01_21a.jpg)'
- en: We outlined earlier that you only want to have relevant Docker images and not
    the `<none>` tagged Docker images.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过，你只需要保持相关的 Docker 镜像，而不是带有 `<none>` 标签的 Docker 镜像。
- en: As for containers, you need to be aware that you can have several containers
    from one image. `docker rm <container-id>` is the command for removing containers.
    This works for exited containers (those that are not running).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 至于容器，你需要注意的是，你可以从一个镜像创建多个容器。`docker rm <容器 ID>` 是删除容器的命令。这个命令适用于已经退出的容器（即不再运行的容器）。
- en: Note
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For the containers that are still running, you would have to either:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仍在运行的容器，你需要执行以下操作之一：
- en: Stop the containers before removing them (`docker stop <container-id>)`
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除容器之前，先停止容器（`docker stop <容器 ID>`）。
- en: Remove the containers forcefully (`docker rm <container-id> -f`)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 强制移除容器（`docker rm <容器 ID> -f`）
- en: 'No container will be listed if you run `docker ps`,but sure enough if we run
    `docker ps -a`, you will notice that the containers are listed and their command
    columns will show the inherited CMD commands: `python3` and `node`:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行 `docker ps`，你不会看到任何容器，但如果我们运行 `docker ps -a`，你会发现容器被列出，且它们的命令列将显示继承的 CMD
    命令：`python3` 和 `node`：
- en: '![Running Containers From Images](img/image01_22a.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![从镜像运行容器](img/image01_22a.jpg)'
- en: Python
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: The CMD in Dockerfile for Python's image is `python3`. This means that the `python3`
    command is run in the container and the container exits.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Python 镜像的 Dockerfile 中的 CMD 是 `python3`。这意味着在容器中运行的是 `python3` 命令，容器执行完后会退出。
- en: Note
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: With this in mind, one gets to run Python without installing Python in one's
    machine.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点，你就可以在不安装 Python 的情况下运行 Python。
- en: 'Try running this: `docker run -it python-docker:test` (with the image we created
    last).'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'We get into an interactive bash shell in the container. `-it` instructs the
    Docker container to create this shell. The shell runs `python3`, which is the
    CMD in the Python base image:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/image01_23a.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: 'In the command `docker run -it python-docker:test python3 run.py, python3 run.py`
    is run as you would in the terminal within the container. Note that `run.py` is
    within the container and so runs. Running `docker run -it python python3 run.py`
    would indicate the absence of the `run.py` script:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/image01_24a.jpg)![Python](img/image01_25a.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
- en: The same applies to JavaScript, showing that the concept applies across the
    board.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '`docker run -it js-docker:test` (the image we created last) will have a shell
    running node (the CMD in the node base image):'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/image01_26a.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: '`docker run -it js-docker:test node run.js` will output `Hello Docker - JS:`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/image01_27a.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: That proves the inheritance factor in Docker images.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Now, return the Dockerfiles to their original state with the **CMD commands**
    on the last line.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Versioning Images and Docker Hub
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember talking about versioning images in *Topic D*? We did that by adding
    latest and using some numbers against our images, such as `3.x.x` or `3.x.x-rc.`
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we'll go through using tags for versioning and look at how official
    images have been versioned in the past, thereby learning best practices.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: 'The command in use here is the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Say, for example, we know that Python has several versions: Python 3.6, 3.5,
    and so on. Node.js has several more. If you take a look at the official Node.js
    page on Docker Hub, you see the following at the top of the list:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '9.1.0, 9.1, 9, latest (9.1/Dockerfile) (as of November 2017):'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '![Versioning Images and Docker Hub](img/image01_28a.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
- en: 'This versioning system is called semver: semantic versioning. This version
    number has the format MAJOR, MINOR, PATCH in an incremental manner:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '**MAJOR**: For a change that is backward-incompatible'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '**MINOR**: For when you have a backward-compatible change'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '**PATCH**: For when you make bug fixes that are backward-compatible'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice labels such as `rc` and other prerelease and build metadata attached
    to the image.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: When building your images, especially for release to the public or your team,
    using semver is the best practice.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, I advocate that you do this always and have this as a personal mantra:
    semver is key. It will remove ambiguity and confusion when working with your images.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Docker Image to Docker Hub
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time we run `docker build`, the image created is locally available. Normally,
    the Dockerfile is hosted together with the code base; therefore, on a new machine,
    one would need to use `docker build` to create the Docker image.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'With Docker Hub, any developer has the opportunity to have a Docker image hosted
    to be pulled into any machine running Docker. This does two things:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Eliminates the repetitive task of running `docker build`
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds an additional way of sharing your application which is simple to set up
    compared to sharing a link of your app's code base and **README** detailing the
    setup process
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker login` is the command to run to connect to **Docker Hub** via the CLI.
    You need to have an account in hub.docker.com and enter the username and password
    through the terminal.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '`docker push <docker-hub-username/image-name[:tag]>` is the command to send
    the image to the registry, Docker Hub:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Docker Image to Docker Hub](img/image01_30a.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: A simple search of your image on [hub.docker.com](http://hub.docker.com) will
    give the output to your Docker image.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: In a new machine, a simple `docker pull <docker-hub-username/your-image-name>`
    command will produce a copy of your image locally.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this lesson, we have done the following:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Reviewed the DevOps workflow and a few use cases for Docker
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walked through Dockerfile syntax
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gained a high-level understanding of the build images for applications and running
    containers
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructed a number of images, versioned them, and pushed them to Docker Hub
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
