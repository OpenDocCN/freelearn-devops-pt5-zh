- en: Introduction to Big Data and Data Sciences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will discuss the key technology concepts such as In-memory computing and
    NoSQL databases that are the building blocks of the big data subject, along with
    concepts of data visualization and data sciences. These concepts are enriching
    for novice readers and will be appreciated while building big data applications
    in future sections. Readers familiar with these concepts can skip this section
    if they wish to. In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Big data attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-memory concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data science
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Big data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Big data has many interpretations and definitions across industries, academics,
    organizations, and individuals. It's a very broad and evolving field, and many
    organizations are adopting big data in some shape or form to supplement their
    existing analysis and business tools. Big data systems are primarily used to derive
    meaningful value and hidden patterns from data. They are also implemented to supplement
    different types of traditional workloads for economies of scale that lower costs.
    The three key sources of big data are people, organizations, and sensors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Big data systems are characterized by a few attributes such as volume, velocity,
    a variety of data, and value; additional characteristics are veracity, validity,
    volatility, and visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Value**:The ultimate objective of big data is to generate some business value
    and purpose for the company by doing all the analysis with a big data project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volume of data**:Big data system volumes can scale as per business needs
    to gigabytes, terabytes, petabytes, exabytes, zettabytes, and so on. Each business
    has unique volume needs; for example, an **Enterprise Resource Planning** (**ERP**) system
    could run into gigabytes of data, while **Internet of Things** (**IoT**) and machine
    sensor data could run into petabytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Velocity of data**:The speed at which the data is accessed could be batch
    jobs, periodic, near-real-time, real-time data from web server logs, streaming
    data of live videos and multimedia, IoT sensor information, weather forecasts,
    and so on. We can correlate the quantity of SMS messages, Facebook status updates,
    or credit card swipes being sent every minute of every day by an organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variety of data**:Variety of data is one of the key ingredients of big data.
    The data can be of many forms, such as a structured data format similar to a sales
    invoice statement date, sales amount, store ID, store address, and so on, which
    can easily fit into traditional RDBMS systems; semi-structured data, such as web
    or server logs, machine sensor data, and mobile device data; unstructured data
    such as social media data, including Twitter feeds and Facebook data, photos,
    audio, video, MRI images, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structured data has a form and rules for a metadata model, and dates follow
    a specific pattern. However, unstructured and semi-structured data have no predefined
    metadata model rules. One of the goals of big data is to gather business meaning
    from unstructured data with technology.
  prefs: []
  type: TYPE_NORMAL
- en: '**Veracity of data**:This is the trustworthiness of data; it should be devoid
    of bias and abnormalities. It''s ensuring the quality and accuracy of data gathered
    from different source systems, and doing preprocessing quality checks to keep
    data clean and ensure no dirty data accumulates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validity of data**:Data should be correct and valid for its intended use,
    ensuring its appropriateness. Even in traditional data analytics, data validity
    is crucial for the program''s success.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volatility of data**: This is the shelf life of the data, its validity for
    the time period of intended use. Stale data will not be able to generate intended
    results for any project or program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visualization**:Visualization through pictures appeals to the human eye more
    than raw data in metric or Excel format. Being able to visualize the data trends
    and patterns from the input data systems or streams till the end analysis is an
    asset to big data programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the traditional data warehouse, the data is structured, like RDBMS data,
    and the schema is modeled for the data to be loaded into the database.
  prefs: []
  type: TYPE_NORMAL
- en: Data handling in big data systems from ingestion to persistence, computation,
    analytics, and so on is quite different from traditional data warehouse systems
    as data volumes, velocities, and formats are quite divergent from source system
    ingestion to persistence. These systems require high availability and scalability
    for staging to persistence and analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability is achieved through cluster-resource pooling of memory, computation,
    and disk space. New machines can be added to the cluster to supplement the resource
    needs as per varying workload demands, or increased data volumes with business
    expansion. High availability is quite important for critical systems performing
    real-time analytics, production systems, or staging and edge systems holding real-time
    data. High availability clusters mean ensuring fault-tolerant systems even in
    the event of hardware or software failures, ensuring uninterrupted access to data
    and systems.
  prefs: []
  type: TYPE_NORMAL
- en: We will be discussing building Hadoop-based clusters as support in [Chapter
    4](bb8a06a5-6188-45c9-9a08-747f299a09bb.xhtml), *Big Data Hadoop Ecosystems*,
    including the various industry tools available.
  prefs: []
  type: TYPE_NORMAL
- en: Another prominent big data technology is In-memory computing, which encompasses
    both software and hardware technology advancements to handle the huge data loads
    of volumes, velocity, and variety in big data systems. We will discuss these in
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: In-memory technology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In traditional application development, the disk was the main persistence for
    data storage. The challenge in this method was that, for business logic and application
    computation, data was transferred from storage disk to main memory, causing huge
    I/O overhead. Again, after the computations based on the business logic, the data
    from aggregation, computational, or analytic results was transferred from CPU
    and main memory to store, or the data was persisted back to storage disk, causing
    I/O overhead multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the following simple illustration shows, disk speed is growing slower compared
    to other hardware components, while the need for higher performance and speed
    is increasing day by day:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29f275d4-cc85-4ff0-b81c-6ac988a68832.png)'
  prefs: []
  type: TYPE_IMG
- en: In-memory database (IMDB)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With In-memory technology, in contrast to traditional disk-based data persistence
    methods, the complete application requires the data is loaded into the main memory
    of the system. That makes the applications perform 10 to 20 times faster.
  prefs: []
  type: TYPE_NORMAL
- en: Data resides permanently in the main memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main memory is the primary *persistence* of data storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The disk serves as persistent storage for logging and recovery from the disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main memory access is crucial to performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Algorithms/data structures relying on the cache are more efficient in response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '** ![](img/68ab94c7-ef84-4967-bd60-f03cdce53975.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware technology advances adopted for In-memory systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many hardware advancements have been integrated into modern In-memory computing
    architecture, such as multi-core architecture and massive parallel scaling.
  prefs: []
  type: TYPE_NORMAL
- en: The In-memory database is optimized to use the capabilities of multi-core processors
    to enable incredibly fast queries. Processor speed is no longer dependent on clock
    speed but rather on the degree of system parallelism. Modern server boards have
    many CPUs with several cores each.
  prefs: []
  type: TYPE_NORMAL
- en: Parallelism can be achieved at different levels, such as from the application
    level to query execution on the database level. Multi-threaded application processing
    is handled by mapping each of the queries to a single core, and hence multiple
    queries are distributed to multiple cores in parallel. Query processing also involves
    data processing (that is, the database needs to be queried in parallel). In-memory
    systems distribute the workload across multiple cores of a single system.
  prefs: []
  type: TYPE_NORMAL
- en: Software  technology advances adopted for In-memory systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Software technology advancements have contributed to the development of **In-memory
    Database**  (**IMDB**) engines; they are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Data compression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No aggregate tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert-only tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column, row, and hybrid storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Partitioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In-memory technology enables data compression techniques to achieve data compression
    of up to 20 times. There are multiple algorithms such as bitmaps, run length encoding,
    dictionary encoding, prefix/suffix encoding, cluster encoding, relative encoding,
    delta encoding, and indirect encoding. The In-memory engine will apply the most
    appropriate algorithm or combination of algorithms to achieve the optimum compression
    ratio and performance.
  prefs: []
  type: TYPE_NORMAL
- en: The objectives of data compression are to reduce the volume of data transfer
    back and forth from the system as quickly as possible. To accomplish this, use
    the appropriate algorithms and techniques to minimize the overhead associated
    with the compression and uncompression of data. Improving overall query performance
    is also an objective of effective data compression.
  prefs: []
  type: TYPE_NORMAL
- en: No aggregate tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An In-memory database eliminates the need to maintain expensive pre-aggregate
    tables, since the data resides in the system memory computations and aggregations
    are on the fly, since there is no transfer of data back and forth. This eliminates
    the overhead of maintaining materialized aggregate views, which we can generate
    in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Insert-only tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a typical database, deleted records are performance and overhead intensive.
    In-memory database instead of deleting a record its marked as obsolete record
    like in version control system, it not used for computation. So, the overhead
    associated with deleting a record and re-indexing the rest of records which are
    performance intensive are eliminated.
  prefs: []
  type: TYPE_NORMAL
- en: Column, row, and hybrid storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Online Transaction Processing** (**OLTP**) applications are row-oriented
    storage, wherein table data  is stored as a sequence of records. Row-based tables
    and storage are more efficient in OLTP applications for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Only a single record is processed by the application at any given time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single record can be subjected to many selects and/or updates at any point
    in time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A complete record (or row) is typically accessed by the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the column values are many distinct values, compression rates are low
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In OLTP applications, aggregations or fast searching is required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration tables have a small number of rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In **Online Analytical Processing** (**OLAP**) systems such as data warehouses,
    column storage is used, where aggregate functions play an important role; the
    entries of a column are stored in contiguous memory locations so the aggregations
    are quick and efficient in the column store. Column storage or tables are beneficial
    in the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: Calculations are typically executed on a single, or a few, columns only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on values of a few columns, the table search is performed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a large number of columns in the table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Columnar intensive operations, such as aggregate, scan, and so on, are required
    to be performed on the table rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the majority of the columns contain only a few distinct values (compared
    to the number of rows in the table), high compression rates can be achieved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IMDB technology offers higher efficiency due to the usage of hybrid storage.
    It uses algorithms for selecting the appropriate combination of both row and columnar
    storage to gain maximum performance efficiency. It also provides users a choice
    to customize the storage options, such as select or alter columnar or table-wise
    storage for any specific table. In a few circumstances, using column stores in
    OLTP applications maximizes efficiency; it requires a balanced and well-understood
    approach to insertion and indexing column data storage for transaction systems.
  prefs: []
  type: TYPE_NORMAL
- en: Partitioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data partitioning is done for enhanced performance, easy management, convenient
    backup and recovery, and so on. There are several types of data partition techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Partitioning based on some common affinity involves, for example,  grouping
    of data based on equal time zone segments such as months, weeks, years, and partitioning
    by the size of tables, dimensions, functions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Examples are tables preceding 1M records grouped together, tables fetching payroll
    data grouped together, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Various techniques are used in data partitioning strategies, such as group partitioning,
    horizontal partitioning, vertical partitioning, mixed partitioning, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In-memory database systems are listed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Spark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivot GemFire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eXtremeDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAP HANA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM SolidDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MSSQL server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle TimesTen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MemSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VoltDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In-memory technologies enabled to do business intelligence and visualization
    tools are listed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Microstrategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tableau
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QlikView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerBI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TIBCO Spotfire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Traditional RDBMS are popular for their structured data, pre-configured schema,
    and rigid data consistency for transactional enterprise applications, and are
    characterized by the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: Supporting centralized applications, such as ERP systems, which consolidate
    enterprise data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application availability could range from moderate to high availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data velocity supported applications is moderate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, data input is limited to a few source systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data they handle is primarily structured in nature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The databases support complex and nested transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary expectation is to scale up to support the read operations for multiple
    concurrent users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support moderate data volumes with cache and purge features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most modern day applications are based on NoSQL databases to create flexible
    data schema, schema on read, or no schema to design web and cloud-based systems
    effectively. The key requirements are the ability to process very large volumes
    of data and quickly distribute that data across computing clusters to enable fast
    changes to applications that are continually updated. Traditional RDBMS systems
    are unable to cater to large-scale database clustering in cloud and web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'NoSQL database systems are designed for the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Support decentralized applications which are spread across multiple locations
    such as web applications, mobile applications, IoT, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The applications are continuously available and can't afford downtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They support high-velocity data, which could be from devices, sensors, and so
    on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data ingested is not confined to a single location and could range to multiple
    locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data forms are structured, semi-structured, and unstructured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transaction types are mostly simple; however, they maintain high data volumes
    and retain data for a very long time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalability for systems with intensive write and read operations and data volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrency support for number of users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are four types of NoSQL databases, with specific purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key-value database**: It is also called a **key-value store**. It stores
    data without the schema. The name derives from the fact that data is stored as
    an indexed or unique key and associated value. They are highly scalable and provide
    session management and caching in web applications, high performance, and schema-less
    design. This type of database is popular, and examples include Cassandra, DyanmoDB,
    **Azure Table Storage** (**ATS**), Riak, BerkeleyDB, Aerospike, and MemchacheDB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document databases:**  These databases store semi-structured data such as
    document descriptions and information. Each document is assigned a unique key,
    which is used to retrieve the document data. An advantage is data records can
    be created and updated for storing, retrieving, and managing document based on
    unique key. For web-based applications, the data exchange is through JavaScript
    and **JavaScript Object Notation** (**JSON**), which is popular for content management
    and mobile application data handling. Popular examples of document databases are
    Couchbase server, CouchDB, DocumentDB, MarkLogic, and MongoDB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wide-column stores**: These are designed to organize data tables as columns
    instead of as rows. Wide-column stores can be found both in SQL and NoSQL databases,
    and offer very high performance and a highly scalable architecture. Wide-column
    stores are faster than traditional relational databases and can query large data
    volumes very fast, hence they are used for intensive data processing systems such
    as recommendation engines, catalogs, fraud detection, and so on. A few popular
    examples of wide-column stores are Google Bigtable, Cassandra, and HBase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graph database**: Graph data stores represent data as relationship models
    and organize data as nodes. They are designed to represent data relationships
    as interconnected elements, such as a graph with a pictorial representation of
    the number of relations between them. An example is connections between nodes;
    the graph data model can evolve over time so is used with a flexible schema. Graph
    databases are effectively used in systems that must map relationships, such as
    friends connected on a social network, reservation systems, or customer relationship
    management. Examples of graph databases include AllegroGraph, IBM Graph, Neo4j,
    and Titan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The selection of NoSQL DBs are based on business requirements like building
    big data and web applications demanding high performance, scalability, flexibility,
    functionality, and complexity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Architecture**: Basic requirements of web and cloud-based systems are constant
    uptime, multi-geography data replication, predictable performance, and so on. The
    architecture should be designed to support diverse workload patterns, technology
    to support ingesting data of high volume, variety, and velocity. Ability to perform
    transactions in real time, run real-time analytics on data lake or multiple systems. There
    are a few based on the master/slave model, such as MongoDB, and a few are masterless,
    where all nodes in database cluster perform the same role, as in Cassandra.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data model scalability**:  The data models are based on types, like a wide-row
    tabular store, document-oriented, key-value, or graph, and so on to scale very
    rapidly and elastically, in order to be applicable to all situations and times,
    scaling across multiple data centers and even to the cloud if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data distribution model**: Based on their inherent architectural differences,
    NoSQL databases perform differently for the reading, writing, and distribution
    of data. For example, Cassandra is popular to support writes and reads on every
    node in a cluster, and can replicate and synchronize data between many data centers
    across cloud providers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Development model and support**: Based on their development APIs, NoSQL databases
    might have unique SQL-like languages (for example, Cassandra''s CQL). Vendor or
    community-related support for technology will be an invaluable resource for the
    individuals and teams managing the environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance and continuous availability**: In an online world, big data must
    perform at extremely high velocities under varying workloads, so databases must
    scale and perform to support applications and environments, as nanosecond delays
    can cost you sales. Revenue generating systems like flight reservation systems
    (and data) need to be available 24*7 , as businesses can''t afford  any downtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manageability and cost**: There is a need to balance the cost of NoSQL platform
    development and operational complexity, to be viable to businesses from a cost
    and usage perspective. Deploying a well-structured NoSQL program provides all
    of the benefits already listed, while also lowering operational costs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of NoSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have seen, for cloud applications and decentralized systems NoSQL databases
    are the de facto databases to use, primarily as NoSQL databases offer many robust
    features and benefits compared to other database management systems, such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous availability**: A database should be available 24/7 or 99.999%
    of the time, even during standing infrastructure outages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Economical/minimal cost of operations**: Investment and expenses related
    to maintenance; scalability of the NoSql systems should be affordable to businesses
    and compatible to support existing applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalable architecture**: Web applications support multiple geographies, so
    architectural features of the database should be resilient and scalable. Data
    manipulation features and capabilities are to be supported for multiple concurrent 
    enterprise systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High responsiveness**: Cloud and web-based applications are low latency applications
    that must respond as per business demands quickly. These applications should perform
    under various conditions like varying and mixed workloads and multiple data models,
    and integrations with third-party tools and applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elastically scalable**: The database and supporting applications should be
    designed for current and future data needs linearly and predictably, and be operationally
    mature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A picture is worth a thousand words. Data visualization is the representation
    of data in the form of graphs, charts, pictures, or any other visual means. It
    helps users to quickly understand and analyze the complex data patterns, variations,
    and deviations associated with data. As we can all agree, skimming through multiple
    records of numerical data would be very tiring. The ability to graphically visualize
    the same data would be a very effective, efficient, and time-saving way to identify
    the patterns we need. There are many tools that help with data visualizations;
    the simplest forms are bar charts, pie diagrams, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In big data visualizations, data patterns play an important role. A few benefits
    of data visualization are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A quick, easy way to convey concepts in a universal manner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify areas that need attention or improvement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clarify which factors influence customer behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Help you understand which products to place where
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predict sales volumes by segment and time period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data representation and visualization methods are listed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Graph plots:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Area graph
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bubble chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Density plot
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Error bars
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Line graph
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-set bar chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallel coordinates plot
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Point and figure chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Population pyramid
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Radar bar chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Radial column chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scatterplot
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Span chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Spiral plot
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stacked area graph
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamgraph
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Diagrams:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flowchart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustration diagram
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Timeline
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tree diagram
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Network diagram
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Venn diagram
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pictogram chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bubble map
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Treemap
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calendar
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Gantt chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Heatmap
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stem and leaf plot
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tally chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Timetable
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Maps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choropleth map
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection map
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dot map
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Flow map
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data visualization is quite valuable to preview the raw data in form of pictures
    and graphs as presentable formats. Few tools to aid the same are listed following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time series***:* It''s used to plot the performance trend of a single variable,
    such as the sales of a particular car model over a time period of 5 years, with
    a line chart ([https://en.wikipedia.org/wiki/Line_chart](https://en.wikipedia.org/wiki/Line_chart))
    to demonstrate the trend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nominal comparison**: Comparing general trends, say in sales volume by car
    model with a bar chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ranking**: Used to compare car sales between different locations over the
    period of 5 years for a particular model. The performance over a period of time
    for different segments is represented by a bar chart ([https://en.wikipedia.org/wiki/Bar_chart](https://en.wikipedia.org/wiki/Bar_chart))
    to show the comparison across the zones on sales.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Part-to-whole***:* Used to measure a ratio to the whole (that is, a percentage
    out of 100%). The percentage of students securing *A* grade in a class is represented
    by a pie chart ([https://en.wikipedia.org/wiki/Pie_chart](https://en.wikipedia.org/wiki/Pie_chart))
    or bar chart to show the comparison ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Frequency distribution**: Used to evaluate the trend of a particular variable
    for a given interval, such as the number of years in which the property price
    change is between intervals such as 0-10%, 11-20%, and so on. A histogram ([https://en.wikipedia.org/wiki/Histogram](https://en.wikipedia.org/wiki/Histogram))
    or bar chart may be used. A box plot ([https://en.wikipedia.org/wiki/Box_plot](https://en.wikipedia.org/wiki/Box_plot))
    helps visualize key statistics such as median, quartiles, outliers, and so on
    for the distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Correlation**: Used to compare dependency of trend movement between two variables
    (*X* and *Y*) to determine if they tend to move together or in opposite directions,
    for example, plotting unemployment (*X*) and GDP growth (*Y*) for a time period
    in months with a scatter plot ([https://en.wikipedia.org/wiki/Scatter_plot](https://en.wikipedia.org/wiki/Scatter_plot)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deviation**: Used for comparison of the actual versus the reference amount,
    such as the comparison of actual versus budget expenses for several portfolios
    of a business for a given time period, represented by a bar chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geographic or geospatial:** Used to compare the spread of a variable across
    a map or geographical layout, such as the store locations by state. A cartogram
    ([https://en.wikipedia.org/wiki/Cartogram](https://en.wikipedia.org/wiki/Cartogram))
    is a typical graphic used to plot a number of cars on the various floors of a
    parking lot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few of the commercial data visualization tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Tableau
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QlikView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microstrategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft PowerBI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TIBCO Spotfire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOMO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ZOHO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information Builders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some data visualization open source tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ploty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chart Js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leaflet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FusionCharts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A few similar terms associated with data science include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data science**: An interdisciplinary field also known as data-driven science. There
    are few stages such as data discovery, the study of information originating from
    varied data sources in different forms, structured or unstructured, ingesting 
    the data, and applying scientific methods and processes to gain insights and apply
    knowledge for the creation of value-added business and IT strategies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data mining:** Data mining is a broad term for the practice of trying to
    find patterns in large sets of data. It is the process of trying to categorize
    a mass of data into a more understandable and cohesive set of information. Mining
    large amounts of structured and unstructured data to identify patterns can help
    an organization rein in costs, increase efficiency, recognize new market opportunities,
    and increase their competitive advantage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine learning:** Machine learning is the study and practice of designing
    systems that can learn, adjust, and improve based on the data fed to them. This
    typically involves the implementation of predictive and statistical algorithms
    that can continually zero in on *correct* behavior and insights as more data flows
    through the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The interdependency and interfacing of data science with other interfacing
    sections of big data and data discovery are depicted, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3e61679-7e70-4cf9-9099-fb80a735073d.png)'
  prefs: []
  type: TYPE_IMG
- en: Big data discovery is the combination of big data, data science, and data discovery.
  prefs: []
  type: TYPE_NORMAL
- en: Gartner analysts have defined a new evolving role of **citizen data scientists** who,
    using these tools, will marry the skills of traditional business analysts with
    some of the expertise of expert statisticians.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67523347-be78-456e-87dc-84cba85634b9.png)'
  prefs: []
  type: TYPE_IMG
- en: The role of a modern data scientist requires a mixture of broad, multidisciplinary
    skills ranging from an intersection of mathematics, statistics, computer science,
    communication, and business understanding. A data scientist's most basic, universal
    skill is the ability to integrate systems and derive meaningful and reproducible
    patterns from the underlying data. More enduring will be the need for data scientists
    to communicate in a language that all their stakeholders understand, and to demonstrate
    the special skills involved in storytelling with data, whether verbally or visually,
    or ideally both.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28af1fb1-530f-43b1-926f-fea205afaf71.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the concepts of big data, In-memory technology,
    NoSQL databases, data visualization, and data science.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the concepts of DevOps frameworks and best
    practices.
  prefs: []
  type: TYPE_NORMAL
