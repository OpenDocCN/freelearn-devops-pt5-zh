- en: Designing Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered the compute-intensive application objectives.
    We covered how to design high-performance computing and other compute-intensive
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the web application's objectives. It will cover information
    about Azure Web Apps, the different App Service plans that are available, and
    what the characteristics are for the different App Service plans. You will learn
    more about designing Web Apps for Containers using Azure Container Services and
    Docker, how to design Web Apps for high availability, scalability, and performance
    using Redis Cache, auto-scaling, App Service environments, and more. You will
    also learn how to design a custom Web API and what Azure offers in terms of securing
    custom APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Web Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App Service plans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing Web Apps for Containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing Web Apps for high availability, scalability, and performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing and securing custom Web APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter uses the following tools for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2017: [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code for this chapter can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%203/](https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%203)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Web Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Web Apps is a part of Azure App Services and it is where you can host
    your websites and applications in Azure. Using Web Apps, you only pay for the
    compute resources you use, not for the actual hosting of your site or application.
    Besides websites and applications, you can also host your Web APIs and your mobile
    backends inside Azure Web Apps.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a programming language of your choice for developing applications.
    At the time of writing, Azure Web Apps supports .NET, .NET Core, Java, Ruby, Node.js,
    PHP, and Python. Those applications are hosted on Windows or Linux virtual machines
    that are fully managed by Microsoft and can easily be scaled using out-of-the-box
    features. Besides scaling, you can leverage other Azure features, such as security,
    load balancing, and insights and analytics. You can also use the DevOps capabilities,
    such as Continuous Integration and deployment from VSTS, GitHub, Docker Hub, and
    other resources, SSL certificates, package management, staging environments, and
    custom domains.
  prefs: []
  type: TYPE_NORMAL
- en: App Service plans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Web Apps are hosted inside App Service plans. Inside the App Service plan,
    you can configure all the required settings, such as the costs, the compute resources,
    and in which region you want to deploy your apps. There are different types of
    App Service plans available in Azure, from free plans where you share all the
    resources with other customers and that are most suitable for development applications,
    to paid plans, where you can choose to host your apps on Windows VMs or Linux
    VMs and can set the available CPU, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure offers the following service plan SKUs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Free and Shared**: Your app runs on the same VM as other apps in a shared
    environment. This environment can also include apps from other customers. Each
    app has a CPU quota and there is no ability to scale up or out. These App Service
    plans are most suited for development and test apps or apps with less traffic.
    There is no SLA support for those two plans. The Shared service plan offers the
    ability to add custom domains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1cde9366-7505-4c0a-957f-1d888e183733.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Free and Shared App Service plan in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: The Basic tier is the first tier, where you can choose between different
    pricing ranges. It offers three tiers and the available cores and RAM will double
    for every tier. Apps run on dedicated Linux or Windows VMs and the compute resources
    are only shared between apps that are deployed inside the same App Service plan.
    All apps inside the same App Service plan reside in an isolated environment, which
    supports SSL and custom domains. The Basic tier offers scaling to three instances,
    but you need to do this manually. This tier is most suitable for development and
    test environments and applications with less traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4aefd80f-faac-4c0c-89d5-126282710250.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Basic App Service plan in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard: **The Standard tier also has three tiers to choose from. It offers
    custom domains and SSL support, offers autoscale up to ten instances, and offers
    five deployment slots, which can be used for testing, staging, and production
    apps. It also provides daily backups and Azure Traffic Manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b4a6d0a6-48c7-464f-8956-7957f6c4387a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Standard App Service plan in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: '**Premium: **Premium offers two types of tiers, Premium and PremiumV2\. They
    both offer all the features of the Standard tier, but the Premium tier offers
    extra scale instances and deployment slots. The Premium V2 runs on Dv2-series
    virtual machines, which offer faster processors and SSD drives and drastically increase
    the performance of your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/11b47420-ec8c-4e6a-870d-beede9f9db57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Premium App Service plan in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: '**Isolated**: The Isolated tier offers full isolation for your applications
    by providing a private environment with dedicated virtual machines and virtual
    networks. You can also scale up to 100 instances. To create a private environment,
    App Services uses an **App Service Environment** (**ASE**), which will be covered
    in the next section. All apps run on Dv2-series virtual machines, so it offers
    high-performance capabilities. The Isolated App Service plan is most suitable
    for apps that need complete isolation, because of high security demands for instance,
    but that want to leverage all the capabilities that Azure Web Apps offer, such
    as auto-scale and deployment slots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d2a7074e-9704-45d5-be06-bd02fb055efc.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Isolated App Service plan in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: The App Service Environment (ASE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ASE is a feature of Azure App Service that provides a fully isolated environment
    for your Web Apps, mobile apps, API apps, and Azure Functions. An ASE is deployed
    inside a subnet of the VNet, so this provides full isolation and secure network
    access. ASEs are most suitable for apps that require high-scale workloads because
    they can be spread across a single or multiple Azure regions. Because of the network
    isolation, ASEs are also very suitable for apps with high security requirements.
  prefs: []
  type: TYPE_NORMAL
- en: There can only be one ASE created per Azure subscription and it can host up
    to 100 instances; from 100 app instances in a single App Service plan to 100 App
    Service plans with one app instance.
  prefs: []
  type: TYPE_NORMAL
- en: ASEs use frontends and workers where the former are suitable for automatic load
    balancing of the requests inside the ASE and the latter host the actual Web Apps
    inside the ASE. They are added automatically by Azure.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, there are two different versions of ASE, v1 and v2\.
    The difference between the two versions is that v2 automatically adds frontends
    and workers to the ASE depending on the scale of the App Service plans. In v1,
    you had to add those roles manually before you could scale out your App Service
    plan.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ASE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create an Azure ASE from the Azure Portal by taking the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New and  type `App Service Environment` in the search bar. Click the
    Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new blade opens up, where you can fill in the basic settings of the VM. Add
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: `PacktASE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subscription: Select a subscription here'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource Group: `` `PacktPubASE` ``
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual Network/Location: Azure will automatically create a new virtual network
    for you. If you want to pick an existing one, you can change the settings by clicking
    the link.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f5ae86e8-2538-4e29-97f2-a4464ba06bb5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating ASE in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create. Azure will create an ASE, a virtual network, a route table,
    and a NSG for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now choose this ASE when you create a new Azure App Service plan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f844a419-97b5-4089-805a-01ad97363076.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating an ASE in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the creation of an ASE can be quite expensive, so I strongly
    advise you to remove this when you are finished with your test.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Azure ASE, you can refer to the following Microsoft
    documentation: [https://docs.microsoft.com/en-us/azure/app-service/environment/intro](https://docs.microsoft.com/en-us/azure/app-service/environment/intro).
    [](https://docs.microsoft.com/en-us/azure/app-service/environment/intro)
  prefs: []
  type: TYPE_NORMAL
- en: Web Apps for Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web Apps for Containers is part of the Azure App Service on Linux. It lets you
    easily deploy and scale your own Docker-formatted images on Azure. Docker is based
    on open standards, which means it can run on all major Linux distributions and
    Windows Server 2016.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containers are lightweight sandboxes on top of your OS. When your application
    is deployed inside a Docker container, the app cannot see or access all other
    applications or processes that are running on the same OS. You can compare this
    to creating different VMs to host different types of workloads or applications,
    but without the overhead of the virtualization itself. Docker containers also
    share the same OS and infrastructure, whereas VMs need to have their own OS installed
    inside their own infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: With containers, you share the underlying resources of the Docker host and you
    build a Docker image that includes everything you need to run the application.
    You can start with a basic image and then add everything you need.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containers are also extremely portable. You can deploy a Docker container
    including all the settings, such as configuration settings, a specific runtime,
    framework, and tooling on a VM with Docker installed. You can then easily move
    that same container to the Azure App Service on Linux, and the application will
    still run as expected. This solves the *it works on my machine* problem that (mostly)
    all developers face. This makes Docker not a virtualization technology, but an
    application delivery technology.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containers are very suitable for building applications that leverage
    the microservices architecture, where parts of an application are loosely coupled,
    and divided into separate services that all collaborate with each other. Each
    service can then be deployed into a separate container, written in their own programming
    language, using their own configuration settings. A service can consist of a database,
    or a Web API, or a mobile backend for instance. You can easily deploy multiple
    copies of a single application, or database. The only thing to be aware of is
    that they all share the same OS. If your application needs to run on a different
    OS, you still have to use a VM.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Azure App Service on Linux, you can refer to the following
    website: [https://docs.microsoft.com/en-us/azure/app-service/containers/app-service-linux-intro](https://docs.microsoft.com/en-us/azure/app-service/containers/app-service-linux-intro).
    [](https://docs.microsoft.com/en-us/azure/app-service/containers/app-service-linux-intro)
    Microsoft released a sample project, called **Developer Finder**, which is available
    on GitHub. This will give you an great overview of the possibilities of Docker
    containers and is a good starting point for developing your own applications using
    Docker. You can refer to the following site: [https://github.com/azure-app-service/demoapp](https://github.com/azure-app-service/demoapp).
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Web App for Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Web App for Containers can be created from the Azure Portal. Follow these steps
    to create a project:'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, I'm using the Docker Hub as a repository for images. You can
    create an account using the following link: [https://hub.docker.com/](https://hub.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Newand in the search bar type `Web App for Containers`. Click on the Create button,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f0c5594-1d5a-49b2-ad70-24c813617e4f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Web App for Containers project in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: 'A new blade opens up. Add the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: App name: `PacktContainers`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subscription: Select a subscription here.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resource Group: This one is automatically filled in when you enter the app
    name. Leave it as default.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'App Service plan/Location: A new App Service plan will automatically be created.
    If you want to pick an existing one, or change the default settings, you can click
    on it.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1b52c7bc-fd3e-4237-8c5c-14d7cdac7b3c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Web App for Containers settings in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure container: This will take you to the actual Docker settings. Here,
    pick Docker Hub as an image source.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image and optional tag: `mysql`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f1f872a3-2b75-48a1-9483-18f394dc3abe.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring a container in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: Designing Web Apps for high availability, scalability, and performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance is an important issue to keep in mind when designing Web Apps. Web
    Apps that are unresponsive or that perform badly will eventually lose all their
    visitors. They will simply hop on to another site. Azure provides multiple options
    to make your Web App highly available and scalable, which will result in a better
    performance to keep your visitors on board.
  prefs: []
  type: TYPE_NORMAL
- en: Beside the features that Azure offers to design for high availability, scaling,
    and performance, you can keep certain architecture patterns in mind when architecting
    your Web App. You can refer to the following article from the Azure Architecture
    Center for these patterns: [https://docs.microsoft.com/en-us/azure/architecture/patterns/category/performance-scalability](https://docs.microsoft.com/en-us/azure/architecture/patterns/category/performance-scalability).
  prefs: []
  type: TYPE_NORMAL
- en: High availability and performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure provides several ways to make your Web App perform better and to become
    highly available. You can use a **Content Delivery Network** (**CDN**), a cache,
    or you can copy your Web App over to multiple regions.
  prefs: []
  type: TYPE_NORMAL
- en: Using a CDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use a CDN to scale your websites globally. By using a CDN, your static
    content, such as HTML pages, style sheets, client-side scripts, images, documents,
    and files, are cached in different regions. This way, it takes less time to download
    the content, because the static content is physically closer to the user, which
    increases the performance of your Web App.
  prefs: []
  type: TYPE_NORMAL
- en: Azure CDN allows you to use custom domain names to access your content. This
    can be configured inside the Azure Portal. You can refer to the following article
    to add a custom domain: [https://docs.microsoft.com/en-us/azure/cdn/cdn-map-content-to-custom-domain](https://docs.microsoft.com/en-us/azure/cdn/cdn-map-content-to-custom-domain).
    You can also enable HTTPS for your CDN: [https://docs.microsoft.com/en-us/azure/cdn/cdn-custom-ssl](https://docs.microsoft.com/en-us/azure/cdn/cdn-custom-ssl).
  prefs: []
  type: TYPE_NORMAL
- en: Using Redis Cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redis Cache in Azure is based on the popular open-source implementation, Redis
    Cache. It provides a secure cache from where you can access your data and that
    runs in an Azure data center. It can be used by different types of applications,
    including Web Apps, applications inside a virtual machine, or other cloud services.
    Caches can be shared by all applications that have the appropriate access key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Redis Cache comes in the following tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: This is a single node cache, ideal for development, test environments,
    and non-critical workloads. This tier has no SLA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard**: Provides a replicated cache. The data is automatically replicated
    between the two nodes. This tier offers an SLA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium: **The Premium tier has all the standard features and, in addition,
    it provides bigger workloads, better performance, disaster recovery, and enhanced
    security. It also offers Redis Persistence, which persists data that is stored
    inside the cache. Snapshots and backups can be created and restored in case of
    failures. It also offers Redis Cluster, which automatically shares data across
    multiple Redis nodes, so you can create workloads of bigger memory sizes (greater
    than 53 GB) and get better performance. It also offers support for Azure Virtual
    Networks, which gives the ability to isolate your cache by using subnets, access
    control policies, and more. You can provision an Azure Redis Cache from the Azure
    Portal using an ARM template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/707b9395-a817-47b7-9408-2e3327762bea.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Provisioning Redis Cache from the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to the following article to download some sample ARM templates
    for deploying Azure Redis Cache with different types of configuration settings: [https://docs.microsoft.com/en-us/azure/redis-cache/cache-redis-cache-arm-provision](https://docs.microsoft.com/en-us/azure/redis-cache/cache-redis-cache-arm-provision).
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Traffic Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way of designing for availability and scalability is copying your Web
    App over to multiple regions or data centers. Azure uses Azure Traffic Manager
    to spread the workload. Your Web App can be reached by using a single URL, where
    Azure Traffic Manager will handle the load and locate the closest geographical
    region or most suitable region for you at the DNS level.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb2a0eb3-f484-4052-a3a7-d8a6a7ec7062.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Azure Trafic Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating an Azure Traffic Manager profile from the Azure Portal, you can
    choose between four different routing methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Performance**: Select this method when you have endpoints in different geographical locations
    and you want end users to use the closestendpoint in terms of the lowest network
    latency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weighted**:This method is best suitable for when you want your application
    to be distributed evenly or according to certain weights, which you define.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Priority**: Use this method when you want one endpoint to be the primary
    endpoint for all traffic, and provide backups in case the primary or the backup
    endpoints are unavailable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geographic**: This method is best suitable for scenarios where knowing a
    user’s geographical region and routing them based on that is important. Localization
    of content can be a reason for choosing this method, for instance. Users are then
    directed to specific endpoints based on the geographical location where their
    DNS query comes from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Traffic Manager is also discussed in [Chapter 5](1d5ef29a-96fb-452c-a0d6-718d6d2d1c84.xhtml),
    *Robust Networking Implementations*. For more information, you can refer to that
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure provides the ability to scale your Web Apps. One of the possibilities
    is to scale out, where you can scale your Web Apps globally. Scaling out means
    adding nodes to, or removing nodes from, a Web App. This way, the load time is
    decreased when the Web App is accessed from different locations. The other option
    is to scale up. Scaling up means adding resources to, or removing resources from,
    a Web App, such as CPUs or memory. When scaling up, you switch to another pricing
    tier inside your App Service plan, or pick a different App Service plan.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Azure App Service plans, you can refer to the beginning
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple ways to scale out your Web App. You can scale out manually
    or automatically by using **Azure Autoscale**. To use Autoscale, take the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Under Settings, click on Scale Out (App Service plan).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand side of the screen, you can increase or decrease the Instance
    count. The maximum instance count depends on the App Service plan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4374d757-d6fb-4832-af70-acf542307ee2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Azure App Service plan scaling
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can also turn on autoscale (only for the Standard, Premium, and Isolated
    App Service plans). You have to name the autoscale set, and add at least one scaling
    condition. You can choose between scaling based on a metric or a specific instance
    count. When using scale based on a metric, you need to add a scale rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e58415d7-badc-4416-8a59-478cf12a2c62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Azure App Service plan auto scaling
  prefs: []
  type: TYPE_NORMAL
- en: Azure Autoscale lets you configure a lot of settings that are beyond the scope
    of this book. You can refer to the following URL for more information on Azure
    Autoscale and the available settings: [https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-understanding-autoscale-settings.](https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-understanding-autoscale-settings)
  prefs: []
  type: TYPE_NORMAL
- en: Scaling up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can choose a different pricing tier or App Service plan to scale up your
    website. This can be done from the App Service plan settings inside the Azure
    Portal as well, such as when scaling out your Web App.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Azure App Service settings in the Azure Portal and, under Settings,
    click on Scale Up (App Service plan). You can then select a different App Service
    plan, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd303684-05c8-42c4-8b39-20ffcba6477b.jpg)Azure App Service plan scaling
    up'
  prefs: []
  type: TYPE_NORMAL
- en: Designing and securing custom Web APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Custom Web APIs can be created using Visual Studio code or Visual Studio 2017\.
    For creating Web APIs, the following programming languages are available:'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASP.NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing your Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This demo will be created using .NET Core Framework 2.0 and Visual Studio 2017. Begin
    by opening up Visual Studio 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on File | New | Project and, in the new Project window, select ASP.NET
    Core Web Application. Name the project and click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A pop-up window opens up where you can select the Web API template, select
    ASP.NET Core 2.0, and click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29eb1675-e2c1-4f3a-8c99-7834b30b2d53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a custom Web API from Visual Studio 2017
  prefs: []
  type: TYPE_NORMAL
- en: Add a `Models` folder in the Solution Explorer. Right-click your project name
    and select Add | New Folder.Add a `TodoItem` class by right-clicking the `Models`
    folder and click Add | Class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `TodoItem` class with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to add the database context class that coordinates entity
    framework functionality. Add a `TodoContext` class inside the `Models` folder
    and replace it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to register the database context with the dependency injection
    container. You can do this by replacing the code in the `StartUp.cs` with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Solution Explorer, right-click the `Controllers` folder and add a controller
    named `TodoController`. Replace the controller with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code uses dependency injection in the constructor to inject the `TodoContext`
    inside the controller. This context is used for the **create**, **read**, **update**,
    **delete** (**CRUD**) methods on the data. The constructor adds an item to the
    in-memory database if it is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to implement the CRUD methods. Add the following code to the
    constructor for the `Get` requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following underneath for `Post` requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the `Delete` request underneath the `Post` requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now deploy this Web API to Azure using the Publish function in Visual
    Studio 2017\. Right-click the Solution Explorer and click on Publish.The publishing
    wizard now opens. In there, select Microsoft Azure App Service, choose Select
    Existing, and click on Publish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8661a48c-d38b-4893-a81d-ce20bf5fa336.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Publishing the Web API to Azure from Visual Studio 2017
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next screen, select the Azure Web App that is already there from the
    previous sections in this chapter and click on the OK button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9064bcd9-3126-4041-b490-8fd5a63c849e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the Azure Subscription from Visual Studio 2017
  prefs: []
  type: TYPE_NORMAL
- en: The Web API is now published to Azure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This sample application is based on a sample from the Microsoft site. When you
    need any further instructions or information about the sample app, please refer
    to the following Microsoft site: [https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api](https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api).
  prefs: []
  type: TYPE_NORMAL
- en: Securing your Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To secure your Web API, you can use several options. You can use options provided
    by Azure or you can use your own authentication providers. A best practice is,
    however, to use the standard authentication options that are available for Azure
    App Services.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following services in Azure to secure your Web API:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Active Directory (Azure AD)**: Azure AD offers traditional username
    and password identity management, roles, and permissions management from the cloud. In
    addition, it offers more enterprise solutions, such as multi-factor authentication,
    applications monitoring, solution monitoring, and alerting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Active Directory Business to Consumer**: Azure Active Directory Business
    to Consumer (B2C) is a cloud identity-management solution for mobile and web applications.
    It offers out-of-the-box authentication providers that can be leveraged from your
    apps and custom APIs. Examples of out-of-the-box authentication providers are Facebook,
    and Google.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Directory Federation Services**: You can use Active Directory Federation
    Services (ADFS) to secure your web API using the on-premises identities that are
    present in your organization. ADFS can be configured in conjunction with Azure
    AD in a hybrid mode. You can then use the same APIs, such as the Microsoft Graph,
    to connect to your on-premises identities when you are using only Azure AD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API Management**: You can use API Management to secure your Web API as well.
    You can use advanced security policies, API keys, throttling for preventing DDOS
    attacks, and more, to add an additional layer of security on top of your Web API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the *Design, security, and identity* section of [Chapter 9](f44f0ed4-c642-44ef-b574-b475bdd616da.xhtml),
    *Securing Your Resources*, we will cover the available authentication providers
    in more detail. This section gives a quick overview of the providers that are
    leveraged inside your Web APIs.
  prefs: []
  type: TYPE_NORMAL
- en: API Management is covered in more detail in [Chapter 4](8975f78d-84e0-4378-8318-75bc7cf35db3.xhtml),
    *Implementing Serverless and Microservices*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered the design web applications objectives. We've
    covered Azure Web Apps, App Service plans, how to design Web Apps for Containers,
    how to design Web Apps for high availability, scalability, and performance, and
    how you can design and secure custom Web APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will proceed with the serverless and microservice objectives.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assess**ments* section at the end
    of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Is Redis Cache a memory key value datastore?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Is the Basic tier of Redis Cache well suited for production environments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use Azure B2B as an authentication provider for your applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following links for more information on the topics that
    are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web Apps Documentation**: [https://docs.microsoft.com/en-us/azure/app-service/](https://docs.microsoft.com/en-us/azure/app-service/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure App Service plan overview**: [https://docs.microsoft.com/en-us/azure/app-service/azure-web-sites-web-hosting-plans-in-depth-overview](https://docs.microsoft.com/en-us/azure/app-service/azure-web-sites-web-hosting-plans-in-depth-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Announcing App Service Isolated, more power, scale and ease of use**: [https://azure.microsoft.com/nl-nl/blog/announcing-app-service-isolated-more-power-scale-and-ease-of-use/](https://azure.microsoft.com/nl-nl/blog/announcing-app-service-isolated-more-power-scale-and-ease-of-use/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Service on Linux Documentation**: [https://docs.microsoft.com/en-us/azure/app-service/containers/](https://docs.microsoft.com/en-us/azure/app-service/containers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CDN Documentation**: [https://docs.microsoft.com/en-us/azure/cdn/](https://docs.microsoft.com/en-us/azure/cdn/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redis Cache Documentation**: [https://docs.microsoft.com/en-us/azure/redis-cache/](https://docs.microsoft.com/en-us/azure/redis-cache/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrating applications with Azure Active Directory**: [https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-integrating-applications](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-integrating-applications)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Directory B2C Documentation**: [https://docs.microsoft.com/en-us/azure/active-directory-b2c/](https://docs.microsoft.com/en-us/azure/active-directory-b2c/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
