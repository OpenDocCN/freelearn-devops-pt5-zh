- en: '*Chapter 6*: Program Execution Challenges'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue the discussion of program-level agile with
    a focus on execution. Planning and execution go hand in hand. Indeed, as we saw
    in the previous chapter, key planning tools such as roadmaps and the program board
    are living documents that support ongoing execution since they are connected to
    the actual work items being delivered. This chapter rounds out the previous one,
    providing essential tools for scaling agile team execution to the program. Program-level
    execution is so important for business agility that the **Scaled Agile Framework**
    (**SAFe**) calls it **Essential** in **SAFe 5.0**. In other words, you are not
    following **SAFe** if you are not delivering at the team of teams level.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Overseeing the program room
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Negotiating and visualizing dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing waste, managing scope, and communicating progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overseeing the program room
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira Align provides a dashboard for teams at each level of scale called a **room**.
    The dashboard for program teams is the Program Room. It's a one-stop-shop for
    all things related to program-level execution. Here, the Release Train Engineer
    (RTE), scrum masters, and other program members have a bird's-eye view of what's
    happening in the program increment. To access it, select your program and PI in
    the configuration bar, then go to the navigation menu and select **Program** |
    **Program Room**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The program room is highly configurable, but there are two data sections that
    always display sprints and work items. These are shown in the middle of the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Jira Align program room'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.1_B16328.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Jira Align program room
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Sprints** section displays the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Each sprint in the PI has a green bar indicating the completion percentage based
    on accepted story points. Hover over the bar to see the numerical percentage.
    Stories must be assigned to the sprint to be included, but don't need to be accepted
    within the sprint.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The diamond icon indicates a release vehicle ship date. Hover over the diamond
    to see the name of the release vehicle and the completion percentage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The star icon indicates milestone and objective target completion dates. Hover
    over the star to see the name of the objective or milestone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The work items list displays the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: All features, capabilities, and portfolio epics assigned to the selected program
    and PI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can select the **Feature view**, **Feature by Portfolio Epic** view, or,
    if capabilities are enabled, the **Feature by Capability** view. Do this by clicking
    on the header of the work items list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the data for portfolio epics reflects the portion pertaining to the
    selected PI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The program room is configurable with over a dozen widgets that can be toggled
    on by clicking on the **View Configuration** button at the top of the workspace
    to the right of the center. Widgets can be repositioned in the room by clicking
    and dragging them. In the previous screenshot, we toggled on the progress, program
    increment load, team progress, and team load versus capacity widgets and positioned
    them to the left of the sprints and work items sections. We toggled on the actions,
    dependencies, and impediments widgets and positioned them to the right.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are descriptions of the various widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Progress**: Displays the time left for the PI; the percentage of objectives
    completed; the number and percentage of accepted stories versus total stories;
    the percentage of accepted portfolio epics, capabilities, features, and stories;
    and the number of dependencies completed out of the total number of dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**: Displays open and closed meeting action items for the selected
    program and PI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chat**: Provides an area for chat and discussions on any work item in the
    PI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies**: Displays dependencies where the selected program is a **Requesting** or **Depends On** program,
    dependencies between the program teams, and dependencies associated with the PI
    or that have a **Needed By** date within the PI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impediments**: Displays team impediments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objectives**: Displays PI objectives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program Increment Load**: Displays the program''s average velocity over the
    previous two PIs, which you can manually change by clicking on **Override**, and
    the PI load, which by default is the estimated load based on total feature points.
    You can click on the gear icon to select the actual load based on total story
    points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release Vehicle**: Displays release vehicles with work items assigned to
    the PI (even if the release vehicle dates are outside of the PI) and to the program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risks**: Displays risks for the selected program that are assigned to the
    selected PI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team Load vs Capacity**: Displays the load versus capacity percentage for
    each team in the program, based on the total team story points loaded in the PI
    divided by the team''s PI capacity. The PI capacity is the sum of the velocities
    of each sprint in the program increment. Click on a row to open the team''s details
    panel for more information, including current and past sprints and the average
    team velocity over the previous five sprints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program Increment Planning Checklist**: Provides a configurable list of steps
    to complete before starting the PI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team Progress**: Displays the total story points accepted by the team within
    the PI as a percentage of the team''s PI velocity. The team''s PI velocity is
    their average velocity multiplied by the number of sprints in the PI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runway**: Displays the runway for portfolio epics, capabilities, features,
    and stories, which allows you to compare the amount of time needed to complete
    the work you haven''t started with a goal you set. Click on the gear icon to enter
    the runway goal, which is measured in sprints for stories and months for features,
    capabilities, and portfolio epics, and the percentage deviation, which signifies
    how close you''d like to be to the goal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You now know the key data sections and widgets of the program room, and they
    are only a portion of what the program room offers. Here are some other highlights:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Key Metrics** button at the top of the workspace to see the PI
    burndown/burnup, group velocity, velocity by certainty, velocity by complexity,
    and PI defect trend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run a Meeting** button to launch backlog refinement and scrum
    of scrums meetings. RTEs can start and stop PIs by clicking on the button in the
    top-right corner of the workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **View Program Board** button to open that centerpiece of the program,
    which we covered in the previous chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you've been introduced to the program room, let's return to the all-important
    topic of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Negotiating and visualizing dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned how to view, customize, and share information
    from the dependency grid. We'll now examine Jira Align's sophisticated dependency
    workflow. After that, we'll learn how to handle external dependencies. Lastly,
    we'll explore the various dependency visualizations beyond the basic grid view.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jira Align''s dependency functionality enforces a contract between teams supported
    by a collaborative workflow. The first step in the workflow is to create a dependency.
    To do so, click on the **Add Dependency** button in the top-right corner of the
    dependency grid workspace to open the **New Dependency** details panel, shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Jira Align create a new dependency'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.2_B16328.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Jira Align create a new dependency
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can enter and track the following details for a dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Title**: Add a meaningful title for the dependency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Add further descriptive details about the dependency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PI-5`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is this Dependency for?**: Select the dependent work item (feature,
    capability, or portfolio epic). For example, select **Feature** and then associate
    a feature as the dependent work item. A dependent work item is one that depends
    on another team or program''s work item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Baltimore`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cowboys`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Sprint 25`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, click on the **Save** button. The dependency status will be set to **NOT
    COMMITTED**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Jira Align dependency not committed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.3_B16328.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Jira Align dependency not committed
  prefs: []
  type: TYPE_NORMAL
- en: 'The team on the receiving end of the request – in this case, `Cowboys` – should
    respond by selecting a `Sprint 24`. If the respondent commits by or earlier than
    the **Needed By** sprint – for example, **Sprint 25** – then it will set the status
    to **COMMITTED**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Jira Align dependency committed](img/Figure_6.4_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Jira Align dependency committed
  prefs: []
  type: TYPE_NORMAL
- en: 'If the respondent chooses to commit to a later sprint – for example, by selecting
    `Sprint 26` as the `Baltimore` – to consider. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Jira Align new dependency proposal](img/Figure_6.5_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Jira Align new dependency proposal
  prefs: []
  type: TYPE_NORMAL
- en: 'If the requester now clicks on the **Accept** button, this would set the dependency
    status to **COMMITTED** and update the **Needed By** sprint to match the new **Committed
    By** sprint. If the requester clicks on the **Decline** button, then the status
    would be set to **NOT COMMITTED**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Jira Align dependency proposal declined](img/Figure_6.6_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Jira Align dependency proposal declined
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs: []
  type: TYPE_NORMAL
- en: It is important that the requester communicates with the respondent to negotiate
    a mutually agreeable commitment date. We recommend directly speaking with the
    other team to negotiate a suitable commitment date before formalizing the agreement
    in Jira Align.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the requester has declined the new proposal, it''s the respondent''s
    turn to act. At this point, the respondent can indicate that their team is blocked
    by clicking on the **Block** button and providing a blocked reason, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Jira Align dependency blocked](img/Figure_6.7_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Jira Align dependency blocked
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the respondent can click on the **Request New** button and select
    a **Committed By** sprint on or before the **Needed By** sprint to set the dependency
    to **COMMITTED** status. If this does not occur, it could take several volleys
    back and forth before both sides agree on a **Committed By** sprint. All of this
    activity can be viewed by clicking on the **Audit Log** link at the top right
    of the details panel. Clicking on the **Subscribe** link will notify you of changes
    to the dependency. Note that by default, the **Product Owner** (**PO**) and scrum
    master of the involved teams are automatically notified.
  prefs: []
  type: TYPE_NORMAL
- en: 'As work progresses, either the requester or the respondent can indicate that
    they are blocked at any time by setting the first or second field in the following
    screenshot to **Yes** and entering a blocked reason. This will set the dependency
    status to **Blocked**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_6.8_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Jira Align dependency work status
  prefs: []
  type: TYPE_NORMAL
- en: 'Once work is done, or if it turns out that no work is required to meet the
    needs of the dependent team, the third or fourth field in the previous screenshot
    can be set to **Yes**, which will update the status of the dependency to **DONE**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Jira Align dependency with no work required'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.9_B16328.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – Jira Align dependency with no work required
  prefs: []
  type: TYPE_NORMAL
- en: Note that aside from updating the **Work is Done** field (see *Figure 6.8*),
    it is best practice for the responding team to associate their work item – that
    is, the work item needed by the requesting team – with the dependency. This is
    done near the bottom of the dependency details panel. That way, the real-time
    status of the work item can be easily gathered when viewing the dependency details.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other actions you can take by clicking on the **More Actions** button
    at the top of the dependency details panel, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Delete**: Remove a dependency by deleting it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reject**: Cancel a dependency and mark it as **REJECTED**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duplicate**: Clone a dependency to serve as the basis for a similar one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uncommit**: Move a dependency status back to **NOT COMMITTED**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These options vary depending on the status of the dependency and your role
    permissions. Note that when a dependency is set to either **No Work Required**
    or **Rejected**, it will require **No Work / Rejected Reason** to be filled out,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Jira Align dependency rejected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.10_B16328.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – Jira Align dependency rejected
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've explored the dependency workflow, let's take a look at how to
    create external dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: External dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is a common challenge for teams to track external factors that affect their
    delivery. In Jira Align, external dependencies are not enabled by default. The
    Jira Align administrator can enable them by going to **Administration** | **Settings**
    | **Platform** and clicking on **Manage Dependencies** in the **Team** tab. This
    will open the window shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Jira Align Manage Dependency Combinations window](img/Figure_6.11_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Jira Align Manage Dependency Combinations window
  prefs: []
  type: TYPE_NORMAL
- en: Note the toggles shown for external dependencies at the feature, capability,
    and portfolio epic levels. The administrator can slide these on to enable external
    dependencies at those levels and then click on the **Save Settings** button to
    apply the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that external dependencies are enabled, let''s add external entities by
    going to `Publishing House` and we assign an internal owner who will be responsible
    for communications with the external entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Jira Align external dependency entity creation](img/Figure_6.12_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Jira Align external dependency entity creation
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when you close the window and create an external dependency, you will
    see the entities you added in the **External** dropdown list near the bottom of
    the following screenshot, in the **Depends On** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Jira Align create an external dependency](img/Figure_6.13_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Jira Align create an external dependency
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are creating an external dependency in `PI-5` for team `Baltimore`,
    which depends on the `Publishing House` external entity to complete work by `30/10/2020`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've explored the dependency workflow, including external dependencies,
    let's explore the various dependency visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jira Align calls its many helpful visualizations **dependency maps**. To access
    them, let''s return to the dependency grid by going to the navigation menu and
    selecting **Program** | **Manage** | **Dependencies**. Next, click on the **Maps**
    button near the top right of the workspace to access the visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Jira Align dependency maps](img/Figure_6.14_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Jira Align dependency maps
  prefs: []
  type: TYPE_NORMAL
- en: The options shown allow you to track, take action, and report on dependencies.
    Let's begin with the **Team Status** option.
  prefs: []
  type: TYPE_NORMAL
- en: Team status dependency map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This option allows you to view dependencies by team and prioritize them as
    needed. Be sure to set your team and PI context in the configuration bar. In the
    following screenshot, we have selected the `Baltimore` team and `PI-5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Jira Align team status dependency map](img/Figure_6.15_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Jira Align team status dependency map
  prefs: []
  type: TYPE_NORMAL
- en: 'The arrows on the dependency map indicate the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Right arrows**: Indicate outbound dependencies that the current team needs
    to deliver to another team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Down arrows**: Indicate inbound dependencies that the current team needs
    from another team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The color codes are shown in the report legend, which you can access by clicking
    on the color wheel button at the top right of the workspace. The dependencies
    are color-coded as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Green**: Committed/delivered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orange**: Not committed/not delivered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blue**: Rejected or no work required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Red**: Blocked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the dependencies are prioritized using the rank number and then ordered
    by clicking on the **Save** button at the bottom of the list. Click on the **Quick
    Filters** button to toggle on/off dependencies based on association (inbound or
    outbound) and status. Lastly, you can export a snapshot view of the dependency
    map by clicking on the **Capture** button. Let's now explore the **Incremental
    Status** option.
  prefs: []
  type: TYPE_NORMAL
- en: Incremental status dependency map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This option allows you to view dependencies by program to help coordinate the
    required work effort. As shown in the following screenshot, you can set the configuration
    bar context to include one or more programs with a program increment. Note that
    this is enabled by the best practice of programs within a portfolio sharing a
    common PI cadence:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Jira Align program increment status dependency map](img/Figure_6.16_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Jira Align program increment status dependency map
  prefs: []
  type: TYPE_NORMAL
- en: Here, we've selected the `AI`, `Blockchain`, and `Mobile` programs and `PI-5`
    as our context. Note the **Dependency Level** dropdown, where we've chosen to
    display **Team** dependencies. As with the previously discussed dependency map,
    statuses are color-coded to allow quick identification of dependencies that require
    attention and action. The color codes are shown in the report legend, which you
    can access by clicking on the color wheel button at the top right of the workspace.
    Additionally, you can click on the **Extra Configs** button to toggle on/off the
    dependencies based on status and/or target delivery sprint. You can export a snapshot
    view of the dependency map by clicking on the **Capture** button. Let's move on
    now to the **Grid View** option.
  prefs: []
  type: TYPE_NORMAL
- en: Grid view dependency map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This option displays the count of dependencies between teams and programs in
    the form of a matrix. The configuration bar context is set to include a program
    with a program increment. In the following screenshot, we''ve set the **Dependency
    Level** dropdown to **Program** to see a program dependency matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17 – Jira Align grid view dependency map](img/Figure_6.17_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – Jira Align grid view dependency map
  prefs: []
  type: TYPE_NORMAL
- en: Note the toggle selections at the top right where you can choose to show unassociated
    teams/programs and dependencies that are delivered and committed. Click on the
    **Extra Configs** button to filter dependencies based on type – for example, team/program
    dependencies, multiple team/program dependencies, capability external dependencies,
    and external dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on any number in the grid to open a details panel on the right.
    For example, in the following screenshot, we''ve clicked on `5` in the `Baltimore`
    row to see the five dependencies that `Baltimore` needs from the `Cowboys` team:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18 – Jira Align grid view dependency map details report](img/Figure_6.18_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – Jira Align grid view dependency map details report
  prefs: []
  type: TYPE_NORMAL
- en: Note that dependencies are displayed with the dependent work item and that statuses
    are color-coded according to the report legend. You can export a snapshot view
    of the dependency map by clicking on the **Capture** button. We're now ready to
    explore the popular **Wheel View** option.
  prefs: []
  type: TYPE_NORMAL
- en: Wheel view dependency map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This option allows you to view dependencies as lines or strings between teams/programs.
    Green lines indicate delivered dependencies, blue ones indicate not delivered,
    and red ones indicate blocked or uncommitted dependencies. The configuration bar
    context is set to include a program with a program increment. Clicking on a team
    or a program on the wheel opens a details panel on the right. For example, in
    the following screenshot, we''ve clicked on **Cowboys** to see the dependencies
    they need from others and that others need from them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Jira Align wheel view dependency map](img/Figure_6.19_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – Jira Align wheel view dependency map
  prefs: []
  type: TYPE_NORMAL
- en: 'Statuses are color-coded the same way as strings, and you can click on the
    color wheel icon in the top right for the color key. Note the toggle selections
    above the wheel, where you can show dependencies related to work items (features,
    capabilities, and portfolio epics), only associated dependencies, and inactive
    dependencies. You can further expand the work items to show specific levels of
    dependencies, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Jira Align wheel view dependency map options](img/Figure_6.20_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – Jira Align wheel view dependency map options
  prefs: []
  type: TYPE_NORMAL
- en: Here, we see that for dependencies associated with features, you can slide toggles
    on to display the team, program, and external dependencies. You can also toggle
    on the option to show items within or outside the program. For dependencies associated
    with portfolio epics and capabilities, you can slide on toggles to display program
    and external dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, you can export a snapshot view of the dependency map by clicking on
    the **Capture** button. We're now ready to explore the **Analytics View**.
  prefs: []
  type: TYPE_NORMAL
- en: Analytics view dependency map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This view allows you to analyze dependency clusters by showing which teams
    and programs have the highest quantity of dependencies. This way, you can find
    out where to focus your dependency reduction efforts. The configuration bar context
    is set to include a program with a program increment. You can set the **Dependency
    Level** dropdown to **Team** in order to see the team dependency trend, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.21 – Jira Align analytics view dependency map](img/Figure_6.21_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.21 – Jira Align analytics view dependency map
  prefs: []
  type: TYPE_NORMAL
- en: 'The dependencies are grouped in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cluster by team/program** as a percentage of the team/program with the most
    dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cluster by team/program** as a percentage of all dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Count by team/program** for the PI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing and reducing dependencies is critical for effective execution. Now
    that we've explored how to create, track, and visualize dependencies, let's examine
    how Jira Align can help with other key concerns of the program.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing waste, managing scope, and communicating progress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this closing section, we will explore how to get a handle on a program's
    scope of work for the PI, reduce duplicate work, and effectively communicate delivery
    status. We will begin with the popular **Work Tree** view, which has helped numerous
    organizations address these challenges. We'll then examine two reports, program
    increment progress and scope change, functionality for splitting features, and
    finally, the PI and release vehicle roadmaps. Together, these tools help ensure
    effective program-level execution.
  prefs: []
  type: TYPE_NORMAL
- en: Work tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the last chapter, we saw the benefits of real-time work status updates in
    the work view roadmap and program board. Another important visualization for real-time
    information is the work tree, which has the added benefit of showing how work
    items connect to one another from top to bottom and bottom-up. It is an important
    tool for analyzing work across the organization with an eye toward reducing work
    per *Principle 10* of the *Agile Manifesto*: *Simplicity—the art of maximizing
    the amount of work not done—is essential.* As a case in point, we''ve seen $750,000
    in savings due to the avoidance of duplicate work for a single program ART in
    a single PI. Cost savings of this magnitude could not have been possible without
    full enterprise-wide visibility into all work happening across the organization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, go to the navigation menu and select `Mobile` program and `PI-5`
    program increment in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.22 – Jira Align work tree](img/Figure_6.22_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.22 – Jira Align work tree
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on the **Extra Configs** button in the top-right corner of the
    workspace to access the view dropdown list, as shown in the following screenshot.
    Here, we focus on two views: **Top-Down View from Portfolio Epic** and **Bottom-Up
    View from Story**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.23 – Jira Align the work tree extra configs](img/Figure_6.23_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.23 – Jira Align the work tree extra configs
  prefs: []
  type: TYPE_NORMAL
- en: For a broader-reaching view that could potentially help identify larger duplicate
    work items, choose the top-down view. It starts with portfolio epics associated
    with the selected PI, and then traces downward, including all child and grandchild
    work items that are attached to the epic, including those that fall outside the
    PI. This view shows fewer orphan stories and more of the larger-size work items.
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking to identify more orphan stories with less attention to larger
    items, choose the bottom-up view. It starts with all stories associated with the
    selected PI and traces upward to the portfolio epics. It shows more orphan stories
    and fewer of the larger-size work items than the top-down view.
  prefs: []
  type: TYPE_NORMAL
- en: To limit the work items shown to only the selected PI, slide on the **Narrow
    Filter Report** toggle under **Extra Configs**. Note that the **Team View** option
    in the view dropdown is the same as the bottom-up view except that it allows you
    to filter the work tree for your team only. This is a good option for scrum masters
    and product owners.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've learned techniques for analyzing the interconnected work across
    the organization, let's explore two key reports for tracking the work of a PI
    as it progresses.
  prefs: []
  type: TYPE_NORMAL
- en: Program increment progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The program increment progress report provides an understanding of whether the
    work for the selected PI is on track. It presents both burndown and burnup charts
    for features and stories. Burndown charts are useful for portfolio managers and
    RTEs to predict when all work of the PI will be completed. They display remaining
    work in story points on the vertical axis versus time on the horizontal axis.
    Burnup charts provide insight into the teams' ability to deliver features and
    stories as planned. They display completed work and the total amount of work in
    story points on the vertical axis versus time on the horizontal axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the report, go to the navigation menu and select `Mobile` program
    and `PI-5` program increment in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.24 – Jira Align program increment progress report](img/Figure_6.24_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.24 – Jira Align program increment progress report
  prefs: []
  type: TYPE_NORMAL
- en: Note the since `PI-5` is not yet finished, there are three projected lines continuing
    from the orange accepted line on the burndown charts at the top of the workspace.
    These predict the normal, optimistic, and pessimistic trends for acceptance of
    the PI's remaining work based on the current acceptance rate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Burn Details** button at the top right of the workspace to open
    a panel with the predicted daily burn rate and underlying team velocities used
    in the calculation, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.25 – Jira Align program increment progress report burn details](img/Figure_6.25_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.25 – Jira Align program increment progress report burn details
  prefs: []
  type: TYPE_NORMAL
- en: Note that scrum masters and product owners can easily filter the report for
    their teams by clicking on the **Extra Configs** button at the top right of the
    workspace and selecting their name from the dropdown list.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also various options for drilling down into data by clicking on the
    **Drill Down** button located near the top of the workspace to the right of center.
    Here, you can view the charts by programs or themes and then drill down to see
    the programs'' teams or the themes'' portfolio epics. In the following screenshot,
    we have drilled down to view the burndown charts for the teams in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Jira Align program increment progress report by teams](img/Figure_6.26_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – Jira Align program increment progress report by teams
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, note that any chart can be displayed in full screen or downloaded by
    clicking on the three bars at the top of the chart to the right of the title.
    Now that we've seen how scrum masters, RTEs, and others can monitor and predict
    work delivery, let's see how they can identify and review any scope changes impacting
    the selected PI.
  prefs: []
  type: TYPE_NORMAL
- en: Scope change
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This report visualizes features that are added or removed during a PI and is
    useful for portfolio managers and RTEs to understand scope changes. To access
    the report, go to the navigation menu, click on the search icon (magnifying glass),
    and then search for `Program Increments Scope`. Be sure to set your context in
    the configuration bar. In the following screenshot, we have selected the `Mobile`
    program and the `PI-5` program increment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27 – Jira Align scope change report](img/Figure_6.27_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.27 – Jira Align scope change report
  prefs: []
  type: TYPE_NORMAL
- en: The first section of the report is a line graph showing how the scope changed in
    terms of total story points on the vertical axis and PI date markers on the horizontal
    axis. Ideally, all scope should be added at the start of a PI. A slightly upward
    trend on the line graph or statistics is normal. However, a downward trend indicates
    that teams overcommitted and had to remove story points from the PI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next section shows a roll-up of scope change statistics for the PI, and
    the last section provides a list of features, broken down as follows: in scope
    at the start of the PI, added to the PI after it started, and removed from the
    PI after it started. The dates that features were added or removed are shown,
    along with their current state. This allows product managers and RTEs to evaluate
    the trade-offs made during the PI as inputs for continuous learning and better
    planning for future PIs.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen how to monitor scope changes during the PI, let's examine
    how RTEs can ensure that the PI is ready to be closed by using a PI cleanup report.
  prefs: []
  type: TYPE_NORMAL
- en: PI cleanup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The program increment cleanup is a comprehensive audit report showing all items
    due for completion in the selected PI that have not yet been closed, accepted,
    or delivered. It is useful for program leaders and RTEs to run the report toward
    the end of a PI, or even after a PI completes, to see what items are outstanding.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the report, go to the navigation menu, click on the search icon (magnifying
    glass), and then search for `Program Increments Cleanup Report`. Be sure to set
    your context in the configuration bar. In the following screenshot, we''ve selected
    the `Mobile` program and the `PI-5` program increment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.28 – Jira Align program increment cleanup](img/Figure_6.28_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.28 – Jira Align program increment cleanup
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can click on any item''s ID to open its details panel on the right.
    The report displays data in a series of scrolling sections, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective Not Completed**: All objectives due in the PI that are not yet
    completed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risks That Are Open**: All risks that are not yet closed in the PI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impediments That Are Open**: All impediments that are not yet closed in the
    PI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stories Not Accepted**: All stories due in the PI that are not yet accepted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Features Not Accepted**: All features due in the PI that are not yet accepted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Action Items**: All action items that are not yet closed in the PI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portfolio Epics Not Accepted**: All portfolio epics due in the PI that are
    not yet accepted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies Not Delivered**: All dependencies due in the PI that are not
    yet delivered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stand-alone Features With No Epics Assigned**: All features due in the PI
    that are orphans and don''t have a parent portfolio epic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stories With No Features Assigned**: All stories due in the PI that are orphans
    and don''t have a parent feature'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overall scan of the report will quickly provide a feel for the health of
    the PI for the selected program. It's especially useful to review the report toward
    the end of the PI so that outstanding items can be addressed before the PI is
    closed. In some cases, items may need to be moved to either the next PI or unassigned
    backlog, or split, a function we will explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Handling unfinished work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've seen how the PI cleanup report brings attention to the program's
    unfinished work, we'll learn how best to handle it. Just as it's best practice
    for teams to split unfinished stories at the end of a sprint for a more accurate
    velocity metric, programs split unfinished features at the end of the PI. This
    practice ensures a more accurate program velocity and carries forward only the
    unfinished portion of the work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira Align makes it easy to split unfinished features. Simply click on the
    feature in the backlog, program board, or elsewhere to open its details panel.
    Next, click on the **Split** link on the right, seven positions down from the
    **View in JIRA** button. This will open the window shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.29 – Jira Align splitting a feature](img/Figure_6.29_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.29 – Jira Align splitting a feature
  prefs: []
  type: TYPE_NORMAL
- en: Note that Jira Align adds a suggested `(Split Part 2)` suffix to the original
    feature name, which you can modify. Next, select a future PI or the unassigned
    backlog to which the new feature, along with the unaccepted stories from the original
    feature, will be moved. Lastly, click on the **Split** button to execute the feature
    split.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once split, the original feature will display a link to the new feature, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.30 – Jira Align split feature link](img/Figure_6.30_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.30 – Jira Align split feature link
  prefs: []
  type: TYPE_NORMAL
- en: Note that the original feature is identified as the parent and the new split
    feature as the child. You can click on the link to open the child from the parent
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen some ways to better monitor scope and delivery for the PI,
    we'll return to the roadmaps module to see two effective ways for product managers,
    release managers, and RTEs to communicate delivery expectations by PI and release.
  prefs: []
  type: TYPE_NORMAL
- en: PI roadmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The program increment view roadmap displays PI cards based on the context set
    in the configuration bar. To access it, go to the navigation menu, select **Program**
    | **Manage** | **Roadmaps**, and then select **Program Increments** from the dropdown
    at the top left of the workspace. Be sure to set your context in the configuration
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we have chosen the `Digital Services` portfolio
    and the following PIs: `PI-5`, `PI-6`, and `PI-7`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.31 – Jira Align roadmap program increment view](img/Figure_6.31_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.31 – Jira Align roadmap program increment view
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that PI end dates are shown as diamond shapes along the timeline. Each
    PI card displays a progress bar based on the percentage of accepted story points
    for the PI along with several configurable details sections. To configure the
    PI cards, click on the **View Configuration** button to access the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Photo**: Slide this toggle on to display an image for each PI card. To upload
    an image, hover over the card and click on the **Replace Image** button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dates**: Slide this toggle on to display either internal, external, or program
    increment dates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost & value**: Slide this toggle on to display estimated and actual costs
    for the PI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Slide this toggle on to display the PI description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Highlights**: Slide this toggle on to enable the selection of themes, portfolio
    epics, or features to appear in the highlights section. Click on the **Add Highlight**
    link on a PI card to select the work items you''d like to draw attention to in
    this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objectives**: Slide this toggle on to enable the selection of objectives
    to appear in the objectives section. Click on the **Add Objectives** link on a
    PI card to select the objectives you''d like to draw attention to in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show completed PIs**: Slide this toggle on to display stats for completed
    PIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having the preceding information readily available on a live roadmap helps program-level
    staff such as RTEs to obtain and share the real-time status on PI execution and
    provide targeted delivery highlights. We'll now look at a roadmap geared toward
    release management staff.
  prefs: []
  type: TYPE_NORMAL
- en: Release vehicle roadmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release vehicles represent a set of features and/or stories released to actual
    customers. Releases can happen at any time following the agile practice of deploying
    continuously and releasing on demand. The release vehicle roadmap displays informative
    highlights based on the selected portfolio/programs and PIs. To access it, go
    to the navigation menu, select `Digital Services` portfolio and the following
    PIs: `PI-5`, `PI-6`, and `PI-7`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.32 – Jira Align roadmap release vehicle view](img/Figure_6.32_B16328.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.32 – Jira Align roadmap release vehicle view
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that release dates are shown as diamond shapes along the timeline. Each
    card displays a progress bar based on the percentage of accepted story points
    for the release vehicle, along with several configurable details sections. To
    configure the release vehicle cards, click on the **View Configuration** button
    to access the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dates**: Slide this toggle on to display either internal, external, or program
    increment dates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program Increments**: Slide this toggle on to display the program increment
    during which the release is shipped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Highlights**: Slide this toggle on to enable the selection of defects, stories,
    or features to appear in the highlights section. Click on the **Add Highlight**
    link on a release vehicle card to select the work items you''d like to draw attention
    to in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show completed**: Slide this toggle on to show stats for completed release
    vehicles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having the preceding information readily available on a live roadmap helps program-level
    staff such as release managers to obtain and share real-time insights on release
    readiness and provide targeted delivery highlights.
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations, you''ve now learned how to build all varieties of roadmaps,
    from the work item roadmap at the start of the previous chapter to the PI and
    release vehicle roadmaps examined here. These, along with all that we learned
    in between, are sure to help you achieve alignment on all dimensions: people delivering
    work over periods of time to achieve outcomes.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to overcome the execution challenges at the
    program level. We began by looking at the command center for execution, the program
    room. We then learned about the dependency workflow and how to handle external
    dependencies and use dependency maps. Lastly, we explored ways to reduce unnecessary
    work, manage scope, and communicate PI and release progress.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss common portfolio-level challenges, how
    **lean portfolio management** (**LPM**) shifts the mindset from project to product,
    and what it takes to connect business strategy with execution for organizational
    alignment.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which program room widget displays the program's average velocity?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which dependency maps allow you to visualize external dependencies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does the work tree module support reducing waste?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Scaling Scrum Across Modern Enterprises* by Cecil Rupp (Packt, 2020)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure 6.32 – Jira Align roadmap release vehicle view
  prefs: []
  type: TYPE_NORMAL
