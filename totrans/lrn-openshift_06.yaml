- en: OpenShift Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed how to set up your OpenShift lab environment
    quickly and easily using the most popular and simple methods with `oc cluster
    up`, MiniShift, and Vagrant on CentOS7, macOS, and Windows operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the hardware and software requirements
    of OpenShift Origin, and you will obtain a basic understanding of OpenShift deployment
    scenarios and installation methods. You will also be able to perform an advanced
    installation of OpenShift using Ansible and learn about various options to customize
    your setup with the Ansible inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of OpenShift installation methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment preparation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The learning environment for this chapter will be represented by a single virtual
    machine deployed through Vagrant on VirtualBox. You will need the following minimal
    configuration in order to support the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **CPU** | **RAM, GiB** | **OS** |'
  prefs: []
  type: TYPE_TB
- en: '| 2 cores with HT enabled | 6 | Fedora 26/CentOS 7/RHEL 7 |'
  prefs: []
  type: TYPE_TB
- en: The VM will be about 3 GB in size, so make sure that you have enough free space
    on your `/home` partition, or change the location of the directory where VirtualBox
    stores the VM's files in the File | Preferences | General | Default Machine folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Vagrantfile` that can be used for deploying our VM may look similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As all OpenShift services in this chapter will be deployed on a single VM, we
    will provide it with 4 vCPUs and 4 GiB RAM so that all processes have an adequate
    amount of resources to start with.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be able to pull `centos/7` box, you will need Vagrant version 2.x.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on the Origin flavor of OpenShift, which is publicly
    accessible without any subscription. Like other OpenShift variants, Origin supports
    all features of commercial OpenShift versions that are provided by RedHat. OpenShift
    is a complex platform that consists of many components that interact and work
    together, with each having their own requirements, so before we start, we will
    have to satisfy them.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Official OpenShift Origin documentation provides sufficient hardware requirements
    for different host types. They are summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Masters** | **Nodes** | **External etcd** |'
  prefs: []
  type: TYPE_TB
- en: '| **vCPU** | 2 | 1 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| **RAM, GiB** | 16 | 8 | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| **Disk Storage/Partitioning, GB** | `/var: 40``/usr/local/bin: 1``/tmp: 1`
    | `/var: 15``/usr/local/bin: 1``/tmp: 1``Docker storage backend: 15` | `20, SSD
    is recommended` |'
  prefs: []
  type: TYPE_TB
- en: '| **Network, GB/s** | 1 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: The preceding information is not carved in stone and is only provided as a guideline.
    Hardware requirements for your particular installation are heavily influenced
    by such factors, as expected number of applications and workload. In fact, they
    may even be less strict.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of OpenShift installation methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift Origin can be installed in several ways, depending on OS and requirements
    regarding availability, reliability, and scalability.
  prefs: []
  type: TYPE_NORMAL
- en: RPM installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the default method. It installs all required services as systemd units
    from RPM packages, and they are available on RHEL/CentOS/Fedora. We will focus
    on this method using the CentOS 7 Linux distribution in the upcoming sections
    so that you may get a better understanding of the mechanisms involved.
  prefs: []
  type: TYPE_NORMAL
- en: Containerized installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the only available method for Atomic Host OS. It installs OpenShift
    services in Docker containers, which provides an additional level of control.
    This method is preferable in an enterprise environment, as Atomic Host makes any
    dependency issues between packages a thing of the past and makes the host preparation
    process much easier, as Atomic Host provides a container-focused environment out
    of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift Origin supports various models of deployment, which are listed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**All in one**: Single master, single etcd, and single node installed on the
    same system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single master, single etcd, and multiple nodes**: This is the scenario we
    are going to focus on, as it is relatively simple to set up while providing relevant
    experience. Master and etcd will be installed on the same host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single master, multiple external etcd, and multiple nodes**: This scenario
    provides HA of etcd nodes by clustering. Multiple etcd nodes form quorum, which
    is why an odd number of nodes is advised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple masters, multiple external etcd, and multiple nodes**: This scenario
    provides native HA of API as well, which will be explored later in this book.
    Masters by themselves are stateless, which means that they don''t require any
    synchronization mechanisms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates an all-in-one installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All-in-one
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a multi-node OpenShift installation with single
    master and etcd instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Single master, single etcd, and multiple nodes
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the installation scenario by using a multi-node
    cluster of etcd:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Single master, multiple etcd, and multiple nodes
  prefs: []
  type: TYPE_NORMAL
- en: 'In a production environment, redundancy and data durability are very important.
    The following diagram gives an example of a production OpenShift installation.
    The installation contains three master and three etcd services. All ingress traffic
    is load balanced:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Multiple masters, multiple etcd, and multiple nodes
  prefs: []
  type: TYPE_NORMAL
- en: Although it's not uncommon to deploy etcd on the same hosts as masters, they
    are independent entities and while the former require quorum in an HA setup, masters
    do not and can be separately deployed in practically any numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Environment preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the RPM installation method, certain configurations need to be made before
    the installation begins. All commands in the following subsections are to be performed
    as the root.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, start the vagrant VM and login as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you do anything else, make sure that all hosts are up-to-date so that
    all features required by OpenShift are supported by the kernel and user-space
    libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also need the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We also installed the `epel-release` package that enables the EPEL repository
    needed for installing the latest version of Ansible, required by OpenShift 3.9.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, you can install Ansible on any system, even on your laptop,
    and install OpenShift from there. But for the sake of simplicity we consolidate
    everything, including Ansible control functions, on a single VM.
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with Kubernetes, Docker is relied on by OpenShift for providing a container
    runtime environment. Therefore, we will need to activate Docker on our OpenShift
    VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: SELinux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SELinux must be enabled on all OpenShift nodes, including masters, before running
    the installer. This is required for isolating container processes with special
    MLS labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/etc/selinux/config` file on the VM and make sure that the `SELINUX`
    and `SELINUXTYPE` parameters are set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: SELinux should already be configured by default. You will need to reboot the
    VM to activate the changes if you made any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check to see if `SELINUX` is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Ansible installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is a configuration management and orchestration tool that's written
    in Python. OpenShift Origin installer is actually a collection of Ansible playbooks
    in YAML format that define what services must be installed and how they are to
    be configured.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible playbooks are run from a single point, which is called a control machine
    in Ansible terminology. It can be any machine and in our demonstration of advanced
    installation, we will use the master as a control machine.
  prefs: []
  type: TYPE_NORMAL
- en: These packages are provided by the EPEL repository, which is already enabled
    out-of-the-box in our lab. If they weren't, you would have to install the `epel-release`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, clone the installation playbooks themselves from the Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We switched specifically to the **3.9** release because the master branch actually
    tracks the development version.
  prefs: []
  type: TYPE_NORMAL
- en: SSH access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible connects to other systems over SSH protocol, so it requires an SSH
    key pair. In this section, we are going to ensure SSH access from the root account
    of our VM to the root account of the same VM. This can be accomplished with the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check whether access is indeed enabled by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Advanced installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Being able to start a small cluster in a matter of minutes with minimal effort
    is great, but what if you need more control over various features so that you
    get a fully functional cluster right after installation? The answer is advanced
    installation. As opposed to quick installation, it involves the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Ansible inventory file, containing all hosts spread over groups
    in accordance with the chosen deployment model, and variables customizing the
    installation for your environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the Ansible playbook to install, configure, and start all OpenShift
    components, including internal registry, registry console, and router
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Ansible inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A typical Ansible inventory is a text file that contains groups of hosts and
    their variables. In the case of OpenShift, there are specific sections that may
    be present depending on the deployment topology and other requirements. They are
    summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Section** | **Description** | **Required** |'
  prefs: []
  type: TYPE_TB
- en: '| `masters` | Hosts for installation of master services, notably API. Can be
    a single node for standalone deployment, or an odd number of hosts for an HA setup.
    | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `new_masters` | Additional hosts for installation of master components when
    scaling an existing cluster up. | No |'
  prefs: []
  type: TYPE_TB
- en: '| `nodes` | Hosts for installation of node components, notably kubelet. Usually,
    there is more than one node, because best practice suggests designating at least
    one of the nodes as an infrastructure node to host such system services as registry
    and router.This section must include all masters as well. | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `new_nodes` | Additional hosts for the installation of node components when
    scaling an existing cluster up. | No |'
  prefs: []
  type: TYPE_TB
- en: '| `etcd` | This section is specified only in the case of HA configuration with
    multiple external etcds. It may contain the same hosts as masters, but since masters
    and etcd have different system requirements, it is better to deploy them on separate
    machines. An odd number is suggested for a quorum. | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `nfs` | The host for configuring NFS as a persistent storage backend for
    Ansible broker, internal registry, Hawkular metrics, and Elasticsearch logging.
    | No |'
  prefs: []
  type: TYPE_TB
- en: '| `lb` | In the case of multiple masters, you will have to provide a point
    of contact for external clients, which will distribute traffic between master
    hosts. By placing a host in this section, you will instruct Ansible to install
    HAProxy on that host and configure it for load balancing and TLS/SSL passthrough.
    | No |'
  prefs: []
  type: TYPE_TB
- en: '| `glusterfs` | Hosts for configuring GlusterFS as a persistent storage backend.
    | No |'
  prefs: []
  type: TYPE_TB
- en: '| `glusterfs_registry` | Hosts for configuring GlusterFS as a persistent storage
    backend for the internal registry. | No |'
  prefs: []
  type: TYPE_TB
- en: '| `OSEv3:vars` | This section contains global variables for configuring various
    aspects of OpenShift, such as authentication, registry placement, and so on. |
    Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `OSEv3:children` | This section lists all of the groups that are specified
    in the rest of the file. | Yes |'
  prefs: []
  type: TYPE_TB
- en: 'Ansible looks for specific variables to determine how various subsystems must
    be configured. The ones that we are going to use are listed in the following table.
    The full list of variables is available in the official documentation at [https://docs.openshift.org/latest/install_config/install/advanced_install.html](https://docs.openshift.org/latest/install_config/install/advanced_install.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Variable** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `openshift_node_labels` | Labels assigned to a particular node or to all
    nodes, depending on whether it is set for a node or globally in `OSEv3:vars`.
    You should have at least one node labeled as `{''region'': ''infra''}`. |'
  prefs: []
  type: TYPE_TB
- en: '| `openshift_schedulable` | Controls whether a node can be used to run pods.
    Masters are configured as unschedulable by default, but if you have no nodes labeled
    as infra, you must explicitly set it to true for at least one master, otherwise,
    pods for the registry and router will fail to start. |'
  prefs: []
  type: TYPE_TB
- en: '| `ansible_ssh_user` | The user account used by Ansible to connect to hosts
    via SSH. |'
  prefs: []
  type: TYPE_TB
- en: '| `openshift_master_identity_providers` | Authentication backends. By default,
    OpenShift uses `AllowAllPasswordIdentityProvider`, effectively accepting all credentials,
    which is insecure and unacceptable in enterprise environments. |'
  prefs: []
  type: TYPE_TB
- en: '| `deployment_type` | OpenShift distribution to install. Acceptable values
    are `enterprise` for the Red Hat OpenShift Container Platform and `origin` for
    OpenShift Origin. |'
  prefs: []
  type: TYPE_TB
- en: '| `openshit_master_default_subdomain` | The subdomain for exposed services.
    By default, it is `<namespace>.svc.cluster.local`. |'
  prefs: []
  type: TYPE_TB
- en: '| `openshift_disable_check` | Prior to actual installation, Ansible runs a
    number of checks to make sure that the environment satisfies certain requirements,
    such as available memory, disk space, and so on. This is meant as a safeguard
    against poor resource planning, but can be excessive in proof-of-concepts installations,
    like ours. Since we do not need 8 GB of RAM, 40 GB of disk space for the master,
    and 15 GB for nodes in /var for a testing environment, these checks can be safely
    skipped. |'
  prefs: []
  type: TYPE_TB
- en: '| `openshift_clock_enabled` | OpenShift hosts rely on timestamps for the correct
    propagation of updates through `etcd`, failover, and quorum, which is achieved
    by time synchronization through NTP. This setting controls whether the `chronyd`
    daemon must be activated. |'
  prefs: []
  type: TYPE_TB
- en: 'Summarizing the information given in the preceding tables, the inventory file''s
    structure should resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we have only one node, we have to mark it as schedulable and belonging to
    `infra` region, so that registry, registry console, and router can be deployed.
    In production, you would usually dedicated masters to management and synchronization
    tasks, while leaving all the work of running containers to nodes, as well as have
    multiple nodes split up between different regions for availability..
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift Ansible playbooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OpenShift Ansible repository contains various playbooks for different tasks.
    Some of them are presented in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Playbook** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `playbooks/prerequisites.yml` | Sets up prerequisites for the cluster deployment,
    such as subscribing hosts to Red Hat (in case of Red Hat Enterprise Linux), enabling
    repositories, and setting up firewall. |'
  prefs: []
  type: TYPE_TB
- en: '| `playbooks/deploy_cluster.yml` | Performs a complete installation of OpenShift
    Origin by installing all required packages, configuring, and starting services.
    This is the playbook we will use in this chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| `playbooks/openshift-master/scaleup.yml` | Looks for the host group `new_masters`
    in the inventory and configures these hosts as new members of the cluster. After
    scaleup is complete, you must move these hosts to the group `masters` to prevent
    Ansible from treating them as new ones during the next run. |'
  prefs: []
  type: TYPE_TB
- en: '| `playbooks/openshift-node/scaleup.yml` | Looks for the host group `new_nodes`
    in the inventory and configures these hosts as new members of the cluster. After
    scaleup is complete, you must move these hosts to the group `nodes` to prevent
    Ansible from treating them as new ones during the next run. |'
  prefs: []
  type: TYPE_TB
- en: '| `playbooks/openshift-etcd/scaleup.yml` | Looks for the host group `new_etcd`
    in the inventory and configures these hosts as new members of the cluster. After
    scaleup is complete, you must move these hosts to the `etcd` group to prevent
    Ansible from treating them as new ones during the next run. |'
  prefs: []
  type: TYPE_TB
- en: Familiarity with Ansible is beneficial, but not required.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, we should have everything we need to begin the installation,
    so without further delay, let''s get started by running the prerequisites playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This playbook usually runs for a couple of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s fire up the actual deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It is quite normal for this process to take 15-20 minutes, so you might as well
    use this time to skim through this book for basic operations to get you up and
    running faster.
  prefs: []
  type: TYPE_NORMAL
- en: Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the installation has completed without any failures, you may perform basic
    sanity checks by querying the master API for installed nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As one would expect from the inventory, our single node acts both as master
    and node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another check you can run is to see if infrastructure components, like registry,
    registry console, and router were successfully deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Infrastructure components of OpenShift reside in the `default` project/namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also login to the web console at `https://172.24.0.11:8443`, where
    you will be prompted to accept a self-signed certificate, which you should do.
    You can use any credentials, as OpenShift accepts anyone by default, and you will
    see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1\. OpenShift Service Catalog
  prefs: []
  type: TYPE_NORMAL
- en: The first thing users see when they log in to OpenShift is the Service Catalog,
    which presents them with various languages and runtimes they can use for deploying
    their applications. Technically, these are templates which you will get an in-depth
    understanding of in [Chapter 9](part0195.html#5PUTM0-78aafb146b304cdeb9b3261a70edabde),
    Advanced OpenShift Concepts and in [Chapter 13](part0265.html#7SN520-78aafb146b304cdeb9b3261a70edabde),
    *Deploying Multi-Tier Applications Using Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about various deployment scenarios of OpenShift
    Origin, as well as installation methods. You wrote an Ansible inventory file and
    used it to deploy a ready-to-use OpenShift Origin platform with an internal registry,
    registry console, and a router installed out-of-the-box.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we are going to cover OpenShift core concepts such
    as creating new applications with OpenShift pods, services, routes, projects,
    and users. This will give you foundational skills, which will be enough for you
    to be able to run and manage your application container infrastructure in OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What sections of the Ansible inventory file are mandatory for OpenShift installation?
    choose two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: masters
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: nfs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: new_masters
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: etcd
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What label must be assigned to at least one node for successful deployment of
    a router and internal registry?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: infrastructure
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: dedicated
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: infra
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: special
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What Ansible playbook is being used to deploy the OpenShift cluster?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: playbooks/deploy_cluster.yml
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: playbooks/byo/config.yml
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: playbooks/prerequisites.yml
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: playbooks/common/openshift-cluster/config.yml
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please see the following for further reading to accompany this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware requirements**: [https://docs.openshift.org/latest/install_config/install/prerequisites.html](https://docs.openshift.org/latest/install_config/install/prerequisites.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment scenarios**: [https://docs.openshift.org/latest/install_config/install/planning.html#installation-methods](https://docs.openshift.org/latest/install_config/install/planning.html#installation-methods)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced installation and variables reference**: [https://docs.openshift.org/latest/install_config/install/advanced_install.html](https://docs.openshift.org/latest/install_config/install/advanced_install.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenShit Installation and Configuration**: [https://access.redhat.com/documentation/en-us/openshift_container_platform/3.9/html-single/installation_and_configuration/#install-config-install-planning](https://access.redhat.com/documentation/en-us/openshift_container_platform/3.9/html-single/installation_and_configuration/#install-config-install-planning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
