- en: Jira Schemes and Configuring Project Workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will begin customizing Jira. Thus far, we have covered the
    basic functionality of the tool and have gone through the unique features of Jira
    Core, Jira Software, and Jira Service Desk. Learning how to customize Jira will
    help you tweak it for your own specific requirements.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin with understanding the concept of Jira schemes and then we will
    learn how to customize a workflow in our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The various types of user in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of various schemes in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Jira workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The various types of user in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of the book, we created a new Jira instance, where we created
    new projects and also worked on those projects to understand the features. We
    were able to do that only because we also have the full admin rights on our instance.
    In Jira, however, not everyone can be an administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Primarily, there are three types of users in Jira, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: User
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project administrator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jira administrator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anyone who can log in to Jira is a user and, in most cases, a user will consume
    a Jira license as well, except in Jira Service Desk, where customers don't count
    toward the license.
  prefs: []
  type: TYPE_NORMAL
- en: A user is typically your developers or testers in the development team, and
    an agent in the service desk team. In most cases, users will work on their issues
    and tasks. More permissions can, however, be assigned to a user.
  prefs: []
  type: TYPE_NORMAL
- en: Project administrator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Project administrators are usually managers or leads. They are responsible for
    the whole project. They are quite similar to users, but usually have more rights
    in relation to the project. For instance, they can add people to a project, manage
    project milestones, and they have more authority as regards actual issues.
  prefs: []
  type: TYPE_NORMAL
- en: Jira administrator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from users and project administrators, Jira administrators have the authority
    to manage your Jira instance. They can create projects, users, customize project
    workflows, add more custom fields, and are also responsible for the performance
    of the whole instance.
  prefs: []
  type: TYPE_NORMAL
- en: Jira administrators usually receive requests from other people to customize
    their projects. Ideally, you should not give this permission to many people in
    your team. Only a few people should have responsibility for managing your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of various schemes in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create a project in Jira, the first thing that you do is create some
    issues under it. When the issues are created, you may want to assign it to someone.
    The person who is supposed to work on the issue will then start working on the
    issue and will eventually resolve it. It is a very simple example of the life
    cycle of the issue in Jira, but there are many things happening in the background.
  prefs: []
  type: TYPE_NORMAL
- en: The way you work on the project, the kinds of issue you create, the fields you
    capture in the issue, and its life cycle stages and behavior, are defined by various
    schemes in a Jira project.
  prefs: []
  type: TYPE_NORMAL
- en: The project that we created earlier in this book involved utilizing the default
    template that comes with Jira. The default templates are nothing but a collection
    or set of various schemes. These templates help us to get started with Jira very
    quickly and, based on your development methodology, you can choose from various
    types of templates that are based on standard practices observed in the industry.
  prefs: []
  type: TYPE_NORMAL
- en: However, every team is different, and they may have their own expectations from
    a Jira project. Further customization can be done either on a project-by-project
    basis, or according to a set of projects using the same set of schemes, prior
    to modifying them. Let's quickly understand the purpose of the various schemes
    in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Issue type schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Jira, we can have different issue types, such as Epic, Story, Task, and Bug.
    You can always create more issue types if you want. Issue type schemes define
    which issue types will be available within a particular project.
  prefs: []
  type: TYPE_NORMAL
- en: A typical scrum-based project in Jira software would have Story, Bug, Epic,
    Task, and Sub-task, which is defined by the issue type scheme used in the project.
    One scheme can always be shared by other projects in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Workflow defines the life cycle of an issue in Jira. Within a project, you
    can have one workflow for all the issue types or separate workflows for each one
    of them. If you are using Jira Core with issue types such as Task and Sub-task,
    then creating a single workflow with three statues: Open, In Progress and Closed—would
    work, but, for a software development project, you may want to have separate workflows
    for Bug and Story.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Workflow schemes define which workflow will be used by which issue type in
    the project. The following table provides you with some examples of workflow schemes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Project** | **Issue types** | **Workflows** |'
  prefs: []
  type: TYPE_TB
- en: '| Legal project | TaskContract | Legal workflow (Task and Contract) |'
  prefs: []
  type: TYPE_TB
- en: '| Software project | EpicStoryBugTask | Agile Workflow (Epic and Story)Defect
    Workflow (Bug and Task) |'
  prefs: []
  type: TYPE_TB
- en: When new workflows are created, you can attach them to an existing issue type
    in the same workflow scheme used in the project. For example, in our preceding
    software project, if, in future, a third workflow is needed for Epic, it can be
    done by simply modifying an existing workflow scheme.
  prefs: []
  type: TYPE_NORMAL
- en: Issue type screen schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create issues in Jira, the pop-up window where you fill in the details
    is nothing but a screen. It is a collection of fields. You would normally use
    screens to add/remove fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Jira, screens are associated with three operations: create, edit, and view.'
  prefs: []
  type: TYPE_NORMAL
- en: Different screens can be used when you create an issue, when you edit it, and
    when you are looking at the issue.
  prefs: []
  type: TYPE_NORMAL
- en: A screen scheme defines the mapping of the screen and an operation.
  prefs: []
  type: TYPE_NORMAL
- en: The issue type screen scheme defines the mapping of the screen scheme and an
    issue type.
  prefs: []
  type: TYPE_NORMAL
- en: Field configuration schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create an issue in your project, you may have already noticed that
    some fields are mandatory, especially project, issue type, and summary, but if
    you want to make other fields mandatory as well, then you need to do that using
    field configurations. The other purpose of field configurations is to also hide
    certain fields completely.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of the field that you define—Required/Hidden is also mapped to
    the issue type. For instance, a field such as Due Date can be made mandatory for
    Bug, but not an Epic in the same project.
  prefs: []
  type: TYPE_NORMAL
- en: Permission schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have access to the project, then everything that you can do within
    that project is defined by the permission scheme configured for that project.
    There are various permissions related to who creates issues, edits issues, closes
    issues, adds a comment, adds attachments, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: When a new project is created, it comes with a default permission scheme that
    can be modified further if required. The individual permissions within a scheme
    can be given to an individual, project role, or a group of users in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Notification schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira can send email alerts to various people regarding different events. When
    the new issue is created, an email can be sent to the reporter of the issues.
    There are various events related to the issue and the workflow transitions. These
    notifications are configured for a variety of such events and can be modified
    if you don't want to receive lots of emails from the system.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the purpose of various schemes, let's now modify the software
    project that we created earlier and create a new workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Jira workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](a833f753-0310-4b30-8097-f5238af90724.xhtml), *Using Jira Software
    for Development Teams*, we created a Jira software project and familiarized ourselves
    with its various functionalities. We created a sample scrum project that comes
    with predefined configurations and schemes for scrum-based methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: Open Sample Scrum Project and go to Project settings | Workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that there is a workflow scheme with one workflow already in
    that project used by all the available issue types. In the following screen, if
    you click on the diagram link, you will then be able to look at the workflow associated
    with the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/572fceaf-9b8a-464c-a186-33e5ddd9e3b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see on the following screen, the workflow has three states: TO DO, DONE, and IN
    PROGRESS. The All sign signifies that you can go to any state directly; in other
    words, you don''t have to follow a specific path in order to resolve the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ecc5f6e-5fd6-4037-a738-b4f5a939a8af.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding workflow is already working well, but we want to create our own
    workflow, similar to this one, but with a few specific requirements, as mentioned
    in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new state: ON HOLD.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The issue cannot be sent to DONE directly. It has to go through the IN PROGRESS
    status first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram represents the workflow that we will be creating and
    using in our project for the Bug issue type only:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/012c626b-01d5-49db-9a52-762480ebf88a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3
  prefs: []
  type: TYPE_NORMAL
- en: New status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the proposed new workflow, there is a new status called ON HOLD, which we
    first need to create in our Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: Go to Jira settings | Issues | Statuses (under ISSUE ATTRIBUTES) and click on
    the Add status button in the top-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter `On Hold` under Name, and `Issue is on hold` under Description, and then
    click on the Add button to create a new status, demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43e525ad-7779-4c44-ba22-e6d18a266aba.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now create our new workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Jira settings | Issues | Workflows (Under WORKFLOWS) and click on the
    Add workflow button in the top-right corner and enter the Name as `Bug workflow`,
    `This is the Bug workflow` under Description, and then click on the Add button,
    as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b1cf8b1-9866-4111-8174-3ad1002affce.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5
  prefs: []
  type: TYPE_NORMAL
- en: On the next screen, you will be presented with the options to edit the workflow.
    There are two modes to edit the workflow—Diagram and Text, both the modes will
    more or less let you do the same thing with few options available to each mode
    but we will be using the Diagram mode to create our workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Add status option on the left-hand side and add the TO DO, IN
    PROGRESS, ON HOLD, and DONE statuses in your workflow, demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/370e8cb5-1510-45ef-ac1e-9d7b6ce556a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6
  prefs: []
  type: TYPE_NORMAL
- en: The statues will now be added to your workflow. We have made some progress,
    but we still need to do a few more things, primarily, removing unwanted statuses,
    adding transitions, and changing the Create transition to start from TO DO instead
    of OPEN state, this will ensure that the first state in the workflow is TO DO.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Create transition and change it to begin with from the OPEN status
    to the TO DO status instead by simply dragging the arrow and dropping it on TO
    DO, demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1075ba6-33fb-4a40-ba91-c4dc1b49aa1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7
  prefs: []
  type: TYPE_NORMAL
- en: Now click on the OPEN status and, in the pop-up window, click on the Remove
    status link, as shown in the preceding screenshot. Finally, click on the Remove
    button in the Confirm Remove Status dialog box.
  prefs: []
  type: TYPE_NORMAL
- en: We now have the necessary statuses in our workflow. We need to create a transition
    between those statuses as per the requirements of our workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, click on the TO DO status, drag a line from this status to the IN PROGRESS
    status. A pop-up window called Add Transition will appear, shown as follows, where
    you will be asked to enter the Name of the transitions, which could be the same
    as your destination status or any name of your choosing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0f3a6ef-22e3-46ac-9525-bb1f76bfa8ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8
  prefs: []
  type: TYPE_NORMAL
- en: Remember that this transition name will appear to the end user when they work
    on the Jira issue. Click on the Add button to add a new transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The moment you add the transition, a line with an arrow representing a transition
    will be created between these two statues. The direction of the arrow is also
    important here. To add a transition back from IN PROGRESS to TO DO, you need to
    add one more transition, demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d83248a-e0f3-4050-af1e-2afe1f4cc3e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, refer to our proposed workflow in the preceding diagram and create the
    remainder of the transitions. Your final workflow should look something like the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a959775-2e44-4f47-9359-e856abdb3b5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10
  prefs: []
  type: TYPE_NORMAL
- en: Our workflow is ready and all we need to do is use it in our project. We have
    just learned how to create a workflow, which is great, but there are lots of other
    customizations that can be done using workflow configurations, such as adding
    conditions and validators to our transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now go back to our project and use this workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Project settings | Workflows and then click on the Add Workflow button
    in the top-left corner, demonstrated as follows, and then click on the Add Existing
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd0b41e8-41cf-45f2-9770-d10d34523898.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Add Existing Workflow popup, find the Bug workflow that you just created
    and click on the Next button, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76f2abbf-6b83-4235-8127-2c784d4eb3b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in the Assign Issue Types to "Bug workflow" popup, select Bug and click
    on the Finish button, demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1197b12-7318-4bca-bfbf-e08c81b5df16.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, click on the Publish button at the top, demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc7b6a6d-ab8b-409e-98ac-f68895c45169.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next set of screens, you may need to Associate any existing issue with
    the new workflow. Just follow the process and you will then have a new workflow
    in your existing workflow scheme for your project, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8a059f8-751c-48e4-a597-87bb70a842eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now see this new Bug workflow in action when you work on the bugs in
    your project. Just create a new issue of type bug in your project and you will
    notice that you now have a new workflow with custom transitions and statuses,
    demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d761c02-b720-43db-a75c-4deed1d12414.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16
  prefs: []
  type: TYPE_NORMAL
- en: By way of good practice, always check whether the new workflow is behaving as
    you expected.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have now successfully started your journey of customizing
    Jira by creating your own workflow. In this chapter, we learned a lot, starting
    with an overview of various types of users in Jira and then we spent lot of time
    going through the process of creating a custom workflow and also using it in our
    existing project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue customizing Jira further and take a look
    at how we can add more fields to our project by using screens and making sure
    that those new fields are visible only on a specific type of issue. We will also
    take a look at various permissions and learn how to modify them.
  prefs: []
  type: TYPE_NORMAL
