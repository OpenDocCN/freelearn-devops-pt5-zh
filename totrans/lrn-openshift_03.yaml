- en: CRI-O Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we briefly discussed Kubernetes concepts and the Kubernetes
    architecture, and the main differences between Kubernetes and Docker Swarm.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to give you a basic understanding of an alternative
    container runtime technology for Kubernetes—CRI-O. This chapter provides a basic
    understanding of the Container Runtime Interface, Open Container Initiative, and
    CRI-O, and describes how to manage containers using that technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'After reading this chapter, you will have a solid understanding of the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Container Runtime Interface and Open Container Initiative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How CRI-O works with Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and working with CRI-O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to use the following technologies and software:'
  prefs: []
  type: TYPE_NORMAL
- en: Minikube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bash Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will be required to install Minikube on your laptop or any other virtual
    environment you are going to use. All the instructions for installing Minikube can
    be found at [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/).
  prefs: []
  type: TYPE_NORMAL
- en: Bash Shell will be used as part of your virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: Firefox or any other browser can be used to navigate through Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Container Runtime and Container Runtime Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start with CRI-O, we need talk about the basics. The best place to
    start will be container runtimes. We already know what containers, Docker, and
    Kubeknetes are. But how does this all work on a low level? The following diagram
    illustrates a high-level overview of the communications between Kubernetes and
    containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes-to-container communications
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, it is not just Kubernetes talking to the container directly.
    There are two additional layers in the diagram. Let''s discuss why we actually
    need them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Container Runtime**: Each and every container technology, such as Docker,
    Rkt, or Windows Containers, has its own runtime. In short, Container Runtime is
    a set of scripts and software tools to run and maintain the work of a container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container Runtime Interface (CRI)**: As the name implies, CRI is an interface,
    or a shim layer between Kubernetes and Container Runtime, if you like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may ask yourself, *Why do I need CRI? Why can''t Kubernetes talk directly
    to Container Runtime?*. Imagine that Kubernetes and Container Runtime are a manager
    and an employee that speak English. No issues here. But imagine that there''s
    a new employee—he''s an expert in his field and has been contracted by an organization,
    so now they have to work with each other. However, this new employee speaks only
    Russian. Now we have a problem. Now, we need to start adding more and more employees
    speaking languages other than English. You can see where I''m going. In our case,
    we have a few solutions to this problem:'
  prefs: []
  type: TYPE_NORMAL
- en: The manager has to learn a new language every time there is a new employee speaking
    a new language
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An employee has to learn English
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hire an interpreter for every language that new employees speak
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hire an interpreter that speaks a universal language
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to answer this question—what are the most efficient options out of the four
    that have been listed? I hope it makes sense that option 4 is the most efficient
    one. For the same reason, CRI and then CRI-O was born. Following the preceding
    analogy, CRI is option 3 and CRI-O is option 4 in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: CRI-O and Open Container Initiative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes initially worked with Docker only, but some time later Rkt by CoreOS
    came into the picture and they wanted to be supported by Kubernetes as well. Therefore,
    you have to develop a CRI for every additional Container Runtime. Nowadays, different
    container technologies are often introduced. This solution is not really scalable
    and adds a lot of complexity and instability to the whole solution.
  prefs: []
  type: TYPE_NORMAL
- en: That is how CRI-O was brought into the picture. CRI-O stands for **OCI-compliant
    Container Runtime Interface**, and OCI stands for **Open Container Initiative**.
    The Open Container Initiative is an Open Source community project that designs
    open standards for Linux Containers. This is what allows Kubernetes to use any
    other OCI-compliant Container Runtime to run pods.
  prefs: []
  type: TYPE_NORMAL
- en: How CRI-O works with Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you want to start or stop a container with Kubernetes, Kubernetes talks
    to CRI-O, and CRI-O talks to an OCI-compliant container runtime such as runc for
    Docker to start a container. CRI-O can also pull OCI-compliant container images
    and manage them on a disk. Good news for Container Developers—they do not need
    to work with CRI-O directly, as Kubernetes handles that automatically. But it
    is important to understand the concept and overall architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.gif)'
  prefs: []
  type: TYPE_IMG
- en: CRI-O architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum this up, there are a few things to note before we go to the hands-on
    part and install CRI-O in our lab:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes is configured to talk to CRI-O to launch a new Pod in a container
    environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRI-O pulls the OCI-compliant Container Image, if necessary, from a registry
    and manages it locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRI-O talks to OCI-compliant Container Runtime (`runc`, by default) to run it
    on a Kubernetes Node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container Runtime starts the container from a container image that's talking
    to a Linux Kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux Kernel starts Container Processes such as an inappropriate namespace,
    group, context, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each container is monitored and logged by a separate process controlled by Linux
    Kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The networking part for containers is controlled by a **Container Network Interface**
    (**CNI**) that can be used by CRI-O as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and working with CRI-O
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to get hands-on with CRI-O. We are not going to explore CRI-O in depth,
    but rather show you how to bring up a development environment with CRI-O configured with
    some basic functionality.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, CRI-O is still under development. Therefore, the setup
    instructions in your case might be a bit different and you will need to refer
    to the official Minikube documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to start Kubernetes with CRI-O as a Container Runtime Interface, we
    are going to use Minikube with an additional `--container-runtime crio` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Check Minikube''s status and make sure that it is up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It looks pretty standard, but if we take a look at the Minikube logs, we will
    see that Minikube is initializing CRI-O Runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a pod using a Docker image with the `kubectl run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We need to specify a full path to a Docker image since CRI-O is a universal
    Runtime Interface and it does not know whether we want to use Docker or any other
    container technology registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait for a minute or so while Kubernetes Note downloads the `httpd` image and
    then verify that we have a httpd pod up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, from this point of view, it looks pretty standard, but if we run the
    `kubectl describe` command, we will see that the container ID starts with `cri-o://`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, this shows us that Kubernetes is using the CRI-O runtime interface.
    This means that Kubernetes is talking to CRI-O. CRI-O (the crio daemon, to be
    specific) is handling the image pulling and container creating processes. Let''s
    verify this by running the `docker images` and `docker ps` commands inside the
    Minikube VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are no images or containers named `httpd`. We mentioned
    earlier that CRI-O is using `runc` Container Runtime behind the scenes. To help
    us further with the verification process, we are going to use the `runc` command
    inside the Minikube VM. `runc` is a CLI command for running containers packaged
    according to the OCI format. The syntax of the `runc` command is very similar
    to the `docker` command we used in [Chapter 1](part0021.html#K0RQ0-78aafb146b304cdeb9b3261a70edabde), *Containers
    and Docker Overview*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that `3f2c2826318f1526bdb9710050a29b5d4a3de78d61e07ac9d83cedb9827c62e4`
    is the container ID from the `kubectl describe pods/httpd-7dcb9bd6c4-x5dhm` command
    we ran previously.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping your virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you move on to the next chapter, bring down your virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And delete the Minikube VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we briefly covered the Container Runtime and Container Runtime
    Interface basics, followed by what CRI-O is and how it works. Finally, we installed
    the Kubernetes cluster with CRI-O as a Container Runtime Interface and ran a few
    simple commands to verify that Kubernetes was working through CRI-O.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to talk about the OpenShift architecture,
    different OpenShift flavors, and OpenShift in general. We will also look at a
    comparison between OpenShift and Kubernetes so that you have an understanding
    of why we actually need OpenShift and what is so unique about it.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Which of the following Kubernetes kubelet services directly communicates with
    in order to run a pod? choose 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OCI
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CRI
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Linux kernel
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What container technologies are supported by CRI-O? choose 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Minishift
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rkt
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Minikube
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Originally, CRI-O was designed to work with the Kubernetes Container Management
    Platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is the command to verify the CRI-O Container ID? choose 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: kubectl describe pods/httpd
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: kubectl show pods/httpd
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: docker ps
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: docker images
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which two statements are true about CRI-O? choose 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CRI-O talks directly to Linux Kernel
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CRI-O talks directly to Container Runtime
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CRI-O is OCI-compliant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CRI-O is the only Container Runtime Interface available for Kubernetes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CRI-O uses the runc Container Runtime by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is not a lot of information on the internet about CRI-O in comparison
    to other technologies. Here are a number of links if you are interested in learning
    more about CRI-O:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The CRI-O project''s website**: [http://cri-o.io/](http://cri-o.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CRI-O blog**: [https://medium.com/cri-o](https://medium.com/cri-o)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CRI-O GitHub repository**: [https://github.com/kubernetes-incubator/cri-o](https://github.com/kubernetes-incubator/cri-o)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OCI website**: [https://www.opencontainers.org/](https://www.opencontainers.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CRI-O dashboard on Trello**: [https://trello.com/b/xMCopwZm/containers](https://trello.com/b/xMCopwZm/containers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
