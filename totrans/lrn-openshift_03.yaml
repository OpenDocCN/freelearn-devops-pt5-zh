- en: CRI-O Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRI-O概述
- en: In the previous chapter, we briefly discussed Kubernetes concepts and the Kubernetes
    architecture, and the main differences between Kubernetes and Docker Swarm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要讨论了Kubernetes的概念、架构以及Kubernetes和Docker Swarm之间的主要区别。
- en: The goal of this chapter is to give you a basic understanding of an alternative
    container runtime technology for Kubernetes—CRI-O. This chapter provides a basic
    understanding of the Container Runtime Interface, Open Container Initiative, and
    CRI-O, and describes how to manage containers using that technology.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是让你对Kubernetes的替代容器运行时技术——CRI-O——有一个基本的了解。本章提供了关于容器运行时接口、开放容器倡议和CRI-O的基础知识，并描述了如何使用该技术管理容器。
- en: 'After reading this chapter, you will have a solid understanding of the following
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你将对以下主题有一个扎实的理解：
- en: The Container Runtime Interface and Open Container Initiative
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时接口和开放容器倡议
- en: How CRI-O works with Kubernetes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRI-O如何与Kubernetes协作
- en: Installing and working with CRI-O
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并使用CRI-O
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we are going to use the following technologies and software:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下技术和软件：
- en: Minikube
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Minikube
- en: Bash Shell
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bash Shell
- en: GitHub
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: Kubernetes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Docker
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Firefox
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox
- en: You will be required to install Minikube on your laptop or any other virtual
    environment you are going to use. All the instructions for installing Minikube can
    be found at [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在笔记本电脑或任何其他虚拟环境中安装Minikube。关于如何安装Minikube的所有说明可以在[https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)找到。
- en: Bash Shell will be used as part of your virtual environment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Bash Shell将作为你的虚拟环境的一部分使用。
- en: Firefox or any other browser can be used to navigate through Docker Hub.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Firefox或任何其他浏览器浏览Docker Hub。
- en: Container Runtime and Container Runtime Interface
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器运行时和容器运行时接口
- en: 'Before we start with CRI-O, we need talk about the basics. The best place to
    start will be container runtimes. We already know what containers, Docker, and
    Kubeknetes are. But how does this all work on a low level? The following diagram
    illustrates a high-level overview of the communications between Kubernetes and
    containers:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用CRI-O之前，我们需要先谈谈基础知识。最好的起点就是容器运行时。我们已经知道什么是容器、Docker和Kubernetes了。但这些是如何在底层工作的呢？以下图示展示了Kubernetes和容器之间通信的高层次概述：
- en: '![](img/00031.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00031.jpeg)'
- en: Kubernetes-to-container communications
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes与容器的通信
- en: 'As you can see, it is not just Kubernetes talking to the container directly.
    There are two additional layers in the diagram. Let''s discuss why we actually
    need them:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Kubernetes并不是直接与容器通信的。图中有两个额外的层次。让我们来讨论一下为什么我们实际上需要它们：
- en: '**Container Runtime**: Each and every container technology, such as Docker,
    Rkt, or Windows Containers, has its own runtime. In short, Container Runtime is
    a set of scripts and software tools to run and maintain the work of a container.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器运行时**：每种容器技术，如Docker、Rkt或Windows容器，都有自己的运行时。简而言之，容器运行时是一组脚本和软件工具，用来运行和维护容器的工作。'
- en: '**Container Runtime Interface (CRI)**: As the name implies, CRI is an interface,
    or a shim layer between Kubernetes and Container Runtime, if you like.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器运行时接口（CRI）**：顾名思义，CRI是一个接口，或者说是Kubernetes和容器运行时之间的一个适配层，换句话说。'
- en: 'You may ask yourself, *Why do I need CRI? Why can''t Kubernetes talk directly
    to Container Runtime?*. Imagine that Kubernetes and Container Runtime are a manager
    and an employee that speak English. No issues here. But imagine that there''s
    a new employee—he''s an expert in his field and has been contracted by an organization,
    so now they have to work with each other. However, this new employee speaks only
    Russian. Now we have a problem. Now, we need to start adding more and more employees
    speaking languages other than English. You can see where I''m going. In our case,
    we have a few solutions to this problem:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问自己，*为什么我需要CRI？为什么Kubernetes不能直接与容器运行时通信？*想象一下，Kubernetes和容器运行时分别是一个经理和一个讲英语的员工，没问题。但假设有一个新员工，他是该领域的专家并被某个组织聘用，因此他们必须开始一起工作。然而，这个新员工只会讲俄语，现在就有了问题。现在，我们需要逐步增加更多讲不同语言的员工。你能明白我说的意思吧。在我们的情况下，我们有一些解决这个问题的方法：
- en: The manager has to learn a new language every time there is a new employee speaking
    a new language
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次有新员工讲新语言时，经理必须学习一门新语言
- en: An employee has to learn English
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 员工必须学习英语。
- en: Hire an interpreter for every language that new employees speak
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每一种新员工所讲的语言雇佣一个翻译员。
- en: Hire an interpreter that speaks a universal language
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 雇佣一位能讲通用语言的翻译员。
- en: Try to answer this question—what are the most efficient options out of the four
    that have been listed? I hope it makes sense that option 4 is the most efficient
    one. For the same reason, CRI and then CRI-O was born. Following the preceding
    analogy, CRI is option 3 and CRI-O is option 4 in the preceding example.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试回答这个问题——在列出的四个选项中，最有效的选项是哪一个？我希望你能理解，选项 4 是最有效的。基于同样的原因，CRI 和 CRI-O 应运而生。沿用前面的类比，CRI
    是选项 3，而 CRI-O 是选项 4。
- en: CRI-O and Open Container Initiative
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRI-O 与 **开放容器倡议**（Open Container Initiative，OCI）
- en: Kubernetes initially worked with Docker only, but some time later Rkt by CoreOS
    came into the picture and they wanted to be supported by Kubernetes as well. Therefore,
    you have to develop a CRI for every additional Container Runtime. Nowadays, different
    container technologies are often introduced. This solution is not really scalable
    and adds a lot of complexity and instability to the whole solution.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 最初只与 Docker 配合使用，但后来 CoreOS 推出的 Rkt 也进入了市场，他们希望 Kubernetes 能够支持它。因此，每增加一个容器运行时，你必须为其开发一个
    CRI。如今，不同的容器技术经常被引入。这种解决方案并不具备良好的扩展性，还会给整个解决方案带来很多复杂性和不稳定性。
- en: That is how CRI-O was brought into the picture. CRI-O stands for **OCI-compliant
    Container Runtime Interface**, and OCI stands for **Open Container Initiative**.
    The Open Container Initiative is an Open Source community project that designs
    open standards for Linux Containers. This is what allows Kubernetes to use any
    other OCI-compliant Container Runtime to run pods.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 CRI-O 被引入的背景。CRI-O 代表 **OCI 兼容的容器运行时接口**，而 OCI 代表 **开放容器倡议**。开放容器倡议是一个开源社区项目，旨在为
    Linux 容器设计开放标准。这使得 Kubernetes 可以使用任何其他符合 OCI 标准的容器运行时来运行 Pods。
- en: How CRI-O works with Kubernetes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRI-O 与 Kubernetes 的工作原理
- en: 'When you want to start or stop a container with Kubernetes, Kubernetes talks
    to CRI-O, and CRI-O talks to an OCI-compliant container runtime such as runc for
    Docker to start a container. CRI-O can also pull OCI-compliant container images
    and manage them on a disk. Good news for Container Developers—they do not need
    to work with CRI-O directly, as Kubernetes handles that automatically. But it
    is important to understand the concept and overall architecture:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要使用 Kubernetes 启动或停止一个容器时，Kubernetes 会与 CRI-O 通信，CRI-O 再与符合 OCI 标准的容器运行时（如
    Docker 使用的 runc）通信，启动容器。CRI-O 还可以拉取符合 OCI 标准的容器镜像并在磁盘上进行管理。对于容器开发人员来说，这个好消息是——他们无需直接与
    CRI-O 打交道，因为 Kubernetes 会自动处理。但理解这个概念和整体架构仍然很重要：
- en: '![](img/00032.gif)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00032.gif)'
- en: CRI-O architecture
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CRI-O 架构
- en: 'To sum this up, there are a few things to note before we go to the hands-on
    part and install CRI-O in our lab:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，在我们动手安装 CRI-O 之前，有几点需要注意：
- en: Kubernetes is configured to talk to CRI-O to launch a new Pod in a container
    environment
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 被配置为与 CRI-O 通信，以便在容器环境中启动一个新的 Pod。
- en: CRI-O pulls the OCI-compliant Container Image, if necessary, from a registry
    and manages it locally
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRI-O 从注册表中拉取符合 OCI 标准的容器镜像（如果需要），并在本地进行管理。
- en: CRI-O talks to OCI-compliant Container Runtime (`runc`, by default) to run it
    on a Kubernetes Node
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRI-O 与符合 OCI 标准的容器运行时（默认为 `runc`）进行通信，并在 Kubernetes 节点上运行容器。
- en: Container Runtime starts the container from a container image that's talking
    to a Linux Kernel
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时通过与 Linux 内核进行交互，从容器镜像启动容器。
- en: Linux Kernel starts Container Processes such as an inappropriate namespace,
    group, context, and so on
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 内核启动容器进程，例如不当的命名空间、组、上下文等。
- en: Each container is monitored and logged by a separate process controlled by Linux
    Kernel
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个容器都由一个独立的进程进行监控和记录，该进程由 Linux 内核控制。
- en: The networking part for containers is controlled by a **Container Network Interface**
    (**CNI**) that can be used by CRI-O as well
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器的网络部分由 **容器网络接口**（**CNI**）控制，CRI-O 也可以使用该接口。
- en: Installing and working with CRI-O
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和使用 CRI-O
- en: It's time to get hands-on with CRI-O. We are not going to explore CRI-O in depth,
    but rather show you how to bring up a development environment with CRI-O configured with
    some basic functionality.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候亲自操作 CRI-O 了。我们不会深入探讨 CRI-O，而是展示如何通过配置 CRI-O 来搭建一个具备一些基本功能的开发环境。
- en: At the time of writing, CRI-O is still under development. Therefore, the setup
    instructions in your case might be a bit different and you will need to refer
    to the official Minikube documentation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，CRI-O 仍在开发中。因此，在您的情况下，设置说明可能会有所不同，您需要参考官方的 Minikube 文档。
- en: 'In order to start Kubernetes with CRI-O as a Container Runtime Interface, we
    are going to use Minikube with an additional `--container-runtime crio` option:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 CRI-O 作为容器运行时接口启动 Kubernetes，我们将使用 Minikube，并额外添加 `--container-runtime
    crio` 选项：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Check Minikube''s status and make sure that it is up and running:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 Minikube 的状态，确保它正在运行：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It looks pretty standard, but if we take a look at the Minikube logs, we will
    see that Minikube is initializing CRI-O Runtime:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当标准，但如果我们查看 Minikube 日志，我们会看到 Minikube 正在初始化 CRI-O 运行时：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s create a pod using a Docker image with the `kubectl run` command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `kubectl run` 命令创建一个使用 Docker 镜像的 Pod：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We need to specify a full path to a Docker image since CRI-O is a universal
    Runtime Interface and it does not know whether we want to use Docker or any other
    container technology registry.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要指定 Docker 镜像的完整路径，因为 CRI-O 是一个通用的运行时接口，它不知道我们是否要使用 Docker 或其他任何容器技术的注册表。
- en: 'Wait for a minute or so while Kubernetes Note downloads the `httpd` image and
    then verify that we have a httpd pod up and running:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 等待一分钟左右，直到 Kubernetes Note 下载 `httpd` 镜像，然后验证我们已经成功启动了一个 httpd Pod：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Again, from this point of view, it looks pretty standard, but if we run the
    `kubectl describe` command, we will see that the container ID starts with `cri-o://`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 再次从这个角度来看，它看起来相当标准，但如果我们运行 `kubectl describe` 命令，我们会看到容器 ID 以 `cri-o://` 开头：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At this point, this shows us that Kubernetes is using the CRI-O runtime interface.
    This means that Kubernetes is talking to CRI-O. CRI-O (the crio daemon, to be
    specific) is handling the image pulling and container creating processes. Let''s
    verify this by running the `docker images` and `docker ps` commands inside the
    Minikube VM:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，这向我们展示了 Kubernetes 正在使用 CRI-O 运行时接口。这意味着 Kubernetes 正在与 CRI-O 通信。CRI-O（具体来说是
    crio 守护进程）负责处理镜像拉取和容器创建过程。让我们通过在 Minikube 虚拟机中运行 `docker images` 和 `docker ps`
    命令来验证这一点：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, there are no images or containers named `httpd`. We mentioned
    earlier that CRI-O is using `runc` Container Runtime behind the scenes. To help
    us further with the verification process, we are going to use the `runc` command
    inside the Minikube VM. `runc` is a CLI command for running containers packaged
    according to the OCI format. The syntax of the `runc` command is very similar
    to the `docker` command we used in [Chapter 1](part0021.html#K0RQ0-78aafb146b304cdeb9b3261a70edabde), *Containers
    and Docker Overview*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，没有名为 `httpd` 的镜像或容器。我们之前提到，CRI-O 背后使用的是 `runc` 容器运行时。为了帮助我们进一步验证，我们将在 Minikube
    虚拟机中使用 `runc` 命令。`runc` 是一个用于运行根据 OCI 格式打包的容器的 CLI 命令。`runc` 命令的语法与我们在[第 1 章](part0021.html#K0RQ0-78aafb146b304cdeb9b3261a70edabde)中使用的
    `docker` 命令非常相似，*容器和 Docker 概述*。
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that `3f2c2826318f1526bdb9710050a29b5d4a3de78d61e07ac9d83cedb9827c62e4`
    is the container ID from the `kubectl describe pods/httpd-7dcb9bd6c4-x5dhm` command
    we ran previously.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`3f2c2826318f1526bdb9710050a29b5d4a3de78d61e07ac9d83cedb9827c62e4` 是我们之前运行的
    `kubectl describe pods/httpd-7dcb9bd6c4-x5dhm` 命令中的容器 ID。
- en: Stopping your virtual environment
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止虚拟环境
- en: 'Before you move on to the next chapter, bring down your virtual environment:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一章之前，先关闭您的虚拟环境：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And delete the Minikube VM:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 Minikube 虚拟机：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we briefly covered the Container Runtime and Container Runtime
    Interface basics, followed by what CRI-O is and how it works. Finally, we installed
    the Kubernetes cluster with CRI-O as a Container Runtime Interface and ran a few
    simple commands to verify that Kubernetes was working through CRI-O.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了容器运行时和容器运行时接口的基础知识，接着介绍了 CRI-O 及其工作原理。最后，我们安装了 Kubernetes 集群，并将 CRI-O
    作为容器运行时接口，并运行了一些简单的命令来验证 Kubernetes 是否通过 CRI-O 正常工作。
- en: In the next chapter, we are going to talk about the OpenShift architecture,
    different OpenShift flavors, and OpenShift in general. We will also look at a
    comparison between OpenShift and Kubernetes so that you have an understanding
    of why we actually need OpenShift and what is so unique about it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 OpenShift 架构、不同的 OpenShift 版本以及 OpenShift 的基本情况。我们还将比较 OpenShift
    和 Kubernetes，以便您理解为什么我们实际上需要 OpenShift 以及它的独特之处。
- en: Questions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Which of the following Kubernetes kubelet services directly communicates with
    in order to run a pod? choose 1:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个 Kubernetes kubelet 服务直接与之通信以运行 pod？请选择 1：
- en: OCI
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: OCI
- en: CRI
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRI
- en: Docker
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker
- en: Linux kernel
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linux 内核
- en: 'What container technologies are supported by CRI-O? choose 2:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRI-O 支持哪些容器技术？请选择 2：
- en: Docker
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker
- en: Minishift
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Minishift
- en: Rkt
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Rkt
- en: Minikube
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Minikube
- en: 'Originally, CRI-O was designed to work with the Kubernetes Container Management
    Platform:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，CRI-O 设计用于与 Kubernetes 容器管理平台配合使用：
- en: 'True'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: 'What is the command to verify the CRI-O Container ID? choose 1:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 CRI-O 容器 ID 的命令是什么？请选择 1：
- en: kubectl describe pods/httpd
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: kubectl describe pods/httpd
- en: kubectl show pods/httpd
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: kubectl show pods/httpd
- en: docker ps
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: docker ps
- en: docker images
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: docker images
- en: 'Which two statements are true about CRI-O? choose 2:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些关于 CRI-O 的陈述是正确的？请选择 2：
- en: CRI-O talks directly to Linux Kernel
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRI-O 直接与 Linux 内核通信
- en: CRI-O talks directly to Container Runtime
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRI-O 直接与容器运行时通信
- en: CRI-O is OCI-compliant
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRI-O 兼容 OCI
- en: CRI-O is the only Container Runtime Interface available for Kubernetes
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRI-O 是唯一可用于 Kubernetes 的容器运行时接口
- en: 'CRI-O uses the runc Container Runtime by default:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CRI-O 默认使用 runc 容器运行时：
- en: 'True'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Further reading
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'There is not a lot of information on the internet about CRI-O in comparison
    to other technologies. Here are a number of links if you are interested in learning
    more about CRI-O:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 相较于其他技术，网上关于CRI-O的信息较少。如果你有兴趣了解更多关于CRI-O的内容，以下是一些链接：
- en: '**The CRI-O project''s website**: [http://cri-o.io/](http://cri-o.io/)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRI-O 项目的官网**： [http://cri-o.io/](http://cri-o.io/)'
- en: '**CRI-O blog**: [https://medium.com/cri-o](https://medium.com/cri-o)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRI-O 博客**： [https://medium.com/cri-o](https://medium.com/cri-o)'
- en: '**CRI-O GitHub repository**: [https://github.com/kubernetes-incubator/cri-o](https://github.com/kubernetes-incubator/cri-o)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRI-O GitHub 仓库**： [https://github.com/kubernetes-incubator/cri-o](https://github.com/kubernetes-incubator/cri-o)'
- en: '**OCI website**: [https://www.opencontainers.org/](https://www.opencontainers.org/)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OCI 网站**： [https://www.opencontainers.org/](https://www.opencontainers.org/)'
- en: '**CRI-O dashboard on Trello**: [https://trello.com/b/xMCopwZm/containers](https://trello.com/b/xMCopwZm/containers)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRI-O Trello 面板**： [https://trello.com/b/xMCopwZm/containers](https://trello.com/b/xMCopwZm/containers)'
