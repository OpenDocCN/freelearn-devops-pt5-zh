- en: Chapter 3. Building a Single Container Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to write our first module to deploy our first
    containerized application. The application that we are going to deploy is Consul
    from HashiCorp ([https://www.consul.io/](https://www.consul.io/)). We will talk
    about Consul a little later in the chapter. The first thing we will look at is
    how to construct a Puppet module with the correct file structure, unit tests,
    and gems. Once we have our module skeleton, we will look at the two ways to deploy
    Consul with Puppet in a container. The first will be to use resource declarations
    in a manifest and the second will be to use Docker Compose as a template `.erb`
    file. These are the topics that we will cover in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Building a Puppet module skeleton
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding using resource declarations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding using `.erb` files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Puppet module skeleton
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important things in development is having a solid foundation.
    Writing a Puppet module is no different. This topic is extremely important for
    the rest of the book, as we will be reusing the code over and over again to build
    all our modules from now on. We will first look at how to build a module with
    the Puppet module generator. Once we have our module skeleton, we will look at
    its construct. We will look at the plumbing Puppet uses with Ruby, and lastly,
    at basic unit tests.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: The Puppet module generator
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the best things about working with Puppet is the number of tools out
    there, both from the community and from puppetlabs itself. The Puppet module generator
    is a tool that is developed by puppetlabs and follows the best practices to create
    a module skeleton. The best thing about this tool is that it is bundled with every
    Puppet agent install. So, we don''t need to install any extra software. Let''s
    log in to our Vagrant box that we built in the last chapter. Let''s change directory
    to the root of our Vagrant repo and then use the `vagrant up && vagrant ssh` command.
    Now that we are logged in to the box, let''s sudo to root (`sudo -i`) and change
    the directory to `/vagrant`. The reason for this is that this folder will be mapped
    to our local box. Then, we can use our favorite text editor later in the chapter.
    Once we''re in `/vagrant`, we can run the command to build our Puppet module skeleton.
    The `puppet module generate <AUTHOR>-consul` command for me will look like this:
    `puppet module generate scottyc-consul`.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'The script will then ask a few questions such as the version, author name,
    description, where the source lives, and so on. These are very important questions
    that are to be considered when you want to publish a module to the Puppet Forge
    ([https://forge.puppetlabs.com/](https://forge.puppetlabs.com/)), but for now,
    let''s just answer the questions as per the following example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![The Puppet module generator](img/B05201_03_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our Puppet module skeleton, we should look at what the structure
    looks like:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![The Puppet module generator](img/B05201_03_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet 模块生成器](img/B05201_03_02.jpg)'
- en: 'Now, we are going to add a few files to help us with unit tests. The first
    file is `.fixtures.yml`. This file is used by `spec-puppet` to pull down any module
    dependencies into the `spec/fixtures` directory when we run our unit tests. For
    this module, the `.fixtures.yml` file should look like the one shown in the following
    screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一些文件来帮助我们进行单元测试。第一个文件是`.fixtures.yml`。该文件由`spec-puppet`在我们运行单元测试时用来将任何模块依赖项拉取到`spec/fixtures`目录。对于这个模块，`.fixtures.yml`文件应如下图所示：
- en: '![The Puppet module generator](img/B05201_03_03.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet 模块生成器](img/B05201_03_03.jpg)'
- en: 'The next file that we are going to add is a `.rspec` file. This is the file
    that `rspec-puppet` uses when it requires `spec_helper`, and it sets the pattern
    for our unit test folder structure. The file contents should look as shown in
    this screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要添加的文件是`.rspec`文件。这个文件是`rspec-puppet`在需要`spec_helper`时使用的，它为我们的单元测试文件夹结构设置了模式。文件内容应如下截图所示：
- en: '![The Puppet module generator](img/B05201_03_04.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet 模块生成器](img/B05201_03_04.jpg)'
- en: 'Now that we have our folder structure, let''s install the gems that we need
    to run our unit tests. My personal preference is to install the gems on the vagrant
    box; if you want to use your local machine, that''s fine as well. So, let''s log
    in to our vagrant box (cd into the root of our Vagrant repo, use the `vagrant
    ssh` command, and then change the directory to root using `sudo -i`). First, we
    will install Ruby with `yum install -y ruby`. Once that is complete, let''s cd
    into `/vagrant/<your modules folder>` and then run `gem install bundler && bundle
    install`. You should get the following output:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了文件夹结构，让我们安装运行单元测试所需的 gems。我的个人偏好是将 gems 安装到 Vagrant 虚拟机中；如果你想在本地机器上使用也没问题。那么，让我们登录到
    Vagrant 虚拟机（进入 Vagrant 仓库的根目录，使用`vagrant ssh`命令，然后使用`sudo -i`切换到 root 用户）。首先，我们将使用`yum
    install -y ruby`安装 Ruby。安装完成后，让我们进入`/vagrant/<your modules folder>`目录，然后运行`gem
    install bundler && bundle install`。你应该看到以下输出：
- en: '![The Puppet module generator](img/B05201_03_05.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet 模块生成器](img/B05201_03_05.jpg)'
- en: 'As you can see from the preceding screenshot, we got some warnings. This is
    because we ran `gem install` as the root. We would not do that on a production
    system, but as this is our development box, it won''t pose an issue. Now that
    we have all the gems that we need for our unit tests, let''s add some basic facts
    to `/spec/classes/init_spec.rb`. The facts we are going to add are `osfamily`
    and `operatingsystemrelease`. So, the file will look as shown in this screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们收到了一些警告。这是因为我们以 root 用户运行了`gem install`。在生产系统中我们不会这么做，但由于这是我们的开发虚拟机，这不会造成问题。现在我们已经安装了所有单元测试所需的
    gems，让我们在`/spec/classes/init_spec.rb`中添加一些基本的事实。我们将要添加的事实是`osfamily`和`operatingsystemrelease`。所以，文件将如下截图所示：
- en: '![The Puppet module generator](img/B05201_03_06.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet 模块生成器](img/B05201_03_06.jpg)'
- en: 'The last file that we will edit is the `metadata.json` file in the root of
    the repo. This file defines our module dependencies. For this module, we have
    one dependency, `docker`, so we need to add that at the bottom of the `metadata.json`
    file, as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将编辑的是仓库根目录中的`metadata.json`文件。该文件定义了我们的模块依赖项。对于这个模块，我们有一个依赖项`docker`，所以我们需要将其添加到`metadata.json`文件的底部，如下截图所示：
- en: '![The Puppet module generator](img/B05201_03_07.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet 模块生成器](img/B05201_03_07.jpg)'
- en: The last thing we need to do is put everything in its place inside our Vagrant
    repo. We do that by creating a folder called `modules` in the root of our Vagrant
    repo. Then, we issue the `mv <AUTHOR>-consul/ modules/consul` command. Note that
    we removed the author name because we need the module to replicate what it would
    look like on a Puppet master. Now that we have our basic module skeleton ready,
    we can start with some coding.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是将所有内容放置在我们 Vagrant 仓库的适当位置。我们通过在 Vagrant 仓库的根目录中创建一个名为`modules`的文件夹来实现这一点。然后，我们执行`mv
    <AUTHOR>-consul/ modules/consul`命令。请注意，我们移除了作者名，因为我们需要该模块来复制在 Puppet 主机上的样子。现在我们已经准备好了基本的模块骨架，接下来可以开始编写代码了。
- en: Coding using resource declarations
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用资源声明进行编码
- en: In this section, we are going to use our module skeleton to build our first
    Docker application. We are going to write it using standard Puppet manifests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们的模块骨架来构建第一个 Docker 应用程序。我们将使用标准的 Puppet 清单来编写它。
- en: But first, why is the first module that we are writing Consul? I chose this
    application for a few reasons. First, Consul has a lot of awesome features such
    as service discovery and health checks, and can be used as a key/value store.
    The second reason is that we will use all the features I just mentioned later
    in the book. So, it will come in handy when we look at Docker Swarm.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，为什么我们写的第一个模块是 Consul？我选择这个应用程序有几个原因。首先，Consul 拥有很多强大的功能，如服务发现和健康检查，还可以用作键值存储。第二个原因是，稍后在本书中，我们将使用我刚才提到的所有功能。因此，当我们查看
    Docker Swarm 时，这将派上用场。
- en: File structures
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件结构
- en: 'Let''s create two new files, `install.pp` and `params.pp`, in the `manifests`
    folder. The structure should look as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `manifests` 文件夹中创建两个新文件，`install.pp` 和 `params.pp`。结构应该如下所示：
- en: '![File structures](img/B05201_03_08.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![文件结构](img/B05201_03_08.jpg)'
- en: Writing our module
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写我们的模块
- en: 'Let''s start writing our module. We will start with `init.pp`; this module
    is not going to be very complex as we are only going to add a few lines of code
    and some parameters. As you can see in the preceding screenshot, we created three
    files in the `manifests` directory. When I write a module, I always like to start
    at `params.pp`, as it gives me a good starting structure to work for the code
    that provides the module logic. So, let''s look at `params.pp` for this module,
    which is shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写我们的模块。我们将从 `init.pp` 开始；这个模块不会非常复杂，因为我们只需要添加几行代码和一些参数。正如前面的截图所示，我们在 `manifests`
    目录中创建了三个文件。当我编写一个模块时，我总是喜欢从 `params.pp` 开始，因为它为我提供了一个很好的起始结构，可以用于编写提供模块逻辑的代码。所以，让我们看一下这个模块的
    `params.pp`，如下图所示：
- en: '![Writing our module](img/B05201_03_09.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![编写我们的模块](img/B05201_03_09.jpg)'
- en: 'Now, let''s look at the parameters that we have set:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下我们设置的参数：
- en: '`$docker_version`: This is the version of Docker that we will install.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$docker_version`：这是我们将要安装的 Docker 版本。'
- en: '`$docker_tcp_bind`: This is the IP address and port that the Docker API will
    bind to.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$docker_tcp_bind`：这是 Docker API 将要绑定的 IP 地址和端口。'
- en: '`$docker_image`: This is the Docker image we will be using from Docker Hub.
    We will be using my Consul image. To read more about the image or get the Dockerfile,
    go to [https://hub.docker.com/r/scottyc/consul/](https://hub.docker.com/r/scottyc/consul/).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$docker_image`：这是我们将从 Docker Hub 使用的 Docker 镜像。我们将使用我的 Consul 镜像。要了解更多关于该镜像的信息或获取
    Dockerfile，请访问[https://hub.docker.com/r/scottyc/consul/](https://hub.docker.com/r/scottyc/consul/)。'
- en: '`$container_hostname`: This is going to set the hostname inside the container.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$container_hostname`：这将设置容器内的主机名。'
- en: '`$consul_advertise`: This is the IP address that Consul is going to advertise.
    We are going to use a built-in Puppet fact, `$::ipaddress_enp0s8`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$consul_advertise`：这是 Consul 将要广播的 IP 地址。我们将使用一个内置的 Puppet fact，`$::ipaddress_enp0s8`。'
- en: '`$consul_bootstrap_expect`: This sets the number of nodes in the Consul cluster.
    We are using just the one. If it was a production cluster, you would use at least
    three.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$consul_bootstrap_expect`：这设置了 Consul 集群中的节点数量。我们只使用一个节点。如果是生产集群，至少需要使用三个节点。'
- en: 'Now that we have set up our parameters, let''s get started on `install.pp`.
    As the name implies, this class will contain the logic that installs Docker, pulls
    the image, and runs the container. So, let''s take a look at the code shown in
    the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了参数，让我们开始编写 `install.pp`。顾名思义，这个类将包含安装 Docker、拉取镜像并运行容器的逻辑。所以，让我们看看以下截图中显示的代码：
- en: '![Writing our module](img/B05201_03_10.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![编写我们的模块](img/B05201_03_10.jpg)'
- en: To look at the code in more depth, we will break the class into two, the Docker
    installation and the container configuration. In the Docker installation, the
    first piece of code is a simple package type for `device-mapper-libs`. The reason
    we make sure that this package and its dependencies are installed is that it will
    be the storage drive that Docker will use to mount the container's filesystem.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地查看代码，我们将把类分为两部分，Docker 安装和容器配置。在 Docker 安装中，第一段代码是 `device-mapper-libs`
    的简单包类型。我们确保安装这个包及其依赖项的原因是，它将成为 Docker 用来挂载容器文件系统的存储驱动。
- en: Now, we move on to the Docker install. We start by declaring the `docker` class.
    For this class, we will set the Docker version, calling the parameters we set
    in `params.pp`, and the version of Docker that we are using is 1.9.1 (which is
    the latest at the time of writing this book). The next piece of configurations
    we will declare are the Docker API's TCP bind. Again, we will call our `params.pp`
    class and set the value to `tcp://127.0.0.1:4242`. This binds the API to listen
    to the localhost address on the TCP port `4242`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们继续进行Docker安装。我们首先声明`docker`类。对于这个类，我们将设置Docker版本，调用我们在`params.pp`中设置的参数，我们使用的Docker版本是1.9.1（这是编写本书时的最新版本）。接下来的配置是Docker
    API的TCP绑定。同样，我们将调用`params.pp`类并将其值设置为`tcp://127.0.0.1:4242`。这将使API绑定并监听本地主机地址的TCP端口`4242`。
- en: 'The last value we will set to our Docker install is the Unix socket, which
    Docker will use. We will declare this without calling a parameter. The last piece
    of code makes sure that `device-mapper-libs` is installed before Docker, as it
    is a prerequisite to the Docker install:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要为Docker安装设置的最后一个值是Unix套接字，Docker将使用该套接字。我们将声明它，而不调用参数。代码的最后一部分确保`device-mapper-libs`在Docker之前安装，因为它是Docker安装的前提条件：
- en: '![Writing our module](img/B05201_03_11.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![编写我们的模块](img/B05201_03_11.jpg)'
- en: Now that we have Docker installed, let's look at the code to build our Consul
    container. The first class that we call is `docker::image`. This will pull the
    image from Docker Hub before we call the `docker::run` class. In the `docker::run`
    class, we set `navmar` as the same value as the container's hostname. We will
    get that value from `params.pp` and it will be set to `consul`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经安装了Docker，让我们来看一下构建Consul容器的代码。我们调用的第一个类是`docker::image`。在调用`docker::run`类之前，它会从Docker
    Hub拉取镜像。在`docker::run`类中，我们将`navmar`设置为与容器主机名相同的值。我们将从`params.pp`中获取该值，并将其设置为`consul`。
- en: The next configuration we will set is the image. Now, this is different from
    calling `docker::image`. When you call `docker::image`, it pulls the image from
    Docker Hub to the local filesystem. When we set the image value in the `docker::run`
    class, it sets the value for the base image where the container will be deployed
    from. The value is set to `scottyc/consul`, and again we will get that value from
    `params.pp`. The `hostname` parameter is going to set the hostname inside the
    container.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要设置的下一个配置是镜像。这与调用`docker::image`不同。当你调用`docker::image`时，它会从Docker Hub拉取镜像到本地文件系统。当我们在`docker::run`类中设置镜像值时，它会设置容器部署所需的基础镜像值。该值被设置为`scottyc/consul`，我们同样会从`params.pp`中获取这个值。`hostname`参数将设置容器内的主机名。
- en: 'Now we get to the the `resource` attribute that passes running configurations''
    parameters to the container. The `command` attribute is an arbitrary attribute
    that allows you to pass configurations to the container at boot. In this case,
    we are going to pass the boot configuration for the Consul setting as the server
    role, the IP address that the Consul application will bind to, and the number
    of servers that are there in the Consul''s cluster. In the first case, all the
    values in the arguments that we are passing to the `command` attribute come from
    `params.pp`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看`resource`属性，它将运行时配置的参数传递给容器。`command`属性是一个任意属性，允许你在启动时将配置传递给容器。在本例中，我们将为Consul设置传递启动配置，包括服务器角色、Consul应用程序将绑定的IP地址，以及Consul集群中的服务器数量。在第一个例子中，我们传递给`command`属性的所有参数值都来自`params.pp`：
- en: '![Writing our module](img/B05201_03_12.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![编写我们的模块](img/B05201_03_12.jpg)'
- en: 'Now, last but definitely not least, let''s look at what our `init.pp` file
    contains. The first thing that you will note at the top after the main class declaration
    is the mapping of all our parameters to `params.pp`. The reason we do this is
    to set any sensible configurations or defaults in `params.pp` and any sensitive
    data we can overwrite the defaults with Hiera lookups. We will look at Hiera lookups
    in the next chapter. The last line of code includes our `consul::install` class,
    which we covered in the preceding section:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后但绝对重要的一步，让我们看看我们的`init.pp`文件包含了什么。你会注意到，在主类声明后面的顶部，所有参数都映射到了`params.pp`。我们这样做的原因是为了在`params.pp`中设置一些合理的配置或默认值，而对于敏感数据，我们可以通过Hiera查找来覆盖这些默认值。我们将在下一章中讨论Hiera查找。代码的最后一行包括了我们的`consul::install`类，这部分我们在前面的章节中已经讲解过：
- en: '![Writing our module](img/B05201_03_13.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![编写我们的模块](img/B05201_03_13.jpg)'
- en: Now, let's run our module.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行我们的模块。
- en: Running our module
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行我们的模块
- en: 'Now that we have written our module, I am sure we are all keen to run it; however,
    before we can do that, there is one more piece of configuration that we need to
    add to `servers.yml` and `default.pp`. First, we need to make sure that our module
    `consul` is located in `modules/consul`. The next step is to open our `servers.yml`
    file and add the following line at the bottom of the shell commands:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了我们的模块，我确信我们都很乐意运行它；但是，在我们这样做之前，我们需要向`servers.yml`和`default.pp`添加一个配置片段。首先，我们需要确保我们的模块`consul`位于`modules/consul`中。接下来的步骤是打开我们的`servers.yml`文件，并在shell命令底部添加以下行：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will copy our module into the correct module path in the vagrant box.
    We also need to forward the Consul port so that we can hit the GUI. This is done
    by adding `- { guest: 8500, host: 8500 }` to the forwarded port''s attribute.
    It should look as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '这将把我们的模块复制到Vagrant盒子中的正确模块路径。我们还需要转发Consul端口，以便可以访问GUI。通过添加`- { guest: 8500,
    host: 8500 }`到转发端口属性来完成。它应如下屏幕截图所示：'
- en: '![Running our module](img/B05201_03_14.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_03_14.jpg)'
- en: 'Now, let''s open our `manifests` directory and edit `default.pp`. We just need
    to add our module to the node definition. You can do this by adding the `include
    consul` configuration, as shown in the following screenshot, and saving both files:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打开我们的`manifests`目录并编辑`default.pp`。我们只需要将我们的模块添加到节点定义中。您可以通过添加`include
    consul`配置来实现这一点，如下面的屏幕截图所示，并保存这两个文件：
- en: '![Running our module](img/B05201_03_15.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_03_15.jpg)'
- en: 'Let''s head to our terminal, change the directory to the root of our Vagrant
    repo, and type the `vagrant up` command. Now, if this box is already running,
    issue a `vagrant destroy -f && vagrant up` command. The output should look as
    shown in this screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们前往我们的终端，将目录更改为我们的Vagrant存储库的根目录，并输入`vagrant up`命令。现在，如果此虚拟机已经在运行，可以执行`vagrant
    destroy -f && vagrant up`命令。输出应如下屏幕截图所示：
- en: '![Running our module](img/B05201_03_16.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_03_16.jpg)'
- en: 'Even though we a have successful run Puppet, it can take a couple of minutes
    for the container to come up the first time, as it downloads the image from Docker
    Hub, so just be patient. You can easily check when the container is up by going
    to your browser and navigating to `127.0.0.1:8500`. You should get the consul
    GUI, as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们已经成功运行了Puppet，容器首次启动可能需要几分钟，因为它从Docker Hub下载镜像，所以请耐心等待。您可以通过在浏览器中输入`127.0.0.1:8500`来轻松检查容器何时启动。您应该看到Consul
    GUI，如以下屏幕截图所示：
- en: '![Running our module](img/B05201_03_17.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_03_17.jpg)'
- en: As you can see, we have one node that is running, named `consul`, which is the
    hostname that we gave to our container.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们有一个名为`consul`的运行节点，这是我们给容器命名的主机名。
- en: Coding using .erb files
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`.erb`文件进行编码
- en: In this topic, we are going to deploy the same container using `docker-compose`
    with a twist. The twist is with Puppet, where we can turn the `docker-compose.yml`
    file into `docker-compose.yml.erb`. This allows us to take advantage of all the
    tools Puppet gives us to manipulate template files. This is definitely the way
    I like to deploy containers with Puppet; however, I will let you decide for yourself
    the method you like best as we continue through the book.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本主题中，我们将使用`docker-compose`部署相同的容器，但有所不同。不同之处在于使用Puppet，我们可以将`docker-compose.yml`文件转换为`docker-compose.yml.erb`。这使我们能够利用Puppet提供的所有工具来操作模板文件。这绝对是我喜欢使用Puppet部署容器的方式；然而，随着我们继续阅读本书，我会让您自己决定最喜欢的方法。
- en: Writing our module with Docker Compose
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Docker Compose编写我们的模块
- en: In the chapter, we are going to look at how to use `docker-compose` as an `.erb`
    template file. In this example, we are only deploying a single container, but
    when an application contains five or six containers with links, this way is much
    more efficient than using the standard manifest declarations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何将`docker-compose`作为`.erb`模板文件使用。在本例中，我们仅部署单个容器，但是当应用程序包含五到六个带有链接的容器时，这种方式比使用标准清单声明更为高效。
- en: 'So, we will take our `consul` module from the last topic and modify it now
    to use `docker-compose`. If you want to keep that module, just make a copy. First,
    we are not going to touch `init.pp` and `params.pp`—they will remain the same.
    Now, let''s look at `install.pp`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将采用上一主题中的`consul`模块，并现在修改它以使用`docker-compose`。如果您想保留该模块，只需复制即可。首先，我们不会触及`init.pp`和`params.pp`——它们将保持不变。现在，让我们来看看`install.pp`：
- en: '![Writing our module with Docker Compose](img/B05201_03_18.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Docker Compose 编写我们的模块](img/B05201_03_18.jpg)'
- en: As you can see in the preceding screenshot, the top half of the class is exactly
    the same. However, we still install `device-mapper-libs` and declare the `docker`
    class in exactly the same way. The next attribute is different though; here, we
    call the file resource type. The reason is that this is the configuration that
    is used to place our `docker-compose` file on the local filesystem. You can see
    that we are declaring the contents with a template file located in the `templates`
    directory of the module. We will come back to this in a minute.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在上面的截图中，类的上半部分完全相同。然而，我们仍然安装 `device-mapper-libs` 并以相同的方式声明 `docker` 类。下一个属性有所不同；这里，我们调用文件资源类型。原因是，这是用于将
    `docker-compose` 文件放置到本地文件系统上的配置。你可以看到，我们正在使用一个位于模块 `templates` 目录中的模板文件来声明文件内容。稍后我们会回到这一部分。
- en: Now, let's look at the last resource type in `install.pp`. We are calling the
    `docker_compose` type because this is the resource type that will run the `docker-compose`
    command to bring up our container. Let's look at the attributes that we have configured.
    The first is `navmar`; this will set the name tag in Docker for the container.
    We are calling this value from `params.pp`, and it will be set to `consul`. `ensure`
    is a puppet meta parameter container which ensures that the container is always
    there.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下 `install.pp` 中的最后一个资源类型。我们调用了 `docker_compose` 类型，因为这是会运行 `docker-compose`
    命令来启动容器的资源类型。我们来看看我们已经配置的属性。第一个是 `navmar`；这将设置容器的 Docker 名称标签。我们从 `params.pp`
    中调用这个值，它将被设置为 `consul`。`ensure` 是一个 Puppet 元参数容器，它确保容器始终存在。
- en: 'If we want to delete the container, we would have to set this value to `absent`.
    The next attribute is `source`; this sets the folder where the `docker-compose`
    command can find the `docker-compose` file. We have set this to `root`. You could
    change the value to any folder on your system. The last attribute is `scale`.
    This tells `docker-compose` how many containers we want. The value is set to `1`
    in this instance. If we were deploying an nginx web farm, we might set the value
    to a figure such as 5\. Now, let''s get back to that template file. The first
    thing we need to do is create a folder called `templates` in the root of our `consul`
    module:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想删除容器，需要将该值设置为 `absent`。下一个属性是 `source`；它设置了 `docker-compose` 命令查找 `docker-compose`
    文件的文件夹位置。我们已将其设置为 `root`。你可以将此值更改为系统中的任何文件夹。最后一个属性是 `scale`。它告诉 `docker-compose`
    我们需要多少个容器。这个实例中，我们将值设置为 `1`。如果我们要部署一个 nginx 网页服务器集群，可能会将此值设置为 5。现在，让我们回到模板文件。我们需要做的第一件事是在
    `consul` 模块的根目录下创建一个名为 `templates` 的文件夹：
- en: '![Writing our module with Docker Compose](img/B05201_03_19.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Docker Compose 编写我们的模块](img/B05201_03_19.jpg)'
- en: 'The next step after that is to create our `.erb` template file. In `install.pp`,
    we declared the filename as `docker-compose.yml.erb`, so in our `templates` directory,
    let''s create a file with that name. The contents of the file should look as shown
    in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是创建我们的 `.erb` 模板文件。在 `install.pp` 中，我们声明了文件名为 `docker-compose.yml.erb`，所以在我们的
    `templates` 目录中，创建一个同名的文件。文件的内容应如下图所示：
- en: '![Writing our module with Docker Compose](img/B05201_03_20.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Docker Compose 编写我们的模块](img/B05201_03_20.jpg)'
- en: So, the first thing that you should note in the preceding screenshot are the
    variables that are set, such as `<%= @container_hostname %>`. This maps back to
    `init.pp` as `$container_hostname`. As you can see, attributes such as `image`,
    `hostname`, `ports`, and `command` look very familiar. This is because they are
    the same attributes that we declared in the preceding section. In this example,
    we only configured our `docker-compose` file for a single container; in the next
    topic, we will look at a much more complex configuration. Before we get to that,
    let's make sure that this module runs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你应该注意到上图中的第一个要点是设置的变量，例如 `<%= @container_hostname %>`。它映射回 `init.pp` 中的 `$container_hostname`。正如你所看到的，`image`、`hostname`、`ports`
    和 `command` 等属性看起来非常熟悉。这是因为它们与我们在前一部分中声明的属性相同。在这个例子中，我们只为单个容器配置了 `docker-compose`
    文件；在接下来的主题中，我们将探讨更复杂的配置。在我们深入探讨之前，先确保该模块能正常运行。
- en: Docker Compose up with Puppet
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Puppet 启动 Docker Compose
- en: 'To run our module, let''s make sure that our module is located in the `modules/consul`
    directory in the root of your Vagrant repo. We have the configuration to forward
    port `8500` (`forwarded_ports: - { guest: 8500, host: 8500 }`) and copy our module
    to our module''s path directory using `- { shell: cp /home/vagrant/node-01/modules/*
    -R /tmp/modules }`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '要运行我们的模块，确保模块位于Vagrant仓库根目录下的`modules/consul`目录中。我们已经配置了端口转发`8500`（`forwarded_ports:
    - { guest: 8500, host: 8500 }`），并通过`- { shell: cp /home/vagrant/node-01/modules/*
    -R /tmp/modules }`将我们的模块复制到模块路径目录。'
- en: 'Once this is in place, let''s run `vagrant up` in our terminal in the root
    of our Vagrant repo. Again, if you have a box that is running, issue the `vagrant
    destroy -f && vagrant up` command. The terminal should give you the following
    output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置完成，在我们Vagrant仓库的根目录下运行`vagrant up`命令。如果你已经有一个正在运行的box，请执行`vagrant destroy
    -f && vagrant up`命令。终端应该会显示以下输出：
- en: '![Docker Compose up with Puppet](img/B05201_03_21.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![使用Puppet启动Docker Compose](img/B05201_03_21.jpg)'
- en: 'Again, we can go to `127.0.0.1:8500` and get the Consul GUI:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以访问`127.0.0.1:8500`来查看Consul的GUI界面：
- en: '![Docker Compose up with Puppet](img/B05201_03_22.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![使用Puppet启动Docker Compose](img/B05201_03_22.jpg)'
- en: 'Now, let''s log in to our vagrant box; we will do that by issuing the `vagrant
    ssh` command in our terminal from the root of our Vagrant repo. Once we have logged
    in, we can `su` to root (`sudo -i`). Then, we can issue the `docker ps` command
    to look at all the running containers. The terminal should give you the following
    output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们登录到我们的Vagrant box；我们可以通过在终端中从Vagrant仓库的根目录执行`vagrant ssh`命令来实现。一旦登录，我们可以使用`su`切换到root用户（`sudo
    -i`）。然后，我们可以执行`docker ps`命令查看所有正在运行的容器。终端应该会显示以下输出：
- en: '![Docker Compose up with Puppet](img/B05201_03_23.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![使用Puppet启动Docker Compose](img/B05201_03_23.jpg)'
- en: As you can see, the container is up and running.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，容器已经启动并在运行。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we deployed our first container with Puppet. In doing so, we
    actually covered a lot of ground. We now have our script to create Puppet modules,
    and we know how to map our Puppet module's dependencies with `metadata.json` and
    `.fixtures.yml`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Puppet部署了第一个容器。在这个过程中，我们实际上已经涵盖了许多内容。现在，我们已经拥有了创建Puppet模块的脚本，并且知道如何通过`metadata.json`和`.fixtures.yml`来映射Puppet模块的依赖关系。
- en: In our tool belt, we now have two ways to deploy a container with Puppet, which
    will come in very handy in the chapters to come.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的工具箱中，现在有两种使用Puppet部署容器的方法，这将在接下来的章节中非常有用。
