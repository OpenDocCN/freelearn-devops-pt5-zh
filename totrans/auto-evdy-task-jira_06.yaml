- en: '*Chapter 4*: Sending Automated Notifications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sending the right notification at the right time, with relevant contextual information,
    is important. It ensures that the desired action is taken by the recipient of
    the notification.
  prefs: []
  type: TYPE_NORMAL
- en: Jira has always had the ability to send email notifications to users when changes
    to issues are made. However, these are, by necessity, very generalized. They do
    not contain relevant contextual information and are exceedingly difficult to customize.
  prefs: []
  type: TYPE_NORMAL
- en: Automation rules allow us to overcome some of this limitation by enabling us
    to send custom notifications based on any rule condition we require, and not only
    via email; we also have the ability to send notifications to mobile phones via
    SMS and to chat applications such as **Slack** and **Microsoft Teams**.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce you to the notification capabilities in automation
    rules and show you how to send custom email notifications to users, groups, or
    indeed any valid email address. We'll also learn how to send messages to Slack
    channels and to Microsoft Teams channels. Finally, we'll learn how to use **Twilio**
    to send text messages via SMS to mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Sending email notifications using automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to send notifications to Slack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to send notifications to Microsoft Teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending SMS notifications with Twilio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira Cloud environment**: If you don''t already have access to Jira, you
    can create a free Jira Cloud account at [https://www.atlassian.com/software/jira/free](https://www.atlassian.com/software/jira/free)
    and ensure that you have both Jira Software and Jira Service Management selected;
    or'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jira Server environment**: If you are using Jira Server (available from [https://www.atlassian.com/software/jira/download](https://www.atlassian.com/software/jira/download)),
    ensure that you have licenses for both Jira Software and Jira Service Management.
    In addition, you will also need to ensure that you install the *Automation for
    Jira* app from the Atlassian Marketplace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both instances, you will need to have at least Project Administrator access
    to a Jira project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need access to any of the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Slack**: If you don''t already have access to Slack, you can sign up for
    an account at [https://www.slack.com](https://www.slack.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Teams**: You can sign up for a Teams account at [https://teams.microsoft.com](https://teams.microsoft.com)
    if you don''t already have one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Twilio**: Sign up at [https://www.twilio.com](https://www.twilio.com) if
    you need an account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can download the latest code samples for this chapter from this book's official
    GitHub repository at [https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira](https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action videos for this chapter are available at: [https://bit.ly/2Y9p0cR](https://bit.ly/2Y9p0cR)'
  prefs: []
  type: TYPE_NORMAL
- en: Sending email notifications using automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira has always had the ability to send notifications to users via email when
    certain events take place, for example, when an issue has been updated or a comment
    has been added. You can also send emails to various users containing the results
    of saved filters on a scheduled basis and with Jira Service Management, you can
    create custom templates for sending notifications to customers via email in place
    of the standard event notifications.
  prefs: []
  type: TYPE_NORMAL
- en: With the **Send email** action available to automation rules, we are able to
    extend this capability and send customized email notifications to any email address,
    user field, or group of users whenever the rule is activated.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll look at how to introduce custom email notifications in
    automation rules and how these notifications can provide more specific context
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You should always take care when creating custom email notifications in an automation
    rule. Make sure that you do not end up spamming the user with multiple notifications
    for the same event.
  prefs: []
  type: TYPE_NORMAL
- en: Before we look at how to use email notifications in a rule, let's take a quick
    look at the **Send email** action itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the fields available in the **Send email** action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The Send email action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.1_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – The Send email action
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at each of the fields available in the **Send email**
    action:'
  prefs: []
  type: TYPE_NORMAL
- en: The **To** field is where we configure the email recipients. This can be in
    the form of one or more email addresses, or you can use the drop-down menu to
    select one or more Jira users or user groups. You can also use smart values and
    smart value functions to extract email addresses from issue fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can additionally set the email **CC** and **BCC** fields in the same manner
    by clicking on the corresponding links under the **To** field to reveal the relevant
    input field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Subject** field is where we configure the email notification subject.
    You can use smart values and smart value functions in this field to reference
    data from any issue field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Content** field is where you supply the email message itself. You can
    use HTML tags to format the message and you can also use smart values and smart
    value functions to reference and manipulate any data from the issue that triggered
    the automation rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **More options** disclosure, you will find the **From** field. This
    field is only applicable to Jira Server and Data Center. It is not editable in
    Jira Cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Jira Server or Data Center, you should ensure that the email
    address you enter here uses a valid sender domain as many SMTP servers are configured
    to only accept outgoing mail from valid domains in order to prevent themselves
    from being used as spam relays.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **From name** field is the human-readable sender name that will appear in
    the email notification. In Jira Cloud, this will default to *Jira automation*,
    and in Jira Server and Data Center, it will not be present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, if you want users to be able to reply to the email and potentially
    capture the reply as a comment against the issue, you can use the **Reply to**
    field to enter the email address you have configured in the **Incoming Email**
    system configuration for Software and Core projects, or, for Service Management
    projects, in the project's **Email requests** setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should also ensure that the issue key is present in the **Subject** line
    if you make use of the **Reply to** feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Send as** field allows you to select whether this notification will be
    sent as plain text or HTML. If the email notification is being sent to another
    application, you will probably want to set this to plain text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leaving the `<br>)` in the message body for each new line when the **Send as**
    field is set to **HTML**. While convenient, it has the ability to play havoc with
    your HTML formatting if you forget to take this into consideration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are using Jira Server or Jira Data Center, you (or a Jira administrator)
    need to have configured an outgoing SMTP mail server in the **Jira Administration**
    | **System** | **Outgoing Mail** settings. Without a configured outgoing mail
    server, rules with email notifications will still execute successfully, however,
    no emails will actually be sent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's take a look at a rule that makes use of email notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to notify customers when a new version is released
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we want to be able to notify customers when a new software
    version is released and list the items that were fixed or added in the newly released
    version.
  prefs: []
  type: TYPE_NORMAL
- en: All the customers for this example belong to a user group called *Customers*.
    This will allow us to add any new customers to the group and not have to modify
    the automation rule for each new customer.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the differences in the way automation rules handle multiple issues in
    Jira Cloud and Jira Server, we'll present this rule twice in order to highlight
    the differences between the two environments.
  prefs: []
  type: TYPE_NORMAL
- en: Using Jira Cloud to notify customers when a new version is released
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Jira Cloud, we need to make use of the **Lookup issues** action, which will
    allow us to iterate up to 100 issues in a single operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to build this rule using Jira Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Software project, navigate to **Project settings**, click on the
    **Automation** link in the project settings menu, and then click **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Version released** trigger and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **New action** and then select the **Lookup issues** action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following query to the **JQL** field and click **Save**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, we are using a smart value to reference the version name in
    this JQL query and so we cannot validate the query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, select `Customers`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{{version.project.key}} version {{version.name}} is released!`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Content**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, expand the **More options** disclosure and uncheck the **Convert line
    breaks to HTML line breaks** option, as we have included explicit HTML line breaks
    in the content field, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Sending an email notification in Jira Cloud'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_4.2_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.2 – Sending an email notification in Jira Cloud
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name your rule `Version released customer notification` and click **Turn
    it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've learned how to send an email notification in Jira Cloud using
    the **Lookup issues** action, let's see how we need to adjust this rule to work
    in Jira Server.
  prefs: []
  type: TYPE_NORMAL
- en: Using Jira Server to notify customers when a new version is released
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automation rules in Jira Server do not have the **Lookup issues** action. Instead,
    we can choose to process issues in certain triggers and branch rules in bulk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to replicate the version-released rule in Jira Server:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Software project, navigate to **Project settings**, click on the
    **Project automation** link in the project settings menu, and then click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Version released** trigger and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **Branch rule/related issues** and select **Issues fixed in version**
    in the **Type of related issues** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **More options** disclosure and ensure the **Process all issues produced
    by this trigger in bulk** option is checked and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select `Customers`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{{version.project.key}} version {{version.name}} is released!`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Content**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, expand the **More options** disclosure and uncheck the **Convert line
    breaks to HTML line breaks** option as we have included explicit HTML line breaks
    in the content field, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Sending an email notification in Jira Server'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_4.3_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.3 – Sending an email notification in Jira Server
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name your rule `Version released customer notification` and click **Turn
    it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have learned how to use the **Send email** action to send
    custom notifications to users from automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at how we can integrate Slack notifications
    within our automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: How to send notifications to Slack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Slack is a popular workspace communications tool that allows users to chat in
    so-called channels or via direct messages with one another.
  prefs: []
  type: TYPE_NORMAL
- en: One of the actions we have available to our automation rules is the **Send Slack
    message** action, which gives us the ability to send messages to Slack channels
    or to an individual user.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll learn how we can integrate with Slack to send notifications
    from automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Slack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get to sending a Slack notification from an automation rule, we first
    need to set up an incoming webhook in Slack to be able to receive the messages
    from Jira.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways we can achieve this. The first is by creating a custom app
    in Slack and configuring it with an incoming webhook and then selecting the channel
    that will receive the notifications.
  prefs: []
  type: TYPE_NORMAL
- en: The second and simplest way to integrate Slack with automation rules is to create
    a legacy incoming webhook, which also allows the configured channel to be overridden.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you use the custom app method of creating incoming webhooks in Slack, you
    will need to create a webhook for each channel you need to send a notification
    to as this method does not allow you to override the default channel that you
    selected when creating the webhook. It is better to use the *legacy webhook* method
    instead, which we'll cover in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to establish an incoming webhook in Slack using the
    legacy incoming webhook option, which we''ll then use in an automation rule to
    post a message to the **#general** channel in Slack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the following URL in your browser: [https://my.slack.com/services/new/incoming-webhook/](https://my.slack.com/services/new/incoming-webhook/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should be presented with a screen similar to the following screenshot,
    after being asked to log in if required:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Adding an incoming webhook to Slack'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_4.4_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.4 – Adding an incoming webhook to Slack
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Post to Channel** field, select the **#general** channel and click
    the **Add Incoming WebHooks integration** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following screen, you will be presented with your new **webhook URL**.
    You can also use this page to customize the icon, label, and username that will
    be used for this integration. For now, make a note of the **webhook URL** that
    was generated as we'll need it to complete the setup of the automation rule later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've set up Slack to receive incoming messages via a webhook, let's
    set up an automation rule to make use of this integration.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to notify open issues in a sprint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we want to send a notification to the development team''s
    **#sprint-update** channel in Slack on a daily basis, listing the issues still
    outstanding for the current sprint:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Software project, navigate to **Project settings**, click on the
    **Automation** link in the project settings menu, and then click **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `1 Days` in the **Run this rule every** field and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **New action** and then select the **Lookup issues** action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following query in the **JQL** field and click **Save**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, select `#sprint-updates`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The automation rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Sending a Slack message'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_4.5_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.5 – Sending a Slack message
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name the rule `Open issues in sprint notification` and click **Turn
    it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you''ve set up the automation rule, every day around the time you
    created the rule, you should receive a notification in the Slack channel you configured
    that should look similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Receiving a notification in a Slack channel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.6_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Receiving a notification in a Slack channel
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: To create this rule in Jira Server, instead of the **Lookup issues** action,
    you will need to enter the JQL query in the trigger configuration, expand the
    **More options** disclosure, and ensure that the **Process all issues produced
    by this trigger in bulk** option is selected.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to integrate Slack notifications in automation
    rules and how to send notifications to Slack channels. In the next section, we'll
    explore how to integrate with Microsoft Teams to send notifications to a Teams
    channel in a similar manner to Slack.
  prefs: []
  type: TYPE_NORMAL
- en: How to send notifications to Microsoft Teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Teams is a collaboration platform from Microsoft and part of the Microsoft
    365 offering. As with Slack, it allows teams to collaborate in channels or via
    direct messages with other individuals.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the previous section, automation provides a **Send Microsoft Teams
    message** action that allows us to send messages to a Microsoft Teams channel.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to integrate with Microsoft Teams to send
    notifications to channels using automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Microsoft Teams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do before we can use Microsoft Teams in automation
    rules is to set up an incoming webhook so that our rule can send messages to a
    channel in Teams.
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Teams, we need to add the Incoming Webhook connector to our team
    before we can send messages to a channel from an automation rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how we can configure a team and channel in Microsoft Teams using
    the *Incoming Webhook connector*:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Microsoft Teams app and open the Teams app store from the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Connectors** from the menu and then find the **Incoming Webhook** connector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up window, click on **Add to a team**, and then select the team and
    channel you want to add the connector to and click **Set up a connector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following screen, provide a name for your incoming webhook such as *Jira
    Notifications*, upload a new image if you like, and click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the URL for your new Incoming Webhook connector
    that you will need to copy so that you can use it when configuring your automation
    rule:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Setting up a Microsoft Teams Incoming Webhook connector'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.7_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Setting up a Microsoft Teams Incoming Webhook connector
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've set up our Incoming Webhook connector in Microsoft Teams, we
    are ready to use it in an automation rule to send notifications to our configured
    channel.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to notify a Microsoft Teams channel when a high-priority issue
    is raised
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we''ll use an automation rule to watch for issues raised with
    a high or highest priority alert and then send a notification to the team channel
    using *Microsoft Teams*:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Service Management project, navigate to **Project settings**, click
    on the **Automation** link in the project settings menu, and then click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **Issue created** trigger and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select **New** **condition** followed by the **Issue** fields condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the fields as follows and click `Priority`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`is one of`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Highest, High`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, select **New action** followed by the **Send Microsoft Teams message**
    action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the action fields as follows and click `High Priority Ticket`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Message**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you leave the **Include issue summary in message** option checked, the notification
    in Microsoft Teams will include the issue status, issue type, and assignee in
    the message, as well as a **View in Jira** button that will open the Jira ticket
    in your web browser when clicked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Sending a message with Microsoft Teams'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_4.8_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.8 – Sending a message with Microsoft Teams
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name the rule `High priority issue notification` and click **Turn it
    on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Creating a new high or highest priority issue in your Service Management project
    will cause a notification similar to the following screenshot to be sent to your
    configured Microsoft Teams channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Receiving a notification in a Microsoft Teams channel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.9_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Receiving a notification in a Microsoft Teams channel
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to set up an Incoming Webhook connector
    in Microsoft Teams and how to use it in an automation rule to send notifications
    to the team channel that was configured in the connector.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at how to send SMS notifications to mobile phones
    using *Twilio*.
  prefs: []
  type: TYPE_NORMAL
- en: Sending SMS notifications with Twilio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Twilio** is a communications platform offered as a cloud-based service that
    allows developers to integrate voice, video, and text communications into their
    applications using a **REST API**.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Send Twilio notification** action in our automation rules allows
    us to make use of the Twilio platform to send SMS messages to mobile phones.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, you would usually have a dedicated on-call tool integrated with
    Jira that has the capability to contact the correct team member using a customizable
    schedule via various methods, including via mobile phone text message (SMS). However,
    the **Send Twilio notification** action will allow you to build a simple on-call
    schedule using *automation rules*.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to integrate with Twilio to send notifications
    as SMS messages using automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Twilio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Integrating with Twilio is a relatively straightforward process. You will need
    a Twilio account and a telephone number from which your SMS messages will be sent.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Twilio accounts are free to set up and you can get a trial number free of charge.
    However, you will be charged for every SMS message you send through the platform
    and you will need to pay for a phone number in your country of choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can get set up with Twilio so that we can send
    SMS messages from our automation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://www.twilio.com](https://www.twilio.com) and sign up for
    an account or log in to your existing account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't already have a phone number, click on the **Get a Trial Number**
    button on your project dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have a phone number, your Twilio dashboard should look similar to
    the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Setting up a Twilio account'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_4.10_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.10 – Setting up a Twilio account
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will need to copy your **TRIAL NUMBER, ACCOUNT SID, and AUTH TOKEN** information
    from your Twilio dashboard when we come to configure the automation rule. To copy
    your **ACCOUNT SID** and **AUTH TOKEN** fields, you can click on the icon at the
    right of the respective field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have a Twilio account and phone number, we can create an automation
    rule to send SMS messages to a mobile phone.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to send an after-hours notification via SMS message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, for any incidents with a priority of highest or high and raised
    before 8 a.m. or after 6 p.m., we will send an SMS notification using *Twilio*
    to a mobile number.
  prefs: []
  type: TYPE_NORMAL
- en: To keep things simple, we will assume that there is a single mobile device that
    is in the possession of the team member who is on-call after hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the rule to send an SMS message:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Service Management project, navigate to **Project settings**, click
    on the **Automation** link in the **Project Settings** menu, and then click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **Issue created** trigger and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select `Issue Type`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Incident`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now click **Save** so we can add our next condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Priority`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`is one of`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Highest, High`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Save** so that we can move on to our final condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now select **New Condition** followed by **JQL condition** and enter the following
    **JQL** query and click **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, select **New action** and then the **Send Twilio notification** action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete the fields as follows and click **Save**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Account SID**: Copy the account SID from your Twilio dashboard.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Auth token**: Copy the auth token from your Twilio dashboard.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**From**: Copy the trial number or phone number from your Twilio dashboard.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**To**: The mobile number to send the text message to in international format.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Message body**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your automation rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Sending an SMS message via Twilio'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_4.11_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.11 – Sending an SMS message via Twilio
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name the rule `High priority after-hours notification` and click **Turn
    it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Creating an issue in the Service Management project with a high or highest
    priority should result in an SMS message being sent that looks similar to the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Receiving an SMS message notification via Twilio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.12_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Receiving an SMS message notification via Twilio
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to use the Twilio platform to send text
    messages via SMS to a mobile phone number from an automation rule. The ability
    to send an SMS message notification gives you another channel to ensure that your
    notifications are delivered in a timely manner and express the desired level of
    urgency.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to use automation rules to send custom
    email notifications to users, groups of users, or indeed any valid email address.
  prefs: []
  type: TYPE_NORMAL
- en: You have also learned how to send notifications to two of the most widely used
    chat systems, Slack and Microsoft Teams.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have learned how to integrate with Twilio to send text messages
    via SMS to mobile phones.
  prefs: []
  type: TYPE_NORMAL
- en: With these skills, you will now be able to leverage automation rules to send
    customized notifications at exactly the right time and with the relevant contextual
    information, and this will encourage your users to take the desired actions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how to use automation rules to integrate
    with external systems that can accept web requests and how to accept requests
    from external systems.
  prefs: []
  type: TYPE_NORMAL
