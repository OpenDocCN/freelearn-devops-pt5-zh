- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Ansible for Secret Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we automate tasks, we need to implement them with little to no user interaction.
    However, we also know that there will be stages where Ansible needs inputs such
    as usernames, passwords, API keys, and secrets. Most of these details can be kept
    in a variable file and passed to playbooks without a user prompt or interaction
    but it is not a best practice to keep this kind of sensitive information in a
    plain text format as variables. There are external key vault services you can
    use but most of them require additional setup and configurations, which you need
    to integrate with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Vault is an inbuilt feature of Ansible, using which we can safeguard
    the sensitive parts of our Ansible artifacts by encrypting our own vault passwords.
    Ansible Vault is installed together with Ansible and you can use it for Ansible
    ad hoc commands, playbooks, or within Red Hat Ansible Automation Platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling sensitive data in Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing secrets using Ansible Vault
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using secrets in an Ansible playbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Vault credentials in automation controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with basic Vault operations and learn how to use sensitive data
    in playbooks with the help of Vault.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements to proceed with this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: One RHEL8/Fedora machine for an Ansible control node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more Linux machines with Red Hat repositories configured. If you are
    using other Linux operating systems instead of **Red Hat Enterprise Linux** (**RHEL**)
    machines, then make sure you have the appropriate repositories configured to get
    packages and updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible code, Ansible playbooks, commands, and snippets for this chapter
    can be found in the GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-13](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-13).
  prefs: []
  type: TYPE_NORMAL
- en: Handling sensitive data in Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is a known practice not to keep sensitive data in plain text format. The
    same rule applies to Ansible as well, as you will be dealing with different types
    of sensitive data in Ansible. The sensitive data could be anything, such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: System passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port details of applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL certificates or keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have already learned that Ansible uses plain text format for playbooks, variables,
    and all other configurations. Hence, storing sensitive data in normal variable
    files is not desirable and we need to store such information using a more secure
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Before we jump into the details of Ansible Vault, let us learn about some of
    the alternative secret management methods in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Vault services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the most common methods for storing sensitive information is using key
    vault software and services where we can access keys and secrets over GUIs, APIs,
    or CLIs. We need to add tasks in Ansible to contact the Vault store, authenticate,
    and retrieve secrets as needed. A sample integration is demonstrated in *Figure
    13.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Ansible integration with an external vault  ](img/B18383_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Ansible integration with an external vault
  prefs: []
  type: TYPE_NORMAL
- en: 'There are managed and self-hosted external secret management solutions available
    to use, such as HashiCorp Vault ([https://www.vaultproject.io](https://www.vaultproject.io)),
    AWS Secrets Manager ([https://aws.amazon.com/secrets-manager/](https://aws.amazon.com/secrets-manager/)),
    or Azure Key Vault ([https://azure.microsoft.com/en-us/services/key-vault/](https://azure.microsoft.com/en-us/services/key-vault/)).
    For retrieving keys or secrets, we can use the API calls, Ansible modules, or
    Ansible `lookup` plugins available, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Using lookup plugins to retrieve vault keys ](img/B18383_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Using lookup plugins to retrieve vault keys
  prefs: []
  type: TYPE_NORMAL
- en: The external key vault services are good and useful but we also need to handle
    the overhead in terms of management and pricing. Refer to the *Further reading*
    section for more documentation and references on external key vault services.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive input using prompts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the alternative methods of handling sensitive data in Ansible is collecting
    the data dynamically during playbook execution. Sensitive and non-sensitive inputs
    can be accepted using `vars_prompt`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – An Ansible playbook accepting passwords using prompts in Ansible
    ](img/B18383_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – An Ansible playbook accepting passwords using prompts in Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'When you execute the playbook, Ansible will ask for the input and, based on
    the `private` value, the input will either be visible or hidden on the prompt,
    as shown in *Figure 13.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Accepting the user input using vars_prompt ](img/B18383_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Accepting the user input using vars_prompt
  prefs: []
  type: TYPE_NORMAL
- en: However, as you can see in the preceding figure, this method is interactive
    and someone needs to input the details during the playbook execution. This means
    you will not be able to use these playbooks in a fully automated workflow where
    user interaction is not possible. Equally, `vars_prompt` will not work with the
    Ansible automation controller, as the controller does not interactively allow
    `vars_prompt` questions.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting data using Ansible Vault
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I mentioned at the beginning of this chapter, Ansible Vault is an inbuilt
    feature of Ansible, using which we can keep the sensitive parts of our Ansible
    artifacts secure by encrypting the data. We can use our own passwords as vault
    passwords for encrypting the content. It is possible to use Ansible Vault for
    Ansible ad hoc commands, playbooks, or within the Ansible Automation Platform.
  prefs: []
  type: TYPE_NORMAL
- en: It is a best practice to separate sensitive artifacts from non-sensitive artifacts
    and keep them in separate files. The first step of the process is to separate
    the sensitive data from regular variable files and store them in separate variable
    files, as shown in *Figure 13.5*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Ansible artifacts with encrypted variables ](img/B18383_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Ansible artifacts with encrypted variables
  prefs: []
  type: TYPE_NORMAL
- en: With this practice, you will have the ability to store sensitive data in an
    encrypted format and the flexibility to modify normal variables at any time. When
    Ansible wants to read the content of these encrypted files, Ansible will use the
    vault password, which we can enter using the prompt (`--ask-vault-password`) or
    using special Vault password files. For the Ansible Automation Platform, the Vault
    password can be stored as a credential and assigned to the Job Template.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will learn how to use Ansible Vault to encrypt
    variable files and access the encrypted data inside an Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Managing secrets using Ansible Vault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible Vault is very flexible, as we can encrypt, view, decrypt, or change
    the Vault password (as in, rekey it) at any time as needed. The Vault password
    must be stored safely, as you will not be able to retrieve the encrypted Vault
    content without the Vault password.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Vault files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following exercise, we will learn how to create an encrypted file using
    Ansible Vault:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Vault file from scratch, use the `ansible-vault create` command,
    as shown in *Figure 13.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Creating a Vault file ](img/B18383_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Creating a Vault file
  prefs: []
  type: TYPE_NORMAL
- en: 'After we enter the Vault password, a new file will open in the default text
    editor, such as `vim` or `nano` (we can change the default editor by updating
    the `$EDITOR` environment variable). Enter the variables and values as needed,
    just as with a normal variable file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to *Figure 13.7* for further details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Adding content to the Vault file ](img/B18383_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Adding content to the Vault file
  prefs: []
  type: TYPE_NORMAL
- en: Save the file as per text editor actions (for example, `:wq`) and exit the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can view the Vault file but the content will be encrypted (see *Figure 13.8*)
    and you will not be able to retrieve the data without the Vault password.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Encrypted content inside the Vault file ](img/B18383_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Encrypted content inside the Vault file
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to create an encrypted file using Ansible Vault in the preceding
    exercise. In the following section, we will learn how to encrypt existing files
    and content using Ansible Vault.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting existing files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have a variable file or file with sensitive content and you want to
    encrypt it using Ansible Vault, then you can do it using the `encrypt` command,
    as explained in the following exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the current content of the files as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Database details in a plain text format ](img/B18383_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Database details in a plain text format
  prefs: []
  type: TYPE_NORMAL
- en: 'Encrypt the content using the `ansible-vault encrypt` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Encrypting an existing file using Ansible Vault ](img/B18383_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – Encrypting an existing file using Ansible Vault
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, verify the encryption of the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.11 – The plain text file after being encrypted ](img/B18383_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – The plain text file after being encrypted
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to encrypt the files, we will learn how to use Vault ID
    to handle multiple Vault passwords in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Vault ID to an encryption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we have many Vault files and multiple Vault passwords, we can use the
    **Vault ID** to identify the Vault content. A Vault ID is an identifier for one
    or more vaulted secrets and contents. Let’s follow an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Create and encrypt the secret file with the `--vault-id` option as follows.
    The Vault ID will be visible in the prompt, as shown in *Figure 13.12*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Create a Vault file with a Vault ID ](img/B18383_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Create a Vault file with a Vault ID
  prefs: []
  type: TYPE_NORMAL
- en: 'The same Vault ID can be checked from the content of the Vault file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.13 – A Vault file with a Vault ID ](img/B18383_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – A Vault file with a Vault ID
  prefs: []
  type: TYPE_NORMAL
- en: 'The password for the Vault ID can be taken from the prompt (as we did in the
    preceding example) or from a configured path in `ansible.cfg` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.14 – The Vault ID configured in ansible.cfg ](img/B18383_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – The Vault ID configured in ansible.cfg
  prefs: []
  type: TYPE_NORMAL
- en: Using a Vault ID will help you to manage multiple Vault files in a large environment
    and identify the Vaulted files and secrets.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the content of a Vault file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the content is encrypted, it is possible to display the Vault content
    using the `ansible-vault view` command, as shown in *Figure 13.15*. Ansible will
    prompt the existing Vault password and you will see the content in plain text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Displaying the Vault content ](img/B18383_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Displaying the Vault content
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the Vault file content is still in an encrypted state and you
    will therefore not be able to access it without the Vault password.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a Vault file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To edit the encrypted Vault file, use the `ansible-vault edit` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – Editing an encrypted file using Ansible Vault ](img/B18383_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – Editing an encrypted file using Ansible Vault
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vault file will open in the text editor in plain text format. Once editing
    is completed, save the file (for example, `:wq`) and exit the editor, as shown
    in *Figure 13.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Editing a Vault file in the text editor ](img/B18383_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Editing a Vault file in the text editor
  prefs: []
  type: TYPE_NORMAL
- en: Once editing is complete, the Vault files will be saved in an encrypted format
    without any additional actions required.
  prefs: []
  type: TYPE_NORMAL
- en: Decrypting a Vault file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are situations where we need to decrypt the file back to plain text temporarily
    or permanently. In such cases, `ansible-vault decrypt` will help to decrypt the
    Vault file back to plain text format as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Decrypting a Vault file ](img/B18383_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – Decrypting a Vault file
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the file content after decryption, as shown in *Figure 13.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.19 – The Vault file after decryption ](img/B18383_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – The Vault file after decryption
  prefs: []
  type: TYPE_NORMAL
- en: When you encrypt the file again, you can use the same or a different Vault password;
    it does not matter.
  prefs: []
  type: TYPE_NORMAL
- en: Vault password rotation by rekeying
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is a common practice to rotate passwords, keys, and SSL certificates to
    ensure that the credentials are not compromised and also to follow the organization’s
    password policies. The `ansible-vault rekey` command will help to change or rotate
    the Vault password for secret content. Ansible Vault will ask for the existing
    Vault password and, if successful, a prompt for a new Vault password will be displayed,
    as shown in *Figure 13.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.20 – Rotating the Vault password ](img/B18383_13_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – Rotating the Vault password
  prefs: []
  type: TYPE_NORMAL
- en: Remember to update the new Vault password wherever applicable, such as in local
    Vault password files or Ansible automation controller vault credentials, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting specific variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you do not wish to encrypt an entire variable file, then encrypt a specific
    variable using the `ansible-vault encrypt_string` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Encrypting a string using Ansible Vault ](img/B18383_13_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – Encrypting a string using Ansible Vault
  prefs: []
  type: TYPE_NORMAL
- en: 'The input can be taken from inline, as shown in the preceding example (*Figure
    13.21*), or from standard input, as shown in *Figure 13.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Ansible Vault encrypting the string using the input value
    ](img/B18383_13_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Ansible Vault encrypting the string using the input value
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this encrypted string as a variable in Ansible playbooks or variable files
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Encrypted string inside the playbook ](img/B18383_13_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.23 – Encrypted string inside the playbook
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting content with Ansible Vault
  prefs: []
  type: TYPE_NORMAL
- en: You have more options with Ansible Vault, such as editing, encrypting, decrypting,
    and rekeying, for example. Refer to the documentation for more details at [https://docs.ansible.com/ansible/latest/user_guide/vault.xhtml](https://docs.ansible.com/ansible/latest/user_guide/vault.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to use encrypted Vault files in
    Ansible playbooks and retrieve the secret information.
  prefs: []
  type: TYPE_NORMAL
- en: Using secrets in Ansible playbooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learned the basic usage of secrets in an Ansible playbook in [*Chapter
    3*](B18383_03.xhtml#_idTextAnchor052)’s *Automating notifications* section. In
    this section, we will learn more about their usage and different methods of passing
    the Vault password.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following exercise, we will develop Ansible content to create users
    in Linux, with their passwords retrieved from an Ansible Vault file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Chapter-13/vars/users.yaml` Ansible Vault file as follows and enter
    the Vault password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember the password, as we need this information when executing the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add content to the variable files as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.24 – User details inside an Ansible Vault file ](img/B18383_13_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.24 – User details inside an Ansible Vault file
  prefs: []
  type: TYPE_NORMAL
- en: Save the file and exit the editor. The `userlist` variable contains details
    of multiple users and their passwords.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the file content, as shown in *Figure 13.25*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.25 – A user’s encrypted details  ](img/B18383_13_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.25 – A user’s encrypted details
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Chapter-13/manage-user.yaml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.26 – A playbook to add users into ](img/B18383_13_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.26 – A playbook to add users into
  prefs: []
  type: TYPE_NORMAL
- en: See the `vars_files` section because we have already included the encrypted
    variable file in the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.27 – Creating groups and users ](img/B18383_13_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.27 – Creating groups and users
  prefs: []
  type: TYPE_NORMAL
- en: Generating encrypted passwords in Ansible
  prefs: []
  type: TYPE_NORMAL
- en: The `password_hash(‘sha256’)` filter has been used to encrypt the password and
    avoid sending a plain text password. Refer to [https://docs.ansible.com/ansible/latest/reference_appendices/faq.xhtml#how-do-i-generate-encrypted-passwords-for-the-user-module](https://docs.ansible.com/ansible/latest/reference_appendices/faq.xhtml#how-do-i-generate-encrypted-passwords-for-the-user-module)
    to learn more about password encryption in Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, execute the playbook using the `ansible-playbook` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.28 – An Ansible error due to there being no Vault secret ](img/B18383_13_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.28 – An Ansible error due to there being no Vault secret
  prefs: []
  type: TYPE_NORMAL
- en: Since we have included Ansible Vault files inside the playbook, Ansible expects
    the Vault secret to be available and will fail if no appropriate secret is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook by adding an `--ask-vault-password` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.29 – Executing the playbook with the Vault secret prompt ](img/B18383_13_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.29 – Executing the playbook with the Vault secret prompt
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the user creation success on `node1` using an ad hoc command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 13.30* shows a sample output for the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.30 – An Ansible ad hoc command to check that a user has been created
    successfully ](img/B18383_13_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.30 – An Ansible ad hoc command to check that a user has been created
    successfully
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, you have encrypted a variable file using Ansible Vault
    and retrieved the information inside the Ansible playbook by prompting the Vault
    secret. However, for automated operations, we need to skip this prompt. The Vault
    secret should be able to pass in the command line itself. In such scenarios, use
    the `--vault-password-file` argument and pass the Vault secret inside a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file for storing your Vault secret. The Vault secret should be a plain
    text file but saved in a safe location, for example, a hidden file in your home
    directory, as shown in *Figure 13.31*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.31 – A Vault secret in a hidden file in your home directory ](img/B18383_13_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.31 – A Vault secret in a hidden file in your home directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the same playbook but pass the Vault secret file using the `--vault-password-file`
    argument. This time Ansible will not ask for a password, as shown in *Figure 13.32*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.32 – The Ansible Vault secret from the password file ](img/B18383_13_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.32 – The Ansible Vault secret from the password file
  prefs: []
  type: TYPE_NORMAL
- en: The Vault file can contain any type of data, whether a single variable, a string,
    a complex dictionary variable, or any other text content.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Vault will help us to encrypt the sensitive data in Ansible artifacts,
    but we need to safeguard such data from being captured within logs and we will
    learn about how to do so in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding secrets from logs using no_log
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have learned how to keep sensitive content using Ansible Vault but we have
    a problem here, as Ansible will include the sensitive data content in plain text
    format when it carries out logging. Sometimes, it will not be visible in the default
    verbose mode but will be displayed in a higher-level verbose mode, such as `-vvv`
    or `-vvvv`. Refer to *Figure 13.33* for the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.33 – An Ansible playbook output displaying sensitive data ](img/B18383_13_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.33 – An Ansible playbook output displaying sensitive data
  prefs: []
  type: TYPE_NORMAL
- en: 'In such cases, use `no_log: True`, as shown in *Figure 13.34*, and any output
    in that task will be censored for safety reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.34 – Disabling the logging of tasks using no_log ](img/B18383_13_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.34 – Disabling the logging of tasks using no_log
  prefs: []
  type: TYPE_NORMAL
- en: 'If you execute the playbook now, you will notice the change as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.35 – The Ansible output with no_log applied to sensitive data ](img/B18383_13_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.35 – The Ansible output with no_log applied to sensitive data
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if you enable the high verbose mode, `-vvv`, Ansible will hide the information,
    as shown in *Figure 13.36*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.36 – A high verbose Ansible log with no_log applied ](img/B18383_13_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.36 – A high verbose Ansible log with no_log applied
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the best practices to safeguard the sensitive data being captured
    in system logs and job histories.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to keep the sensitive data inside
    other variable locations, such as `group_vars` and `host_vars`.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Vault for group_vars and host_vars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we discussed earlier in the chapter, it is a best practice to separate variables
    and sensitive information wherever appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the following exercise, we will reuse the PostgreSQL Ansible artifacts
    that we developed in [*Chapter 8*](B18383_08.xhtml#_idTextAnchor144), *Helping
    Database Team with Automation*. PostgreSQL is installed and configured on `node2`.
    We will create an additional database user account for accessing the `db_sales`
    database (refer back to the content of *Chapter 8* for more details.) Let’s do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the inventory (`Chapter-13/hosts`) by adding `node2` as part of the
    `postgres` host group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `group_vars` and another subdirectory as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.37 – Creating the group_vars directory and Vault file ](img/B18383_13_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.37 – Creating the group_vars directory and Vault file
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a database username and password for the new user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and verify the Vault file, as shown in *Figure 13.38*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.38 – The database user information in the Vault file ](img/B18383_13_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.38 – The database user information in the Vault file
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another Vault file for storing the PostgreSQL admin password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `postgres_password` inside and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Chapter-13/postgres-create-dbuser.yaml` playbook as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.39 – An Ansible playbook for managing PostgreSQL user information
    ](img/B18383_13_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.39 – An Ansible playbook for managing PostgreSQL user information
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task to create the PostgreSQL database user as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.40 – The task to create a PostgreSQL user ](img/B18383_13_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.40 – The task to create a PostgreSQL user
  prefs: []
  type: TYPE_NORMAL
- en: All the sensitive variables are inside the `group_vars` Vault files now, for
    example, `postgres_password`, `postgres_password`, and `postgres_app_user_password`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook on the `postgres` host group (which we created in the
    first step), and the playbook will read the variables and create the new user
    safely, as shown in *Figure 13.41*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.41 – The creation of the PostgreSQL database user  ](img/B18383_13_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.41 – The creation of the PostgreSQL database user
  prefs: []
  type: TYPE_NORMAL
- en: As a best practice, keep all the sensitive details inside Vault files at appropriate
    locations and they will remain safe, even if you keep your Ansible content in
    Git repositories.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to use the Vault files and credentials
    in the Ansible Automation Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Using Vault credentials in the Ansible Automation Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run your playbooks from the Web UI of the automation controller, then
    you have similar options to provide the Vault secret from the WebUI. We can either
    keep the Vault secret inside a Vault credential or we can select the `--ask-vault-password`
    in the Ansible command-line execution) and will prompt for the Vault secret when
    you execute the Job Template from the automation controller’s WebUI.
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible automation controller
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible automation controller is the control plane for the **Ansible Automation
    Platform** (**AAP**). When you migrate to AAP 2, the automation controller will
    be upgraded to include Ansible Tower. Refer to *Chapter 12*, *Integrating Ansible
    with Your Tools*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to create Vault credentials in the
    Ansible automation controller GUI and attach them to the Job Template to retrieve
    encrypted content.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Vault credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To store the Vault secret, create a new credential by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Create New Credential** blade and set **Credential Type** to **Vault**,
    as shown in *Figure 13.42*. Enter the Vault secret (password) and add a Vault
    ID if required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.42 – Creating a new Vault credential in the automation controller
    ](img/B18383_13_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.42 – Creating a new Vault credential in the automation controller
  prefs: []
  type: TYPE_NORMAL
- en: Once created, update your Job Template and add the new Vault credentials inside.
    Navigate **Job Template** | **Edit** and click on the *Search* button near **Credentials**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the pop-up screen, set **Selected Category** to **Vault** and you will
    see the Vault credentials, as shown in *Figure 13.43*. Select the required Vault
    credentials and click the **Select** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.43 – Selecting the Vault credential for the Job Template ](img/B18383_13_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.43 – Selecting the Vault credential for the Job Template
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the credentials, as shown in *Figure 13.44*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.44 – The credentials added in the Job Template ](img/B18383_13_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.44 – The credentials added in the Job Template
  prefs: []
  type: TYPE_NORMAL
- en: If you have multiple Vault files with different Vault secrets, then add multiple
    Vault credentials as needed and add Vault IDs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the importance of keeping sensitive data secure
    within Ansible automation artifacts and the different methods available to do
    so, such as external Vault services, `vars_prompt`, and Ansible Vault. After this,
    we learned different operations within Ansible Vault, such as creating, modifying,
    viewing, decrypting, and rekeying Vault files and variables.
  prefs: []
  type: TYPE_NORMAL
- en: We also developed Ansible artifacts using Vault files for storing user information
    and database user credentials. We also discussed the Vault credentials in the
    automation controller GUI and how to use them with Job Templates.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about different methodologies and approaches
    for developing Ansible automation artifacts and factors to consider throughout
    Ansible automation.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics covered in this chapter, please visit the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Tutorial: Use Azure Key Vault to store VM secrets with Ansible* – [https://docs.microsoft.com/en-us/azure/developer/ansible/key-vault-configure-secrets?tabs=ansible](https://docs.microsoft.com/en-us/azure/developer/ansible/key-vault-configure-secrets?tabs=ansible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to send emails using Ansible and Gmail* – [https://www.techbeatly.com/ansible-gmail](https://www.techbeatly.com/ansible-gmail)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Logging Ansible output* – [https://docs.ansible.com/ansible/latest/reference_appendices/logging.xhtml](https://docs.ansible.com/ansible/latest/reference_appendices/logging.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Keep vaulted variables safely visible* – [https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.xhtml#keep-vaulted-variables-safely-visible](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.xhtml#keep-vaulted-variables-safely-visible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Encrypting passwords in Ansible* – [https://docs.ansible.com/ansible/latest/reference_appendices/faq.xhtml#how-do-i-generate-encrypted-passwords-for-the-user-module](https://docs.ansible.com/ansible/latest/reference_appendices/faq.xhtml#how-do-i-generate-encrypted-passwords-for-the-user-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vault IDs in Red Hat Ansible and Red Hat Ansible Tower* –[https://developers.redhat.com/blog/2020/01/30/vault-ids-in-red-hat-ansible-and-red-hat-ansible-tower](https://developers.redhat.com/blog/2020/01/30/vault-ids-in-red-hat-ansible-and-red-hat-ansible-tower)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 3: Managing Your Automation Development Flow with Best Practices'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part will describe the importance of continual assessment, monitoring,
    and security operations. You will learn about different monitoring technologies
    you can use to detect and protect your environment, as well as how to gain insights
    from them.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the book comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B18383_14.xhtml#_idTextAnchor265)*, Keeping Automation Simple
    and Efficient*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B18383_15.xhtml#_idTextAnchor275)*, Automating Non-Standard
    Platforms and Operations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B18383_16.xhtml#_idTextAnchor294)*, Ansible Automation Best
    Practices for Production*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
