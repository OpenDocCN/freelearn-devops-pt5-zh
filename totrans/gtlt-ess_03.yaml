- en: Chapter 3. Your Users and Gitolite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a working installation of Gitolite, it's time to talk about
    how users interact with a Gitolite-managed system, and what they need to know
    to start using it. This will allow you to get some of your advanced users to start
    using the system while you continue to learn about Gitolite as we progress. As
    an administrator, you will be making a lot of decisions in terms of things such
    as naming conventions for repositories as well as branches, how tight or relaxed
    the access rules will be, and many more aspects that you will learn going forward.
    These advanced users could help by giving you feedback or acting as sounding boards
    for these decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Git repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before discussing how to access a Gitolite-managed repository, we will first
    need some background on how Git repositories are normally accessed, that is, when
    you aren't using Gitolite.
  prefs: []
  type: TYPE_NORMAL
- en: Git servers, SSH, and HTTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by reviewing how a user views a normal Git server. Git repositories
    use URLs as locators, so when a user clones, fetches from, or pushes to a remote
    repository, it is done using a suitable URL. Git URLs are not very different from
    any other URL, and the man page for git-clone has a section on them, so you can
    see all the syntax variations that you can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, for authenticated remote access, there are really only two protocols
    that are of interest: SSH and HTTP. Of these, ssh-based access is a lot more common,
    because it is quick and easy to set up; even on a freshly installed Unix, there''s
    usually no extra configuration required to get it working.'
  prefs: []
  type: TYPE_NORMAL
- en: As the main page mentioned previously says an ssh URL has the general form `ssh://[user@]host.xz[:port]/path/to/repo.git`.
    When you type an URL, such as `ssh://git@server.example.com/repo` to access a
    remote git repository, you will usually be asked for a password, unless an ssh
    key pair has already been set up for access to the remote host. Once access has
    been granted, the ssh daemon runs the appropriate Git command on the remote side
    to talk to the Git client on the local side.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Gitolite repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the background from the previous section, we're ready to see how things
    change when a user goes through Gitolite to access a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section will contain the basic material that most administrators would
    need to provide to their users, or to explain to them how to access a Gitolite
    server. However, depending on your users' familiarity with ssh and related topics,
    you may have to expand this material with supplementary information, examples,
    or instructions specific to your site.
  prefs: []
  type: TYPE_NORMAL
- en: SSH key pairs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most significant change is that password access is no longer possible; users
    *must* use a key pair and send the public key to the administrator so that they
    can be added to Gitolite. If this does not happen, Gitolite has no way to recognize
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: If they don't already have an ssh key pair, they should generate one on their
    own workstations.
  prefs: []
  type: TYPE_NORMAL
- en: Your users will need to use the `ssh-keygen` command to create the key pair.
    This creates two files, which are `id_rsa` containing the private key and `id_rsa.pub`
    containing the public key, if they chose the default options. On a Windows system,
    the command will respond with the full paths of where the files were created,
    while on a Unix system they will be in `$HOME/.ssh`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ideally, users should set a passphrase on the private key for security and then
    use `ssh-agent` for convenience; however, both of these topics are out of the
    scope of this book. Any ssh-related text or website should have sufficient details,
    as will the documentation that comes with the OpenSSH package.
  prefs: []
  type: TYPE_NORMAL
- en: They will then send the public key (the file whose name ends in `.pub`) to you,
    so that you may add them as a user.
  prefs: []
  type: TYPE_NORMAL
- en: Repository naming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second change is that the name of each repository will be whatever you,
    as the administrator, have created in the `conf/gitolite.conf` file that we briefly
    saw in the last section of the previous chapter. Gitolite actually creates all
    its repositories inside `$HOME/repositories` in the hosting user account, but
    only you (the administrator) need to know this. As far as the user is concerned,
    to access a repository that is listed in the conf file as `repo foo`, the URL
    to use is simply `git@server:foo` (or the longer form `ssh://git@server/foo`).
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that the `.git` at the end of the repository name is optional for
    Git commands (namely `clone`, `fetch`, `push`, `ls-remote`, and `archive`). Git
    itself works fine with or without it, so Gitolite does the same in order to be
    consistent. However, in interactions with Gitolite, such as when running Gitolite
    commands that refer to repositories, you must use the bare name (without the trailing
    `.git`), which is the name that Gitolite prints in its error messages or informational
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Getting information from Gitolite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once your users have access to Gitolite, they would probably like to see which
    repositories they can access. The simplest way to do this is to run the `info`
    command, which is available to all remote users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This tells you what your Gitolite username is (in this case, `adam`), which
    repos you have access to, and whether you are allowed to read and write, or only
    read but not write to the repo. Apart from that, this command also tells you which
    version of Gitolite and which version of Git is running on the server, which could
    be useful.
  prefs: []
  type: TYPE_NORMAL
- en: Gitolite commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `info` command is not the only command available to your users, of course;
    there are a few more. As you may have guessed from the preceding part, the general
    format for running Gitolite commands is simply `ssh git@server command-name command-arguments`,
    where the arguments are of course optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conveniently, Gitolite also has a command to list all the available commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this gives the remote user the list of commands that they are
    allowed to run. (Some of these commands can only be explained in later chapters).
  prefs: []
  type: TYPE_NORMAL
- en: Further, if you run this from the Gitolite hosting user command line, as `gitolite
    help`, you will get a listing of *all* the available commands, and not just the
    ones that are enabled for remote access.
  prefs: []
  type: TYPE_NORMAL
- en: Getting help for commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting help for a command is easy. Every Gitolite command responds with a
    help message when called with `-h` as the only argument. For example, the help
    message for the info command is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As before, some of these options pertain to features of Gitolite we have not
    yet encountered, and will become clearer when that material is presented.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting SSH issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you start adding your first few users to a system, you may run into some
    ssh-related issues. This section will discuss the possible issues in brief, and
    explain how to recognize and fix them.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization, not authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we need a couple of basic definitions. Authentication is the process
    of verifying that you are who you claim to be. Authorization is the process of
    determining what you want to do and deciding whether you're allowed to do it or
    not. Authorization happens after authentication (the system can only decide what
    you are allowed to do *after* establishing who you are!).
  prefs: []
  type: TYPE_NORMAL
- en: Gitolite is only concerned with authorization; it does not do authentication.
    It leaves authentication up to an ssh server or a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTTP mode is out of scope for this book; please consult Gitolite's online
    documentation to use that mode.
  prefs: []
  type: TYPE_NORMAL
- en: Once the ssh server has authenticated the user, it uses the `command` option
    in the ssh authorized keys file (`$HOME/.ssh/authorized_keys`) to invoke Gitolite
    and pass it the username. Gitolite then decides whether this user is allowed to
    access this repository or not.
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate public keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the user's public key was already part of the authorized keys file before
    setting up Gitolite (perhaps to allow him to get a login shell and run Unix commands),
    the key will appear twice in the authorized keys file—once as is, and once with
    the `command` option and other options that Gitolite adds to each public key in
    the `keydir` directory.
  prefs: []
  type: TYPE_NORMAL
- en: However, if a key appears twice in the authorized keys file, the ssh server
    will only look at the first occurrence. At the same time, Gitolite tries very
    hard to make sure that a key that already had normal access to the server continues
    to have it, so it will place the Gitolite line, which is more restrictive than
    the default access, *after* the normal line. This means that users who have shell
    access to the Gitolite hosting user will not be able to use Gitolite, since the
    key will not invoke Gitolite. They will need to create and use a different ssh
    key pair for Gitolite (that is, repository) access. They would then have to manage
    these two key pairs on their client, perhaps using `$HOME/.ssh/config` to help.
    Further explanation of the ssh `config` file and how it helps you choose which
    key to use, is out of scope for this book. However, almost any decent book on
    ssh, as well as the main pages for ssh on your system, should have this information.
  prefs: []
  type: TYPE_NORMAL
- en: Diagnosing public key problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The best way to diagnose public key problems, such as in the previous section,
    is to run the `sshkeys-lint` program that comes with Gitolite. Here is an example
    where two problems with public keys were intentionally created. The first is that
    we reused a key that already had shell access, adding it to Gitolite as `u2.pub`.
    The second is that we copied the file `u5.pub` as `u6.pub`. The output of the
    sshkeys-lint command after these changes is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the command lists potential problems, first in the authorized
    keys file (`$HOME/.ssh/authorized_keys`), and then among the public keys that
    Gitolite owns.
  prefs: []
  type: TYPE_NORMAL
- en: SSH best practice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve now seen how to troubleshoot ssh issues. However, it''s better to avoid
    such problems in the first place, and a good rule of thumb for avoiding them is
    this: don''t give any user shell access to the server. Even you, as the administrator,
    should log on to some other user ID, run `su - git`, and then provide a password
    when you need to do anything on the Gitolite hosting user''s command-line shell.
    Let all the keys in the authorized keys file be Gitolite-managed keys unless you
    are really familiar with ssh. That should eliminate most of the common issues
    with ssh keys.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to add users to your new Gitolite installation,
    and how to find and fix problems with ssh keys. In the next chapter, we will talk
    about creating new repositories.
  prefs: []
  type: TYPE_NORMAL
