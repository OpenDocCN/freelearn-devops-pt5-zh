- en: DevOps - Continuous Integration and Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps - 持续集成与交付
- en: In this chapter, we will learn about implementing DevOps core process such as
    source code repository, code review, artifacts repository, continuous testing,
    continuous development, continuous integration. As discussed in previous chapters
    on big data and cloud, these processes are highly valuable to apply to every phase.
    We will focus on few popular tools like Git, Jenkins, Maven, Gerrit, Nexus, Selenium,
    and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习实施 DevOps 核心流程，如源代码仓库、代码审查、工件仓库、持续测试、持续开发、持续集成。如前面关于大数据和云的章节所讨论的，这些过程在每个阶段都非常有价值。我们将重点关注一些流行的工具，如
    Git、Jenkins、Maven、Gerrit、Nexus、Selenium 等。
- en: '**Continuous integration** (**CI**)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）'
- en: '**Continuous delivery** (**CD**)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）'
- en: Jenkins tool setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 工具设置
- en: Configuration management-Jenkins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理 - Jenkins
- en: Source code management-Git
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理 - Git
- en: Build management- Maven
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建管理 - Maven
- en: Source code review-Gerrit
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码审查 - Gerrit
- en: Repository management-Nexus
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库管理 - Nexus
- en: Test Automation- Selenium
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试自动化 - Selenium
- en: Continuous deployment-Pipelines
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署 - 管道
- en: Jenkins client setup
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 客户端设置
- en: Jenkins security
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 安全
- en: Jenkins metrics
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 指标
- en: 'Continuous integration and continuous delivery are popular and valuable processes
    to ensure high-quality and timely software delivery. Continuous integration is
    the integrated software development process where multiple developers adhere to
    the agile methodology and adapt it to best practices like the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成和持续交付是确保高质量和及时软件交付的流行且有价值的流程。持续集成是一个集成的软件开发过程，其中多个开发人员遵循敏捷方法，并将其调整为以下最佳实践：
- en: Ensure all development code is subject to a version control system
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有开发代码都受版本控制系统的管理
- en: An adequate code review process is incorporated
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当的代码审查流程
- en: Changes to code are integrated, tested, and built quickly
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码更改快速集成、测试和构建
- en: Build process is integrated to run unit tests and automated
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程集成以运行单元测试并自动化
- en: Attend to the build errors immediately, turn around quickly
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立即处理构建错误，快速调整
- en: Tracking and Metrics of build results and repository management.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建结果和仓库管理的跟踪与指标
- en: Transparency and a user-friendly build process
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明度和用户友好的构建过程
- en: Continuous delivery is the process of extending the continuous integration.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是扩展持续集成的过程。
- en: The most current and latest version of the software is readily available
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件的最新版本随时可用
- en: Changes passing through the testing cycle from the technical and quality standpoint
    are ready for deployment
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从技术和质量的角度来看，经过测试周期的更改已准备好部署
- en: Automate the shipment and deployment process
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化发货和部署过程
- en: 'The continuous integration process is depicted as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成过程如下图所示：
- en: '![](img/e36b05fa-c2f4-454f-b052-1e2e003b4045.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e36b05fa-c2f4-454f-b052-1e2e003b4045.png)'
- en: 'The continuous integration process is detailed following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成过程的详细步骤如下：
- en: '**The developer''s environment**: Developers create code changes in a local
    workspace with an Integrated Development Environment runtime and with build tools
    physically installed on PC, or a cloud-based (Web IDE). They do unit level testing,
    data validations, code performance checks, and so on. The code changes done by
    the developer are pushed to the source code management system.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者环境**：开发者在本地工作区使用集成开发环境运行时和安装在 PC 上的构建工具，或基于云的（Web IDE）创建代码更改。他们进行单元级测试、数据验证、代码性能检查等。开发者进行的代码更改被推送到源代码管理系统。'
- en: 'The typical continuous integration and deployment cycle is comprises of setting
    up a CI/CD infrastructure and processes as listed:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的持续集成和持续部署周期包括设置 CI/CD 基础设施和流程，如下所示：
- en: The source code version and repository management system
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码版本和仓库管理系统
- en: A process scheduler to initiate the orchestration pipeline
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动编排管道的过程调度器
- en: A build process to manage code builds and scheduled tests
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理代码构建和计划测试的构建过程
- en: Build nodes for executing the build
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行构建的构建节点
- en: Testing process on identified test nodes for automated testing
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在已识别的测试节点上进行自动化测试的测试过程
- en: Build outcome artifact repository
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建结果工件仓库
- en: Artefact repository to store build results
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于存储构建结果的工件仓库
- en: Scenario and acceptance tests on test nodes
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试节点上的场景和验收测试
- en: Application installation with deploy tool on to runtime systems
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用部署工具将应用程序安装到运行时系统
- en: Acceptance tests for applications deployed on the runtime systems
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署在运行时系统上的应用程序的验收测试
- en: The quality manager will approve the acceptance tests to agree to deployment
    test systems.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 质量经理将批准验收测试，以同意部署测试系统。
- en: The delivery manager will approve the application deployment to production.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 交付经理将批准应用程序部署到生产环境。
- en: Best practices for CI/CD
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 的最佳实践
- en: '**Using version control**: In collaborative development environments with simultaneous
    development there will be multiple challenges:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用版本控制**：在协作开发环境中进行同时开发将面临多个挑战：'
- en: 'A source code management system defines a single source of truth for the code
    after placing the code under a version control system. The source code will be
    reproducible by effectively adopting the merge process for mainline development
    and loop lines for bug fixes and so on in the system. Git is a popular source
    code management system and GitHub is a cloud variant as a **Software as Service**
    (**SaaS**) model:'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理系统在将代码置于版本控制系统下之后，定义了代码的单一真实来源。通过有效地采用合并流程进行主线开发，并在系统中使用回路修复等方式，源代码将是可重现的。Git
    是一个流行的源代码管理系统，而 GitHub 作为一种**软件即服务**（**SaaS**）模式是其云版本：
- en: '**Automate the build**: Standardized automated build procedure will stabilize
    the build process to produces dependable results. The matured build process must
    contain the build description and all the dependencies to execute the build with
    a standardized build tool installation. Jenkins is the most versatile tool for
    build schedules; it offers a convenient UI and also has plug-ins integrating most
    popular tools for continuous integration.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化构建**：标准化的自动化构建流程将稳定构建过程，产生可靠的结果。成熟的构建流程必须包含构建描述以及执行构建所需的所有依赖项，并使用标准化的构建工具安装。Jenkins
    是最通用的构建调度工具；它提供便捷的用户界面，并且有许多插件集成了大多数流行的持续集成工具。'
- en: '**Tests in the build**: A few tests are to be performed to validate effectiveness
    and fitness of code beyond just the syntactical correctness of the code as follows:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建中的测试**：需要执行一些测试，以验证代码的有效性和适应性，超越代码的语法正确性，如下所示：'
- en: Unit tests operate directly on build results
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试直接作用于构建结果
- en: Static code checks on source code prior to developer check-in. Git pre-commit
    triggers or CI system could be used to set up a gating or non-gating check
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发者提交代码前对源代码进行静态检查。可以使用 Git 提交前触发器或 CI 系统来设置门控或非门控检查
- en: Scenario tests for new build applications to be installed and started
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新构建应用程序的场景测试，确保其能够安装并启动
- en: 'Functional performance of the code:'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的功能性能：
- en: Unit test frameworks are popular across source code technologies like JUnit
    for Java. Selenium Framework provides graphical user interfaces and browser behavior.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试框架在像 JUnit 这样的源代码技术中非常流行。Selenium 框架提供图形用户界面和浏览器行为。
- en: Implementing these tests on the developer's workstation early as part of the
    build saves time and effort addressing bugs discovered later in the development
    process.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作为构建的一部分，尽早在开发者的工作站上执行这些测试，可以节省时间和精力，避免在开发过程后期发现的错误。
- en: '**Early and frequent commit of code**: In a distributed development environment
    with multiple projects, each team or developer intends to integrate their code
    with the mainline. Also, the feature branches change to be integrated into the
    main line. It''s a best practice to integrate code quickly and early. The time
    delay increases between new changes and merging with the mainline will increase
    the risk of product instability, the time taken, and complications as the main-line
    evolves from the baseline. Hence each developer working with the feature branch
    should push their code at least once per day. For main branch inactive projects,
    the high effort for constant rebasing must be evaluated before implementing.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽早且频繁地提交代码**：在多个项目的分布式开发环境中，每个团队或开发者都打算将自己的代码与主线集成。同时，特性分支也会发生变化并集成到主线中。最佳实践是尽早且快速地集成代码。新更改与主线合并之间的时间延迟越大，产品不稳定的风险、所需时间以及随着主线从基线发展而产生的复杂性也会增加。因此，每个在特性分支上工作的开发者应该每天至少提交一次代码。对于主分支上不活跃的项目，在实施之前必须评估不断变基所需的高昂努力。'
- en: '**Every change to be built**: Developer changes are to be incorporated into
    the mainline, however, they can potentially destabilize the mainline affecting
    its integrity for the developers relying on the main line.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每次更改都需要构建**：开发者的更改需要并入主线，但它们有可能会破坏主线的稳定性，影响依赖主线的开发者的工作。'
- en: Continuous integration addresses this with the best practice of continuous build
    for any code change committed. Any broken build requires immediate action as a
    broken build blocks the entire evolution of the mainline and it will be expensive
    depending on the frequency of commits and such issues. These issues can be minimized
    by enforcing branch level builds.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成通过持续构建任何提交的代码变更来解决这个问题。任何构建失败都需要立即处理，因为构建失败会阻塞主分支的整个演进，而且根据提交的频率和此类问题的存在，修复这些问题可能会非常昂贵。通过强制执行分支级别的构建，可以最大限度地减少这些问题。
- en: Push for review in Gerrit or pull request in GitHub are effective mechanisms
    to propose changes and check the quality of changes by identifying problems before
    they're pushed into the mainline, causing rework.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Gerrit 中推送进行审查或在 GitHub 中发起拉取请求是有效的机制，用于提出变更并检查变更质量，通过在推送到主分支之前识别问题，避免返工。
- en: '**Address build errors quickly**: The best practice of building at the branch
    level for each change will put the onus on the respective developers to fix their
    code build issues immediately rather than propagate it to the main branch. This
    forms a continuous cycle of Change-Commit-Build-Fix at each respective branch
    level.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速解决构建错误**：在每个变更的分支级别进行构建的最佳实践将使相应的开发人员立即解决其代码构建问题，而不是将其传播到主分支。这形成了一个持续的变更-提交-构建-修复循环，发生在每个相应的分支级别。'
- en: '**Build fast**: The quick turnaround of builds, results, and tests by automatic
    processes should be vital inputs for the developer workflow; a short wait time
    will be good for the performance of the continuous integration process on overall
    cycle efficiency.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速构建**：自动化过程快速返回构建结果和测试应该成为开发者工作流的重要输入；短暂的等待时间有助于提升持续集成过程的整体效率。'
- en: This is a balancing act between integrating new changes securely to the main
    branch and simultaneously building, validating, and scenario testing. At times,
    there could be conflicting objectives so trade-offs need to be achieved to find
    a compromise between different levels of acceptance criteria, considering the
    quality of the mainline is most important. Criteria include syntactical correctness,
    unit tests, and fast-running scenario tests for changes incorporated.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在将新变更安全地集成到主分支的同时，进行构建、验证和场景测试的平衡行为。有时，可能会出现相互冲突的目标，因此需要在不同级别的接受标准之间取得折衷，考虑到主分支的质量最为重要。标准包括语法正确性、单元测试和针对所做变更的快速场景测试。
- en: '**Pre-production run**: Multiple setups and environments at various stages
    of the production pipeline cause errors. This would apply to developer environments,
    branch level build configurations, and central main build environments. Hence
    the machines where scenario tests are performed should be similar and have a comparable
    configuration to the main production systems.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产前运行**：在生产流水线的不同阶段，多个设置和环境会导致错误。这适用于开发者环境、分支级别的构建配置和中央主构建环境。因此，进行场景测试的机器应与主生产系统相似，并具有相当的配置。'
- en: Manual adherence to an identical configuration is a herculean task; this is
    where DevOps value addition and core value proposition and treat the infrastructure
    setup and configuration similar to writing code. All the software and configuration
    for the machine are defined as source files which enable you to recreate identical
    systems; we will cover them in more detail in [Chapter 8](1346153b-eecd-4c59-8275-b93d9ba29cbd.xhtml),
    *DevOps Continuous Deployment*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 手动遵循相同配置是一项艰巨的任务；这正是 DevOps 增值和核心价值主张的体现，并将基础设施设置和配置视为类似于编写代码的过程。所有机器的软件和配置都被定义为源文件，这些文件使得你能够重建相同的系统；我们将在[第八章](1346153b-eecd-4c59-8275-b93d9ba29cbd.xhtml)中详细讨论此内容，*DevOps
    持续部署*。
- en: '**The build process is transparent**: The build status and records of the last
    change must be available to ascertain the quality of the build for everyone. Gerrit
    is a change review tool and can be effectively used to record and track code changes,
    the build status, and related comments. Jenkins flow plugins offer build team
    and developers a complete end to end overview of the continuous integration process
    for source code management tools, the build scheduler, the test landscape, the
    artifact repository, and others as applicable.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建过程是透明的**：构建状态和最后变更的记录必须对所有人可用，以便确认构建的质量。Gerrit 是一个变更审查工具，可以有效地用来记录和跟踪代码变更、构建状态和相关评论。Jenkins
    流程插件为构建团队和开发人员提供了一个完整的端到端概览，涵盖源代码管理工具、构建调度器、测试环境、工件库等相关内容。'
- en: '**Automate the deployment**: Installation of the application to a runtime system
    in an automated way is called deployment and there are several ways to accomplish
    this.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化部署**：以自动化方式将应用程序安装到运行时系统中，称为部署，并有多种方式可以完成此操作。'
- en: Automated scenario tests should be part of the acceptance process for changes
    proposed. These can be triggered by builds to ensure product quality.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化场景测试应成为变更接受过程的一部分。这些测试可以通过构建触发，以确保产品质量。
- en: Multiple runtime systems like JEE servers are set up to avoid single-instance
    bottlenecks of serializing test requests and the ability to run parallel test
    queries. Using a single system also has associated overheads in recreating the
    environment with change overhead for every test case, causing a degeneration a
    performance.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置多个运行时系统，如 JEE 服务器，以避免单实例瓶颈，序列化测试请求并能够运行并行的测试查询。使用单一系统也会带来重建环境的开销，每次测试用例都需要更改环境，导致性能退化。
- en: Docker or container technology to install and start runtime systems on demand
    in well-defined states, to be removed afterward (we will discuss container technology
    in [Chapter 9](f88de5ac-d98c-49fe-a172-ac4ed44d19b1.xhtml), *Containers, IoT,
    and Microservices*, in depth).
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker 或容器技术按需安装并启动运行时系统，在预定义的状态下运行，之后可以删除（我们将在[第9章](f88de5ac-d98c-49fe-a172-ac4ed44d19b1.xhtml)，*容器、物联网和微服务*中深入讨论容器技术）。
- en: Automated test cases, since the frequency and time of validations of new comments,
    is not predictable in most cases, so scheduling daily jobs at a given time is
    an option to explore, where the build is deployed to a test system and notified
    after successful deployment.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试用例，由于新评论的验证频率和时间在大多数情况下不可预测，因此安排每天在指定时间执行作业是一种可探索的选项，构建将部署到测试系统，并在成功部署后发送通知。
- en: The deployment to production is a manual conscious decision satisfying all quality
    standards and ensure the change is appropriate to be deployed to production. If
    it can also be automated with confidence, that's the highest accomplishment of
    automated continuous deployment too.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到生产环境是一个手动且经过深思熟虑的决策，确保符合所有质量标准，并确保该更改适合部署到生产环境。如果也能自信地自动化执行，这也是自动化持续部署的最高成就。
- en: Continuous delivery means that any change integrated is validated adequately
    so that it is ready to be deployed to production. It doesn't require every change
    to be deployed to production automatically.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付意味着对任何集成的更改都要进行充分验证，以便准备好部署到生产环境。这并不要求每次更改都必须自动部署到生产环境。
- en: Jenkins setup
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 设置
- en: 'We will start with Jenkins as it''s the core component of the continuous integration
    process. The Jenkins process workflow is shown as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Jenkins 开始，因为它是持续集成过程的核心组件。Jenkins 流程工作流如下所示：
- en: '![](img/d95cdcce-4919-49f0-8391-7cec0eb4be86.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d95cdcce-4919-49f0-8391-7cec0eb4be86.png)'
- en: 'See the Jenkins homepage at: [https://jenkins.io/index.html](https://jenkins.io/index.html),
    shown as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 Jenkins 首页：[https://jenkins.io/index.html](https://jenkins.io/index.html)，如下所示：
- en: '![](img/4d22589a-5e08-4dbc-a9e3-47b16372576f.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d22589a-5e08-4dbc-a9e3-47b16372576f.png)'
- en: Prerequisites to install Jenkins
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Jenkins 的先决条件
- en: 'Jenkins installation and configuration requirements should be planned well
    as prescribed on the Jenkins homepage based on the following parameters:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 安装和配置要求应根据以下参数，参考 Jenkins 首页的建议进行规划：
- en: Operating system--Linux versions of Ubuntu/Debian, Red Hat/Fedora/CentOS, openSUSE,
    FreeBSD, OpenBSD, Gentoo, Windows, macOS X
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统——Ubuntu/Debian、Red Hat/Fedora/CentOS、openSUSE、FreeBSD、OpenBSD、Gentoo、Windows、macOS
    X 的 Linux 版本
- en: JDK version
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 版本
- en: Memory
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存
- en: Disk space
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬盘空间
- en: Java Containers--The Jenkins WAR file can run on any servlet-supported engine
    such as tomcat or Glassfish application servers.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 容器——Jenkins 的 WAR 文件可以在任何支持 Servlet 的引擎上运行，如 Tomcat 或 Glassfish 应用服务器。
- en: 'Jenkins can be installed in different modes as per its utility:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 可以根据其用途以不同模式安装：
- en: '**Standalone**: Jenkins can run standalone in its own process using its own
    built-in web server (Jetty) for experimentation and small projects'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立运行**：Jenkins 可以在其自己的进程中独立运行，使用内置的 Web 服务器（Jetty）进行实验和小型项目。'
- en: '**Servlet-based**: It can also run as one servlet framework for development
    projects.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于 Servlet**：它也可以作为一个 Servlet 框架运行，适用于开发项目。'
- en: '**Multi-node setup for staging or production**: Distributed client-server setup;
    the Jenkins advanced installation procedure is recommended.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用于预发布或生产环境的多节点设置**：分布式客户端-服务器设置；建议使用 Jenkins 高级安装程序。'
- en: Standalone Installation
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立安装
- en: 'A standalone installation as suggested in the name is all by itself on a single
    machine (as opposed to multiple systems for different tasks):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的独立安装就像名字所暗示的那样，是在单台机器上独立完成的（与用于不同任务的多个系统相对）：
- en: Standalone installation requires JDK to be installed on the system.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 独立安装需要在系统上安装 JDK。
- en: Download the `Jenkins.war` file
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 `Jenkins.war` 文件
- en: 'Open the command prompt and, at the location of the `Jenkins.war` file, run
    the command:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符，并在 `Jenkins.war` 文件的位置运行以下命令：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/1023bb7c-2d4b-445a-b456-001db44e13f8.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1023bb7c-2d4b-445a-b456-001db44e13f8.png)'
- en: 'During initialization, a few tasks will run and the following screen will appear
    during the installation process:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化过程中，将运行几个任务，并在安装过程中出现以下屏幕：
- en: 'The initial screen page will ask about the plugin options:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始屏幕页面将询问插件选项：
- en: '![](img/b2b09892-7fc3-464b-bedd-6761dd623968.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2b09892-7fc3-464b-bedd-6761dd623968.png)'
- en: 'Plugins will be installed as per the selected configuration in the preceding
    option:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件将根据前述选项中选择的配置安装：
- en: '![](img/67ff4682-7f8c-4225-a622-1cef59ec5d1b.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67ff4682-7f8c-4225-a622-1cef59ec5d1b.png)'
- en: 'After successful installation, the following admin credential creation page
    will pop up:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功安装后，以下管理员凭据创建页面将弹出：
- en: '![](img/dade695b-d0f9-4b78-ad0c-c1996efec3a1.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dade695b-d0f9-4b78-ad0c-c1996efec3a1.png)'
- en: '**Accessing Jenkins**: After successful installation, Jenkins can be accessed
    through a web browser from your local machine as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**访问 Jenkins**：成功安装后，可以通过本地计算机的 web 浏览器访问 Jenkins，如下所示：'
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Jenkins dashboard will open at this link:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 仪表板将在此链接处打开：
- en: '![](img/77ea33da-e5e2-45d2-9759-e53fe6057c6f.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77ea33da-e5e2-45d2-9759-e53fe6057c6f.png)'
- en: 'The Manage Jenkins option in the dashboard will provide various options to
    configure various parameters:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表板中的“管理 Jenkins”选项将提供各种配置各种参数的选项：
- en: '![](img/b96c851b-a3dd-497a-896c-8032d79c3e32.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b96c851b-a3dd-497a-896c-8032d79c3e32.png)'
- en: The Manage Plugins option in the dashboard is an important option with a very
    wide choice of plugins to integrate with source code systems, authentication systems,
    various development platforms, and so on.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表板中的“管理插件”选项是一个重要选项，提供了与源代码系统、认证系统、各种开发平台等集成的广泛选择。
- en: '![](img/845dfdd9-263a-4103-8623-677a9dd5e337.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/845dfdd9-263a-4103-8623-677a9dd5e337.png)'
- en: Installing Jenkins on a Servlet Engine needs the installation of Tomcat or Glassfish.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Servlet 引擎上安装 Jenkins 需要安装 Tomcat 或 Glassfish。
- en: '![](img/023906b8-1488-460d-8e8e-54d960ef1ae0.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/023906b8-1488-460d-8e8e-54d960ef1ae0.png)'
- en: Copy the `Jenkins.war` file it to the web apps folder in the `tomcat` folder.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Jenkins.war` 文件复制到 `tomcat` 文件夹中的 web 应用程序文件夹。
- en: Start the Tomcat server from the Tomcat `bin` directory.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Tomcat `bin` 目录启动 Tomcat 服务器。
- en: '`http://localhost:8080/Jenkins`--access Jenkins on Tomcat server.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/Jenkins`--在 Tomcat 服务器上访问 Jenkins。'
- en: Linux system installation on Ubuntu
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 Linux 系统
- en: Log into the server and update: `sudo apt-get -y update`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录服务器并更新：`sudo apt-get -y update`。
- en: Install Java: `sudo apt-get install -y default-jdk`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Java：`sudo apt-get install -y default-jdk`。
- en: 'Download an Ubuntu version from `Jenkins-ci.org` site using `wget` command:
    `wget http://pkg.jenkins-ci.org/debian-rc/binary/jenkins_2.0_all.deb`.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `wget` 命令从 `Jenkins-ci.org` 站点下载 Ubuntu 版本：`wget http://pkg.jenkins-ci.org/debian-rc/binary/jenkins_2.0_all.deb`。
- en: Package install--`sudodpkg - i Jenkins.zip`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包安装--`sudodpkg - i Jenkins.zip`。
- en: Dependency resolve by `sudo apt - get -f install`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `sudo apt - get -f install` 解决依赖关系。
- en: Access Jenkins on port `http://localhost:8080/Jenkins`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口 `http://localhost:8080/Jenkins` 上访问 Jenkins。
- en: Continue with the steps listed in preceding figure.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续按照前面图示中列出的步骤进行。
- en: To initialize Jenkins at startup, add the command `/etc/init.d/jenkins` start
    in `/etc/rc.local` file.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在启动时初始化 Jenkins，请在 `/etc/rc.local` 文件中添加命令 `/etc/init.d/jenkins start`。
- en: Git (SCM) integration with Jenkins
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git（SCM）与 Jenkins 的集成
- en: 'Git is the most popular source code management system and offers extensive
    benefits such as:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是最流行的源代码管理系统，提供了广泛的好处，例如：
- en: Version control lets you maintain multiple versions of the code for different
    purposes
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制允许您为不同目的维护代码的多个版本
- en: A code repository is required to keep all project-related code in one place
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一个代码存储库来将所有项目相关的代码放在一个地方
- en: Collaboration among users and intervention for debugging purposes
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户之间的协作和调试目的的干预
- en: 'Git can be downloaded from [https://git-scm.com/downloads](https://git-scm.com/downloads):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 可从 [https://git-scm.com/downloads](https://git-scm.com/downloads) 下载 Git：
- en: '![](img/5de08797-f6da-4d93-9121-e46e2e69aaf3.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5de08797-f6da-4d93-9121-e46e2e69aaf3.png)'
- en: Multiple platforms versions such as Linux, Windows, and so on are available
    within desktop and web flavors.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 Linux、Windows 等多个平台版本，支持桌面和网页版本。
- en: 'There can be multiple types of repositories:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 存在多种类型的仓库：
- en: A public repository created on GitHub can give read access to everyone but write
    or commit access is given to chosen individuals or groups
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建的公共仓库可以让所有人读取访问权限，但写入或提交访问权限仅授予指定的个人或团队。
- en: A private repository permits collaborators for participation and is a paid subscription
    to GitHub
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有仓库允许合作者参与，并且是 GitHub 的付费订阅服务。
- en: A local repository is a desktop version without the need for an internet connection
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地仓库是无需互联网连接的桌面版本。
- en: A remote repository is a web-based repository for extended features like issue
    management and pull requests
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程仓库是一个基于 Web 的仓库，提供扩展功能，如问题管理和拉取请求。
- en: GitHub provides options to synchronize code changes from a single computer or
    between multiple computers.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 提供选项以同步来自单台计算机或多台计算机的代码更改。
- en: Pull changes will sync code changes from a desktop with an online repository
    and clone options will create a new copy of the repository on the computer.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取更改将同步来自桌面的代码更改与在线仓库，而克隆选项将创建仓库的全新副本到计算机中。
- en: Performing these tasks enables us to maintain source code on cloud-based SaaS
    system
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些任务使我们能够在基于云的 SaaS 系统上维护源代码。
- en: Create a sign-in account on GitHub.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建一个登录帐户。
- en: Create a project repository for organizing your project-related code.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个项目仓库，用于组织与你的项目相关的代码。
- en: '![](img/5a3aa549-4fb1-4162-81ed-84508e5f39e5.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a3aa549-4fb1-4162-81ed-84508e5f39e5.png)'
- en: Integrating GitHub with Jenkins
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 GitHub 与 Jenkins 集成
- en: 'To integrate a GitHub repository with Jenkins, follow these steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 GitHub 仓库与 Jenkins 集成，请按照以下步骤操作：
- en: In Manage Plugins, search for Git plugin under the filter section and install
    it.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在管理插件中，搜索 Git 插件并安装它，位于筛选器部分。
- en: 'If it''s installed by default, we can find it on the Installed tab as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是默认安装，我们可以在已安装标签下找到它，如下所示：
- en: '![](img/1d966a59-59c2-4140-8c7d-c1d055d41b0f.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d966a59-59c2-4140-8c7d-c1d055d41b0f.png)'
- en: 'After Jenkins is restarted, create new item on the Jenkins homepage will give
    the following screen:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 重启后，创建新项目时将显示如下界面：
- en: '![](img/933bdefe-ff63-4fef-9e33-530714772650.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/933bdefe-ff63-4fef-9e33-530714772650.png)'
- en: 'Select a job name and the next screen will show Git options as following, under
    the Source Code Management tab. You can add other SCM tools like CVS, subversion,
    and so on, in a similar manner:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个工作名称，下一屏幕将显示 Git 选项，如下所示，在源代码管理标签下。你可以以类似的方式添加其他 SCM 工具，如 CVS、Subversion
    等：
- en: '![](img/15151cb8-b8bb-48de-9bea-3be5e787cf75.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15151cb8-b8bb-48de-9bea-3be5e787cf75.png)'
- en: Enter the Git repository address of the local machine or a web link in the preceding
    repository URL placeholder to configure Git with Jenkins.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面仓库 URL 占位符中输入本地计算机的 Git 仓库地址或一个网页链接，以便将 Git 配置与 Jenkins 集成。
- en: Maven (Build) tool Integration with Jenkins
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven（构建）工具与 Jenkins 集成
- en: 'Download Maven from [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi);
    this is the latest version of the binary file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi)
    下载 Maven；这是二进制文件的最新版本：
- en: '![](img/71baaf1c-5220-4d2b-98c0-5f7b725740f5.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71baaf1c-5220-4d2b-98c0-5f7b725740f5.png)'
- en: Extract the downloaded Maven file to a folder.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的 Maven 文件提取到一个文件夹中。
- en: 'Open Manage Jenkins:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开管理 Jenkins：
- en: '![](img/e5a8a0b5-dab2-47dc-8897-27d636325c8c.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5a8a0b5-dab2-47dc-8897-27d636325c8c.png)'
- en: Select Maven Plugins as follows and install them without the restart option.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Maven 插件，如下所示，并安装它们，不选择重启选项。
- en: '![](img/d6894617-6f82-4837-a66c-fc7dc8a7bd70.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6894617-6f82-4837-a66c-fc7dc8a7bd70.png)'
- en: 'Monitor plugin progress as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控插件进度，如下所示：
- en: '![](img/e71aeadc-2044-4c0e-a05e-f531f8b1305e.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e71aeadc-2044-4c0e-a05e-f531f8b1305e.png)'
- en: 'Under Configure tools, add Maven by giving the repository location:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置工具下，添加 Maven，并提供仓库位置：
- en: '![](img/ea3ad8fe-a991-4a87-9cbb-260498a3ba85.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea3ad8fe-a991-4a87-9cbb-260498a3ba85.png)'
- en: 'Create a new item job with the Maven project option:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Maven 项目选项创建一个新的项目任务：
- en: '![](img/5ae301e5-cd1c-43b1-9aa3-399c3a6c5b5c.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ae301e5-cd1c-43b1-9aa3-399c3a6c5b5c.png)'
- en: 'The Maven option in build environment is as follows:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建环境中的 Maven 选项如下所示：
- en: '![](img/fc85d052-6df1-43e1-b221-2567465227d0.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc85d052-6df1-43e1-b221-2567465227d0.png)'
- en: 'The project is created as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目创建如下：
- en: '![](img/235c694f-5ac6-4059-a35f-da0c6d70d737.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/235c694f-5ac6-4059-a35f-da0c6d70d737.png)'
- en: Building jobs with Jenkins
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 构建任务
- en: 'A simple application builds and runs the program:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个简单的应用程序构建并运行该程序：
- en: '![](img/80509ac9-7d5a-408d-b263-5733ed067502.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80509ac9-7d5a-408d-b263-5733ed067502.png)'
- en: 'The source code repository options as listed as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下列出了源代码仓库的选项：
- en: '![](img/05120459-f354-4054-a3fe-b5e1e07aeda6.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05120459-f354-4054-a3fe-b5e1e07aeda6.png)'
- en: 'We can specify the location of files which need to be built either from a source
    Git code repository or the URL from GitHub:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以指定需要构建的文件位置，这些文件可以来自源Git代码仓库，也可以来自GitHub上的URL：
- en: '![](img/21e0eaa3-d8ce-47a1-8b10-d8b676b9d977.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21e0eaa3-d8ce-47a1-8b10-d8b676b9d977.png)'
- en: 'Builds can be executed with multiple options, command modes, and Maven and
    so on:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用多种选项、命令模式和Maven等执行构建：
- en: '![](img/2dade0e8-ad21-4e5b-b099-5f8e7f5c9a23.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2dade0e8-ad21-4e5b-b099-5f8e7f5c9a23.png)'
- en: 'Command-line programs can be executed as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令行程序可以按如下方式执行：
- en: '![](img/5ce358d3-530f-40e0-a436-9a91d276f007.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ce358d3-530f-40e0-a436-9a91d276f007.png)'
- en: 'After saving, the build option is visible, and history is also available:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存后，可以看到构建选项，历史记录也可用：
- en: '![](img/28ccb656-2b6d-437e-a016-6e7d2595901a.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28ccb656-2b6d-437e-a016-6e7d2595901a.png)'
- en: 'Build progress can be seen and repository available as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以看到构建进度，并且可以访问仓库，如下所示：
- en: '![](img/64b1ba58-560a-40c5-bdb6-ec5bce00f079.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64b1ba58-560a-40c5-bdb6-ec5bce00f079.png)'
- en: Source code review - Gerrit
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码审查 - Gerrit
- en: Code review is an important function in the software development framework.
    Having a good collaborative tool like Gerrit for a code review process is very
    appropriate and needed. Gerrit initiates a pull-based workflow to initiate change
    requests, wherein comments are included even for source code to allow the change
    to be merged into the code repository through the workflow process. Gerrit maintains
    a local repository of the mirrored Git project repositories with reference repositories.
    Gerrit creates another maintenance branch from master branch to track reviews
    to the code; it creates a change-id identifier for the commit message to keep
    track of each change in a code review.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是软件开发框架中的一个重要功能。像Gerrit这样好的协作工具，非常适合且需要在代码审查过程中使用。Gerrit启动基于拉取的工作流来发起变更请求，其中即使是源代码的评论也会被包括在内，以便通过工作流过程将变更合并到代码仓库中。Gerrit维护着一个本地仓库，包含镜像的Git项目仓库和参考仓库。Gerrit从主分支创建另一个维护分支，以跟踪对代码的审查；它为提交消息创建一个变更ID标识符，用于跟踪代码审查中的每一个变更。
- en: 'Gerrit allows for code change comparisons and a reviewer can give one of five
    ratings:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Gerrit允许进行代码变更比较，审阅者可以给出五个评分中的一个：
- en: '**+2**: Looks good, approved'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**+2**: 看起来不错，已批准'
- en: '**+1**: Looks good, but needs additional approval'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**+1**: 看起来不错，但需要额外批准'
- en: '**0**: No comments'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0**: 无评论'
- en: '**-1**: Suggest not submit this'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-1**: 建议不提交'
- en: '**-2**: Block the submit'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-2**: 阻止提交'
- en: '![](img/584cf9b4-4c19-470b-8255-d6cb9118218f.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/584cf9b4-4c19-470b-8255-d6cb9118218f.png)'
- en: Installation of Gerrit
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gerrit安装
- en: Download Gerrit from[ https://www.gerritcodereview.com/](https://www.gerritcodereview.com/).
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://www.gerritcodereview.com/](https://www.gerritcodereview.com/)下载Gerrit。
- en: 'Follow the installation instructions as per the platform option and access
    Gerrit on port `8080` as follows to create users and projects:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据平台选项按照安装说明操作，并通过以下方式访问Gerrit，在`8080`端口上创建用户和项目：
- en: '![](img/3a7694fe-e9f4-4c4d-b5f2-b0c04cf5c753.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a7694fe-e9f4-4c4d-b5f2-b0c04cf5c753.png)'
- en: 'Configure in Jenkins under Manage Plugins for Gerrit:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中通过“管理插件”配置Gerrit：
- en: '![](img/85ba7ddf-ae1a-43fb-89b0-d6ef0dbcdd55.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85ba7ddf-ae1a-43fb-89b0-d6ef0dbcdd55.png)'
- en: Version control tools listed in the [Chapter 3](e29b859b-9aca-4186-982c-5cd4204f9c63.xhtml), 
    *DevOps Framework*, for example Gerrit the web-based code review interface, allow
    reviewing changes online to push changes from any git client and then auto-merging
    them with the master; it can also be configured as a remote git repository.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](e29b859b-9aca-4186-982c-5cd4204f9c63.xhtml)中列出的版本控制工具，*DevOps框架*，例如基于Web的代码审查界面Gerrit，允许在线审查变更，从任何git客户端推送变更，然后将其自动合并到主分支；它也可以配置为远程git仓库。
- en: Gerrit configuration includes user creation, **Secure Shell** (**SSH**) set
    up to exchange data with a Gerrit server. The configuration file `/etc/gerrit.config`
    has extensive parameters you need to set as per configuration requirements.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Gerrit的配置包括用户创建，**安全外壳**（**SSH**）设置，用于与Gerrit服务器交换数据。配置文件`/etc/gerrit.config`有许多参数，需要根据配置要求进行设置。
- en: Repository management
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓库管理
- en: Maintaining multiple build version artifacts is the key feature of repository
    management and Nexus is a popular repository manager. It can be downloaded from
    [http://www.sonatype.org/nexus/downloads/](http://www.sonatype.org/nexus/downloads/).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 维护多个构建版本工件是仓库管理的关键特性，而 Nexus 是一个流行的仓库管理器。它可以从[http://www.sonatype.org/nexus/downloads/](http://www.sonatype.org/nexus/downloads/)下载。
- en: 'After installation, it can be accessed from `http://<nexus host>:8081/nexus`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，可以通过`http://<nexus host>:8081/nexus`访问：
- en: '![](img/f3f289e7-68d9-4f01-b94b-20afce5bc704.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3f289e7-68d9-4f01-b94b-20afce5bc704.png)'
- en: 'Nexus can be configured with plugins for Jenkins integration:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Nexus 可以通过插件进行 Jenkins 集成配置：
- en: '![](img/5335b425-58bd-4966-a561-80c6fbd59ea4.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5335b425-58bd-4966-a561-80c6fbd59ea4.png)'
- en: Testing with Jenkins
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 进行测试
- en: 'Jenkins provides many out-of-the-box functionalities and plugins for testing.
    The site [https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin](https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin)
    provides the plugins:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 提供了许多开箱即用的功能和插件来进行测试。网站[https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin](https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin)提供了这些插件：
- en: '![](img/d9486e0e-48b4-41ee-a09f-6222e60017bd.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9486e0e-48b4-41ee-a09f-6222e60017bd.png)'
- en: 'A list of available testing plugins is shown as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的测试插件列表如下所示：
- en: JUnit itself
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit 本身
- en: AUnit
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AUnit
- en: MSTest (imported from MSTest Plugin)
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSTest（从 MSTest 插件导入）
- en: NUnit (imported from NUnit Plugin)
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NUnit（从 NUnit 插件导入）
- en: UnitTest++
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UnitTest++
- en: Boost Test Library
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Boost 测试库
- en: PHPUnit
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHPUnit
- en: Free Pascal Unit
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Free Pascal 单元
- en: CppUnit
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CppUnit
- en: MbUnit
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MbUnit
- en: Google test
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 测试
- en: EmbUnit
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EmbUnit
- en: gtester/glib
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gtester/glib
- en: QTestLib
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QTestLib
- en: Setting up unit testing
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置单元测试
- en: 'Pick up the project we have set up:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们已经设置好的项目：
- en: '![](img/32081772-acfc-4503-abe9-2d6cd835d615.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32081772-acfc-4503-abe9-2d6cd835d615.png)'
- en: 'Choose build option:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择构建选项：
- en: '![](img/51736d0d-bcc8-4f3f-9f00-a96132764fcf.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51736d0d-bcc8-4f3f-9f00-a96132764fcf.png)'
- en: 'Choose an Advanced option:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个高级选项：
- en: '![](img/2c772bb4-44a0-40cb-aef3-4a17384e348f.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c772bb4-44a0-40cb-aef3-4a17384e348f.png)'
- en: 'Enter the location of `build.xml`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`build.xml`的位置：
- en: '![](img/26eb3a28-dfc9-4755-b5c4-b814cfbfc05e.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26eb3a28-dfc9-4755-b5c4-b814cfbfc05e.png)'
- en: 'Select the option of post-build option and choose - `Publish JUnit test result
    report`:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择后构建选项，并选择 - `发布 JUnit 测试结果报告`：
- en: '![](img/92870671-e152-4e9e-acf8-249e1fee02d3.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92870671-e152-4e9e-acf8-249e1fee02d3.png)'
- en: 'In the test `reports.xml`, enter the reports created a folder in our project
    so that Jenkins picks the resulting XML files produced by running of the JUnit
    test cases:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试`reports.xml`中，输入我们项目中创建报告的文件夹，以便 Jenkins 自动识别运行 JUnit 测试用例后生成的 XML 文件：
- en: '![](img/cd6a6315-214f-4dc2-967e-dc7c39600e50.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd6a6315-214f-4dc2-967e-dc7c39600e50.png)'
- en: We can select the build and drill-down to the test results.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择构建并深入查看测试结果。
- en: Automated test suite
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试套件
- en: Continuous integration is the process of verifying a build to objectively access
    its readiness for the next level; this is accomplished with automated testing.
    So, the build artifacts are set to be tested automatically; Selenium is the most
    popular framework for this.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是验证构建的过程，用于客观评估其准备好进入下一个阶段的程度；这通过自动化测试实现。因此，构建工件设置为自动测试；Selenium 是最流行的框架。
- en: 'It can be downloaded from the following site:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从以下网站下载：
- en: '![](img/2d44a5fc-36f7-425c-be2e-077d59ac5a47.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d44a5fc-36f7-425c-be2e-077d59ac5a47.png)'
- en: 'Under Jenkins, Plugin Manager, select the Selenium plugin and install, restart
    to initiate:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 下，选择插件管理器中的 Selenium 插件并安装，安装后重启以启动：
- en: '![](img/e378bbe5-e17d-4826-8655-7a89187b5457.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e378bbe5-e17d-4826-8655-7a89187b5457.png)'
- en: 'Configure the selenium server JAR file:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 selenium 服务器 JAR 文件：
- en: '![](img/e4e3fb47-5017-4be1-ae3f-fbc4a00f36eb.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4e3fb47-5017-4be1-ae3f-fbc4a00f36eb.png)'
- en: 'Configure the project we created to be set for this automated framework:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置我们创建的项目，使其适用于此自动化框架：
- en: '![](img/bcdf0c28-d269-4144-b5e0-a7ba71adbb28.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcdf0c28-d269-4144-b5e0-a7ba71adbb28.png)'
- en: 'In the build process, add the option, `SeleniumHQhtmlSuite Run`:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建过程中，添加选项`SeleniumHQhtmlSuite Run`：
- en: '![](img/085a6757-f34b-4f22-92a7-6b06e72be9b6.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/085a6757-f34b-4f22-92a7-6b06e72be9b6.png)'
- en: 'Selenium IDE will generate TestSuite, the Selenium test is enabled with SuiteFile
    by launching the selenium driver:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium IDE 将生成 TestSuite，启用 Selenium 测试时，通过启动 selenium 驱动程序并使用 SuiteFile：
- en: '![](img/15b60dc9-3739-4bab-bfd7-c1bd4ae7d3c1.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15b60dc9-3739-4bab-bfd7-c1bd4ae7d3c1.png)'
- en: Continuous delivery- Build Pipeline
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付 - 构建流水线
- en: Continuous delivery is the process of building a robust pipeline from software
    development to deployment.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是从软件开发到部署构建一个健壮流水线的过程。
- en: '![](img/97dd4574-06df-4199-aeda-d227f0f3f142.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97dd4574-06df-4199-aeda-d227f0f3f142.png)'
- en: 'Install the Build Pipeline plugin from Manage Plugins as follows:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤从“管理插件”安装构建管道插件：
- en: '![](img/73c2a410-1e4d-44cf-ae62-3af1a30fdf68.png)![](img/f4434cc2-3803-4c68-ba5f-a5ebad45126f.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73c2a410-1e4d-44cf-ae62-3af1a30fdf68.png)![](img/f4434cc2-3803-4c68-ba5f-a5ebad45126f.png)'
- en: 'To set up the Build Pipeline, Click on the + symbol, next to the All tab on
    the dashboard:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置构建管道，点击仪表盘中“All”标签旁边的“+”符号：
- en: '![](img/e6565349-59ed-4cd4-aac6-2ef7949c238b.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6565349-59ed-4cd4-aac6-2ef7949c238b.png)'
- en: 'Select Build Pipeline View and choose a name for the pipeline:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择构建管道视图并为管道选择一个名称：
- en: '![](img/6847d750-fc90-4c33-9025-7a2265128329.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6847d750-fc90-4c33-9025-7a2265128329.png)'
- en: 'Select the Options and the project created:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择选项和创建的项目：
- en: '![](img/fa999a44-e60b-43d4-b9fd-3ba48db17933.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa999a44-e60b-43d4-b9fd-3ba48db17933.png)'
- en: The delivery pipeline view is created with the status of each stage of the project.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交付管道视图根据项目每个阶段的状态创建。
- en: Jenkins features
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 特性
- en: Client-server
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端-服务器
- en: Security
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: Reporting
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告
- en: Larger projects need multiple machines to be configured instead of centralized
    builds on one machine. Also, there are requirements for several different environments
    for test builds. Slave machines are effective to offload these loads from a master
    server.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 较大的项目需要配置多个机器，而不是在一台机器上进行集中构建。此外，还有对多个不同环境的测试构建要求。使用从属机器可以有效地将负载从主服务器转移。
- en: They need a bi-directional communication link from the master through a TCP/IP
    socket, with only a slave agent instead of the full Jenkins package or compiled
    binaries.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 它们需要通过 TCP/IP 套接字从主机到从属的双向通信链接，只需要从属代理而不是完整的 Jenkins 包或已编译的二进制文件。
- en: 'To set up slave/nodes under Jenkins, configure and select the manage nodes
    option and create a new node:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Jenkins 中设置从属节点/节点，配置并选择“管理节点”选项，创建一个新节点：
- en: '![](img/ccf96fd5-bedf-4430-944c-d9b4b9815816.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccf96fd5-bedf-4430-944c-d9b4b9815816.png)'
- en: Select name and Dumb Slave option.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择名称和“傻瓜从属”选项。
- en: '![](img/8cbb123d-4f59-46d0-8361-a5123cea4a44.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cbb123d-4f59-46d0-8361-a5123cea4a44.png)'
- en: The slave node details are to be given, then choose to let Jenkins consider
    the Windows slave as a Windows service. Details such as name node and login credentials
    of the machine are required.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从属节点的详细信息需要提供，然后选择让 Jenkins 将 Windows 从属视为 Windows 服务。需要提供机器的名称节点和登录凭据等详细信息。
- en: '![](img/072c2f4b-1664-44eb-9f39-685ce6278966.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/072c2f4b-1664-44eb-9f39-685ce6278966.png)'
- en: The slave machine will be available as follows; new jobs can be configured to
    run on this slave machine.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从属机器将如以下方式可用；可以配置新作业在此从属机器上运行。
- en: '![](img/31086168-3b10-45b6-8965-149128040f97.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31086168-3b10-45b6-8965-149128040f97.png)'
- en: Security in Jenkins
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins中的安全性
- en: 'Users with relevant permissions can be set up with security configuration:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 具有相关权限的用户可以通过安全配置进行设置：
- en: 'Under Manage Jenkins, select Configure Global Security, and choose to Enable
    security option:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“管理 Jenkins”下，选择“配置全局安全性”，并选择启用安全选项：
- en: '![](img/4444e6da-25e0-41ec-9b1d-7cf37e59dcdf.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4444e6da-25e0-41ec-9b1d-7cf37e59dcdf.png)'
- en: Once you save the options, you will be prompted for an admin user.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦保存选项，将提示您输入管理员用户。
- en: '![](img/ee39b2a6-2e78-467a-aa04-039a518de7c0.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee39b2a6-2e78-467a-aa04-039a518de7c0.png)'
- en: 'Under Jenkins Manage setup, choose Manage Users Options to create users and
    then set up authorizations required to execute jobs with matrix based security:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 管理设置下，选择“管理用户选项”以创建用户，并设置执行作业所需的基于矩阵的安全性授权：
- en: The Reporting Options, Metrics Options, and Reporting Plugins can be installed.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以安装报告选项、度量选项和报告插件。
- en: '![](img/4c457380-9d48-41e5-bdd3-492d452c49be.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c457380-9d48-41e5-bdd3-492d452c49be.png)'
- en: 'Many Metrics are available such as the Build History Metrics Plugin:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有许多可用的度量指标，如构建历史度量插件：
- en: '**Mean Time To Failure** (**MTTF**)'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均故障时间** (**MTTF**)'
- en: '**Mean Time To Recovery** (**MTTR**)'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均恢复时间** (**MTTR**)'
- en: Standard deviation of build times
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建时间的标准差
- en: '![](img/550ddbf1-dba1-4a88-81cd-12a54a32d649.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/550ddbf1-dba1-4a88-81cd-12a54a32d649.png)'
- en: It can be installed under Manage Plugins choosing the Build History Metrics
    Plugin, the above metrics will be reflected on the job page.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以在“管理插件”中安装，通过选择“构建历史度量插件”，上述度量指标将在作业页面上显示。
- en: To see a graphical representation, use Hudson global-build-stats and Global
    Build Stats plugins under Manage Plugins. Setting the options, initialize stats,
    create new chart options, and all the existing builds records will be displayed.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看图形化表示，请在“管理插件”下使用Hudson global-build-stats和Global Build Stats插件。设置选项、初始化统计信息、创建新图表选项，所有现有的构建记录将显示出来。
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learnt about processes and tools for implementing continuous
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了实现持续集成和持续部署的流程和工具。
- en: development, continuous integration, and continuous deployment with the use
    of repository management, code reviews, and test automation.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 使用仓库管理、代码审查和测试自动化来实现开发、持续集成和持续部署。
- en: In the next chapter, we will cover the topics of infrastructure configuration
    management as code for continuous deployment with tools such as Chef, Puppet,
    and Ansible. We will discuss on continuous monitoring process with tools Splunk
    and Nagios.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论将基础设施配置管理作为代码来进行持续部署的话题，使用的工具包括Chef、Puppet和Ansible。同时，我们将讨论使用工具Splunk和Nagios进行持续监控的过程。
